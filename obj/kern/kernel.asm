
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 18 00 	lgdtl  0x18c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 18 f0       	mov    $0xf018bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 f8 be 2b f0 01 	movl   $0x1,0xf02bbef8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 cc be 2b f0 01 	movl   $0x1,0xf02bbecc
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 5c e6 2d f0       	mov    $0xf02de65c,%edx
f010006a:	b8 f2 2f 25 f0       	mov    $0xf0252ff2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 f2 2f 25 f0       	push   $0xf0252ff2
f010007e:	e8 5b ef 02 00       	call   f012efde <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 f4 be 2b f0 ff 	movl   $0xffffffff,0xf02bbef4
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 b8 6a 00 00       	call   f0106b57 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 91 66 00 00       	call   f0106735 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 0c 6e 00 00       	call   f0106eb5 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 f9 99 00 00       	call   f0109aa7 <env_init>
	idt_init();
f01000ae:	e8 32 af 00 00       	call   f010afe5 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 32 d6 00 00       	call   f010d6ea <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 bb 79 00 00       	call   f0107a87 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 fb d7 00 00       	call   f010d8d4 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 01 d7 00 00       	call   f010d7e7 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 dc d6 00 00       	call   f010d7cf <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 fc d6 00 00       	call   f010d7ff <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 a4 64 00 00       	call   f01065af <pic_init>
	sched_init() ;
f010010b:	e8 a1 60 00 00       	call   f01061b1 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 e0 fd 12 f0       	push   $0xf012fde0
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 0c fe 12 f0       	push   $0xf012fe0c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 31 fe 12 f0       	push   $0xf012fe31
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 38 fe 12 f0       	push   $0xf012fe38
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 80 fe 12 f0       	push   $0xf012fe80
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 c8 fe 12 f0       	push   $0xf012fec8
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 80 fe 12 f0       	push   $0xf012fe80
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 38 fe 12 f0       	push   $0xf012fe38
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 0d ff 12 f0       	push   $0xf012ff0d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 00 30 25 f0       	mov    %eax,0xf0253000

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 12 ff 12 f0       	push   $0xf012ff12
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 2b ff 12 f0       	push   $0xf012ff2b
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 77 97 00 00       	call   f0109991 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 2d ff 12 f0       	push   $0xf012ff2d
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 bc 5f 00 00       	call   f01061fb <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 00 30 25 f0       	mov    %eax,0xf0253000

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 12 ff 12 f0       	push   $0xf012ff12
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 2b ff 12 f0       	push   $0xf012ff2b
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 ae 5c 00 00       	call   f0105f72 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 d5 50 00 00       	call   f01053b3 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 15 5f 00 00       	call   f01061fb <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 00 30 25 f0       	mov    %eax,0xf0253000

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 12 ff 12 f0       	push   $0xf012ff12
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 2b ff 12 f0       	push   $0xf012ff2b
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 ad 4e 00 00       	call   f010522d <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 42 ff 12 f0       	push   $0xf012ff42
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 2b ff 12 f0       	push   $0xf012ff2b
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 24 30 25 f0       	mov    0xf0253024,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 24 30 25 f0       	mov    %eax,0xf0253024
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 28 30 25 f0 b4 	movl   $0x3b4,0xf0253028
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 28 30 25 f0 d4 	movl   $0x3d4,0xf0253028
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 2c 30 25 f0       	mov    %eax,0xf025302c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 2c 30 25 f0    	mov    0xf025302c,%edx
f0100732:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
		text_length = 0;
f010075e:	c7 05 20 30 25 f0 00 	movl   $0x0,0xf0253020
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 30 30 25 f0 	mov    0xf0253030,%cx
f010076f:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 2c 30 25 f0    	mov    0xf025302c,%ecx
f010082a:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 30 30 25 f0 	mov    %dx,0xf0253030
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 20 30 25 f0    	mov    0xf0253020,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 20 30 25 f0       	mov    %eax,0xf0253020
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 2c 30 25 f0       	mov    0xf025302c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 2c 30 25 f0       	mov    0xf025302c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 6b e7 02 00       	call   f012f00e <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 2c 30 25 f0    	mov    0xf025302c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 28 30 25 f0    	mov    0xf0253028,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 28 30 25 f0    	mov    0xf0253028,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 48 32 25 f0       	mov    %eax,0xf0253248
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 48 32 25 f0       	mov    %eax,0xf0253248
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 48 32 25 f0       	mov    %eax,0xf0253248
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 48 32 25 f0       	mov    %eax,0xf0253248
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 c1 18 f0    	mov    -0xfe73ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 48 32 25 f0       	mov    %eax,0xf0253248

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 c5 18 f0 	mov    -0xfe73ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 20 30 25 f0    	mov    0xf0253020,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 20 30 25 f0       	mov    %eax,0xf0253020
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 2c 30 25 f0    	mov    0xf025302c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 2c 30 25 f0       	mov    0xf025302c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 5d ff 12 f0       	push   $0xf012ff5d
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 44 32 25 f0    	mov    %edx,0xf0253244
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 40 30 25 f0    	mov    %dl,-0xfdacfc0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 44 32 25 f0 00 	movl   $0x0,0xf0253244
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 40 32 25 f0    	mov    0xf0253240,%edx
f0100c22:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 40 32 25 f0    	mov    %edx,0xf0253240
f0100c39:	8a 80 40 30 25 f0    	mov    -0xfdacfc0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 40 32 25 f0 00 	movl   $0x0,0xf0253240
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 24 30 25 f0       	mov    0xf0253024,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 44 32 25 f0    	mov    %edx,0xf0253244
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 40 30 25 f0    	mov    %dl,-0xfdacfc0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 44 32 25 f0 00 	movl   $0x0,0xf0253244
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 44 32 25 f0    	mov    %edx,0xf0253244
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 40 30 25 f0    	mov    %dl,-0xfdacfc0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 44 32 25 f0 00 	movl   $0x0,0xf0253244
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 40 32 25 f0    	mov    0xf0253240,%edx
f0100d12:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 40 32 25 f0    	mov    %edx,0xf0253240
f0100d29:	8a 80 40 30 25 f0    	mov    -0xfdacfc0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 40 32 25 f0 00 	movl   $0x0,0xf0253240
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 24 30 25 f0       	mov    0xf0253024,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 69 ff 12 f0       	push   $0xf012ff69
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 19 d9 02 00       	call   f012e742 <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 5c df 02 00       	call   f012edf0 <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 60 9f 2d f0       	push   $0xf02d9f60
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 5f e1 02 00       	call   f012f00e <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 9a de 02 00       	call   f012edf0 <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 60 9f 2d f0       	push   $0xf02d9f60
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 9d e0 02 00       	call   f012f00e <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 da df 02 00       	call   f012efde <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 88 ff 12 f0       	push   $0xf012ff88
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 8b ff 12 f0       	push   $0xf012ff8b
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 60 bf 2b f0       	push   $0xf02bbf60
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 7f dc 02 00       	call   f012edf0 <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 94 dc 02 00       	call   f012ee3f <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 37 dc 02 00       	call   f012edf0 <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 9b ff 12 f0       	push   $0xf012ff9b
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 31 e2 02 00       	call   f012f424 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 a0 ff 12 f0       	push   $0xf012ffa0
f010121a:	50                   	push   %eax
f010121b:	e8 dc dc 02 00       	call   f012eefc <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 a4 ff 12 f0       	push   $0xf012ffa4
f0101235:	50                   	push   %eax
f0101236:	e8 c1 dc 02 00       	call   f012eefc <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 a9 ff 12 f0       	push   $0xf012ffa9
f0101250:	50                   	push   %eax
f0101251:	e8 a6 dc 02 00       	call   f012eefc <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 a9 ff 12 f0       	push   $0xf012ffa9
f0101271:	50                   	push   %eax
f0101272:	e8 85 dc 02 00       	call   f012eefc <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 2d db 02 00       	call   f012edf0 <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 2f db 02 00       	call   f012ee3f <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 0e db 02 00       	call   f012ee3f <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 8b da 02 00       	call   f012edf0 <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 a6 db 02 00       	call   f012ef34 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 db d9 02 00       	call   f012edf0 <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 a6 db 02 00       	call   f012efde <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 60 bf 2b f0    	add    $0xf02bbf60,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 11 da 02 00       	call   f012ee6d <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 60 c9 18 f0       	mov    0xf018c960,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 51 d9 02 00       	call   f012edf0 <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 68 ca 18 f0    	mov    0xf018ca68,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 69 da 02 00       	call   f012ef34 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 b4 d8 02 00       	call   f012edf0 <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 68 ca 18 f0    	mov    0xf018ca68,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 68 ca 18 f0    	mov    0xf018ca68,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 54 d8 02 00       	call   f012edf0 <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 1f da 02 00       	call   f012efde <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 60 bf 2b f0    	add    $0xf02bbf60,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 8a d8 02 00       	call   f012ee6d <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 cc d7 02 00       	call   f012edf0 <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 e7 d8 02 00       	call   f012ef34 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 32 d7 02 00       	call   f012edf0 <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 d8 d6 02 00       	call   f012edf0 <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 a3 d8 02 00       	call   f012efde <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 60 bf 2b f0    	add    $0xf02bbf60,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 0e d7 02 00       	call   f012ee6d <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 1c cb 18 f0       	mov    0xf018cb1c,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 60 bf 2b f0       	push   $0xf02bbf60
f01017c5:	e8 26 d6 02 00       	call   f012edf0 <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 cd d5 02 00       	call   f012edf0 <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 ba d5 02 00       	call   f012edf0 <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 60 bf 2b f0    	lea    -0xfd440a0(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 5f d5 02 00       	call   f012edf0 <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 60 4f 2d f0    	lea    -0xfd2b0a0(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 54 d5 02 00       	call   f012f00e <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 60 9b 2d f0       	push   $0xf02d9b60
f0101ad6:	e8 33 d5 02 00       	call   f012f00e <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 03 d4 02 00       	call   f012eefc <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 c5 18 f0       	mov    %eax,0xf018c530
f0101b0b:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 e5 d4 02 00       	call   f012f00e <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 20 bf 2b f0 00 	movl   $0x0,0xf02bbf20
f0101b60:	00 00 00 
f0101b63:	c7 05 24 bf 2b f0 00 	movl   $0x0,0xf02bbf24
f0101b6a:	00 00 00 
f0101b6d:	c7 05 2c bf 2b f0 00 	movl   $0x0,0xf02bbf2c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 51 d4 02 00       	call   f012efde <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 ad ff 12 f0       	push   $0xf012ffad
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 9b ff 12 f0       	push   $0xf012ff9b
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 46 d8 02 00       	call   f012f424 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 b3 ff 12 f0       	push   $0xf012ffb3
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 cc ff 12 f0       	push   $0xf012ffcc
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 1d 00 13 f0       	push   $0xf013001d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 38 00 13 f0       	push   $0xf0130038
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 68 00 13 f0       	push   $0xf0130068
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 1d 00 13 f0       	push   $0xf013001d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 92 00 13 f0       	push   $0xf0130092
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 28 bf 2b f0       	mov    %eax,0xf02bbf28
f0101d03:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 9c 00 13 f0       	push   $0xf013009c
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 ff 00 13 f0       	push   $0xf01300ff
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 08 01 13 f0       	push   $0xf0130108
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 28 bf 2b f0       	mov    %eax,0xf02bbf28
f0101e53:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 c5 18 f0       	add    $0xf018c548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 40 cf 02 00       	call   f012edf0 <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 2f cf 02 00       	call   f012edf0 <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 10 01 13 f0       	push   $0xf0130110
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 1d 00 13 f0       	push   $0xf013001d
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 2c bf 2b f0       	mov    %eax,0xf02bbf2c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 28 bf 2b f0       	mov    %eax,0xf02bbf28
f0101fcc:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 fb 01 00 00       	jmp    f01021ff <process_command+0x219>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 d0 cd 02 00       	call   f012edf0 <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 e8 ce 02 00       	call   f012ef34 <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 d7 00 00 00    	jne    f010212e <process_command+0x148>
			{
				if((number_of_arguments-1)==commands[i].num_of_args){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c c5 18 f0       	add    $0xf018c54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	75 0f                	jne    f0102083 <process_command+0x9d>
					command_found=1;
f0102074:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f010207b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010207e:	e9 9e 01 00 00       	jmp    f0102221 <process_command+0x23b>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102083:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f0102089:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010208c:	89 c8                	mov    %ecx,%eax
f010208e:	01 c0                	add    %eax,%eax
f0102090:	01 c8                	add    %ecx,%eax
f0102092:	c1 e0 03             	shl    $0x3,%eax
f0102095:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f010209a:	89 10                	mov    %edx,(%eax)
f010209c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010209f:	89 d0                	mov    %edx,%eax
f01020a1:	01 c0                	add    %eax,%eax
f01020a3:	01 d0                	add    %edx,%eax
f01020a5:	c1 e0 03             	shl    $0x3,%eax
f01020a8:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f01020ad:	8b 00                	mov    (%eax),%eax
f01020af:	85 c0                	test   %eax,%eax
f01020b1:	74 1c                	je     f01020cf <process_command+0xe9>
f01020b3:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f01020b9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020bc:	89 c8                	mov    %ecx,%eax
f01020be:	01 c0                	add    %eax,%eax
f01020c0:	01 c8                	add    %ecx,%eax
f01020c2:	c1 e0 03             	shl    $0x3,%eax
f01020c5:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020ca:	89 42 10             	mov    %eax,0x10(%edx)
f01020cd:	eb 16                	jmp    f01020e5 <process_command+0xff>
f01020cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020d2:	89 d0                	mov    %edx,%eax
f01020d4:	01 c0                	add    %eax,%eax
f01020d6:	01 d0                	add    %edx,%eax
f01020d8:	c1 e0 03             	shl    $0x3,%eax
f01020db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020e0:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
f01020e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020e8:	89 d0                	mov    %edx,%eax
f01020ea:	01 c0                	add    %eax,%eax
f01020ec:	01 d0                	add    %edx,%eax
f01020ee:	c1 e0 03             	shl    $0x3,%eax
f01020f1:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020f6:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f01020fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020fe:	89 d0                	mov    %edx,%eax
f0102100:	01 c0                	add    %eax,%eax
f0102102:	01 d0                	add    %edx,%eax
f0102104:	c1 e0 03             	shl    $0x3,%eax
f0102107:	05 50 c5 18 f0       	add    $0xf018c550,%eax
f010210c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102112:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0102117:	40                   	inc    %eax
f0102118:	a3 2c bf 2b f0       	mov    %eax,0xf02bbf2c
					command_found=1;
f010211d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102124:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102129:	e9 f3 00 00 00       	jmp    f0102221 <process_command+0x23b>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010212e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102131:	8b 10                	mov    (%eax),%edx
f0102133:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102136:	89 c8                	mov    %ecx,%eax
f0102138:	01 c0                	add    %eax,%eax
f010213a:	01 c8                	add    %ecx,%eax
f010213c:	c1 e0 03             	shl    $0x3,%eax
f010213f:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102144:	8b 00                	mov    (%eax),%eax
f0102146:	83 ec 08             	sub    $0x8,%esp
f0102149:	52                   	push   %edx
f010214a:	50                   	push   %eax
f010214b:	e8 48 fd ff ff       	call   f0101e98 <subSequence>
f0102150:	83 c4 10             	add    $0x10,%esp
f0102153:	85 c0                	test   %eax,%eax
f0102155:	0f 84 a1 00 00 00    	je     f01021fc <process_command+0x216>
				command_found=1;
f010215b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102162:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f0102168:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010216b:	89 c8                	mov    %ecx,%eax
f010216d:	01 c0                	add    %eax,%eax
f010216f:	01 c8                	add    %ecx,%eax
f0102171:	c1 e0 03             	shl    $0x3,%eax
f0102174:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f0102179:	89 10                	mov    %edx,(%eax)
f010217b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010217e:	89 d0                	mov    %edx,%eax
f0102180:	01 c0                	add    %eax,%eax
f0102182:	01 d0                	add    %edx,%eax
f0102184:	c1 e0 03             	shl    $0x3,%eax
f0102187:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f010218c:	8b 00                	mov    (%eax),%eax
f010218e:	85 c0                	test   %eax,%eax
f0102190:	74 1c                	je     f01021ae <process_command+0x1c8>
f0102192:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f0102198:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010219b:	89 c8                	mov    %ecx,%eax
f010219d:	01 c0                	add    %eax,%eax
f010219f:	01 c8                	add    %ecx,%eax
f01021a1:	c1 e0 03             	shl    $0x3,%eax
f01021a4:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021a9:	89 42 10             	mov    %eax,0x10(%edx)
f01021ac:	eb 16                	jmp    f01021c4 <process_command+0x1de>
f01021ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021b1:	89 d0                	mov    %edx,%eax
f01021b3:	01 c0                	add    %eax,%eax
f01021b5:	01 d0                	add    %edx,%eax
f01021b7:	c1 e0 03             	shl    $0x3,%eax
f01021ba:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021bf:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
f01021c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021c7:	89 d0                	mov    %edx,%eax
f01021c9:	01 c0                	add    %eax,%eax
f01021cb:	01 d0                	add    %edx,%eax
f01021cd:	c1 e0 03             	shl    $0x3,%eax
f01021d0:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021d5:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f01021da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021dd:	89 d0                	mov    %edx,%eax
f01021df:	01 c0                	add    %eax,%eax
f01021e1:	01 d0                	add    %edx,%eax
f01021e3:	c1 e0 03             	shl    $0x3,%eax
f01021e6:	05 50 c5 18 f0       	add    $0xf018c550,%eax
f01021eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01021f1:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f01021f6:	40                   	inc    %eax
f01021f7:	a3 2c bf 2b f0       	mov    %eax,0xf02bbf2c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f01021fc:	ff 45 f0             	incl   -0x10(%ebp)
f01021ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102202:	a1 60 c9 18 f0       	mov    0xf018c960,%eax
f0102207:	39 c2                	cmp    %eax,%edx
f0102209:	0f 82 f5 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010220f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102213:	75 07                	jne    f010221c <process_command+0x236>
		return CMD_INVALID;
f0102215:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010221a:	eb 05                	jmp    f0102221 <process_command+0x23b>
	}
	return CMD_MATCHED;
f010221c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0102221:	c9                   	leave  
f0102222:	c3                   	ret    

f0102223 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102223:	55                   	push   %ebp
f0102224:	89 e5                	mov    %esp,%ebp
f0102226:	c7 05 f8 be 2b f0 00 	movl   $0x0,0xf02bbef8
f010222d:	00 00 00 
f0102230:	90                   	nop
f0102231:	5d                   	pop    %ebp
f0102232:	c3                   	ret    

f0102233 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102233:	55                   	push   %ebp
f0102234:	89 e5                	mov    %esp,%ebp
f0102236:	c7 05 f8 be 2b f0 01 	movl   $0x1,0xf02bbef8
f010223d:	00 00 00 
f0102240:	90                   	nop
f0102241:	5d                   	pop    %ebp
f0102242:	c3                   	ret    

f0102243 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102243:	55                   	push   %ebp
f0102244:	89 e5                	mov    %esp,%ebp
f0102246:	c7 05 f8 be 2b f0 02 	movl   $0x2,0xf02bbef8
f010224d:	00 00 00 
f0102250:	90                   	nop
f0102251:	5d                   	pop    %ebp
f0102252:	c3                   	ret    

f0102253 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102253:	55                   	push   %ebp
f0102254:	89 e5                	mov    %esp,%ebp
f0102256:	c7 05 f8 be 2b f0 03 	movl   $0x3,0xf02bbef8
f010225d:	00 00 00 
f0102260:	90                   	nop
f0102261:	5d                   	pop    %ebp
f0102262:	c3                   	ret    

f0102263 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102263:	55                   	push   %ebp
f0102264:	89 e5                	mov    %esp,%ebp
f0102266:	c7 05 f8 be 2b f0 04 	movl   $0x4,0xf02bbef8
f010226d:	00 00 00 
f0102270:	90                   	nop
f0102271:	5d                   	pop    %ebp
f0102272:	c3                   	ret    

f0102273 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102273:	55                   	push   %ebp
f0102274:	89 e5                	mov    %esp,%ebp
f0102276:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010227b:	85 c0                	test   %eax,%eax
f010227d:	75 04                	jne    f0102283 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010227f:	b0 01                	mov    $0x1,%al
f0102281:	eb 02                	jmp    f0102285 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0102283:	b0 00                	mov    $0x0,%al
f0102285:	5d                   	pop    %ebp
f0102286:	c3                   	ret    

f0102287 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102287:	55                   	push   %ebp
f0102288:	89 e5                	mov    %esp,%ebp
f010228a:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010228f:	83 f8 01             	cmp    $0x1,%eax
f0102292:	75 04                	jne    f0102298 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0102294:	b0 01                	mov    $0x1,%al
f0102296:	eb 02                	jmp    f010229a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0102298:	b0 00                	mov    $0x0,%al
f010229a:	5d                   	pop    %ebp
f010229b:	c3                   	ret    

f010229c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010229c:	55                   	push   %ebp
f010229d:	89 e5                	mov    %esp,%ebp
f010229f:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022a4:	83 f8 02             	cmp    $0x2,%eax
f01022a7:	75 04                	jne    f01022ad <isKHeapPlacementStrategyBESTFIT+0x11>
f01022a9:	b0 01                	mov    $0x1,%al
f01022ab:	eb 02                	jmp    f01022af <isKHeapPlacementStrategyBESTFIT+0x13>
f01022ad:	b0 00                	mov    $0x0,%al
f01022af:	5d                   	pop    %ebp
f01022b0:	c3                   	ret    

f01022b1 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022b1:	55                   	push   %ebp
f01022b2:	89 e5                	mov    %esp,%ebp
f01022b4:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022b9:	83 f8 03             	cmp    $0x3,%eax
f01022bc:	75 04                	jne    f01022c2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022be:	b0 01                	mov    $0x1,%al
f01022c0:	eb 02                	jmp    f01022c4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022c2:	b0 00                	mov    $0x0,%al
f01022c4:	5d                   	pop    %ebp
f01022c5:	c3                   	ret    

f01022c6 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022c6:	55                   	push   %ebp
f01022c7:	89 e5                	mov    %esp,%ebp
f01022c9:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022ce:	83 f8 04             	cmp    $0x4,%eax
f01022d1:	75 04                	jne    f01022d7 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022d3:	b0 01                	mov    $0x1,%al
f01022d5:	eb 02                	jmp    f01022d9 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022d7:	b0 00                	mov    $0x0,%al
f01022d9:	5d                   	pop    %ebp
f01022da:	c3                   	ret    

f01022db <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022db:	55                   	push   %ebp
f01022dc:	89 e5                	mov    %esp,%ebp
f01022de:	c7 05 cc be 2b f0 01 	movl   $0x1,0xf02bbecc
f01022e5:	00 00 00 
f01022e8:	90                   	nop
f01022e9:	5d                   	pop    %ebp
f01022ea:	c3                   	ret    

f01022eb <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01022eb:	55                   	push   %ebp
f01022ec:	89 e5                	mov    %esp,%ebp
f01022ee:	c7 05 cc be 2b f0 02 	movl   $0x2,0xf02bbecc
f01022f5:	00 00 00 
f01022f8:	90                   	nop
f01022f9:	5d                   	pop    %ebp
f01022fa:	c3                   	ret    

f01022fb <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01022fb:	55                   	push   %ebp
f01022fc:	89 e5                	mov    %esp,%ebp
f01022fe:	c7 05 cc be 2b f0 03 	movl   $0x3,0xf02bbecc
f0102305:	00 00 00 
f0102308:	90                   	nop
f0102309:	5d                   	pop    %ebp
f010230a:	c3                   	ret    

f010230b <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f010230b:	55                   	push   %ebp
f010230c:	89 e5                	mov    %esp,%ebp
f010230e:	c7 05 cc be 2b f0 04 	movl   $0x4,0xf02bbecc
f0102315:	00 00 00 
f0102318:	90                   	nop
f0102319:	5d                   	pop    %ebp
f010231a:	c3                   	ret    

f010231b <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f010231b:	55                   	push   %ebp
f010231c:	89 e5                	mov    %esp,%ebp
f010231e:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f0102323:	83 f8 01             	cmp    $0x1,%eax
f0102326:	75 04                	jne    f010232c <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102328:	b0 01                	mov    $0x1,%al
f010232a:	eb 02                	jmp    f010232e <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010232c:	b0 00                	mov    $0x0,%al
f010232e:	5d                   	pop    %ebp
f010232f:	c3                   	ret    

f0102330 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0102330:	55                   	push   %ebp
f0102331:	89 e5                	mov    %esp,%ebp
f0102333:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f0102338:	83 f8 02             	cmp    $0x2,%eax
f010233b:	75 04                	jne    f0102341 <isUHeapPlacementStrategyBESTFIT+0x11>
f010233d:	b0 01                	mov    $0x1,%al
f010233f:	eb 02                	jmp    f0102343 <isUHeapPlacementStrategyBESTFIT+0x13>
f0102341:	b0 00                	mov    $0x0,%al
f0102343:	5d                   	pop    %ebp
f0102344:	c3                   	ret    

f0102345 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102345:	55                   	push   %ebp
f0102346:	89 e5                	mov    %esp,%ebp
f0102348:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f010234d:	83 f8 03             	cmp    $0x3,%eax
f0102350:	75 04                	jne    f0102356 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102352:	b0 01                	mov    $0x1,%al
f0102354:	eb 02                	jmp    f0102358 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102356:	b0 00                	mov    $0x0,%al
f0102358:	5d                   	pop    %ebp
f0102359:	c3                   	ret    

f010235a <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010235a:	55                   	push   %ebp
f010235b:	89 e5                	mov    %esp,%ebp
f010235d:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f0102362:	83 f8 04             	cmp    $0x4,%eax
f0102365:	75 04                	jne    f010236b <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102367:	b0 01                	mov    $0x1,%al
f0102369:	eb 02                	jmp    f010236d <isUHeapPlacementStrategyWORSTFIT+0x13>
f010236b:	b0 00                	mov    $0x0,%al
f010236d:	5d                   	pop    %ebp
f010236e:	c3                   	ret    

f010236f <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010236f:	55                   	push   %ebp
f0102370:	89 e5                	mov    %esp,%ebp
f0102372:	53                   	push   %ebx
f0102373:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102376:	8b 45 08             	mov    0x8(%ebp),%eax
f0102379:	c1 e8 0c             	shr    $0xc,%eax
f010237c:	89 c2                	mov    %eax,%edx
f010237e:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0102383:	39 c2                	cmp    %eax,%edx
f0102385:	72 14                	jb     f010239b <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0102387:	83 ec 04             	sub    $0x4,%esp
f010238a:	68 30 01 13 f0       	push   $0xf0130130
f010238f:	6a 55                	push   $0x55
f0102391:	68 58 01 13 f0       	push   $0xf0130158
f0102396:	e8 15 de ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f010239b:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01023a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01023a4:	c1 e8 0c             	shr    $0xc,%eax
f01023a7:	89 c2                	mov    %eax,%edx
f01023a9:	89 d0                	mov    %edx,%eax
f01023ab:	01 c0                	add    %eax,%eax
f01023ad:	01 d0                	add    %edx,%eax
f01023af:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023b6:	01 d8                	add    %ebx,%eax
f01023b8:	01 d0                	add    %edx,%eax
f01023ba:	01 c8                	add    %ecx,%eax
}
f01023bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023bf:	c9                   	leave  
f01023c0:	c3                   	ret    

f01023c1 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023c1:	55                   	push   %ebp
f01023c2:	89 e5                	mov    %esp,%ebp
f01023c4:	53                   	push   %ebx
f01023c5:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023cf:	eb 3b                	jmp    f010240c <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023d4:	89 d0                	mov    %edx,%eax
f01023d6:	01 c0                	add    %eax,%eax
f01023d8:	01 d0                	add    %edx,%eax
f01023da:	c1 e0 03             	shl    $0x3,%eax
f01023dd:	05 44 c5 18 f0       	add    $0xf018c544,%eax
f01023e2:	8b 10                	mov    (%eax),%edx
f01023e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01023e7:	89 c8                	mov    %ecx,%eax
f01023e9:	01 c0                	add    %eax,%eax
f01023eb:	01 c8                	add    %ecx,%eax
f01023ed:	c1 e0 03             	shl    $0x3,%eax
f01023f0:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01023f5:	8b 00                	mov    (%eax),%eax
f01023f7:	83 ec 04             	sub    $0x4,%esp
f01023fa:	52                   	push   %edx
f01023fb:	50                   	push   %eax
f01023fc:	68 ff 09 13 f0       	push   $0xf01309ff
f0102401:	e8 2b ea ff ff       	call   f0100e31 <cprintf>
f0102406:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102409:	ff 45 f4             	incl   -0xc(%ebp)
f010240c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010240f:	a1 60 c9 18 f0       	mov    0xf018c960,%eax
f0102414:	39 c2                	cmp    %eax,%edx
f0102416:	72 b9                	jb     f01023d1 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102418:	83 ec 0c             	sub    $0xc,%esp
f010241b:	68 08 0a 13 f0       	push   $0xf0130a08
f0102420:	e8 0c ea ff ff       	call   f0100e31 <cprintf>
f0102425:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010242f:	eb 42                	jmp    f0102473 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0102431:	8b 0d 68 ca 18 f0    	mov    0xf018ca68,%ecx
f0102437:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010243a:	89 d0                	mov    %edx,%eax
f010243c:	01 c0                	add    %eax,%eax
f010243e:	01 d0                	add    %edx,%eax
f0102440:	c1 e0 02             	shl    $0x2,%eax
f0102443:	01 c8                	add    %ecx,%eax
f0102445:	8b 50 04             	mov    0x4(%eax),%edx
f0102448:	8b 1d 68 ca 18 f0    	mov    0xf018ca68,%ebx
f010244e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102451:	89 c8                	mov    %ecx,%eax
f0102453:	01 c0                	add    %eax,%eax
f0102455:	01 c8                	add    %ecx,%eax
f0102457:	c1 e0 02             	shl    $0x2,%eax
f010245a:	01 d8                	add    %ebx,%eax
f010245c:	8b 00                	mov    (%eax),%eax
f010245e:	83 ec 04             	sub    $0x4,%esp
f0102461:	52                   	push   %edx
f0102462:	50                   	push   %eax
f0102463:	68 1d 0a 13 f0       	push   $0xf0130a1d
f0102468:	e8 c4 e9 ff ff       	call   f0100e31 <cprintf>
f010246d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102470:	ff 45 f4             	incl   -0xc(%ebp)
f0102473:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f0102478:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010247b:	7c b4                	jl     f0102431 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010247d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102482:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102485:	c9                   	leave  
f0102486:	c3                   	ret    

f0102487 <command_str2lower>:
int command_str2lower(int number_of_arguments,char **arguments){
f0102487:	55                   	push   %ebp
f0102488:	89 e5                	mov    %esp,%ebp
f010248a:	83 ec 18             	sub    $0x18,%esp
	char*s=str2lower(arguments[1],arguments[2]);
f010248d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102490:	83 c0 08             	add    $0x8,%eax
f0102493:	8b 10                	mov    (%eax),%edx
f0102495:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102498:	83 c0 04             	add    $0x4,%eax
f010249b:	8b 00                	mov    (%eax),%eax
f010249d:	83 ec 08             	sub    $0x8,%esp
f01024a0:	52                   	push   %edx
f01024a1:	50                   	push   %eax
f01024a2:	e8 51 d0 02 00       	call   f012f4f8 <str2lower>
f01024a7:	83 c4 10             	add    $0x10,%esp
f01024aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("%s\n",s);
f01024ad:	83 ec 08             	sub    $0x8,%esp
f01024b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01024b3:	68 39 0a 13 f0       	push   $0xf0130a39
f01024b8:	e8 74 e9 ff ff       	call   f0100e31 <cprintf>
f01024bd:	83 c4 10             	add    $0x10,%esp
return 0;
f01024c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024c5:	c9                   	leave  
f01024c6:	c3                   	ret    

f01024c7 <command_kernel_info>:
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01024c7:	55                   	push   %ebp
f01024c8:	89 e5                	mov    %esp,%ebp
f01024ca:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01024cd:	83 ec 0c             	sub    $0xc,%esp
f01024d0:	68 3d 0a 13 f0       	push   $0xf0130a3d
f01024d5:	e8 57 e9 ff ff       	call   f0100e31 <cprintf>
f01024da:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01024dd:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01024e2:	83 ec 04             	sub    $0x4,%esp
f01024e5:	50                   	push   %eax
f01024e6:	68 0c 00 10 f0       	push   $0xf010000c
f01024eb:	68 58 0a 13 f0       	push   $0xf0130a58
f01024f0:	e8 3c e9 ff ff       	call   f0100e31 <cprintf>
f01024f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01024f8:	b8 c5 fd 12 00       	mov    $0x12fdc5,%eax
f01024fd:	83 ec 04             	sub    $0x4,%esp
f0102500:	50                   	push   %eax
f0102501:	68 c5 fd 12 f0       	push   $0xf012fdc5
f0102506:	68 94 0a 13 f0       	push   $0xf0130a94
f010250b:	e8 21 e9 ff ff       	call   f0100e31 <cprintf>
f0102510:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102513:	b8 f2 2f 25 00       	mov    $0x252ff2,%eax
f0102518:	83 ec 04             	sub    $0x4,%esp
f010251b:	50                   	push   %eax
f010251c:	68 f2 2f 25 f0       	push   $0xf0252ff2
f0102521:	68 d0 0a 13 f0       	push   $0xf0130ad0
f0102526:	e8 06 e9 ff ff       	call   f0100e31 <cprintf>
f010252b:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010252e:	b8 5c e6 2d 00       	mov    $0x2de65c,%eax
f0102533:	83 ec 04             	sub    $0x4,%esp
f0102536:	50                   	push   %eax
f0102537:	68 5c e6 2d f0       	push   $0xf02de65c
f010253c:	68 18 0b 13 f0       	push   $0xf0130b18
f0102541:	e8 eb e8 ff ff       	call   f0100e31 <cprintf>
f0102546:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102549:	b8 5c e6 2d f0       	mov    $0xf02de65c,%eax
f010254e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102554:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102559:	29 c2                	sub    %eax,%edx
f010255b:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010255d:	85 c0                	test   %eax,%eax
f010255f:	79 05                	jns    f0102566 <command_kernel_info+0x9f>
f0102561:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102566:	c1 f8 0a             	sar    $0xa,%eax
f0102569:	83 ec 08             	sub    $0x8,%esp
f010256c:	50                   	push   %eax
f010256d:	68 54 0b 13 f0       	push   $0xf0130b54
f0102572:	e8 ba e8 ff ff       	call   f0100e31 <cprintf>
f0102577:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010257a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010257f:	c9                   	leave  
f0102580:	c3                   	ret    

f0102581 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0102581:	55                   	push   %ebp
f0102582:	89 e5                	mov    %esp,%ebp
f0102584:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0102587:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010258b:	75 37                	jne    f01025c4 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010258d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102590:	83 c0 04             	add    $0x4,%eax
f0102593:	8b 00                	mov    (%eax),%eax
f0102595:	83 ec 04             	sub    $0x4,%esp
f0102598:	6a 10                	push   $0x10
f010259a:	6a 00                	push   $0x0
f010259c:	50                   	push   %eax
f010259d:	e8 ae cb 02 00       	call   f012f150 <strtol>
f01025a2:	83 c4 10             	add    $0x10,%esp
f01025a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01025a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025ab:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01025ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025b1:	83 c0 08             	add    $0x8,%eax
f01025b4:	8b 00                	mov    (%eax),%eax
f01025b6:	8a 00                	mov    (%eax),%al
f01025b8:	88 c2                	mov    %al,%dl
f01025ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025bd:	88 10                	mov    %dl,(%eax)
f01025bf:	e9 bc 00 00 00       	jmp    f0102680 <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01025c4:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01025c8:	0f 85 a2 00 00 00    	jne    f0102670 <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01025ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025d1:	83 c0 04             	add    $0x4,%eax
f01025d4:	8b 00                	mov    (%eax),%eax
f01025d6:	83 ec 04             	sub    $0x4,%esp
f01025d9:	6a 0a                	push   $0xa
f01025db:	6a 00                	push   $0x0
f01025dd:	50                   	push   %eax
f01025de:	e8 6d cb 02 00       	call   f012f150 <strtol>
f01025e3:	83 c4 10             	add    $0x10,%esp
f01025e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01025e9:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01025f0:	83 ec 04             	sub    $0x4,%esp
f01025f3:	6a 00                	push   $0x0
f01025f5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01025f8:	50                   	push   %eax
f01025f9:	ff 75 f4             	pushl  -0xc(%ebp)
f01025fc:	e8 af 73 00 00       	call   f01099b0 <envid2env>
f0102601:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102604:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102607:	83 c0 08             	add    $0x8,%eax
f010260a:	8b 00                	mov    (%eax),%eax
f010260c:	83 ec 04             	sub    $0x4,%esp
f010260f:	6a 10                	push   $0x10
f0102611:	6a 00                	push   $0x0
f0102613:	50                   	push   %eax
f0102614:	e8 37 cb 02 00       	call   f012f150 <strtol>
f0102619:	83 c4 10             	add    $0x10,%esp
f010261c:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010261f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102622:	85 c0                	test   %eax,%eax
f0102624:	75 07                	jne    f010262d <command_writeusermem+0xac>
f0102626:	b8 00 00 00 00       	mov    $0x0,%eax
f010262b:	eb 58                	jmp    f0102685 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010262d:	0f 20 d8             	mov    %cr3,%eax
f0102630:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102633:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102636:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102639:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010263c:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102642:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102645:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102648:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010264b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010264e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0102651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102654:	83 c0 0c             	add    $0xc,%eax
f0102657:	8b 00                	mov    (%eax),%eax
f0102659:	8a 00                	mov    (%eax),%al
f010265b:	88 c2                	mov    %al,%dl
f010265d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102660:	88 10                	mov    %dl,(%eax)
f0102662:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102665:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102668:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010266b:	0f 22 d8             	mov    %eax,%cr3
f010266e:	eb 10                	jmp    f0102680 <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0102670:	83 ec 0c             	sub    $0xc,%esp
f0102673:	68 80 0b 13 f0       	push   $0xf0130b80
f0102678:	e8 b4 e7 ff ff       	call   f0100e31 <cprintf>
f010267d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102680:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102685:	c9                   	leave  
f0102686:	c3                   	ret    

f0102687 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102687:	55                   	push   %ebp
f0102688:	89 e5                	mov    %esp,%ebp
f010268a:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010268d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102690:	83 c0 04             	add    $0x4,%eax
f0102693:	8b 00                	mov    (%eax),%eax
f0102695:	83 ec 04             	sub    $0x4,%esp
f0102698:	6a 10                	push   $0x10
f010269a:	6a 00                	push   $0x0
f010269c:	50                   	push   %eax
f010269d:	e8 ae ca 02 00       	call   f012f150 <strtol>
f01026a2:	83 c4 10             	add    $0x10,%esp
f01026a5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01026aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01026ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f01026b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026b7:	83 c0 08             	add    $0x8,%eax
f01026ba:	8b 00                	mov    (%eax),%eax
f01026bc:	83 ec 0c             	sub    $0xc,%esp
f01026bf:	50                   	push   %eax
f01026c0:	e8 2b c7 02 00       	call   f012edf0 <strlen>
f01026c5:	83 c4 10             	add    $0x10,%esp
f01026c8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01026cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01026d2:	eb 1c                	jmp    f01026f0 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01026d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026d7:	83 c0 08             	add    $0x8,%eax
f01026da:	8b 10                	mov    (%eax),%edx
f01026dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026df:	01 d0                	add    %edx,%eax
f01026e1:	8a 00                	mov    (%eax),%al
f01026e3:	88 c2                	mov    %al,%dl
f01026e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01026e8:	88 10                	mov    %dl,(%eax)
		address++;
f01026ea:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f01026ed:	ff 45 f0             	incl   -0x10(%ebp)
f01026f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01026f6:	7c dc                	jl     f01026d4 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f01026f8:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01026fd:	c9                   	leave  
f01026fe:	c3                   	ret    

f01026ff <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01026ff:	55                   	push   %ebp
f0102700:	89 e5                	mov    %esp,%ebp
f0102702:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102705:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102709:	75 42                	jne    f010274d <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010270b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010270e:	83 c0 04             	add    $0x4,%eax
f0102711:	8b 00                	mov    (%eax),%eax
f0102713:	83 ec 04             	sub    $0x4,%esp
f0102716:	6a 10                	push   $0x10
f0102718:	6a 00                	push   $0x0
f010271a:	50                   	push   %eax
f010271b:	e8 30 ca 02 00       	call   f012f150 <strtol>
f0102720:	83 c4 10             	add    $0x10,%esp
f0102723:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102726:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102729:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010272c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010272f:	8a 00                	mov    (%eax),%al
f0102731:	0f b6 c0             	movzbl %al,%eax
f0102734:	83 ec 04             	sub    $0x4,%esp
f0102737:	50                   	push   %eax
f0102738:	ff 75 d8             	pushl  -0x28(%ebp)
f010273b:	68 aa 0b 13 f0       	push   $0xf0130baa
f0102740:	e8 ec e6 ff ff       	call   f0100e31 <cprintf>
f0102745:	83 c4 10             	add    $0x10,%esp
f0102748:	e9 c7 00 00 00       	jmp    f0102814 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010274d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102751:	0f 85 ad 00 00 00    	jne    f0102804 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102757:	8b 45 0c             	mov    0xc(%ebp),%eax
f010275a:	83 c0 04             	add    $0x4,%eax
f010275d:	8b 00                	mov    (%eax),%eax
f010275f:	83 ec 04             	sub    $0x4,%esp
f0102762:	6a 0a                	push   $0xa
f0102764:	6a 00                	push   $0x0
f0102766:	50                   	push   %eax
f0102767:	e8 e4 c9 02 00       	call   f012f150 <strtol>
f010276c:	83 c4 10             	add    $0x10,%esp
f010276f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102772:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102779:	83 ec 04             	sub    $0x4,%esp
f010277c:	6a 00                	push   $0x0
f010277e:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102781:	50                   	push   %eax
f0102782:	ff 75 f4             	pushl  -0xc(%ebp)
f0102785:	e8 26 72 00 00       	call   f01099b0 <envid2env>
f010278a:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010278d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102790:	83 c0 08             	add    $0x8,%eax
f0102793:	8b 00                	mov    (%eax),%eax
f0102795:	83 ec 04             	sub    $0x4,%esp
f0102798:	6a 10                	push   $0x10
f010279a:	6a 00                	push   $0x0
f010279c:	50                   	push   %eax
f010279d:	e8 ae c9 02 00       	call   f012f150 <strtol>
f01027a2:	83 c4 10             	add    $0x10,%esp
f01027a5:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01027a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027ab:	85 c0                	test   %eax,%eax
f01027ad:	75 07                	jne    f01027b6 <command_readusermem+0xb7>
f01027af:	b8 00 00 00 00       	mov    $0x0,%eax
f01027b4:	eb 63                	jmp    f0102819 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01027b6:	0f 20 d8             	mov    %cr3,%eax
f01027b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01027bc:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01027bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01027c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027c5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01027cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01027ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01027d1:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01027d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01027da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01027dd:	8a 00                	mov    (%eax),%al
f01027df:	0f b6 c0             	movzbl %al,%eax
f01027e2:	83 ec 04             	sub    $0x4,%esp
f01027e5:	50                   	push   %eax
f01027e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01027e9:	68 aa 0b 13 f0       	push   $0xf0130baa
f01027ee:	e8 3e e6 ff ff       	call   f0100e31 <cprintf>
f01027f3:	83 c4 10             	add    $0x10,%esp
f01027f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01027f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01027fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01027ff:	0f 22 d8             	mov    %eax,%cr3
f0102802:	eb 10                	jmp    f0102814 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102804:	83 ec 0c             	sub    $0xc,%esp
f0102807:	68 c4 0b 13 f0       	push   $0xf0130bc4
f010280c:	e8 20 e6 ff ff       	call   f0100e31 <cprintf>
f0102811:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102814:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102819:	c9                   	leave  
f010281a:	c3                   	ret    

f010281b <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010281b:	55                   	push   %ebp
f010281c:	89 e5                	mov    %esp,%ebp
f010281e:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102821:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102824:	83 c0 04             	add    $0x4,%eax
f0102827:	8b 00                	mov    (%eax),%eax
f0102829:	83 ec 04             	sub    $0x4,%esp
f010282c:	6a 10                	push   $0x10
f010282e:	6a 00                	push   $0x0
f0102830:	50                   	push   %eax
f0102831:	e8 1a c9 02 00       	call   f012f150 <strtol>
f0102836:	83 c4 10             	add    $0x10,%esp
f0102839:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010283e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102841:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102848:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010284b:	8a 00                	mov    (%eax),%al
f010284d:	0f b6 c0             	movzbl %al,%eax
f0102850:	83 ec 08             	sub    $0x8,%esp
f0102853:	50                   	push   %eax
f0102854:	68 ee 0b 13 f0       	push   $0xf0130bee
f0102859:	e8 d3 e5 ff ff       	call   f0100e31 <cprintf>
f010285e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102861:	83 ec 0c             	sub    $0xc,%esp
f0102864:	68 f1 0b 13 f0       	push   $0xf0130bf1
f0102869:	e8 c3 e5 ff ff       	call   f0100e31 <cprintf>
f010286e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102871:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102876:	c9                   	leave  
f0102877:	c3                   	ret    

f0102878 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102878:	55                   	push   %ebp
f0102879:	89 e5                	mov    %esp,%ebp
f010287b:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010287e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102881:	83 c0 04             	add    $0x4,%eax
f0102884:	8b 00                	mov    (%eax),%eax
f0102886:	83 ec 04             	sub    $0x4,%esp
f0102889:	6a 0a                	push   $0xa
f010288b:	6a 00                	push   $0x0
f010288d:	50                   	push   %eax
f010288e:	e8 bd c8 02 00       	call   f012f150 <strtol>
f0102893:	83 c4 10             	add    $0x10,%esp
f0102896:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102899:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01028a0:	83 ec 04             	sub    $0x4,%esp
f01028a3:	6a 00                	push   $0x0
f01028a5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01028a8:	50                   	push   %eax
f01028a9:	ff 75 ec             	pushl  -0x14(%ebp)
f01028ac:	e8 ff 70 00 00       	call   f01099b0 <envid2env>
f01028b1:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01028b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028b7:	83 c0 08             	add    $0x8,%eax
f01028ba:	8b 00                	mov    (%eax),%eax
f01028bc:	83 ec 04             	sub    $0x4,%esp
f01028bf:	6a 10                	push   $0x10
f01028c1:	6a 00                	push   $0x0
f01028c3:	50                   	push   %eax
f01028c4:	e8 87 c8 02 00       	call   f012f150 <strtol>
f01028c9:	83 c4 10             	add    $0x10,%esp
f01028cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01028cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028d2:	83 c0 0c             	add    $0xc,%eax
f01028d5:	8b 00                	mov    (%eax),%eax
f01028d7:	83 ec 04             	sub    $0x4,%esp
f01028da:	6a 0a                	push   $0xa
f01028dc:	6a 00                	push   $0x0
f01028de:	50                   	push   %eax
f01028df:	e8 6c c8 02 00       	call   f012f150 <strtol>
f01028e4:	83 c4 10             	add    $0x10,%esp
f01028e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01028ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01028ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01028f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028f3:	85 c0                	test   %eax,%eax
f01028f5:	75 07                	jne    f01028fe <command_readuserblock+0x86>
f01028f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01028fc:	eb 68                	jmp    f0102966 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01028fe:	0f 20 d8             	mov    %cr3,%eax
f0102901:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102904:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102907:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f010290a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010290d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102913:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102916:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102919:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010291c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102923:	eb 28                	jmp    f010294d <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102925:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102928:	8a 00                	mov    (%eax),%al
f010292a:	0f b6 d0             	movzbl %al,%edx
f010292d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102930:	8a 00                	mov    (%eax),%al
f0102932:	0f b6 c0             	movzbl %al,%eax
f0102935:	52                   	push   %edx
f0102936:	50                   	push   %eax
f0102937:	ff 75 f4             	pushl  -0xc(%ebp)
f010293a:	68 f3 0b 13 f0       	push   $0xf0130bf3
f010293f:	e8 ed e4 ff ff       	call   f0100e31 <cprintf>
f0102944:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102947:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010294a:	ff 45 f0             	incl   -0x10(%ebp)
f010294d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102950:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102953:	7c d0                	jl     f0102925 <command_readuserblock+0xad>
f0102955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102958:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010295b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010295e:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102961:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102966:	c9                   	leave  
f0102967:	c3                   	ret    

f0102968 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102968:	55                   	push   %ebp
f0102969:	89 e5                	mov    %esp,%ebp
f010296b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010296e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102971:	83 c0 04             	add    $0x4,%eax
f0102974:	8b 00                	mov    (%eax),%eax
f0102976:	83 ec 04             	sub    $0x4,%esp
f0102979:	6a 0a                	push   $0xa
f010297b:	6a 00                	push   $0x0
f010297d:	50                   	push   %eax
f010297e:	e8 cd c7 02 00       	call   f012f150 <strtol>
f0102983:	83 c4 10             	add    $0x10,%esp
f0102986:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102989:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102990:	83 ec 04             	sub    $0x4,%esp
f0102993:	6a 00                	push   $0x0
f0102995:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102998:	50                   	push   %eax
f0102999:	ff 75 f4             	pushl  -0xc(%ebp)
f010299c:	e8 0f 70 00 00       	call   f01099b0 <envid2env>
f01029a1:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01029a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029a7:	85 c0                	test   %eax,%eax
f01029a9:	75 0a                	jne    f01029b5 <command_remove_table+0x4d>
f01029ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01029b0:	e9 aa 00 00 00       	jmp    f0102a5f <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f01029b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029b8:	83 c0 08             	add    $0x8,%eax
f01029bb:	8b 00                	mov    (%eax),%eax
f01029bd:	83 ec 04             	sub    $0x4,%esp
f01029c0:	6a 10                	push   $0x10
f01029c2:	6a 00                	push   $0x0
f01029c4:	50                   	push   %eax
f01029c5:	e8 86 c7 02 00       	call   f012f150 <strtol>
f01029ca:	83 c4 10             	add    $0x10,%esp
f01029cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01029d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01029d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01029d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029d9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01029e2:	c1 ea 16             	shr    $0x16,%edx
f01029e5:	c1 e2 02             	shl    $0x2,%edx
f01029e8:	01 d0                	add    %edx,%eax
f01029ea:	8b 00                	mov    (%eax),%eax
f01029ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01029f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01029f4:	83 ec 0c             	sub    $0xc,%esp
f01029f7:	ff 75 e8             	pushl  -0x18(%ebp)
f01029fa:	e8 70 f9 ff ff       	call   f010236f <to_frame_info>
f01029ff:	83 c4 10             	add    $0x10,%esp
f0102a02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102a05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a08:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102a0e:	83 ec 0c             	sub    $0xc,%esp
f0102a11:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102a14:	e8 06 4a 00 00       	call   f010741f <free_frame>
f0102a19:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a1f:	c1 e8 16             	shr    $0x16,%eax
f0102a22:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102a25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a28:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102a31:	c1 e2 02             	shl    $0x2,%edx
f0102a34:	01 c2                	add    %eax,%edx
f0102a36:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a39:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a3f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a42:	c1 e1 02             	shl    $0x2,%ecx
f0102a45:	01 c8                	add    %ecx,%eax
f0102a47:	8b 00                	mov    (%eax),%eax
f0102a49:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a4c:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a4e:	0f 20 d8             	mov    %cr3,%eax
f0102a51:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a54:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a57:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a5f:	c9                   	leave  
f0102a60:	c3                   	ret    

f0102a61 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a61:	55                   	push   %ebp
f0102a62:	89 e5                	mov    %esp,%ebp
f0102a64:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a67:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a6b:	7e 06                	jle    f0102a73 <command_allocuserpage+0x12>
f0102a6d:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a71:	7e 1a                	jle    f0102a8d <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a73:	83 ec 0c             	sub    $0xc,%esp
f0102a76:	68 04 0c 13 f0       	push   $0xf0130c04
f0102a7b:	e8 b1 e3 ff ff       	call   f0100e31 <cprintf>
f0102a80:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a83:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a88:	e9 4c 01 00 00       	jmp    f0102bd9 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a90:	83 c0 04             	add    $0x4,%eax
f0102a93:	8b 00                	mov    (%eax),%eax
f0102a95:	83 ec 04             	sub    $0x4,%esp
f0102a98:	6a 0a                	push   $0xa
f0102a9a:	6a 00                	push   $0x0
f0102a9c:	50                   	push   %eax
f0102a9d:	e8 ae c6 02 00       	call   f012f150 <strtol>
f0102aa2:	83 c4 10             	add    $0x10,%esp
f0102aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102aa8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102aaf:	83 ec 04             	sub    $0x4,%esp
f0102ab2:	6a 00                	push   $0x0
f0102ab4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102ab7:	50                   	push   %eax
f0102ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0102abb:	e8 f0 6e 00 00       	call   f01099b0 <envid2env>
f0102ac0:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102ac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ac6:	85 c0                	test   %eax,%eax
f0102ac8:	75 0a                	jne    f0102ad4 <command_allocuserpage+0x73>
f0102aca:	b8 00 00 00 00       	mov    $0x0,%eax
f0102acf:	e9 05 01 00 00       	jmp    f0102bd9 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102ad4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ad7:	83 c0 08             	add    $0x8,%eax
f0102ada:	8b 00                	mov    (%eax),%eax
f0102adc:	83 ec 04             	sub    $0x4,%esp
f0102adf:	6a 10                	push   $0x10
f0102ae1:	6a 00                	push   $0x0
f0102ae3:	50                   	push   %eax
f0102ae4:	e8 67 c6 02 00       	call   f012f150 <strtol>
f0102ae9:	83 c4 10             	add    $0x10,%esp
f0102aec:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102aef:	83 ec 0c             	sub    $0xc,%esp
f0102af2:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102af5:	50                   	push   %eax
f0102af6:	e8 0c 48 00 00       	call   f0107307 <allocate_frame>
f0102afb:	83 c4 10             	add    $0x10,%esp
f0102afe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102b01:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102b05:	75 1a                	jne    f0102b21 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102b07:	83 ec 0c             	sub    $0xc,%esp
f0102b0a:	68 2e 0c 13 f0       	push   $0xf0130c2e
f0102b0f:	e8 1d e3 ff ff       	call   f0100e31 <cprintf>
f0102b14:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b17:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b1c:	e9 b8 00 00 00       	jmp    f0102bd9 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102b21:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b25:	75 20                	jne    f0102b47 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102b27:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b2d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b33:	6a 06                	push   $0x6
f0102b35:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b38:	52                   	push   %edx
f0102b39:	50                   	push   %eax
f0102b3a:	e8 63 4b 00 00       	call   f01076a2 <map_frame>
f0102b3f:	83 c4 10             	add    $0x10,%esp
f0102b42:	e9 8d 00 00 00       	jmp    f0102bd4 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b47:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b4b:	0f 85 83 00 00 00    	jne    f0102bd4 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b54:	83 c0 0c             	add    $0xc,%eax
f0102b57:	8b 00                	mov    (%eax),%eax
f0102b59:	8a 00                	mov    (%eax),%al
f0102b5b:	3c 72                	cmp    $0x72,%al
f0102b5d:	74 0e                	je     f0102b6d <command_allocuserpage+0x10c>
f0102b5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b62:	83 c0 0c             	add    $0xc,%eax
f0102b65:	8b 00                	mov    (%eax),%eax
f0102b67:	8a 00                	mov    (%eax),%al
f0102b69:	3c 52                	cmp    $0x52,%al
f0102b6b:	75 09                	jne    f0102b76 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b74:	eb 3c                	jmp    f0102bb2 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b79:	83 c0 0c             	add    $0xc,%eax
f0102b7c:	8b 00                	mov    (%eax),%eax
f0102b7e:	8a 00                	mov    (%eax),%al
f0102b80:	3c 77                	cmp    $0x77,%al
f0102b82:	74 0e                	je     f0102b92 <command_allocuserpage+0x131>
f0102b84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b87:	83 c0 0c             	add    $0xc,%eax
f0102b8a:	8b 00                	mov    (%eax),%eax
f0102b8c:	8a 00                	mov    (%eax),%al
f0102b8e:	3c 57                	cmp    $0x57,%al
f0102b90:	75 09                	jne    f0102b9b <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102b92:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102b99:	eb 17                	jmp    f0102bb2 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102b9b:	83 ec 0c             	sub    $0xc,%esp
f0102b9e:	68 48 0c 13 f0       	push   $0xf0130c48
f0102ba3:	e8 89 e2 ff ff       	call   f0100e31 <cprintf>
f0102ba8:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102bab:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bb5:	83 c8 04             	or     $0x4,%eax
f0102bb8:	89 c1                	mov    %eax,%ecx
f0102bba:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102bbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bc0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102bc6:	51                   	push   %ecx
f0102bc7:	ff 75 ec             	pushl  -0x14(%ebp)
f0102bca:	52                   	push   %edx
f0102bcb:	50                   	push   %eax
f0102bcc:	e8 d1 4a 00 00       	call   f01076a2 <map_frame>
f0102bd1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102bd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bd9:	c9                   	leave  
f0102bda:	c3                   	ret    

f0102bdb <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102bdb:	55                   	push   %ebp
f0102bdc:	89 e5                	mov    %esp,%ebp
f0102bde:	56                   	push   %esi
f0102bdf:	53                   	push   %ebx
f0102be0:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102be3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102be6:	83 ec 0c             	sub    $0xc,%esp
f0102be9:	50                   	push   %eax
f0102bea:	e8 23 4d 00 00       	call   f0107912 <calculate_available_frames>
f0102bef:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102bf2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102bf5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102bf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102bfb:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102bfe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102c01:	01 de                	add    %ebx,%esi
f0102c03:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c06:	01 f3                	add    %esi,%ebx
f0102c08:	83 ec 0c             	sub    $0xc,%esp
f0102c0b:	51                   	push   %ecx
f0102c0c:	52                   	push   %edx
f0102c0d:	50                   	push   %eax
f0102c0e:	53                   	push   %ebx
f0102c0f:	68 8c 0c 13 f0       	push   $0xf0130c8c
f0102c14:	e8 18 e2 ff ff       	call   f0100e31 <cprintf>
f0102c19:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102c1c:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0102c21:	83 ec 08             	sub    $0x8,%esp
f0102c24:	50                   	push   %eax
f0102c25:	68 e4 0c 13 f0       	push   $0xf0130ce4
f0102c2a:	e8 02 e2 ff ff       	call   f0100e31 <cprintf>
f0102c2f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102c32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c37:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102c3a:	5b                   	pop    %ebx
f0102c3b:	5e                   	pop    %esi
f0102c3c:	5d                   	pop    %ebp
f0102c3d:	c3                   	ret    

f0102c3e <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102c3e:	55                   	push   %ebp
f0102c3f:	89 e5                	mov    %esp,%ebp
f0102c41:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c44:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c59:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c5c:	83 f8 02             	cmp    $0x2,%eax
f0102c5f:	74 39                	je     f0102c9a <CreateEnv+0x5c>
f0102c61:	83 f8 03             	cmp    $0x3,%eax
f0102c64:	75 1d                	jne    f0102c83 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c66:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c69:	83 c0 08             	add    $0x8,%eax
f0102c6c:	8b 00                	mov    (%eax),%eax
f0102c6e:	83 ec 04             	sub    $0x4,%esp
f0102c71:	6a 0a                	push   $0xa
f0102c73:	6a 00                	push   $0x0
f0102c75:	50                   	push   %eax
f0102c76:	e8 d5 c4 02 00       	call   f012f150 <strtol>
f0102c7b:	83 c4 10             	add    $0x10,%esp
f0102c7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c81:	eb 18                	jmp    f0102c9b <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102c83:	83 ec 0c             	sub    $0xc,%esp
f0102c86:	68 20 0d 13 f0       	push   $0xf0130d20
f0102c8b:	e8 a1 e1 ff ff       	call   f0100e31 <cprintf>
f0102c90:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102c93:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c98:	eb 58                	jmp    f0102cf2 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102c9a:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102c9b:	83 ec 0c             	sub    $0xc,%esp
f0102c9e:	6a 02                	push   $0x2
f0102ca0:	e8 8d aa 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f0102ca5:	83 c4 10             	add    $0x10,%esp
f0102ca8:	85 c0                	test   %eax,%eax
f0102caa:	74 07                	je     f0102cb3 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102cac:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102cb3:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102cb7:	76 19                	jbe    f0102cd2 <CreateEnv+0x94>
f0102cb9:	68 90 0d 13 f0       	push   $0xf0130d90
f0102cbe:	68 d5 0d 13 f0       	push   $0xf0130dd5
f0102cc3:	68 bb 01 00 00       	push   $0x1bb
f0102cc8:	68 ea 0d 13 f0       	push   $0xf0130dea
f0102ccd:	e8 de d4 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102cd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd5:	83 c0 04             	add    $0x4,%eax
f0102cd8:	8b 00                	mov    (%eax),%eax
f0102cda:	ff 75 f0             	pushl  -0x10(%ebp)
f0102cdd:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ce0:	ff 75 ec             	pushl  -0x14(%ebp)
f0102ce3:	50                   	push   %eax
f0102ce4:	e8 c4 5f 00 00       	call   f0108cad <env_create>
f0102ce9:	83 c4 10             	add    $0x10,%esp
f0102cec:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102cef:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102cf2:	c9                   	leave  
f0102cf3:	c3                   	ret    

f0102cf4 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102cf4:	55                   	push   %ebp
f0102cf5:	89 e5                	mov    %esp,%ebp
f0102cf7:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102cfa:	83 ec 08             	sub    $0x8,%esp
f0102cfd:	ff 75 0c             	pushl  0xc(%ebp)
f0102d00:	ff 75 08             	pushl  0x8(%ebp)
f0102d03:	e8 36 ff ff ff       	call   f0102c3e <CreateEnv>
f0102d08:	83 c4 10             	add    $0x10,%esp
f0102d0b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102d0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d12:	75 07                	jne    f0102d1b <command_run_program+0x27>
f0102d14:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d19:	eb 46                	jmp    f0102d61 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d1e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d21:	83 ec 08             	sub    $0x8,%esp
f0102d24:	50                   	push   %eax
f0102d25:	68 fe 0d 13 f0       	push   $0xf0130dfe
f0102d2a:	e8 02 e1 ff ff       	call   f0100e31 <cprintf>
f0102d2f:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102d32:	c7 05 08 bf 2b f0 00 	movl   $0x0,0xf02bbf08
f0102d39:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102d3c:	83 ec 0c             	sub    $0xc,%esp
f0102d3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d42:	e8 ce 25 00 00       	call   f0105315 <sched_new_env>
f0102d47:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d4d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d50:	83 ec 0c             	sub    $0xc,%esp
f0102d53:	50                   	push   %eax
f0102d54:	e8 d9 25 00 00       	call   f0105332 <sched_run_env>
f0102d59:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d61:	c9                   	leave  
f0102d62:	c3                   	ret    

f0102d63 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d63:	55                   	push   %ebp
f0102d64:	89 e5                	mov    %esp,%ebp
f0102d66:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d6c:	83 c0 04             	add    $0x4,%eax
f0102d6f:	8b 00                	mov    (%eax),%eax
f0102d71:	83 ec 04             	sub    $0x4,%esp
f0102d74:	6a 0a                	push   $0xa
f0102d76:	6a 00                	push   $0x0
f0102d78:	50                   	push   %eax
f0102d79:	e8 d2 c3 02 00       	call   f012f150 <strtol>
f0102d7e:	83 c4 10             	add    $0x10,%esp
f0102d81:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d87:	83 ec 0c             	sub    $0xc,%esp
f0102d8a:	50                   	push   %eax
f0102d8b:	e8 63 28 00 00       	call   f01055f3 <sched_kill_env>
f0102d90:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d93:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d98:	c9                   	leave  
f0102d99:	c3                   	ret    

f0102d9a <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102d9a:	55                   	push   %ebp
f0102d9b:	89 e5                	mov    %esp,%ebp
f0102d9d:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102da0:	83 ec 08             	sub    $0x8,%esp
f0102da3:	ff 75 0c             	pushl  0xc(%ebp)
f0102da6:	ff 75 08             	pushl  0x8(%ebp)
f0102da9:	e8 90 fe ff ff       	call   f0102c3e <CreateEnv>
f0102dae:	83 c4 10             	add    $0x10,%esp
f0102db1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102db4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102db8:	75 07                	jne    f0102dc1 <commnad_load_env+0x27>
		return 0 ;
f0102dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dbf:	eb 2a                	jmp    f0102deb <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102dc1:	83 ec 0c             	sub    $0xc,%esp
f0102dc4:	ff 75 f4             	pushl  -0xc(%ebp)
f0102dc7:	e8 49 25 00 00       	call   f0105315 <sched_new_env>
f0102dcc:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102dd2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102dd5:	83 ec 08             	sub    $0x8,%esp
f0102dd8:	50                   	push   %eax
f0102dd9:	68 fe 0d 13 f0       	push   $0xf0130dfe
f0102dde:	e8 4e e0 ff ff       	call   f0100e31 <cprintf>
f0102de3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102deb:	c9                   	leave  
f0102dec:	c3                   	ret    

f0102ded <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102ded:	55                   	push   %ebp
f0102dee:	89 e5                	mov    %esp,%ebp
f0102df0:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102df3:	c7 05 08 bf 2b f0 00 	movl   $0x0,0xf02bbf08
f0102dfa:	00 00 00 
	sched_run_all();
f0102dfd:	e8 ba 2d 00 00       	call   f0105bbc <sched_run_all>

	return 0 ;
f0102e02:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e07:	c9                   	leave  
f0102e08:	c3                   	ret    

f0102e09 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102e09:	55                   	push   %ebp
f0102e0a:	89 e5                	mov    %esp,%ebp
f0102e0c:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102e0f:	e8 a6 2b 00 00       	call   f01059ba <sched_print_all>

	return 0 ;
f0102e14:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e19:	c9                   	leave  
f0102e1a:	c3                   	ret    

f0102e1b <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102e1b:	55                   	push   %ebp
f0102e1c:	89 e5                	mov    %esp,%ebp
f0102e1e:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102e21:	e8 09 2e 00 00       	call   f0105c2f <sched_kill_all>

	return 0 ;
f0102e26:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e2b:	c9                   	leave  
f0102e2c:	c3                   	ret    

f0102e2d <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102e2d:	55                   	push   %ebp
f0102e2e:	89 e5                	mov    %esp,%ebp
f0102e30:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102e33:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102e37:	7f 1a                	jg     f0102e53 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e39:	83 ec 0c             	sub    $0xc,%esp
f0102e3c:	68 14 0e 13 f0       	push   $0xf0130e14
f0102e41:	e8 eb df ff ff       	call   f0100e31 <cprintf>
f0102e46:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e4e:	e9 83 00 00 00       	jmp    f0102ed6 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e53:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e56:	83 c0 04             	add    $0x4,%eax
f0102e59:	8b 00                	mov    (%eax),%eax
f0102e5b:	83 ec 04             	sub    $0x4,%esp
f0102e5e:	6a 0a                	push   $0xa
f0102e60:	6a 00                	push   $0x0
f0102e62:	50                   	push   %eax
f0102e63:	e8 e8 c2 02 00       	call   f012f150 <strtol>
f0102e68:	83 c4 10             	add    $0x10,%esp
f0102e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e6e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e72:	75 20                	jne    f0102e94 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e74:	83 ec 0c             	sub    $0xc,%esp
f0102e77:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e7a:	e8 28 a8 00 00       	call   f010d6a7 <setPageReplacmentAlgorithmLRU>
f0102e7f:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102e82:	83 ec 0c             	sub    $0xc,%esp
f0102e85:	68 74 0e 13 f0       	push   $0xf0130e74
f0102e8a:	e8 a2 df ff ff       	call   f0100e31 <cprintf>
f0102e8f:	83 c4 10             	add    $0x10,%esp
f0102e92:	eb 3d                	jmp    f0102ed1 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102e94:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102e98:	75 20                	jne    f0102eba <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e9a:	83 ec 0c             	sub    $0xc,%esp
f0102e9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ea0:	e8 02 a8 00 00       	call   f010d6a7 <setPageReplacmentAlgorithmLRU>
f0102ea5:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102ea8:	83 ec 0c             	sub    $0xc,%esp
f0102eab:	68 b8 0e 13 f0       	push   $0xf0130eb8
f0102eb0:	e8 7c df ff ff       	call   f0100e31 <cprintf>
f0102eb5:	83 c4 10             	add    $0x10,%esp
f0102eb8:	eb 17                	jmp    f0102ed1 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102eba:	83 ec 0c             	sub    $0xc,%esp
f0102ebd:	68 f8 0e 13 f0       	push   $0xf0130ef8
f0102ec2:	e8 6a df ff ff       	call   f0100e31 <cprintf>
f0102ec7:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102eca:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ecf:	eb 05                	jmp    f0102ed6 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102ed1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ed6:	c9                   	leave  
f0102ed7:	c3                   	ret    

f0102ed8 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102ed8:	55                   	push   %ebp
f0102ed9:	89 e5                	mov    %esp,%ebp
f0102edb:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102ede:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ee1:	83 c0 04             	add    $0x4,%eax
f0102ee4:	8b 00                	mov    (%eax),%eax
f0102ee6:	83 ec 04             	sub    $0x4,%esp
f0102ee9:	6a 0a                	push   $0xa
f0102eeb:	6a 00                	push   $0x0
f0102eed:	50                   	push   %eax
f0102eee:	e8 5d c2 02 00       	call   f012f150 <strtol>
f0102ef3:	83 c4 10             	add    $0x10,%esp
f0102ef6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102ef9:	83 ec 0c             	sub    $0xc,%esp
f0102efc:	ff 75 f4             	pushl  -0xc(%ebp)
f0102eff:	e8 16 a8 00 00       	call   f010d71a <setPageReplacmentAlgorithmNchanceCLOCK>
f0102f04:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102f07:	83 ec 0c             	sub    $0xc,%esp
f0102f0a:	68 4c 0f 13 f0       	push   $0xf0130f4c
f0102f0f:	e8 1d df ff ff       	call   f0100e31 <cprintf>
f0102f14:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f17:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f1c:	c9                   	leave  
f0102f1d:	c3                   	ret    

f0102f1e <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102f1e:	55                   	push   %ebp
f0102f1f:	89 e5                	mov    %esp,%ebp
f0102f21:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102f24:	e8 b1 a7 00 00       	call   f010d6da <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102f29:	83 ec 0c             	sub    $0xc,%esp
f0102f2c:	68 80 0f 13 f0       	push   $0xf0130f80
f0102f31:	e8 fb de ff ff       	call   f0100e31 <cprintf>
f0102f36:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f3e:	c9                   	leave  
f0102f3f:	c3                   	ret    

f0102f40 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f40:	55                   	push   %ebp
f0102f41:	89 e5                	mov    %esp,%ebp
f0102f43:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f46:	e8 9f a7 00 00       	call   f010d6ea <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f4b:	83 ec 0c             	sub    $0xc,%esp
f0102f4e:	68 ac 0f 13 f0       	push   $0xf0130fac
f0102f53:	e8 d9 de ff ff       	call   f0100e31 <cprintf>
f0102f58:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f60:	c9                   	leave  
f0102f61:	c3                   	ret    

f0102f62 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f62:	55                   	push   %ebp
f0102f63:	89 e5                	mov    %esp,%ebp
f0102f65:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f68:	e8 8d a7 00 00       	call   f010d6fa <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f6d:	83 ec 0c             	sub    $0xc,%esp
f0102f70:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0102f75:	e8 b7 de ff ff       	call   f0100e31 <cprintf>
f0102f7a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f82:	c9                   	leave  
f0102f83:	c3                   	ret    

f0102f84 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102f84:	55                   	push   %ebp
f0102f85:	89 e5                	mov    %esp,%ebp
f0102f87:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102f8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f8d:	83 c0 04             	add    $0x4,%eax
f0102f90:	8b 00                	mov    (%eax),%eax
f0102f92:	83 ec 04             	sub    $0x4,%esp
f0102f95:	6a 0a                	push   $0xa
f0102f97:	6a 00                	push   $0x0
f0102f99:	50                   	push   %eax
f0102f9a:	e8 b1 c1 02 00       	call   f012f150 <strtol>
f0102f9f:	83 c4 10             	add    $0x10,%esp
f0102fa2:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102fa5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102fa9:	83 ec 0c             	sub    $0xc,%esp
f0102fac:	50                   	push   %eax
f0102fad:	e8 44 33 00 00       	call   f01062f6 <sched_init_RR>
f0102fb2:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102fb5:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f0102fba:	0f b6 c0             	movzbl %al,%eax
f0102fbd:	83 ec 08             	sub    $0x8,%esp
f0102fc0:	50                   	push   %eax
f0102fc1:	68 08 10 13 f0       	push   $0xf0131008
f0102fc6:	e8 66 de ff ff       	call   f0100e31 <cprintf>
f0102fcb:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fd3:	c9                   	leave  
f0102fd4:	c3                   	ret    

f0102fd5 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102fd5:	55                   	push   %ebp
f0102fd6:	89 e5                	mov    %esp,%ebp
f0102fd8:	53                   	push   %ebx
f0102fd9:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fdf:	83 c0 04             	add    $0x4,%eax
f0102fe2:	8b 00                	mov    (%eax),%eax
f0102fe4:	83 ec 04             	sub    $0x4,%esp
f0102fe7:	6a 0a                	push   $0xa
f0102fe9:	6a 00                	push   $0x0
f0102feb:	50                   	push   %eax
f0102fec:	e8 5f c1 02 00       	call   f012f150 <strtol>
f0102ff1:	83 c4 10             	add    $0x10,%esp
f0102ff4:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102ff7:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102ffe:	eb 2e                	jmp    f010302e <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0103000:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103003:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0103006:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103009:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103010:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103013:	01 d0                	add    %edx,%eax
f0103015:	8b 00                	mov    (%eax),%eax
f0103017:	83 ec 04             	sub    $0x4,%esp
f010301a:	6a 0a                	push   $0xa
f010301c:	6a 00                	push   $0x0
f010301e:	50                   	push   %eax
f010301f:	e8 2c c1 02 00       	call   f012f150 <strtol>
f0103024:	83 c4 10             	add    $0x10,%esp
f0103027:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010302b:	ff 45 f4             	incl   -0xc(%ebp)
f010302e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103031:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103034:	7c ca                	jl     f0103000 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0103036:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010303a:	83 ec 08             	sub    $0x8,%esp
f010303d:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0103040:	52                   	push   %edx
f0103041:	50                   	push   %eax
f0103042:	e8 05 33 00 00       	call   f010634c <sched_init_MLFQ>
f0103047:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010304a:	83 ec 0c             	sub    $0xc,%esp
f010304d:	68 40 10 13 f0       	push   $0xf0131040
f0103052:	e8 da dd ff ff       	call   f0100e31 <cprintf>
f0103057:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010305a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103061:	eb 21                	jmp    f0103084 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103063:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103066:	05 c8 be 2b f0       	add    $0xf02bbec8,%eax
f010306b:	8a 00                	mov    (%eax),%al
f010306d:	0f b6 c0             	movzbl %al,%eax
f0103070:	83 ec 08             	sub    $0x8,%esp
f0103073:	50                   	push   %eax
f0103074:	68 6d 10 13 f0       	push   $0xf013106d
f0103079:	e8 b3 dd ff ff       	call   f0100e31 <cprintf>
f010307e:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103081:	ff 45 f0             	incl   -0x10(%ebp)
f0103084:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0103089:	0f b6 c0             	movzbl %al,%eax
f010308c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010308f:	7f d2                	jg     f0103063 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103091:	83 ec 0c             	sub    $0xc,%esp
f0103094:	68 f1 0b 13 f0       	push   $0xf0130bf1
f0103099:	e8 93 dd ff ff       	call   f0100e31 <cprintf>
f010309e:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030a6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030a9:	c9                   	leave  
f01030aa:	c3                   	ret    

f01030ab <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f01030ab:	55                   	push   %ebp
f01030ac:	89 e5                	mov    %esp,%ebp
f01030ae:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01030b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030b4:	83 c0 04             	add    $0x4,%eax
f01030b7:	8b 00                	mov    (%eax),%eax
f01030b9:	83 ec 04             	sub    $0x4,%esp
f01030bc:	6a 0a                	push   $0xa
f01030be:	6a 00                	push   $0x0
f01030c0:	50                   	push   %eax
f01030c1:	e8 8a c0 02 00       	call   f012f150 <strtol>
f01030c6:	83 c4 10             	add    $0x10,%esp
f01030c9:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01030cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030cf:	83 c0 08             	add    $0x8,%eax
f01030d2:	8b 00                	mov    (%eax),%eax
f01030d4:	83 ec 04             	sub    $0x4,%esp
f01030d7:	6a 0a                	push   $0xa
f01030d9:	6a 00                	push   $0x0
f01030db:	50                   	push   %eax
f01030dc:	e8 6f c0 02 00       	call   f012f150 <strtol>
f01030e1:	83 c4 10             	add    $0x10,%esp
f01030e4:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01030e7:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01030eb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01030ef:	83 ec 08             	sub    $0x8,%esp
f01030f2:	52                   	push   %edx
f01030f3:	50                   	push   %eax
f01030f4:	e8 62 32 00 00       	call   f010635b <sched_init_BSD>
f01030f9:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01030fc:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0103100:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103104:	83 ec 04             	sub    $0x4,%esp
f0103107:	52                   	push   %edx
f0103108:	50                   	push   %eax
f0103109:	68 74 10 13 f0       	push   $0xf0131074
f010310e:	e8 1e dd ff ff       	call   f0100e31 <cprintf>
f0103113:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0103116:	83 ec 0c             	sub    $0xc,%esp
f0103119:	68 f1 0b 13 f0       	push   $0xf0130bf1
f010311e:	e8 0e dd ff ff       	call   f0100e31 <cprintf>
f0103123:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103126:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010312b:	c9                   	leave  
f010312c:	c3                   	ret    

f010312d <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010312d:	55                   	push   %ebp
f010312e:	89 e5                	mov    %esp,%ebp
f0103130:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103133:	e8 43 30 00 00       	call   f010617b <isSchedMethodMLFQ>
f0103138:	85 c0                	test   %eax,%eax
f010313a:	74 59                	je     f0103195 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010313c:	83 ec 0c             	sub    $0xc,%esp
f010313f:	68 b0 10 13 f0       	push   $0xf01310b0
f0103144:	e8 e8 dc ff ff       	call   f0100e31 <cprintf>
f0103149:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010314c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103153:	eb 21                	jmp    f0103176 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103155:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103158:	05 c8 be 2b f0       	add    $0xf02bbec8,%eax
f010315d:	8a 00                	mov    (%eax),%al
f010315f:	0f b6 c0             	movzbl %al,%eax
f0103162:	83 ec 08             	sub    $0x8,%esp
f0103165:	50                   	push   %eax
f0103166:	68 6d 10 13 f0       	push   $0xf013106d
f010316b:	e8 c1 dc ff ff       	call   f0100e31 <cprintf>
f0103170:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103173:	ff 45 f4             	incl   -0xc(%ebp)
f0103176:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f010317b:	0f b6 c0             	movzbl %al,%eax
f010317e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103181:	7f d2                	jg     f0103155 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103183:	83 ec 0c             	sub    $0xc,%esp
f0103186:	68 f1 0b 13 f0       	push   $0xf0130bf1
f010318b:	e8 a1 dc ff ff       	call   f0100e31 <cprintf>
f0103190:	83 c4 10             	add    $0x10,%esp
f0103193:	eb 61                	jmp    f01031f6 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f0103195:	e8 c7 2f 00 00       	call   f0106161 <isSchedMethodRR>
f010319a:	85 c0                	test   %eax,%eax
f010319c:	74 1b                	je     f01031b9 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010319e:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f01031a3:	0f b6 c0             	movzbl %al,%eax
f01031a6:	83 ec 08             	sub    $0x8,%esp
f01031a9:	50                   	push   %eax
f01031aa:	68 e4 10 13 f0       	push   $0xf01310e4
f01031af:	e8 7d dc ff ff       	call   f0100e31 <cprintf>
f01031b4:	83 c4 10             	add    $0x10,%esp
f01031b7:	eb 3d                	jmp    f01031f6 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f01031b9:	e8 d8 2f 00 00       	call   f0106196 <isSchedMethodBSD>
f01031be:	85 c0                	test   %eax,%eax
f01031c0:	74 24                	je     f01031e6 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f01031c2:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f01031c7:	0f b6 d0             	movzbl %al,%edx
f01031ca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01031cf:	0f b6 c0             	movzbl %al,%eax
f01031d2:	83 ec 04             	sub    $0x4,%esp
f01031d5:	52                   	push   %edx
f01031d6:	50                   	push   %eax
f01031d7:	68 74 10 13 f0       	push   $0xf0131074
f01031dc:	e8 50 dc ff ff       	call   f0100e31 <cprintf>
f01031e1:	83 c4 10             	add    $0x10,%esp
f01031e4:	eb 10                	jmp    f01031f6 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01031e6:	83 ec 0c             	sub    $0xc,%esp
f01031e9:	68 20 11 13 f0       	push   $0xf0131120
f01031ee:	e8 3e dc ff ff       	call   f0100e31 <cprintf>
f01031f3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01031f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031fb:	c9                   	leave  
f01031fc:	c3                   	ret    

f01031fd <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01031fd:	55                   	push   %ebp
f01031fe:	89 e5                	mov    %esp,%ebp
f0103200:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0103203:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103206:	83 c0 04             	add    $0x4,%eax
f0103209:	8b 00                	mov    (%eax),%eax
f010320b:	83 ec 04             	sub    $0x4,%esp
f010320e:	6a 0a                	push   $0xa
f0103210:	6a 00                	push   $0x0
f0103212:	50                   	push   %eax
f0103213:	e8 38 bf 02 00       	call   f012f150 <strtol>
f0103218:	83 c4 10             	add    $0x10,%esp
f010321b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010321e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103221:	0f b6 c0             	movzbl %al,%eax
f0103224:	83 ec 0c             	sub    $0xc,%esp
f0103227:	50                   	push   %eax
f0103228:	e8 60 ae 02 00       	call   f012e08d <chksch>
f010322d:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0103230:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103234:	75 12                	jne    f0103248 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0103236:	83 ec 0c             	sub    $0xc,%esp
f0103239:	68 48 11 13 f0       	push   $0xf0131148
f010323e:	e8 ee db ff ff       	call   f0100e31 <cprintf>
f0103243:	83 c4 10             	add    $0x10,%esp
f0103246:	eb 16                	jmp    f010325e <command_sch_test+0x61>
	else if (status == 1)
f0103248:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010324c:	75 10                	jne    f010325e <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010324e:	83 ec 0c             	sub    $0xc,%esp
f0103251:	68 70 11 13 f0       	push   $0xf0131170
f0103256:	e8 d6 db ff ff       	call   f0100e31 <cprintf>
f010325b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010325e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103263:	c9                   	leave  
f0103264:	c3                   	ret    

f0103265 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103265:	55                   	push   %ebp
f0103266:	89 e5                	mov    %esp,%ebp
f0103268:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f010326b:	e8 d8 a4 00 00       	call   f010d748 <isPageReplacmentAlgorithmCLOCK>
f0103270:	85 c0                	test   %eax,%eax
f0103272:	74 15                	je     f0103289 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103274:	83 ec 0c             	sub    $0xc,%esp
f0103277:	68 94 11 13 f0       	push   $0xf0131194
f010327c:	e8 b0 db ff ff       	call   f0100e31 <cprintf>
f0103281:	83 c4 10             	add    $0x10,%esp
f0103284:	e9 8c 00 00 00       	jmp    f0103315 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0103289:	83 ec 0c             	sub    $0xc,%esp
f010328c:	6a 01                	push   $0x1
f010328e:	e8 9f a4 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f0103293:	83 c4 10             	add    $0x10,%esp
f0103296:	85 c0                	test   %eax,%eax
f0103298:	74 12                	je     f01032ac <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010329a:	83 ec 0c             	sub    $0xc,%esp
f010329d:	68 bc 11 13 f0       	push   $0xf01311bc
f01032a2:	e8 8a db ff ff       	call   f0100e31 <cprintf>
f01032a7:	83 c4 10             	add    $0x10,%esp
f01032aa:	eb 69                	jmp    f0103315 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01032ac:	83 ec 0c             	sub    $0xc,%esp
f01032af:	6a 02                	push   $0x2
f01032b1:	e8 7c a4 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f01032b6:	83 c4 10             	add    $0x10,%esp
f01032b9:	85 c0                	test   %eax,%eax
f01032bb:	74 12                	je     f01032cf <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01032bd:	83 ec 0c             	sub    $0xc,%esp
f01032c0:	68 fc 11 13 f0       	push   $0xf01311fc
f01032c5:	e8 67 db ff ff       	call   f0100e31 <cprintf>
f01032ca:	83 c4 10             	add    $0x10,%esp
f01032cd:	eb 46                	jmp    f0103315 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01032cf:	e8 8f a4 00 00       	call   f010d763 <isPageReplacmentAlgorithmFIFO>
f01032d4:	85 c0                	test   %eax,%eax
f01032d6:	74 12                	je     f01032ea <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01032d8:	83 ec 0c             	sub    $0xc,%esp
f01032db:	68 38 12 13 f0       	push   $0xf0131238
f01032e0:	e8 4c db ff ff       	call   f0100e31 <cprintf>
f01032e5:	83 c4 10             	add    $0x10,%esp
f01032e8:	eb 2b                	jmp    f0103315 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01032ea:	e8 8f a4 00 00       	call   f010d77e <isPageReplacmentAlgorithmModifiedCLOCK>
f01032ef:	85 c0                	test   %eax,%eax
f01032f1:	74 12                	je     f0103305 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01032f3:	83 ec 0c             	sub    $0xc,%esp
f01032f6:	68 5c 12 13 f0       	push   $0xf013125c
f01032fb:	e8 31 db ff ff       	call   f0100e31 <cprintf>
f0103300:	83 c4 10             	add    $0x10,%esp
f0103303:	eb 10                	jmp    f0103315 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0103305:	83 ec 0c             	sub    $0xc,%esp
f0103308:	68 8c 12 13 f0       	push   $0xf013128c
f010330d:	e8 1f db ff ff       	call   f0100e31 <cprintf>
f0103312:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103315:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010331a:	c9                   	leave  
f010331b:	c3                   	ret    

f010331c <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010331c:	55                   	push   %ebp
f010331d:	89 e5                	mov    %esp,%ebp
f010331f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0103322:	e8 b4 ef ff ff       	call   f01022db <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0103327:	83 ec 0c             	sub    $0xc,%esp
f010332a:	68 b8 12 13 f0       	push   $0xf01312b8
f010332f:	e8 fd da ff ff       	call   f0100e31 <cprintf>
f0103334:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103337:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010333c:	c9                   	leave  
f010333d:	c3                   	ret    

f010333e <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010333e:	55                   	push   %ebp
f010333f:	89 e5                	mov    %esp,%ebp
f0103341:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103344:	e8 a2 ef ff ff       	call   f01022eb <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103349:	83 ec 0c             	sub    $0xc,%esp
f010334c:	68 e8 12 13 f0       	push   $0xf01312e8
f0103351:	e8 db da ff ff       	call   f0100e31 <cprintf>
f0103356:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103359:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010335e:	c9                   	leave  
f010335f:	c3                   	ret    

f0103360 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103360:	55                   	push   %ebp
f0103361:	89 e5                	mov    %esp,%ebp
f0103363:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103366:	e8 90 ef ff ff       	call   f01022fb <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f010336b:	83 ec 0c             	sub    $0xc,%esp
f010336e:	68 18 13 13 f0       	push   $0xf0131318
f0103373:	e8 b9 da ff ff       	call   f0100e31 <cprintf>
f0103378:	83 c4 10             	add    $0x10,%esp
	return 0;
f010337b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103380:	c9                   	leave  
f0103381:	c3                   	ret    

f0103382 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103382:	55                   	push   %ebp
f0103383:	89 e5                	mov    %esp,%ebp
f0103385:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0103388:	e8 7e ef ff ff       	call   f010230b <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010338d:	83 ec 0c             	sub    $0xc,%esp
f0103390:	68 48 13 13 f0       	push   $0xf0131348
f0103395:	e8 97 da ff ff       	call   f0100e31 <cprintf>
f010339a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010339d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033a2:	c9                   	leave  
f01033a3:	c3                   	ret    

f01033a4 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01033a4:	55                   	push   %ebp
f01033a5:	89 e5                	mov    %esp,%ebp
f01033a7:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01033aa:	e8 6c ef ff ff       	call   f010231b <isUHeapPlacementStrategyFIRSTFIT>
f01033af:	84 c0                	test   %al,%al
f01033b1:	74 12                	je     f01033c5 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01033b3:	83 ec 0c             	sub    $0xc,%esp
f01033b6:	68 78 13 13 f0       	push   $0xf0131378
f01033bb:	e8 71 da ff ff       	call   f0100e31 <cprintf>
f01033c0:	83 c4 10             	add    $0x10,%esp
f01033c3:	eb 61                	jmp    f0103426 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01033c5:	e8 66 ef ff ff       	call   f0102330 <isUHeapPlacementStrategyBESTFIT>
f01033ca:	84 c0                	test   %al,%al
f01033cc:	74 12                	je     f01033e0 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01033ce:	83 ec 0c             	sub    $0xc,%esp
f01033d1:	68 a4 13 13 f0       	push   $0xf01313a4
f01033d6:	e8 56 da ff ff       	call   f0100e31 <cprintf>
f01033db:	83 c4 10             	add    $0x10,%esp
f01033de:	eb 46                	jmp    f0103426 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033e0:	e8 60 ef ff ff       	call   f0102345 <isUHeapPlacementStrategyNEXTFIT>
f01033e5:	84 c0                	test   %al,%al
f01033e7:	74 12                	je     f01033fb <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01033e9:	83 ec 0c             	sub    $0xc,%esp
f01033ec:	68 d0 13 13 f0       	push   $0xf01313d0
f01033f1:	e8 3b da ff ff       	call   f0100e31 <cprintf>
f01033f6:	83 c4 10             	add    $0x10,%esp
f01033f9:	eb 2b                	jmp    f0103426 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01033fb:	e8 5a ef ff ff       	call   f010235a <isUHeapPlacementStrategyWORSTFIT>
f0103400:	84 c0                	test   %al,%al
f0103402:	74 12                	je     f0103416 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103404:	83 ec 0c             	sub    $0xc,%esp
f0103407:	68 fc 13 13 f0       	push   $0xf01313fc
f010340c:	e8 20 da ff ff       	call   f0100e31 <cprintf>
f0103411:	83 c4 10             	add    $0x10,%esp
f0103414:	eb 10                	jmp    f0103426 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103416:	83 ec 0c             	sub    $0xc,%esp
f0103419:	68 28 14 13 f0       	push   $0xf0131428
f010341e:	e8 0e da ff ff       	call   f0100e31 <cprintf>
f0103423:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103426:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010342b:	c9                   	leave  
f010342c:	c3                   	ret    

f010342d <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010342d:	55                   	push   %ebp
f010342e:	89 e5                	mov    %esp,%ebp
f0103430:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103433:	e8 eb ed ff ff       	call   f0102223 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103438:	83 ec 0c             	sub    $0xc,%esp
f010343b:	68 54 14 13 f0       	push   $0xf0131454
f0103440:	e8 ec d9 ff ff       	call   f0100e31 <cprintf>
f0103445:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103448:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010344d:	c9                   	leave  
f010344e:	c3                   	ret    

f010344f <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010344f:	55                   	push   %ebp
f0103450:	89 e5                	mov    %esp,%ebp
f0103452:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103455:	e8 d9 ed ff ff       	call   f0102233 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010345a:	83 ec 0c             	sub    $0xc,%esp
f010345d:	68 54 14 13 f0       	push   $0xf0131454
f0103462:	e8 ca d9 ff ff       	call   f0100e31 <cprintf>
f0103467:	83 c4 10             	add    $0x10,%esp
	return 0;
f010346a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010346f:	c9                   	leave  
f0103470:	c3                   	ret    

f0103471 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103471:	55                   	push   %ebp
f0103472:	89 e5                	mov    %esp,%ebp
f0103474:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103477:	e8 c7 ed ff ff       	call   f0102243 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010347c:	83 ec 0c             	sub    $0xc,%esp
f010347f:	68 88 14 13 f0       	push   $0xf0131488
f0103484:	e8 a8 d9 ff ff       	call   f0100e31 <cprintf>
f0103489:	83 c4 10             	add    $0x10,%esp
	return 0;
f010348c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103491:	c9                   	leave  
f0103492:	c3                   	ret    

f0103493 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103493:	55                   	push   %ebp
f0103494:	89 e5                	mov    %esp,%ebp
f0103496:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0103499:	e8 b5 ed ff ff       	call   f0102253 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010349e:	83 ec 0c             	sub    $0xc,%esp
f01034a1:	68 b8 14 13 f0       	push   $0xf01314b8
f01034a6:	e8 86 d9 ff ff       	call   f0100e31 <cprintf>
f01034ab:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034b3:	c9                   	leave  
f01034b4:	c3                   	ret    

f01034b5 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01034b5:	55                   	push   %ebp
f01034b6:	89 e5                	mov    %esp,%ebp
f01034b8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01034bb:	e8 a3 ed ff ff       	call   f0102263 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01034c0:	83 ec 0c             	sub    $0xc,%esp
f01034c3:	68 e8 14 13 f0       	push   $0xf01314e8
f01034c8:	e8 64 d9 ff ff       	call   f0100e31 <cprintf>
f01034cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d5:	c9                   	leave  
f01034d6:	c3                   	ret    

f01034d7 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01034d7:	55                   	push   %ebp
f01034d8:	89 e5                	mov    %esp,%ebp
f01034da:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01034dd:	e8 91 ed ff ff       	call   f0102273 <isKHeapPlacementStrategyCONTALLOC>
f01034e2:	84 c0                	test   %al,%al
f01034e4:	74 12                	je     f01034f8 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01034e6:	83 ec 0c             	sub    $0xc,%esp
f01034e9:	68 1c 15 13 f0       	push   $0xf013151c
f01034ee:	e8 3e d9 ff ff       	call   f0100e31 <cprintf>
f01034f3:	83 c4 10             	add    $0x10,%esp
f01034f6:	eb 7c                	jmp    f0103574 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01034f8:	e8 8a ed ff ff       	call   f0102287 <isKHeapPlacementStrategyFIRSTFIT>
f01034fd:	84 c0                	test   %al,%al
f01034ff:	74 12                	je     f0103513 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0103501:	83 ec 0c             	sub    $0xc,%esp
f0103504:	68 58 15 13 f0       	push   $0xf0131558
f0103509:	e8 23 d9 ff ff       	call   f0100e31 <cprintf>
f010350e:	83 c4 10             	add    $0x10,%esp
f0103511:	eb 61                	jmp    f0103574 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103513:	e8 84 ed ff ff       	call   f010229c <isKHeapPlacementStrategyBESTFIT>
f0103518:	84 c0                	test   %al,%al
f010351a:	74 12                	je     f010352e <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010351c:	83 ec 0c             	sub    $0xc,%esp
f010351f:	68 88 15 13 f0       	push   $0xf0131588
f0103524:	e8 08 d9 ff ff       	call   f0100e31 <cprintf>
f0103529:	83 c4 10             	add    $0x10,%esp
f010352c:	eb 46                	jmp    f0103574 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010352e:	e8 7e ed ff ff       	call   f01022b1 <isKHeapPlacementStrategyNEXTFIT>
f0103533:	84 c0                	test   %al,%al
f0103535:	74 12                	je     f0103549 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103537:	83 ec 0c             	sub    $0xc,%esp
f010353a:	68 b4 15 13 f0       	push   $0xf01315b4
f010353f:	e8 ed d8 ff ff       	call   f0100e31 <cprintf>
f0103544:	83 c4 10             	add    $0x10,%esp
f0103547:	eb 2b                	jmp    f0103574 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103549:	e8 78 ed ff ff       	call   f01022c6 <isKHeapPlacementStrategyWORSTFIT>
f010354e:	84 c0                	test   %al,%al
f0103550:	74 12                	je     f0103564 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103552:	83 ec 0c             	sub    $0xc,%esp
f0103555:	68 e0 15 13 f0       	push   $0xf01315e0
f010355a:	e8 d2 d8 ff ff       	call   f0100e31 <cprintf>
f010355f:	83 c4 10             	add    $0x10,%esp
f0103562:	eb 10                	jmp    f0103574 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103564:	83 ec 0c             	sub    $0xc,%esp
f0103567:	68 10 16 13 f0       	push   $0xf0131610
f010356c:	e8 c0 d8 ff ff       	call   f0100e31 <cprintf>
f0103571:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103574:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103579:	c9                   	leave  
f010357a:	c3                   	ret    

f010357b <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f010357b:	55                   	push   %ebp
f010357c:	89 e5                	mov    %esp,%ebp
f010357e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103581:	e8 6f a2 00 00       	call   f010d7f5 <isBufferingEnabled>
f0103586:	84 c0                	test   %al,%al
f0103588:	75 12                	jne    f010359c <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010358a:	83 ec 0c             	sub    $0xc,%esp
f010358d:	68 40 16 13 f0       	push   $0xf0131640
f0103592:	e8 9a d8 ff ff       	call   f0100e31 <cprintf>
f0103597:	83 c4 10             	add    $0x10,%esp
f010359a:	eb 1d                	jmp    f01035b9 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f010359c:	83 ec 0c             	sub    $0xc,%esp
f010359f:	6a 00                	push   $0x0
f01035a1:	e8 29 a2 00 00       	call   f010d7cf <enableModifiedBuffer>
f01035a6:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01035a9:	83 ec 0c             	sub    $0xc,%esp
f01035ac:	68 7c 16 13 f0       	push   $0xf013167c
f01035b1:	e8 7b d8 ff ff       	call   f0100e31 <cprintf>
f01035b6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035be:	c9                   	leave  
f01035bf:	c3                   	ret    

f01035c0 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01035c0:	55                   	push   %ebp
f01035c1:	89 e5                	mov    %esp,%ebp
f01035c3:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01035c6:	e8 2a a2 00 00       	call   f010d7f5 <isBufferingEnabled>
f01035cb:	84 c0                	test   %al,%al
f01035cd:	75 12                	jne    f01035e1 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035cf:	83 ec 0c             	sub    $0xc,%esp
f01035d2:	68 40 16 13 f0       	push   $0xf0131640
f01035d7:	e8 55 d8 ff ff       	call   f0100e31 <cprintf>
f01035dc:	83 c4 10             	add    $0x10,%esp
f01035df:	eb 1d                	jmp    f01035fe <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035e1:	83 ec 0c             	sub    $0xc,%esp
f01035e4:	6a 01                	push   $0x1
f01035e6:	e8 e4 a1 00 00       	call   f010d7cf <enableModifiedBuffer>
f01035eb:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01035ee:	83 ec 0c             	sub    $0xc,%esp
f01035f1:	68 a0 16 13 f0       	push   $0xf01316a0
f01035f6:	e8 36 d8 ff ff       	call   f0100e31 <cprintf>
f01035fb:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103603:	c9                   	leave  
f0103604:	c3                   	ret    

f0103605 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103605:	55                   	push   %ebp
f0103606:	89 e5                	mov    %esp,%ebp
f0103608:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010360b:	83 ec 0c             	sub    $0xc,%esp
f010360e:	6a 00                	push   $0x0
f0103610:	e8 d2 a1 00 00       	call   f010d7e7 <enableBuffering>
f0103615:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0103618:	83 ec 0c             	sub    $0xc,%esp
f010361b:	6a 00                	push   $0x0
f010361d:	e8 ad a1 00 00       	call   f010d7cf <enableModifiedBuffer>
f0103622:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103625:	83 ec 0c             	sub    $0xc,%esp
f0103628:	68 c0 16 13 f0       	push   $0xf01316c0
f010362d:	e8 ff d7 ff ff       	call   f0100e31 <cprintf>
f0103632:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103635:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010363a:	c9                   	leave  
f010363b:	c3                   	ret    

f010363c <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010363c:	55                   	push   %ebp
f010363d:	89 e5                	mov    %esp,%ebp
f010363f:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103642:	83 ec 0c             	sub    $0xc,%esp
f0103645:	6a 01                	push   $0x1
f0103647:	e8 9b a1 00 00       	call   f010d7e7 <enableBuffering>
f010364c:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010364f:	83 ec 0c             	sub    $0xc,%esp
f0103652:	6a 01                	push   $0x1
f0103654:	e8 76 a1 00 00       	call   f010d7cf <enableModifiedBuffer>
f0103659:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010365c:	e8 ac a1 00 00       	call   f010d80d <getModifiedBufferLength>
f0103661:	85 c0                	test   %eax,%eax
f0103663:	75 59                	jne    f01036be <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103665:	83 ec 0c             	sub    $0xc,%esp
f0103668:	68 dc 16 13 f0       	push   $0xf01316dc
f010366d:	e8 bf d7 ff ff       	call   f0100e31 <cprintf>
f0103672:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103675:	83 ec 08             	sub    $0x8,%esp
f0103678:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010367b:	50                   	push   %eax
f010367c:	68 0c 17 13 f0       	push   $0xf013170c
f0103681:	e8 64 b5 02 00       	call   f012ebea <readline>
f0103686:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0103689:	83 ec 04             	sub    $0x4,%esp
f010368c:	6a 0a                	push   $0xa
f010368e:	6a 00                	push   $0x0
f0103690:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103693:	50                   	push   %eax
f0103694:	e8 b7 ba 02 00       	call   f012f150 <strtol>
f0103699:	83 c4 10             	add    $0x10,%esp
f010369c:	83 ec 0c             	sub    $0xc,%esp
f010369f:	50                   	push   %eax
f01036a0:	e8 5a a1 00 00       	call   f010d7ff <setModifiedBufferLength>
f01036a5:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036a8:	e8 60 a1 00 00       	call   f010d80d <getModifiedBufferLength>
f01036ad:	83 ec 08             	sub    $0x8,%esp
f01036b0:	50                   	push   %eax
f01036b1:	68 38 17 13 f0       	push   $0xf0131738
f01036b6:	e8 76 d7 ff ff       	call   f0100e31 <cprintf>
f01036bb:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01036be:	83 ec 0c             	sub    $0xc,%esp
f01036c1:	68 5d 17 13 f0       	push   $0xf013175d
f01036c6:	e8 66 d7 ff ff       	call   f0100e31 <cprintf>
f01036cb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01036ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036d3:	c9                   	leave  
f01036d4:	c3                   	ret    

f01036d5 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01036d5:	55                   	push   %ebp
f01036d6:	89 e5                	mov    %esp,%ebp
f01036d8:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01036db:	e8 15 a1 00 00       	call   f010d7f5 <isBufferingEnabled>
f01036e0:	84 c0                	test   %al,%al
f01036e2:	75 12                	jne    f01036f6 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01036e4:	83 ec 0c             	sub    $0xc,%esp
f01036e7:	68 78 17 13 f0       	push   $0xf0131778
f01036ec:	e8 40 d7 ff ff       	call   f0100e31 <cprintf>
f01036f1:	83 c4 10             	add    $0x10,%esp
f01036f4:	eb 19                	jmp    f010370f <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01036f6:	e8 e2 a0 00 00       	call   f010d7dd <isModifiedBufferEnabled>
f01036fb:	84 c0                	test   %al,%al
f01036fd:	75 10                	jne    f010370f <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01036ff:	83 ec 0c             	sub    $0xc,%esp
f0103702:	68 c8 17 13 f0       	push   $0xf01317c8
f0103707:	e8 25 d7 ff ff       	call   f0100e31 <cprintf>
f010370c:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010370f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103712:	83 c0 04             	add    $0x4,%eax
f0103715:	8b 00                	mov    (%eax),%eax
f0103717:	83 ec 04             	sub    $0x4,%esp
f010371a:	6a 0a                	push   $0xa
f010371c:	6a 00                	push   $0x0
f010371e:	50                   	push   %eax
f010371f:	e8 2c ba 02 00       	call   f012f150 <strtol>
f0103724:	83 c4 10             	add    $0x10,%esp
f0103727:	83 ec 0c             	sub    $0xc,%esp
f010372a:	50                   	push   %eax
f010372b:	e8 cf a0 00 00       	call   f010d7ff <setModifiedBufferLength>
f0103730:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103733:	e8 d5 a0 00 00       	call   f010d80d <getModifiedBufferLength>
f0103738:	83 ec 08             	sub    $0x8,%esp
f010373b:	50                   	push   %eax
f010373c:	68 38 17 13 f0       	push   $0xf0131738
f0103741:	e8 eb d6 ff ff       	call   f0100e31 <cprintf>
f0103746:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103749:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010374e:	c9                   	leave  
f010374f:	c3                   	ret    

f0103750 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103750:	55                   	push   %ebp
f0103751:	89 e5                	mov    %esp,%ebp
f0103753:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103756:	e8 9a a0 00 00       	call   f010d7f5 <isBufferingEnabled>
f010375b:	84 c0                	test   %al,%al
f010375d:	75 12                	jne    f0103771 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010375f:	83 ec 0c             	sub    $0xc,%esp
f0103762:	68 78 17 13 f0       	push   $0xf0131778
f0103767:	e8 c5 d6 ff ff       	call   f0100e31 <cprintf>
f010376c:	83 c4 10             	add    $0x10,%esp
f010376f:	eb 19                	jmp    f010378a <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103771:	e8 67 a0 00 00       	call   f010d7dd <isModifiedBufferEnabled>
f0103776:	84 c0                	test   %al,%al
f0103778:	75 10                	jne    f010378a <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010377a:	83 ec 0c             	sub    $0xc,%esp
f010377d:	68 c8 17 13 f0       	push   $0xf01317c8
f0103782:	e8 aa d6 ff ff       	call   f0100e31 <cprintf>
f0103787:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f010378a:	e8 7e a0 00 00       	call   f010d80d <getModifiedBufferLength>
f010378f:	83 ec 08             	sub    $0x8,%esp
f0103792:	50                   	push   %eax
f0103793:	68 0e 18 13 f0       	push   $0xf013180e
f0103798:	e8 94 d6 ff ff       	call   f0100e31 <cprintf>
f010379d:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037a5:	c9                   	leave  
f01037a6:	c3                   	ret    

f01037a7 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01037a7:	55                   	push   %ebp
f01037a8:	89 e5                	mov    %esp,%ebp
f01037aa:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01037ad:	83 ec 08             	sub    $0x8,%esp
f01037b0:	ff 75 0c             	pushl  0xc(%ebp)
f01037b3:	ff 75 08             	pushl  0x8(%ebp)
f01037b6:	e8 98 a4 00 00       	call   f010dc53 <tst_handler>
f01037bb:	83 c4 10             	add    $0x10,%esp
}
f01037be:	c9                   	leave  
f01037bf:	c3                   	ret    

f01037c0 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01037c0:	55                   	push   %ebp
f01037c1:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01037c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01037c6:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f01037cc:	29 d0                	sub    %edx,%eax
f01037ce:	c1 f8 02             	sar    $0x2,%eax
f01037d1:	89 c2                	mov    %eax,%edx
f01037d3:	89 d0                	mov    %edx,%eax
f01037d5:	c1 e0 03             	shl    $0x3,%eax
f01037d8:	01 d0                	add    %edx,%eax
f01037da:	c1 e0 03             	shl    $0x3,%eax
f01037dd:	01 d0                	add    %edx,%eax
f01037df:	c1 e0 03             	shl    $0x3,%eax
f01037e2:	01 d0                	add    %edx,%eax
f01037e4:	c1 e0 03             	shl    $0x3,%eax
f01037e7:	01 d0                	add    %edx,%eax
f01037e9:	89 c1                	mov    %eax,%ecx
f01037eb:	c1 e1 0f             	shl    $0xf,%ecx
f01037ee:	01 c8                	add    %ecx,%eax
f01037f0:	c1 e0 03             	shl    $0x3,%eax
f01037f3:	01 d0                	add    %edx,%eax
f01037f5:	f7 d8                	neg    %eax
}
f01037f7:	5d                   	pop    %ebp
f01037f8:	c3                   	ret    

f01037f9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01037f9:	55                   	push   %ebp
f01037fa:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01037fc:	ff 75 08             	pushl  0x8(%ebp)
f01037ff:	e8 bc ff ff ff       	call   f01037c0 <to_frame_number>
f0103804:	83 c4 04             	add    $0x4,%esp
f0103807:	c1 e0 0c             	shl    $0xc,%eax
}
f010380a:	c9                   	leave  
f010380b:	c3                   	ret    

f010380c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010380c:	55                   	push   %ebp
f010380d:	89 e5                	mov    %esp,%ebp
f010380f:	53                   	push   %ebx
f0103810:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103813:	8b 45 08             	mov    0x8(%ebp),%eax
f0103816:	c1 e8 0c             	shr    $0xc,%eax
f0103819:	89 c2                	mov    %eax,%edx
f010381b:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0103820:	39 c2                	cmp    %eax,%edx
f0103822:	72 14                	jb     f0103838 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103824:	83 ec 04             	sub    $0x4,%esp
f0103827:	68 2c 18 13 f0       	push   $0xf013182c
f010382c:	6a 55                	push   $0x55
f010382e:	68 54 18 13 f0       	push   $0xf0131854
f0103833:	e8 78 c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0103838:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f010383e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103841:	c1 e8 0c             	shr    $0xc,%eax
f0103844:	89 c2                	mov    %eax,%edx
f0103846:	89 d0                	mov    %edx,%eax
f0103848:	01 c0                	add    %eax,%eax
f010384a:	01 d0                	add    %edx,%eax
f010384c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103853:	01 d8                	add    %ebx,%eax
f0103855:	01 d0                	add    %edx,%eax
f0103857:	01 c8                	add    %ecx,%eax
}
f0103859:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010385c:	c9                   	leave  
f010385d:	c3                   	ret    

f010385e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010385e:	55                   	push   %ebp
f010385f:	89 e5                	mov    %esp,%ebp
f0103861:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103864:	8b 45 08             	mov    0x8(%ebp),%eax
f0103867:	05 00 14 00 00       	add    $0x1400,%eax
f010386c:	c1 e0 03             	shl    $0x3,%eax
f010386f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103872:	83 ec 04             	sub    $0x4,%esp
f0103875:	6a 08                	push   $0x8
f0103877:	ff 75 0c             	pushl  0xc(%ebp)
f010387a:	ff 75 f4             	pushl  -0xc(%ebp)
f010387d:	e8 29 bd 02 00       	call   f012f5ab <ide_read>
f0103882:	83 c4 10             	add    $0x10,%esp
f0103885:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103888:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010388b:	c9                   	leave  
f010388c:	c3                   	ret    

f010388d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010388d:	55                   	push   %ebp
f010388e:	89 e5                	mov    %esp,%ebp
f0103890:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103893:	8b 45 08             	mov    0x8(%ebp),%eax
f0103896:	05 00 14 00 00       	add    $0x1400,%eax
f010389b:	c1 e0 03             	shl    $0x3,%eax
f010389e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01038a1:	83 ec 04             	sub    $0x4,%esp
f01038a4:	6a 08                	push   $0x8
f01038a6:	ff 75 0c             	pushl  0xc(%ebp)
f01038a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01038ac:	e8 3a be 02 00       	call   f012f6eb <ide_write>
f01038b1:	83 c4 10             	add    $0x10,%esp
f01038b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01038b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038bb:	74 14                	je     f01038d1 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01038bd:	83 ec 04             	sub    $0x4,%esp
f01038c0:	68 76 18 13 f0       	push   $0xf0131876
f01038c5:	6a 2e                	push   $0x2e
f01038c7:	68 8d 18 13 f0       	push   $0xf013188d
f01038cc:	e8 df c8 ff ff       	call   f01001b0 <_panic>
	return success;
f01038d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038d4:	c9                   	leave  
f01038d5:	c3                   	ret    

f01038d6 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01038d6:	55                   	push   %ebp
f01038d7:	89 e5                	mov    %esp,%ebp
f01038d9:	56                   	push   %esi
f01038da:	53                   	push   %ebx
f01038db:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01038de:	c7 05 64 a3 2d f0 00 	movl   $0x0,0xf02da364
f01038e5:	00 00 00 
f01038e8:	c7 05 68 a3 2d f0 00 	movl   $0x0,0xf02da368
f01038ef:	00 00 00 
f01038f2:	c7 05 70 a3 2d f0 00 	movl   $0x0,0xf02da370
f01038f9:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01038fc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103903:	e9 20 01 00 00       	jmp    f0103a28 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103908:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f010390e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103911:	89 d0                	mov    %edx,%eax
f0103913:	01 c0                	add    %eax,%eax
f0103915:	01 d0                	add    %edx,%eax
f0103917:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010391e:	01 d8                	add    %ebx,%eax
f0103920:	01 d0                	add    %edx,%eax
f0103922:	01 c8                	add    %ecx,%eax
f0103924:	83 ec 0c             	sub    $0xc,%esp
f0103927:	50                   	push   %eax
f0103928:	e8 bf 39 00 00       	call   f01072ec <initialize_frame_info>
f010392d:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103930:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103936:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103939:	89 d0                	mov    %edx,%eax
f010393b:	01 c0                	add    %eax,%eax
f010393d:	01 d0                	add    %edx,%eax
f010393f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103946:	01 d8                	add    %ebx,%eax
f0103948:	01 d0                	add    %edx,%eax
f010394a:	01 c8                	add    %ecx,%eax
f010394c:	85 c0                	test   %eax,%eax
f010394e:	75 14                	jne    f0103964 <initialize_disk_page_file+0x8e>
f0103950:	83 ec 04             	sub    $0x4,%esp
f0103953:	68 ac 18 13 f0       	push   $0xf01318ac
f0103958:	6a 59                	push   $0x59
f010395a:	68 8d 18 13 f0       	push   $0xf013188d
f010395f:	e8 4c c8 ff ff       	call   f01001b0 <_panic>
f0103964:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f010396a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010396d:	89 d0                	mov    %edx,%eax
f010396f:	01 c0                	add    %eax,%eax
f0103971:	01 d0                	add    %edx,%eax
f0103973:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010397a:	01 d8                	add    %ebx,%eax
f010397c:	01 d0                	add    %edx,%eax
f010397e:	01 c8                	add    %ecx,%eax
f0103980:	8b 15 64 a3 2d f0    	mov    0xf02da364,%edx
f0103986:	89 10                	mov    %edx,(%eax)
f0103988:	8b 00                	mov    (%eax),%eax
f010398a:	85 c0                	test   %eax,%eax
f010398c:	74 27                	je     f01039b5 <initialize_disk_page_file+0xdf>
f010398e:	8b 0d 64 a3 2d f0    	mov    0xf02da364,%ecx
f0103994:	8b 1d 30 3b 25 f0    	mov    0xf0253b30,%ebx
f010399a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010399d:	89 d0                	mov    %edx,%eax
f010399f:	01 c0                	add    %eax,%eax
f01039a1:	01 d0                	add    %edx,%eax
f01039a3:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01039aa:	01 f0                	add    %esi,%eax
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	01 d8                	add    %ebx,%eax
f01039b0:	89 41 04             	mov    %eax,0x4(%ecx)
f01039b3:	eb 21                	jmp    f01039d6 <initialize_disk_page_file+0x100>
f01039b5:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f01039bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039be:	89 d0                	mov    %edx,%eax
f01039c0:	01 c0                	add    %eax,%eax
f01039c2:	01 d0                	add    %edx,%eax
f01039c4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039cb:	01 d8                	add    %ebx,%eax
f01039cd:	01 d0                	add    %edx,%eax
f01039cf:	01 c8                	add    %ecx,%eax
f01039d1:	a3 68 a3 2d f0       	mov    %eax,0xf02da368
f01039d6:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f01039dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039df:	89 d0                	mov    %edx,%eax
f01039e1:	01 c0                	add    %eax,%eax
f01039e3:	01 d0                	add    %edx,%eax
f01039e5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039ec:	01 d8                	add    %ebx,%eax
f01039ee:	01 d0                	add    %edx,%eax
f01039f0:	01 c8                	add    %ecx,%eax
f01039f2:	a3 64 a3 2d f0       	mov    %eax,0xf02da364
f01039f7:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f01039fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a00:	89 d0                	mov    %edx,%eax
f0103a02:	01 c0                	add    %eax,%eax
f0103a04:	01 d0                	add    %edx,%eax
f0103a06:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a0d:	01 d8                	add    %ebx,%eax
f0103a0f:	01 d0                	add    %edx,%eax
f0103a11:	01 c8                	add    %ecx,%eax
f0103a13:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a1a:	a1 70 a3 2d f0       	mov    0xf02da370,%eax
f0103a1f:	40                   	inc    %eax
f0103a20:	a3 70 a3 2d f0       	mov    %eax,0xf02da370
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103a25:	ff 45 f4             	incl   -0xc(%ebp)
f0103a28:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103a2f:	0f 8e d3 fe ff ff    	jle    f0103908 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103a35:	90                   	nop
f0103a36:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103a39:	5b                   	pop    %ebx
f0103a3a:	5e                   	pop    %esi
f0103a3b:	5d                   	pop    %ebp
f0103a3c:	c3                   	ret    

f0103a3d <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a3d:	55                   	push   %ebp
f0103a3e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a43:	8b 15 30 3b 25 f0    	mov    0xf0253b30,%edx
f0103a49:	29 d0                	sub    %edx,%eax
f0103a4b:	c1 f8 02             	sar    $0x2,%eax
f0103a4e:	89 c2                	mov    %eax,%edx
f0103a50:	89 d0                	mov    %edx,%eax
f0103a52:	c1 e0 03             	shl    $0x3,%eax
f0103a55:	01 d0                	add    %edx,%eax
f0103a57:	c1 e0 03             	shl    $0x3,%eax
f0103a5a:	01 d0                	add    %edx,%eax
f0103a5c:	c1 e0 03             	shl    $0x3,%eax
f0103a5f:	01 d0                	add    %edx,%eax
f0103a61:	c1 e0 03             	shl    $0x3,%eax
f0103a64:	01 d0                	add    %edx,%eax
f0103a66:	89 c1                	mov    %eax,%ecx
f0103a68:	c1 e1 0f             	shl    $0xf,%ecx
f0103a6b:	01 c8                	add    %ecx,%eax
f0103a6d:	c1 e0 03             	shl    $0x3,%eax
f0103a70:	01 d0                	add    %edx,%eax
f0103a72:	f7 d8                	neg    %eax
}
f0103a74:	5d                   	pop    %ebp
f0103a75:	c3                   	ret    

f0103a76 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a76:	55                   	push   %ebp
f0103a77:	89 e5                	mov    %esp,%ebp
f0103a79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a7c:	a1 64 a3 2d f0       	mov    0xf02da364,%eax
f0103a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103a84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103a88:	75 0a                	jne    f0103a94 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103a8a:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103a8f:	e9 a7 00 00 00       	jmp    f0103b3b <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103a94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103a98:	75 14                	jne    f0103aae <allocate_disk_frame+0x38>
f0103a9a:	83 ec 04             	sub    $0x4,%esp
f0103a9d:	68 cf 18 13 f0       	push   $0xf01318cf
f0103aa2:	6a 78                	push   $0x78
f0103aa4:	68 8d 18 13 f0       	push   $0xf013188d
f0103aa9:	e8 02 c7 ff ff       	call   f01001b0 <_panic>
f0103aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ab1:	8b 00                	mov    (%eax),%eax
f0103ab3:	85 c0                	test   %eax,%eax
f0103ab5:	74 10                	je     f0103ac7 <allocate_disk_frame+0x51>
f0103ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103aba:	8b 00                	mov    (%eax),%eax
f0103abc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103abf:	8b 52 04             	mov    0x4(%edx),%edx
f0103ac2:	89 50 04             	mov    %edx,0x4(%eax)
f0103ac5:	eb 0b                	jmp    f0103ad2 <allocate_disk_frame+0x5c>
f0103ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103aca:	8b 40 04             	mov    0x4(%eax),%eax
f0103acd:	a3 68 a3 2d f0       	mov    %eax,0xf02da368
f0103ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ad5:	8b 40 04             	mov    0x4(%eax),%eax
f0103ad8:	85 c0                	test   %eax,%eax
f0103ada:	74 0f                	je     f0103aeb <allocate_disk_frame+0x75>
f0103adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103adf:	8b 40 04             	mov    0x4(%eax),%eax
f0103ae2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ae5:	8b 12                	mov    (%edx),%edx
f0103ae7:	89 10                	mov    %edx,(%eax)
f0103ae9:	eb 0a                	jmp    f0103af5 <allocate_disk_frame+0x7f>
f0103aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103aee:	8b 00                	mov    (%eax),%eax
f0103af0:	a3 64 a3 2d f0       	mov    %eax,0xf02da364
f0103af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103af8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b01:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b08:	a1 70 a3 2d f0       	mov    0xf02da370,%eax
f0103b0d:	48                   	dec    %eax
f0103b0e:	a3 70 a3 2d f0       	mov    %eax,0xf02da370
	initialize_frame_info(ptr_frame_info);
f0103b13:	83 ec 0c             	sub    $0xc,%esp
f0103b16:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b19:	e8 ce 37 00 00       	call   f01072ec <initialize_frame_info>
f0103b1e:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103b21:	83 ec 0c             	sub    $0xc,%esp
f0103b24:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b27:	e8 11 ff ff ff       	call   f0103a3d <to_disk_frame_number>
f0103b2c:	83 c4 10             	add    $0x10,%esp
f0103b2f:	89 c2                	mov    %eax,%edx
f0103b31:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b34:	89 10                	mov    %edx,(%eax)
	return 0;
f0103b36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103b3b:	c9                   	leave  
f0103b3c:	c3                   	ret    

f0103b3d <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103b3d:	55                   	push   %ebp
f0103b3e:	89 e5                	mov    %esp,%ebp
f0103b40:	56                   	push   %esi
f0103b41:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b42:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b46:	0f 84 fa 00 00 00    	je     f0103c46 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b4c:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103b52:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b55:	89 d0                	mov    %edx,%eax
f0103b57:	01 c0                	add    %eax,%eax
f0103b59:	01 d0                	add    %edx,%eax
f0103b5b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b62:	01 d8                	add    %ebx,%eax
f0103b64:	01 d0                	add    %edx,%eax
f0103b66:	01 c8                	add    %ecx,%eax
f0103b68:	85 c0                	test   %eax,%eax
f0103b6a:	75 17                	jne    f0103b83 <free_disk_frame+0x46>
f0103b6c:	83 ec 04             	sub    $0x4,%esp
f0103b6f:	68 ac 18 13 f0       	push   $0xf01318ac
f0103b74:	68 85 00 00 00       	push   $0x85
f0103b79:	68 8d 18 13 f0       	push   $0xf013188d
f0103b7e:	e8 2d c6 ff ff       	call   f01001b0 <_panic>
f0103b83:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103b89:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b8c:	89 d0                	mov    %edx,%eax
f0103b8e:	01 c0                	add    %eax,%eax
f0103b90:	01 d0                	add    %edx,%eax
f0103b92:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b99:	01 d8                	add    %ebx,%eax
f0103b9b:	01 d0                	add    %edx,%eax
f0103b9d:	01 c8                	add    %ecx,%eax
f0103b9f:	8b 15 64 a3 2d f0    	mov    0xf02da364,%edx
f0103ba5:	89 10                	mov    %edx,(%eax)
f0103ba7:	8b 00                	mov    (%eax),%eax
f0103ba9:	85 c0                	test   %eax,%eax
f0103bab:	74 27                	je     f0103bd4 <free_disk_frame+0x97>
f0103bad:	8b 0d 64 a3 2d f0    	mov    0xf02da364,%ecx
f0103bb3:	8b 1d 30 3b 25 f0    	mov    0xf0253b30,%ebx
f0103bb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bbc:	89 d0                	mov    %edx,%eax
f0103bbe:	01 c0                	add    %eax,%eax
f0103bc0:	01 d0                	add    %edx,%eax
f0103bc2:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103bc9:	01 f0                	add    %esi,%eax
f0103bcb:	01 d0                	add    %edx,%eax
f0103bcd:	01 d8                	add    %ebx,%eax
f0103bcf:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bd2:	eb 21                	jmp    f0103bf5 <free_disk_frame+0xb8>
f0103bd4:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bdd:	89 d0                	mov    %edx,%eax
f0103bdf:	01 c0                	add    %eax,%eax
f0103be1:	01 d0                	add    %edx,%eax
f0103be3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bea:	01 d8                	add    %ebx,%eax
f0103bec:	01 d0                	add    %edx,%eax
f0103bee:	01 c8                	add    %ecx,%eax
f0103bf0:	a3 68 a3 2d f0       	mov    %eax,0xf02da368
f0103bf5:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103bfb:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bfe:	89 d0                	mov    %edx,%eax
f0103c00:	01 c0                	add    %eax,%eax
f0103c02:	01 d0                	add    %edx,%eax
f0103c04:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c0b:	01 d8                	add    %ebx,%eax
f0103c0d:	01 d0                	add    %edx,%eax
f0103c0f:	01 c8                	add    %ecx,%eax
f0103c11:	a3 64 a3 2d f0       	mov    %eax,0xf02da364
f0103c16:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103c1c:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c1f:	89 d0                	mov    %edx,%eax
f0103c21:	01 c0                	add    %eax,%eax
f0103c23:	01 d0                	add    %edx,%eax
f0103c25:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c2c:	01 d8                	add    %ebx,%eax
f0103c2e:	01 d0                	add    %edx,%eax
f0103c30:	01 c8                	add    %ecx,%eax
f0103c32:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c39:	a1 70 a3 2d f0       	mov    0xf02da370,%eax
f0103c3e:	40                   	inc    %eax
f0103c3f:	a3 70 a3 2d f0       	mov    %eax,0xf02da370
f0103c44:	eb 01                	jmp    f0103c47 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c46:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c47:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c4a:	5b                   	pop    %ebx
f0103c4b:	5e                   	pop    %esi
f0103c4c:	5d                   	pop    %ebp
f0103c4d:	c3                   	ret    

f0103c4e <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c4e:	55                   	push   %ebp
f0103c4f:	89 e5                	mov    %esp,%ebp
f0103c51:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c57:	c1 e8 16             	shr    $0x16,%eax
f0103c5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c64:	01 d0                	add    %edx,%eax
f0103c66:	8b 00                	mov    (%eax),%eax
f0103c68:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c73:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c79:	c1 e8 0c             	shr    $0xc,%eax
f0103c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c7f:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0103c84:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103c87:	72 17                	jb     f0103ca0 <get_disk_page_table+0x52>
f0103c89:	ff 75 f0             	pushl  -0x10(%ebp)
f0103c8c:	68 f0 18 13 f0       	push   $0xf01318f0
f0103c91:	68 92 00 00 00       	push   $0x92
f0103c96:	68 8d 18 13 f0       	push   $0xf013188d
f0103c9b:	e8 10 c5 ff ff       	call   f01001b0 <_panic>
f0103ca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ca3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103ca8:	89 c2                	mov    %eax,%edx
f0103caa:	8b 45 14             	mov    0x14(%ebp),%eax
f0103cad:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103caf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cb3:	0f 85 b7 00 00 00    	jne    f0103d70 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103cb9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103cbd:	0f 84 9d 00 00 00    	je     f0103d60 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103cc3:	83 ec 0c             	sub    $0xc,%esp
f0103cc6:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103cc9:	50                   	push   %eax
f0103cca:	e8 38 36 00 00       	call   f0107307 <allocate_frame>
f0103ccf:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103cd2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103cd5:	83 ec 0c             	sub    $0xc,%esp
f0103cd8:	50                   	push   %eax
f0103cd9:	e8 1b fb ff ff       	call   f01037f9 <to_physical_address>
f0103cde:	83 c4 10             	add    $0x10,%esp
f0103ce1:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103ce4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ce7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103cea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103ced:	c1 e8 0c             	shr    $0xc,%eax
f0103cf0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103cf3:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0103cf8:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103cfb:	72 17                	jb     f0103d14 <get_disk_page_table+0xc6>
f0103cfd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103d00:	68 f0 18 13 f0       	push   $0xf01318f0
f0103d05:	68 ae 00 00 00       	push   $0xae
f0103d0a:	68 8d 18 13 f0       	push   $0xf013188d
f0103d0f:	e8 9c c4 ff ff       	call   f01001b0 <_panic>
f0103d14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d17:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d1c:	89 c2                	mov    %eax,%edx
f0103d1e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d21:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103d23:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103d26:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d2f:	c1 e8 16             	shr    $0x16,%eax
f0103d32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d3c:	01 d0                	add    %edx,%eax
f0103d3e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d41:	83 ca 01             	or     $0x1,%edx
f0103d44:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d46:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d49:	8b 00                	mov    (%eax),%eax
f0103d4b:	83 ec 04             	sub    $0x4,%esp
f0103d4e:	68 00 10 00 00       	push   $0x1000
f0103d53:	6a 00                	push   $0x0
f0103d55:	50                   	push   %eax
f0103d56:	e8 83 b2 02 00       	call   f012efde <memset>
f0103d5b:	83 c4 10             	add    $0x10,%esp
f0103d5e:	eb 10                	jmp    f0103d70 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d60:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d63:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d69:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d6e:	eb 05                	jmp    f0103d75 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d70:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d75:	c9                   	leave  
f0103d76:	c3                   	ret    

f0103d77 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d77:	55                   	push   %ebp
f0103d78:	89 e5                	mov    %esp,%ebp
f0103d7a:	83 ec 28             	sub    $0x28,%esp
f0103d7d:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d80:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103d83:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103d87:	74 75                	je     f0103dfe <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103d89:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d93:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103d98:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0103da3:	f7 75 f4             	divl   -0xc(%ebp)
f0103da6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103da9:	29 d0                	sub    %edx,%eax
f0103dab:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dae:	73 32                	jae    f0103de2 <pf_add_empty_env_page+0x6b>
f0103db0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103db3:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103db9:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dbe:	29 d0                	sub    %edx,%eax
f0103dc0:	c1 e0 0c             	shl    $0xc,%eax
f0103dc3:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103dc8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dcb:	76 15                	jbe    f0103de2 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103dcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd0:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103dd6:	8d 50 01             	lea    0x1(%eax),%edx
f0103dd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ddc:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103de2:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f0103de7:	83 ec 04             	sub    $0x4,%esp
f0103dea:	50                   	push   %eax
f0103deb:	ff 75 0c             	pushl  0xc(%ebp)
f0103dee:	ff 75 08             	pushl  0x8(%ebp)
f0103df1:	e8 b7 00 00 00       	call   f0103ead <pf_add_env_page>
f0103df6:	83 c4 10             	add    $0x10,%esp
f0103df9:	e9 ad 00 00 00       	jmp    f0103eab <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dfe:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e05:	76 19                	jbe    f0103e20 <pf_add_empty_env_page+0xa9>
f0103e07:	68 20 19 13 f0       	push   $0xf0131920
f0103e0c:	68 46 19 13 f0       	push   $0xf0131946
f0103e11:	68 d1 00 00 00       	push   $0xd1
f0103e16:	68 8d 18 13 f0       	push   $0xf013188d
f0103e1b:	e8 90 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e23:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e28:	83 ec 08             	sub    $0x8,%esp
f0103e2b:	50                   	push   %eax
f0103e2c:	ff 75 08             	pushl  0x8(%ebp)
f0103e2f:	e8 86 06 00 00       	call   f01044ba <get_disk_page_directory>
f0103e34:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103e37:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e3a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e40:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e43:	52                   	push   %edx
f0103e44:	6a 01                	push   $0x1
f0103e46:	ff 75 0c             	pushl  0xc(%ebp)
f0103e49:	50                   	push   %eax
f0103e4a:	e8 ff fd ff ff       	call   f0103c4e <get_disk_page_table>
f0103e4f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e58:	c1 ea 0c             	shr    $0xc,%edx
f0103e5b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e61:	c1 e2 02             	shl    $0x2,%edx
f0103e64:	01 d0                	add    %edx,%eax
f0103e66:	8b 00                	mov    (%eax),%eax
f0103e68:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e6e:	85 c0                	test   %eax,%eax
f0103e70:	75 34                	jne    f0103ea6 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e72:	83 ec 0c             	sub    $0xc,%esp
f0103e75:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e78:	50                   	push   %eax
f0103e79:	e8 f8 fb ff ff       	call   f0103a76 <allocate_disk_frame>
f0103e7e:	83 c4 10             	add    $0x10,%esp
f0103e81:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e84:	75 07                	jne    f0103e8d <pf_add_empty_env_page+0x116>
f0103e86:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e8b:	eb 1e                	jmp    f0103eab <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103e8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e90:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e93:	c1 ea 0c             	shr    $0xc,%edx
f0103e96:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e9c:	c1 e2 02             	shl    $0x2,%edx
f0103e9f:	01 c2                	add    %eax,%edx
f0103ea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ea4:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103ea6:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103eab:	c9                   	leave  
f0103eac:	c3                   	ret    

f0103ead <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103ead:	55                   	push   %ebp
f0103eae:	89 e5                	mov    %esp,%ebp
f0103eb0:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103eb3:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103eba:	76 19                	jbe    f0103ed5 <pf_add_env_page+0x28>
f0103ebc:	68 20 19 13 f0       	push   $0xf0131920
f0103ec1:	68 46 19 13 f0       	push   $0xf0131946
f0103ec6:	68 e6 00 00 00       	push   $0xe6
f0103ecb:	68 8d 18 13 f0       	push   $0xf013188d
f0103ed0:	e8 db c2 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103ed5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ed8:	05 a8 00 00 00       	add    $0xa8,%eax
f0103edd:	83 ec 08             	sub    $0x8,%esp
f0103ee0:	50                   	push   %eax
f0103ee1:	ff 75 08             	pushl  0x8(%ebp)
f0103ee4:	e8 d1 05 00 00       	call   f01044ba <get_disk_page_directory>
f0103ee9:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eef:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103ef5:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103ef8:	52                   	push   %edx
f0103ef9:	6a 01                	push   $0x1
f0103efb:	ff 75 0c             	pushl  0xc(%ebp)
f0103efe:	50                   	push   %eax
f0103eff:	e8 4a fd ff ff       	call   f0103c4e <get_disk_page_table>
f0103f04:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f0a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0d:	c1 ea 0c             	shr    $0xc,%edx
f0103f10:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f16:	c1 e2 02             	shl    $0x2,%edx
f0103f19:	01 d0                	add    %edx,%eax
f0103f1b:	8b 00                	mov    (%eax),%eax
f0103f1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103f20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f23:	85 c0                	test   %eax,%eax
f0103f25:	75 34                	jne    f0103f5b <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f27:	83 ec 0c             	sub    $0xc,%esp
f0103f2a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103f2d:	50                   	push   %eax
f0103f2e:	e8 43 fb ff ff       	call   f0103a76 <allocate_disk_frame>
f0103f33:	83 c4 10             	add    $0x10,%esp
f0103f36:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f39:	75 07                	jne    f0103f42 <pf_add_env_page+0x95>
f0103f3b:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f40:	eb 31                	jmp    f0103f73 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f45:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f48:	c1 ea 0c             	shr    $0xc,%edx
f0103f4b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f51:	c1 e2 02             	shl    $0x2,%edx
f0103f54:	01 c2                	add    %eax,%edx
f0103f56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f59:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f5e:	83 ec 08             	sub    $0x8,%esp
f0103f61:	ff 75 10             	pushl  0x10(%ebp)
f0103f64:	50                   	push   %eax
f0103f65:	e8 23 f9 ff ff       	call   f010388d <write_disk_page>
f0103f6a:	83 c4 10             	add    $0x10,%esp
f0103f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f73:	c9                   	leave  
f0103f74:	c3                   	ret    

f0103f75 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f75:	55                   	push   %ebp
f0103f76:	89 e5                	mov    %esp,%ebp
f0103f78:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f7b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103f82:	76 19                	jbe    f0103f9d <pf_update_env_page+0x28>
f0103f84:	68 20 19 13 f0       	push   $0xf0131920
f0103f89:	68 46 19 13 f0       	push   $0xf0131946
f0103f8e:	68 08 01 00 00       	push   $0x108
f0103f93:	68 8d 18 13 f0       	push   $0xf013188d
f0103f98:	e8 13 c2 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103f9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa0:	05 a8 00 00 00       	add    $0xa8,%eax
f0103fa5:	83 ec 08             	sub    $0x8,%esp
f0103fa8:	50                   	push   %eax
f0103fa9:	ff 75 08             	pushl  0x8(%ebp)
f0103fac:	e8 09 05 00 00       	call   f01044ba <get_disk_page_directory>
f0103fb1:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103fb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103fbd:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103fc0:	52                   	push   %edx
f0103fc1:	6a 00                	push   $0x0
f0103fc3:	ff 75 0c             	pushl  0xc(%ebp)
f0103fc6:	50                   	push   %eax
f0103fc7:	e8 82 fc ff ff       	call   f0103c4e <get_disk_page_table>
f0103fcc:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103fcf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103fd2:	85 c0                	test   %eax,%eax
f0103fd4:	74 29                	je     f0103fff <pf_update_env_page+0x8a>
f0103fd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103fd9:	85 c0                	test   %eax,%eax
f0103fdb:	0f 84 46 01 00 00    	je     f0104127 <pf_update_env_page+0x1b2>
f0103fe1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103fe4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103fe7:	c1 ea 0c             	shr    $0xc,%edx
f0103fea:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ff0:	c1 e2 02             	shl    $0x2,%edx
f0103ff3:	01 d0                	add    %edx,%eax
f0103ff5:	8b 00                	mov    (%eax),%eax
f0103ff7:	85 c0                	test   %eax,%eax
f0103ff9:	0f 85 28 01 00 00    	jne    f0104127 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f0103fff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104002:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104005:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104008:	85 c0                	test   %eax,%eax
f010400a:	79 09                	jns    f0104015 <pf_update_env_page+0xa0>
f010400c:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0104013:	76 38                	jbe    f010404d <pf_update_env_page+0xd8>
f0104015:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010401c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010401f:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0104024:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104027:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010402a:	ba 00 00 00 00       	mov    $0x0,%edx
f010402f:	f7 75 f0             	divl   -0x10(%ebp)
f0104032:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104035:	29 d0                	sub    %edx,%eax
f0104037:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010403a:	0f 87 d0 00 00 00    	ja     f0104110 <pf_update_env_page+0x19b>
f0104040:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104047:	0f 87 c3 00 00 00    	ja     f0104110 <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010404d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104050:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104056:	83 ec 04             	sub    $0x4,%esp
f0104059:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010405c:	52                   	push   %edx
f010405d:	ff 75 0c             	pushl  0xc(%ebp)
f0104060:	50                   	push   %eax
f0104061:	e8 fb 36 00 00       	call   f0107761 <get_frame_info>
f0104066:	83 c4 10             	add    $0x10,%esp
f0104069:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010406c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010406f:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104072:	75 52                	jne    f01040c6 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104077:	83 ec 04             	sub    $0x4,%esp
f010407a:	50                   	push   %eax
f010407b:	ff 75 f4             	pushl  -0xc(%ebp)
f010407e:	ff 75 08             	pushl  0x8(%ebp)
f0104081:	e8 27 fe ff ff       	call   f0103ead <pf_add_env_page>
f0104086:	83 c4 10             	add    $0x10,%esp
f0104089:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010408c:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0104090:	75 17                	jne    f01040a9 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0104092:	83 ec 04             	sub    $0x4,%esp
f0104095:	68 5c 19 13 f0       	push   $0xf013195c
f010409a:	68 1d 01 00 00       	push   $0x11d
f010409f:	68 8d 18 13 f0       	push   $0xf013188d
f01040a4:	e8 07 c1 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ac:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040b2:	8d 50 01             	lea    0x1(%eax),%edx
f01040b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040b8:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f01040be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040c1:	e9 02 01 00 00       	jmp    f01041c8 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01040c6:	83 ec 04             	sub    $0x4,%esp
f01040c9:	6a 00                	push   $0x0
f01040cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01040ce:	ff 75 08             	pushl  0x8(%ebp)
f01040d1:	e8 a1 fc ff ff       	call   f0103d77 <pf_add_empty_env_page>
f01040d6:	83 c4 10             	add    $0x10,%esp
f01040d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040dc:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040e0:	75 17                	jne    f01040f9 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01040e2:	83 ec 04             	sub    $0x4,%esp
f01040e5:	68 88 19 13 f0       	push   $0xf0131988
f01040ea:	68 28 01 00 00       	push   $0x128
f01040ef:	68 8d 18 13 f0       	push   $0xf013188d
f01040f4:	e8 b7 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fc:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104102:	8d 50 01             	lea    0x1(%eax),%edx
f0104105:	8b 45 08             	mov    0x8(%ebp),%eax
f0104108:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f010410e:	eb 17                	jmp    f0104127 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0104110:	83 ec 04             	sub    $0x4,%esp
f0104113:	68 d4 19 13 f0       	push   $0xf01319d4
f0104118:	68 2f 01 00 00       	push   $0x12f
f010411d:	68 8d 18 13 f0       	push   $0xf013188d
f0104122:	e8 89 c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104127:	8b 45 08             	mov    0x8(%ebp),%eax
f010412a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104130:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0104133:	52                   	push   %edx
f0104134:	6a 00                	push   $0x0
f0104136:	ff 75 0c             	pushl  0xc(%ebp)
f0104139:	50                   	push   %eax
f010413a:	e8 0f fb ff ff       	call   f0103c4e <get_disk_page_table>
f010413f:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104142:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104145:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104148:	c1 ea 0c             	shr    $0xc,%edx
f010414b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104151:	c1 e2 02             	shl    $0x2,%edx
f0104154:	01 d0                	add    %edx,%eax
f0104156:	8b 00                	mov    (%eax),%eax
f0104158:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f010415b:	83 ec 0c             	sub    $0xc,%esp
f010415e:	ff 75 10             	pushl  0x10(%ebp)
f0104161:	e8 93 f6 ff ff       	call   f01037f9 <to_physical_address>
f0104166:	83 c4 10             	add    $0x10,%esp
f0104169:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010416c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010416f:	c1 e8 0c             	shr    $0xc,%eax
f0104172:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104175:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010417a:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010417d:	72 17                	jb     f0104196 <pf_update_env_page+0x221>
f010417f:	ff 75 dc             	pushl  -0x24(%ebp)
f0104182:	68 f0 18 13 f0       	push   $0xf01318f0
f0104187:	68 47 01 00 00       	push   $0x147
f010418c:	68 8d 18 13 f0       	push   $0xf013188d
f0104191:	e8 1a c0 ff ff       	call   f01001b0 <_panic>
f0104196:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104199:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010419e:	83 ec 08             	sub    $0x8,%esp
f01041a1:	50                   	push   %eax
f01041a2:	ff 75 e0             	pushl  -0x20(%ebp)
f01041a5:	e8 e3 f6 ff ff       	call   f010388d <write_disk_page>
f01041aa:	83 c4 10             	add    $0x10,%esp
f01041ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01041b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01041b3:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f01041b9:	8d 50 01             	lea    0x1(%eax),%edx
f01041bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01041bf:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f01041c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01041c8:	c9                   	leave  
f01041c9:	c3                   	ret    

f01041ca <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01041ca:	55                   	push   %ebp
f01041cb:	89 e5                	mov    %esp,%ebp
f01041cd:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01041d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01041d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041de:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01041e4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01041ea:	85 c0                	test   %eax,%eax
f01041ec:	75 0a                	jne    f01041f8 <pf_read_env_page+0x2e>
f01041ee:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01041f3:	e9 96 00 00 00       	jmp    f010428e <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01041f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01041fe:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104204:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0104207:	51                   	push   %ecx
f0104208:	6a 00                	push   $0x0
f010420a:	52                   	push   %edx
f010420b:	50                   	push   %eax
f010420c:	e8 3d fa ff ff       	call   f0103c4e <get_disk_page_table>
f0104211:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104214:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104217:	85 c0                	test   %eax,%eax
f0104219:	75 07                	jne    f0104222 <pf_read_env_page+0x58>
f010421b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104220:	eb 6c                	jmp    f010428e <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104222:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104225:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104228:	c1 ea 0c             	shr    $0xc,%edx
f010422b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104231:	c1 e2 02             	shl    $0x2,%edx
f0104234:	01 d0                	add    %edx,%eax
f0104236:	8b 00                	mov    (%eax),%eax
f0104238:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010423b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010423f:	75 07                	jne    f0104248 <pf_read_env_page+0x7e>
f0104241:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104246:	eb 46                	jmp    f010428e <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104248:	83 ec 08             	sub    $0x8,%esp
f010424b:	ff 75 0c             	pushl  0xc(%ebp)
f010424e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104251:	e8 08 f6 ff ff       	call   f010385e <read_disk_page>
f0104256:	83 c4 10             	add    $0x10,%esp
f0104259:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010425c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010425f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104262:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104268:	6a 40                	push   $0x40
f010426a:	6a 00                	push   $0x0
f010426c:	52                   	push   %edx
f010426d:	50                   	push   %eax
f010426e:	e8 8e 3d 00 00       	call   f0108001 <pt_set_page_permissions>
f0104273:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104276:	8b 45 08             	mov    0x8(%ebp),%eax
f0104279:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010427f:	8d 50 01             	lea    0x1(%eax),%edx
f0104282:	8b 45 08             	mov    0x8(%ebp),%eax
f0104285:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f010428b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010428e:	c9                   	leave  
f010428f:	c3                   	ret    

f0104290 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104290:	55                   	push   %ebp
f0104291:	89 e5                	mov    %esp,%ebp
f0104293:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104296:	8b 45 08             	mov    0x8(%ebp),%eax
f0104299:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010429f:	85 c0                	test   %eax,%eax
f01042a1:	74 65                	je     f0104308 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a6:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ac:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01042af:	52                   	push   %edx
f01042b0:	6a 00                	push   $0x0
f01042b2:	ff 75 0c             	pushl  0xc(%ebp)
f01042b5:	50                   	push   %eax
f01042b6:	e8 93 f9 ff ff       	call   f0103c4e <get_disk_page_table>
f01042bb:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01042be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042c1:	85 c0                	test   %eax,%eax
f01042c3:	74 46                	je     f010430b <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042c8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042cb:	c1 ea 0c             	shr    $0xc,%edx
f01042ce:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042d4:	c1 e2 02             	shl    $0x2,%edx
f01042d7:	01 d0                	add    %edx,%eax
f01042d9:	8b 00                	mov    (%eax),%eax
f01042db:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01042de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e4:	c1 ea 0c             	shr    $0xc,%edx
f01042e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042ed:	c1 e2 02             	shl    $0x2,%edx
f01042f0:	01 d0                	add    %edx,%eax
f01042f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01042f8:	83 ec 0c             	sub    $0xc,%esp
f01042fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01042fe:	e8 3a f8 ff ff       	call   f0103b3d <free_disk_frame>
f0104303:	83 c4 10             	add    $0x10,%esp
f0104306:	eb 04                	jmp    f010430c <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104308:	90                   	nop
f0104309:	eb 01                	jmp    f010430c <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010430b:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010430c:	c9                   	leave  
f010430d:	c3                   	ret    

f010430e <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010430e:	55                   	push   %ebp
f010430f:	89 e5                	mov    %esp,%ebp
f0104311:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104314:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010431b:	e9 f7 00 00 00       	jmp    f0104417 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0104320:	8b 45 08             	mov    0x8(%ebp),%eax
f0104323:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104329:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010432c:	c1 e2 02             	shl    $0x2,%edx
f010432f:	01 d0                	add    %edx,%eax
f0104331:	8b 00                	mov    (%eax),%eax
f0104333:	83 e0 01             	and    $0x1,%eax
f0104336:	85 c0                	test   %eax,%eax
f0104338:	0f 84 d5 00 00 00    	je     f0104413 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010433e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104341:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010434a:	c1 e2 02             	shl    $0x2,%edx
f010434d:	01 d0                	add    %edx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104356:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104359:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010435c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010435f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104362:	c1 e8 0c             	shr    $0xc,%eax
f0104365:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104368:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010436d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104370:	72 17                	jb     f0104389 <pf_free_env+0x7b>
f0104372:	ff 75 e8             	pushl  -0x18(%ebp)
f0104375:	68 f0 18 13 f0       	push   $0xf01318f0
f010437a:	68 a7 01 00 00       	push   $0x1a7
f010437f:	68 8d 18 13 f0       	push   $0xf013188d
f0104384:	e8 27 be ff ff       	call   f01001b0 <_panic>
f0104389:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010438c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104391:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104394:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010439b:	eb 3a                	jmp    f01043d7 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010439d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043a0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043aa:	01 d0                	add    %edx,%eax
f01043ac:	8b 00                	mov    (%eax),%eax
f01043ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01043b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043be:	01 d0                	add    %edx,%eax
f01043c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01043c6:	83 ec 0c             	sub    $0xc,%esp
f01043c9:	ff 75 dc             	pushl  -0x24(%ebp)
f01043cc:	e8 6c f7 ff ff       	call   f0103b3d <free_disk_frame>
f01043d1:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043d4:	ff 45 f0             	incl   -0x10(%ebp)
f01043d7:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01043de:	76 bd                	jbe    f010439d <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e3:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01043e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043ec:	c1 e2 02             	shl    $0x2,%edx
f01043ef:	01 d0                	add    %edx,%eax
f01043f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f01043f7:	83 ec 0c             	sub    $0xc,%esp
f01043fa:	ff 75 ec             	pushl  -0x14(%ebp)
f01043fd:	e8 0a f4 ff ff       	call   f010380c <to_frame_info>
f0104402:	83 c4 10             	add    $0x10,%esp
f0104405:	83 ec 0c             	sub    $0xc,%esp
f0104408:	50                   	push   %eax
f0104409:	e8 8b 30 00 00       	call   f0107499 <decrement_references>
f010440e:	83 c4 10             	add    $0x10,%esp
f0104411:	eb 01                	jmp    f0104414 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104413:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104414:	ff 45 f4             	incl   -0xc(%ebp)
f0104417:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010441e:	0f 86 fc fe ff ff    	jbe    f0104320 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104424:	8b 45 08             	mov    0x8(%ebp),%eax
f0104427:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010442d:	83 ec 0c             	sub    $0xc,%esp
f0104430:	50                   	push   %eax
f0104431:	e8 d6 f3 ff ff       	call   f010380c <to_frame_info>
f0104436:	83 c4 10             	add    $0x10,%esp
f0104439:	83 ec 0c             	sub    $0xc,%esp
f010443c:	50                   	push   %eax
f010443d:	e8 57 30 00 00       	call   f0107499 <decrement_references>
f0104442:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104445:	8b 45 08             	mov    0x8(%ebp),%eax
f0104448:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010444f:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104452:	8b 45 08             	mov    0x8(%ebp),%eax
f0104455:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010445c:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010445f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104462:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104468:	85 c0                	test   %eax,%eax
f010446a:	74 4b                	je     f01044b7 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010446c:	83 ec 0c             	sub    $0xc,%esp
f010446f:	ff 75 08             	pushl  0x8(%ebp)
f0104472:	e8 17 04 00 00       	call   f010488e <__pf_remove_env_all_tables>
f0104477:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f010447a:	8b 45 08             	mov    0x8(%ebp),%eax
f010447d:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f0104483:	83 ec 0c             	sub    $0xc,%esp
f0104486:	50                   	push   %eax
f0104487:	e8 80 f3 ff ff       	call   f010380c <to_frame_info>
f010448c:	83 c4 10             	add    $0x10,%esp
f010448f:	83 ec 0c             	sub    $0xc,%esp
f0104492:	50                   	push   %eax
f0104493:	e8 01 30 00 00       	call   f0107499 <decrement_references>
f0104498:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f010449b:	8b 45 08             	mov    0x8(%ebp),%eax
f010449e:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01044a5:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01044a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01044ab:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f01044b2:	00 00 00 
f01044b5:	eb 01                	jmp    f01044b8 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f01044b7:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f01044b8:	c9                   	leave  
f01044b9:	c3                   	ret    

f01044ba <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01044ba:	55                   	push   %ebp
f01044bb:	89 e5                	mov    %esp,%ebp
f01044bd:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01044c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c3:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f01044c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044cc:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01044ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044d1:	8b 00                	mov    (%eax),%eax
f01044d3:	85 c0                	test   %eax,%eax
f01044d5:	0f 85 ad 00 00 00    	jne    f0104588 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01044db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01044e2:	83 ec 0c             	sub    $0xc,%esp
f01044e5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01044e8:	50                   	push   %eax
f01044e9:	e8 19 2e 00 00       	call   f0107307 <allocate_frame>
f01044ee:	83 c4 10             	add    $0x10,%esp
f01044f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01044f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044f8:	79 08                	jns    f0104502 <get_disk_page_directory+0x48>
				return r;
f01044fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fd:	e9 8b 00 00 00       	jmp    f010458d <get_disk_page_directory+0xd3>
			p->references = 1;
f0104502:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104505:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010450b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010450e:	83 ec 0c             	sub    $0xc,%esp
f0104511:	50                   	push   %eax
f0104512:	e8 e2 f2 ff ff       	call   f01037f9 <to_physical_address>
f0104517:	83 c4 10             	add    $0x10,%esp
f010451a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010451d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104520:	c1 e8 0c             	shr    $0xc,%eax
f0104523:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104526:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010452b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010452e:	72 17                	jb     f0104547 <get_disk_page_directory+0x8d>
f0104530:	ff 75 f0             	pushl  -0x10(%ebp)
f0104533:	68 f0 18 13 f0       	push   $0xf01318f0
f0104538:	68 ff 01 00 00       	push   $0x1ff
f010453d:	68 8d 18 13 f0       	push   $0xf013188d
f0104542:	e8 69 bc ff ff       	call   f01001b0 <_panic>
f0104547:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010454a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010454f:	89 c2                	mov    %eax,%edx
f0104551:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104554:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104556:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104559:	83 ec 0c             	sub    $0xc,%esp
f010455c:	50                   	push   %eax
f010455d:	e8 97 f2 ff ff       	call   f01037f9 <to_physical_address>
f0104562:	83 c4 10             	add    $0x10,%esp
f0104565:	89 c2                	mov    %eax,%edx
f0104567:	8b 45 08             	mov    0x8(%ebp),%eax
f010456a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104570:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104573:	8b 00                	mov    (%eax),%eax
f0104575:	83 ec 04             	sub    $0x4,%esp
f0104578:	68 00 10 00 00       	push   $0x1000
f010457d:	6a 00                	push   $0x0
f010457f:	50                   	push   %eax
f0104580:	e8 59 aa 02 00       	call   f012efde <memset>
f0104585:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104588:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010458d:	c9                   	leave  
f010458e:	c3                   	ret    

f010458f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010458f:	55                   	push   %ebp
f0104590:	89 e5                	mov    %esp,%ebp
f0104592:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0104595:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010459c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045a3:	e9 ac 00 00 00       	jmp    f0104654 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01045a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045ab:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045b4:	c1 e2 02             	shl    $0x2,%edx
f01045b7:	01 d0                	add    %edx,%eax
f01045b9:	8b 00                	mov    (%eax),%eax
f01045bb:	83 e0 01             	and    $0x1,%eax
f01045be:	85 c0                	test   %eax,%eax
f01045c0:	0f 84 8a 00 00 00    	je     f0104650 <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01045c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d2:	c1 e2 02             	shl    $0x2,%edx
f01045d5:	01 d0                	add    %edx,%eax
f01045d7:	8b 00                	mov    (%eax),%eax
f01045d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01045de:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01045e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01045e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01045ea:	c1 e8 0c             	shr    $0xc,%eax
f01045ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01045f0:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01045f5:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01045f8:	72 17                	jb     f0104611 <pf_calculate_allocated_pages+0x82>
f01045fa:	ff 75 e4             	pushl  -0x1c(%ebp)
f01045fd:	68 f0 18 13 f0       	push   $0xf01318f0
f0104602:	68 1f 02 00 00       	push   $0x21f
f0104607:	68 8d 18 13 f0       	push   $0xf013188d
f010460c:	e8 9f bb ff ff       	call   f01001b0 <_panic>
f0104611:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104614:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104619:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010461c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104623:	eb 20                	jmp    f0104645 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104625:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104628:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010462f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104632:	01 d0                	add    %edx,%eax
f0104634:	8b 00                	mov    (%eax),%eax
f0104636:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104639:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010463d:	74 03                	je     f0104642 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f010463f:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104642:	ff 45 ec             	incl   -0x14(%ebp)
f0104645:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010464c:	76 d7                	jbe    f0104625 <pf_calculate_allocated_pages+0x96>
f010464e:	eb 01                	jmp    f0104651 <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0104650:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0104651:	ff 45 f4             	incl   -0xc(%ebp)
f0104654:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010465b:	0f 86 47 ff ff ff    	jbe    f01045a8 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0104661:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104664:	c9                   	leave  
f0104665:	c3                   	ret    

f0104666 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104666:	55                   	push   %ebp
f0104667:	89 e5                	mov    %esp,%ebp
f0104669:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010466c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104673:	a1 64 a3 2d f0       	mov    0xf02da364,%eax
f0104678:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010467b:	eb 0b                	jmp    f0104688 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010467d:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104680:	a1 6c a3 2d f0       	mov    0xf02da36c,%eax
f0104685:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104688:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010468c:	74 07                	je     f0104695 <pf_calculate_free_frames+0x2f>
f010468e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104691:	8b 00                	mov    (%eax),%eax
f0104693:	eb 05                	jmp    f010469a <pf_calculate_free_frames+0x34>
f0104695:	b8 00 00 00 00       	mov    $0x0,%eax
f010469a:	a3 6c a3 2d f0       	mov    %eax,0xf02da36c
f010469f:	a1 6c a3 2d f0       	mov    0xf02da36c,%eax
f01046a4:	85 c0                	test   %eax,%eax
f01046a6:	75 d5                	jne    f010467d <pf_calculate_free_frames+0x17>
f01046a8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ac:	75 cf                	jne    f010467d <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01046ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01046b1:	c9                   	leave  
f01046b2:	c3                   	ret    

f01046b3 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01046b3:	55                   	push   %ebp
f01046b4:	89 e5                	mov    %esp,%ebp
f01046b6:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01046c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046c5:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01046c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046ca:	8b 00                	mov    (%eax),%eax
f01046cc:	85 c0                	test   %eax,%eax
f01046ce:	0f 85 ad 00 00 00    	jne    f0104781 <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046d4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046db:	83 ec 0c             	sub    $0xc,%esp
f01046de:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046e1:	50                   	push   %eax
f01046e2:	e8 20 2c 00 00       	call   f0107307 <allocate_frame>
f01046e7:	83 c4 10             	add    $0x10,%esp
f01046ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046f1:	79 08                	jns    f01046fb <get_disk_table_directory+0x48>
				return r;
f01046f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046f6:	e9 8b 00 00 00       	jmp    f0104786 <get_disk_table_directory+0xd3>
			p->references = 1;
f01046fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046fe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104704:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104707:	83 ec 0c             	sub    $0xc,%esp
f010470a:	50                   	push   %eax
f010470b:	e8 e9 f0 ff ff       	call   f01037f9 <to_physical_address>
f0104710:	83 c4 10             	add    $0x10,%esp
f0104713:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104716:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104719:	c1 e8 0c             	shr    $0xc,%eax
f010471c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010471f:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0104724:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104727:	72 17                	jb     f0104740 <get_disk_table_directory+0x8d>
f0104729:	ff 75 f0             	pushl  -0x10(%ebp)
f010472c:	68 f0 18 13 f0       	push   $0xf01318f0
f0104731:	68 5d 02 00 00       	push   $0x25d
f0104736:	68 8d 18 13 f0       	push   $0xf013188d
f010473b:	e8 70 ba ff ff       	call   f01001b0 <_panic>
f0104740:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104743:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104748:	89 c2                	mov    %eax,%edx
f010474a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010474d:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010474f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104752:	83 ec 0c             	sub    $0xc,%esp
f0104755:	50                   	push   %eax
f0104756:	e8 9e f0 ff ff       	call   f01037f9 <to_physical_address>
f010475b:	83 c4 10             	add    $0x10,%esp
f010475e:	89 c2                	mov    %eax,%edx
f0104760:	8b 45 08             	mov    0x8(%ebp),%eax
f0104763:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104769:	8b 45 0c             	mov    0xc(%ebp),%eax
f010476c:	8b 00                	mov    (%eax),%eax
f010476e:	83 ec 04             	sub    $0x4,%esp
f0104771:	68 00 10 00 00       	push   $0x1000
f0104776:	6a 00                	push   $0x0
f0104778:	50                   	push   %eax
f0104779:	e8 60 a8 02 00       	call   f012efde <memset>
f010477e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104781:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104786:	c9                   	leave  
f0104787:	c3                   	ret    

f0104788 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104788:	55                   	push   %ebp
f0104789:	89 e5                	mov    %esp,%ebp
f010478b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010478e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104795:	76 19                	jbe    f01047b0 <__pf_write_env_table+0x28>
f0104797:	68 20 19 13 f0       	push   $0xf0131920
f010479c:	68 46 19 13 f0       	push   $0xf0131946
f01047a1:	68 6b 02 00 00       	push   $0x26b
f01047a6:	68 8d 18 13 f0       	push   $0xf013188d
f01047ab:	e8 00 ba ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01047b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01047b3:	05 b0 00 00 00       	add    $0xb0,%eax
f01047b8:	83 ec 08             	sub    $0x8,%esp
f01047bb:	50                   	push   %eax
f01047bc:	ff 75 08             	pushl  0x8(%ebp)
f01047bf:	e8 ef fe ff ff       	call   f01046b3 <get_disk_table_directory>
f01047c4:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01047c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ca:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047d0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047d3:	c1 ea 16             	shr    $0x16,%edx
f01047d6:	c1 e2 02             	shl    $0x2,%edx
f01047d9:	01 d0                	add    %edx,%eax
f01047db:	8b 00                	mov    (%eax),%eax
f01047dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047e3:	85 c0                	test   %eax,%eax
f01047e5:	75 34                	jne    f010481b <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01047e7:	83 ec 0c             	sub    $0xc,%esp
f01047ea:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01047ed:	50                   	push   %eax
f01047ee:	e8 83 f2 ff ff       	call   f0103a76 <allocate_disk_frame>
f01047f3:	83 c4 10             	add    $0x10,%esp
f01047f6:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01047f9:	75 07                	jne    f0104802 <__pf_write_env_table+0x7a>
f01047fb:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104800:	eb 31                	jmp    f0104833 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104802:	8b 45 08             	mov    0x8(%ebp),%eax
f0104805:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010480b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010480e:	c1 ea 16             	shr    $0x16,%edx
f0104811:	c1 e2 02             	shl    $0x2,%edx
f0104814:	01 c2                	add    %eax,%edx
f0104816:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104819:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010481b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010481e:	83 ec 08             	sub    $0x8,%esp
f0104821:	ff 75 10             	pushl  0x10(%ebp)
f0104824:	50                   	push   %eax
f0104825:	e8 63 f0 ff ff       	call   f010388d <write_disk_page>
f010482a:	83 c4 10             	add    $0x10,%esp
f010482d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0104830:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104833:	c9                   	leave  
f0104834:	c3                   	ret    

f0104835 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104835:	55                   	push   %ebp
f0104836:	89 e5                	mov    %esp,%ebp
f0104838:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010483b:	8b 45 08             	mov    0x8(%ebp),%eax
f010483e:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104844:	85 c0                	test   %eax,%eax
f0104846:	75 07                	jne    f010484f <__pf_read_env_table+0x1a>
f0104848:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010484d:	eb 3d                	jmp    f010488c <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010484f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104852:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104858:	8b 55 0c             	mov    0xc(%ebp),%edx
f010485b:	c1 ea 16             	shr    $0x16,%edx
f010485e:	c1 e2 02             	shl    $0x2,%edx
f0104861:	01 d0                	add    %edx,%eax
f0104863:	8b 00                	mov    (%eax),%eax
f0104865:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104868:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010486c:	75 07                	jne    f0104875 <__pf_read_env_table+0x40>
f010486e:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104873:	eb 17                	jmp    f010488c <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104875:	83 ec 08             	sub    $0x8,%esp
f0104878:	ff 75 10             	pushl  0x10(%ebp)
f010487b:	ff 75 f4             	pushl  -0xc(%ebp)
f010487e:	e8 db ef ff ff       	call   f010385e <read_disk_page>
f0104883:	83 c4 10             	add    $0x10,%esp
f0104886:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104889:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010488c:	c9                   	leave  
f010488d:	c3                   	ret    

f010488e <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010488e:	55                   	push   %ebp
f010488f:	89 e5                	mov    %esp,%ebp
f0104891:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104894:	8b 45 08             	mov    0x8(%ebp),%eax
f0104897:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010489d:	85 c0                	test   %eax,%eax
f010489f:	74 52                	je     f01048f3 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048a8:	eb 3e                	jmp    f01048e8 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01048aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ad:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048b6:	c1 e2 02             	shl    $0x2,%edx
f01048b9:	01 d0                	add    %edx,%eax
f01048bb:	8b 00                	mov    (%eax),%eax
f01048bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01048c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01048c3:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048cc:	c1 e2 02             	shl    $0x2,%edx
f01048cf:	01 d0                	add    %edx,%eax
f01048d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01048d7:	83 ec 0c             	sub    $0xc,%esp
f01048da:	ff 75 f0             	pushl  -0x10(%ebp)
f01048dd:	e8 5b f2 ff ff       	call   f0103b3d <free_disk_frame>
f01048e2:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048e5:	ff 45 f4             	incl   -0xc(%ebp)
f01048e8:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f01048ef:	76 b9                	jbe    f01048aa <__pf_remove_env_all_tables+0x1c>
f01048f1:	eb 01                	jmp    f01048f4 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048f3:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f01048f4:	c9                   	leave  
f01048f5:	c3                   	ret    

f01048f6 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f01048f6:	55                   	push   %ebp
f01048f7:	89 e5                	mov    %esp,%ebp
f01048f9:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f01048fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104900:	75 10                	jne    f0104912 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104902:	83 ec 0c             	sub    $0xc,%esp
f0104905:	68 50 1a 13 f0       	push   $0xf0131a50
f010490a:	e8 22 c5 ff ff       	call   f0100e31 <cprintf>
f010490f:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104912:	8b 45 08             	mov    0x8(%ebp),%eax
f0104915:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010491b:	85 c0                	test   %eax,%eax
f010491d:	74 43                	je     f0104962 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010491f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104922:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104928:	8b 55 0c             	mov    0xc(%ebp),%edx
f010492b:	c1 ea 16             	shr    $0x16,%edx
f010492e:	c1 e2 02             	shl    $0x2,%edx
f0104931:	01 d0                	add    %edx,%eax
f0104933:	8b 00                	mov    (%eax),%eax
f0104935:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104938:	8b 45 08             	mov    0x8(%ebp),%eax
f010493b:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104941:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104944:	c1 ea 16             	shr    $0x16,%edx
f0104947:	c1 e2 02             	shl    $0x2,%edx
f010494a:	01 d0                	add    %edx,%eax
f010494c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104952:	83 ec 0c             	sub    $0xc,%esp
f0104955:	ff 75 f4             	pushl  -0xc(%ebp)
f0104958:	e8 e0 f1 ff ff       	call   f0103b3d <free_disk_frame>
f010495d:	83 c4 10             	add    $0x10,%esp
f0104960:	eb 01                	jmp    f0104963 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104962:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104963:	c9                   	leave  
f0104964:	c3                   	ret    

f0104965 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104965:	55                   	push   %ebp
f0104966:	89 e5                	mov    %esp,%ebp
f0104968:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010496b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104972:	eb 1f                	jmp    f0104993 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104974:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104977:	83 ec 04             	sub    $0x4,%esp
f010497a:	6a 08                	push   $0x8
f010497c:	ff 75 08             	pushl  0x8(%ebp)
f010497f:	50                   	push   %eax
f0104980:	e8 66 ad 02 00       	call   f012f6eb <ide_write>
f0104985:	83 c4 10             	add    $0x10,%esp
f0104988:	85 c0                	test   %eax,%eax
f010498a:	75 12                	jne    f010499e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010498c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104993:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010499a:	7e d8                	jle    f0104974 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010499c:	eb 01                	jmp    f010499f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010499e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010499f:	90                   	nop
f01049a0:	c9                   	leave  
f01049a1:	c3                   	ret    

f01049a2 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01049a2:	55                   	push   %ebp
f01049a3:	89 e5                	mov    %esp,%ebp
f01049a5:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049ab:	0f b6 c0             	movzbl %al,%eax
f01049ae:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049b5:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049b8:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049be:	ee                   	out    %al,(%dx)
f01049bf:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01049c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01049c9:	89 c2                	mov    %eax,%edx
f01049cb:	ec                   	in     (%dx),%al
f01049cc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01049cf:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01049d2:	0f b6 c0             	movzbl %al,%eax
}
f01049d5:	c9                   	leave  
f01049d6:	c3                   	ret    

f01049d7 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01049d7:	55                   	push   %ebp
f01049d8:	89 e5                	mov    %esp,%ebp
f01049da:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e0:	0f b6 c0             	movzbl %al,%eax
f01049e3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049ea:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049ed:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049f0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049f3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01049f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01049f7:	0f b6 c0             	movzbl %al,%eax
f01049fa:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a01:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a04:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a07:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a0a:	ee                   	out    %al,(%dx)
}
f0104a0b:	90                   	nop
f0104a0c:	c9                   	leave  
f0104a0d:	c3                   	ret    

f0104a0e <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a0e:	55                   	push   %ebp
f0104a0f:	89 e5                	mov    %esp,%ebp
f0104a11:	53                   	push   %ebx
f0104a12:	83 ec 24             	sub    $0x24,%esp
f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a18:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104a1b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104a22:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104a26:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104a29:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104a2c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104a2d:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104a31:	77 48                	ja     f0104a7b <kclock_start+0x6d>
f0104a33:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a3a:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104a3e:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a41:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a44:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a45:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a49:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a4e:	99                   	cltd   
f0104a4f:	f7 fb                	idiv   %ebx
f0104a51:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a57:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a5b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a60:	99                   	cltd   
f0104a61:	f7 fb                	idiv   %ebx
f0104a63:	89 c3                	mov    %eax,%ebx
f0104a65:	89 c8                	mov    %ecx,%eax
f0104a67:	99                   	cltd   
f0104a68:	f7 fb                	idiv   %ebx
f0104a6a:	0f b7 c0             	movzwl %ax,%eax
f0104a6d:	83 ec 0c             	sub    $0xc,%esp
f0104a70:	50                   	push   %eax
f0104a71:	e8 dd 01 00 00       	call   f0104c53 <kclock_write_cnt0_LSB_first>
f0104a76:	83 c4 10             	add    $0x10,%esp
f0104a79:	eb 13                	jmp    f0104a8e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a7b:	6a 35                	push   $0x35
f0104a7d:	68 74 1a 13 f0       	push   $0xf0131a74
f0104a82:	6a 33                	push   $0x33
f0104a84:	68 d0 1a 13 f0       	push   $0xf0131ad0
f0104a89:	e8 22 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104a8e:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f0104a94:	0f b7 c0             	movzwl %ax,%eax
f0104a97:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104a9c:	83 ec 0c             	sub    $0xc,%esp
f0104a9f:	50                   	push   %eax
f0104aa0:	e8 3a 1c 00 00       	call   f01066df <irq_setmask_8259A>
f0104aa5:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104aa8:	90                   	nop
f0104aa9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104aac:	c9                   	leave  
f0104aad:	c3                   	ret    

f0104aae <kclock_stop>:

void
kclock_stop(void)
{
f0104aae:	55                   	push   %ebp
f0104aaf:	89 e5                	mov    %esp,%ebp
f0104ab1:	83 ec 18             	sub    $0x18,%esp
f0104ab4:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104abb:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104abf:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104ac2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ac5:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104ac6:	83 ec 0c             	sub    $0xc,%esp
f0104ac9:	68 ff ff 00 00       	push   $0xffff
f0104ace:	e8 0c 1c 00 00       	call   f01066df <irq_setmask_8259A>
f0104ad3:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104ad6:	90                   	nop
f0104ad7:	c9                   	leave  
f0104ad8:	c3                   	ret    

f0104ad9 <kclock_resume>:

void
kclock_resume(void)
{
f0104ad9:	55                   	push   %ebp
f0104ada:	89 e5                	mov    %esp,%ebp
f0104adc:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104adf:	e8 b1 01 00 00       	call   f0104c95 <kclock_read_cnt0>
f0104ae4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104ae8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104aed:	77 06                	ja     f0104af5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104aef:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104af5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104af9:	83 e0 01             	and    $0x1,%eax
f0104afc:	66 85 c0             	test   %ax,%ax
f0104aff:	74 09                	je     f0104b0a <kclock_resume+0x31>
		cnt0++;
f0104b01:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b05:	40                   	inc    %eax
f0104b06:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b0a:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b11:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104b15:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104b1b:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b1c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104b20:	83 ec 0c             	sub    $0xc,%esp
f0104b23:	50                   	push   %eax
f0104b24:	e8 2a 01 00 00       	call   f0104c53 <kclock_write_cnt0_LSB_first>
f0104b29:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b2c:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f0104b32:	0f b7 c0             	movzwl %ax,%eax
f0104b35:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b3a:	83 ec 0c             	sub    $0xc,%esp
f0104b3d:	50                   	push   %eax
f0104b3e:	e8 9c 1b 00 00       	call   f01066df <irq_setmask_8259A>
f0104b43:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b46:	90                   	nop
f0104b47:	c9                   	leave  
f0104b48:	c3                   	ret    

f0104b49 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b49:	55                   	push   %ebp
f0104b4a:	89 e5                	mov    %esp,%ebp
f0104b4c:	83 ec 28             	sub    $0x28,%esp
f0104b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b52:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b55:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b5c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b60:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b66:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b67:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b6b:	83 ec 0c             	sub    $0xc,%esp
f0104b6e:	50                   	push   %eax
f0104b6f:	e8 df 00 00 00       	call   f0104c53 <kclock_write_cnt0_LSB_first>
f0104b74:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b77:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f0104b7d:	0f b7 c0             	movzwl %ax,%eax
f0104b80:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b85:	83 ec 0c             	sub    $0xc,%esp
f0104b88:	50                   	push   %eax
f0104b89:	e8 51 1b 00 00       	call   f01066df <irq_setmask_8259A>
f0104b8e:	83 c4 10             	add    $0x10,%esp

}
f0104b91:	90                   	nop
f0104b92:	c9                   	leave  
f0104b93:	c3                   	ret    

f0104b94 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104b94:	55                   	push   %ebp
f0104b95:	89 e5                	mov    %esp,%ebp
f0104b97:	56                   	push   %esi
f0104b98:	53                   	push   %ebx
f0104b99:	83 ec 20             	sub    $0x20,%esp
f0104b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b9f:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104ba2:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104ba6:	0f 87 8a 00 00 00    	ja     f0104c36 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104bac:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104bb0:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bb5:	99                   	cltd   
f0104bb6:	f7 fe                	idiv   %esi
f0104bb8:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104bbe:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104bc2:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104bc7:	99                   	cltd   
f0104bc8:	f7 fb                	idiv   %ebx
f0104bca:	89 c6                	mov    %eax,%esi
f0104bcc:	89 c8                	mov    %ecx,%eax
f0104bce:	99                   	cltd   
f0104bcf:	f7 fe                	idiv   %esi
f0104bd1:	89 c3                	mov    %eax,%ebx
f0104bd3:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104bd7:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bdc:	99                   	cltd   
f0104bdd:	f7 f9                	idiv   %ecx
f0104bdf:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104be5:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104be9:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104bee:	99                   	cltd   
f0104bef:	f7 fe                	idiv   %esi
f0104bf1:	89 c6                	mov    %eax,%esi
f0104bf3:	89 c8                	mov    %ecx,%eax
f0104bf5:	99                   	cltd   
f0104bf6:	f7 fe                	idiv   %esi
f0104bf8:	25 01 00 00 80       	and    $0x80000001,%eax
f0104bfd:	85 c0                	test   %eax,%eax
f0104bff:	79 05                	jns    f0104c06 <kclock_set_quantum+0x72>
f0104c01:	48                   	dec    %eax
f0104c02:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c05:	40                   	inc    %eax
f0104c06:	01 d8                	add    %ebx,%eax
f0104c08:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c0b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c12:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c16:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c19:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c1c:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c20:	0f b7 c0             	movzwl %ax,%eax
f0104c23:	83 ec 0c             	sub    $0xc,%esp
f0104c26:	50                   	push   %eax
f0104c27:	e8 27 00 00 00       	call   f0104c53 <kclock_write_cnt0_LSB_first>
f0104c2c:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104c2f:	e8 7a fe ff ff       	call   f0104aae <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104c34:	eb 16                	jmp    f0104c4c <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c36:	6a 35                	push   $0x35
f0104c38:	68 74 1a 13 f0       	push   $0xf0131a74
f0104c3d:	68 cc 00 00 00       	push   $0xcc
f0104c42:	68 d0 1a 13 f0       	push   $0xf0131ad0
f0104c47:	e8 64 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c4c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c4f:	5b                   	pop    %ebx
f0104c50:	5e                   	pop    %esi
f0104c51:	5d                   	pop    %ebp
f0104c52:	c3                   	ret    

f0104c53 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c53:	55                   	push   %ebp
f0104c54:	89 e5                	mov    %esp,%ebp
f0104c56:	83 ec 14             	sub    $0x14,%esp
f0104c59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c5c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c63:	0f b6 c0             	movzbl %al,%eax
f0104c66:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c6d:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c70:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c73:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c76:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c77:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c7a:	66 c1 e8 08          	shr    $0x8,%ax
f0104c7e:	0f b6 c0             	movzbl %al,%eax
f0104c81:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104c88:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104c8b:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104c8e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104c91:	ee                   	out    %al,(%dx)
}
f0104c92:	90                   	nop
f0104c93:	c9                   	leave  
f0104c94:	c3                   	ret    

f0104c95 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104c95:	55                   	push   %ebp
f0104c96:	89 e5                	mov    %esp,%ebp
f0104c98:	83 ec 20             	sub    $0x20,%esp
f0104c9b:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ca2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ca5:	89 c2                	mov    %eax,%edx
f0104ca7:	ec                   	in     (%dx),%al
f0104ca8:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104cab:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104cae:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104cb1:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cbb:	89 c2                	mov    %eax,%edx
f0104cbd:	ec                   	in     (%dx),%al
f0104cbe:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104cc1:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104cc4:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104cc7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ccb:	c1 e0 08             	shl    $0x8,%eax
f0104cce:	89 c2                	mov    %eax,%edx
f0104cd0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104cd4:	09 d0                	or     %edx,%eax
f0104cd6:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104cdd:	c9                   	leave  
f0104cde:	c3                   	ret    

f0104cdf <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104cdf:	55                   	push   %ebp
f0104ce0:	89 e5                	mov    %esp,%ebp
f0104ce2:	83 ec 30             	sub    $0x30,%esp
f0104ce5:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cef:	89 c2                	mov    %eax,%edx
f0104cf1:	ec                   	in     (%dx),%al
f0104cf2:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104cf5:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104cf8:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104cfb:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d02:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d06:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d0c:	ee                   	out    %al,(%dx)
f0104d0d:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d17:	89 c2                	mov    %eax,%edx
f0104d19:	ec                   	in     (%dx),%al
f0104d1a:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104d1d:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d20:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104d23:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104d2d:	89 c2                	mov    %eax,%edx
f0104d2f:	ec                   	in     (%dx),%al
f0104d30:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104d33:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d36:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d39:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104d3d:	c1 e0 08             	shl    $0x8,%eax
f0104d40:	89 c2                	mov    %eax,%edx
f0104d42:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d46:	09 d0                	or     %edx,%eax
f0104d48:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d4c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d50:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d57:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d5a:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d5d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d60:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d61:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d64:	c9                   	leave  
f0104d65:	c3                   	ret    

f0104d66 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d66:	55                   	push   %ebp
f0104d67:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d6d:	74 1d                	je     f0104d8c <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d78:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d7b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104d82:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d85:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104d8c:	90                   	nop
f0104d8d:	5d                   	pop    %ebp
f0104d8e:	c3                   	ret    

f0104d8f <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104d8f:	55                   	push   %ebp
f0104d90:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d92:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d96:	74 08                	je     f0104da0 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104d98:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d9b:	8b 40 0c             	mov    0xc(%eax),%eax
f0104d9e:	eb 05                	jmp    f0104da5 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104da0:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104da5:	5d                   	pop    %ebp
f0104da6:	c3                   	ret    

f0104da7 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104da7:	55                   	push   %ebp
f0104da8:	89 e5                	mov    %esp,%ebp
f0104daa:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104dad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db1:	75 16                	jne    f0104dc9 <enqueue+0x22>
f0104db3:	68 e4 1a 13 f0       	push   $0xf0131ae4
f0104db8:	68 f2 1a 13 f0       	push   $0xf0131af2
f0104dbd:	6a 33                	push   $0x33
f0104dbf:	68 07 1b 13 f0       	push   $0xf0131b07
f0104dc4:	e8 e7 b3 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104dc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104dcd:	74 66                	je     f0104e35 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104dcf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104dd3:	75 14                	jne    f0104de9 <enqueue+0x42>
f0104dd5:	83 ec 04             	sub    $0x4,%esp
f0104dd8:	68 20 1b 13 f0       	push   $0xf0131b20
f0104ddd:	6a 36                	push   $0x36
f0104ddf:	68 07 1b 13 f0       	push   $0xf0131b07
f0104de4:	e8 c7 b3 ff ff       	call   f01001b0 <_panic>
f0104de9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dec:	8b 10                	mov    (%eax),%edx
f0104dee:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104df1:	89 50 44             	mov    %edx,0x44(%eax)
f0104df4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104df7:	8b 40 44             	mov    0x44(%eax),%eax
f0104dfa:	85 c0                	test   %eax,%eax
f0104dfc:	74 0d                	je     f0104e0b <enqueue+0x64>
f0104dfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e01:	8b 00                	mov    (%eax),%eax
f0104e03:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e06:	89 50 48             	mov    %edx,0x48(%eax)
f0104e09:	eb 09                	jmp    f0104e14 <enqueue+0x6d>
f0104e0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e11:	89 50 04             	mov    %edx,0x4(%eax)
f0104e14:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e17:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e1a:	89 10                	mov    %edx,(%eax)
f0104e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e1f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e29:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e2c:	8d 50 01             	lea    0x1(%eax),%edx
f0104e2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e32:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104e35:	90                   	nop
f0104e36:	c9                   	leave  
f0104e37:	c3                   	ret    

f0104e38 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104e38:	55                   	push   %ebp
f0104e39:	89 e5                	mov    %esp,%ebp
f0104e3b:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104e3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e42:	75 0a                	jne    f0104e4e <dequeue+0x16>
f0104e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e49:	e9 a0 00 00 00       	jmp    f0104eee <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e51:	8b 40 04             	mov    0x4(%eax),%eax
f0104e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e5b:	0f 84 8a 00 00 00    	je     f0104eeb <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e65:	75 14                	jne    f0104e7b <dequeue+0x43>
f0104e67:	83 ec 04             	sub    $0x4,%esp
f0104e6a:	68 43 1b 13 f0       	push   $0xf0131b43
f0104e6f:	6a 43                	push   $0x43
f0104e71:	68 07 1b 13 f0       	push   $0xf0131b07
f0104e76:	e8 35 b3 ff ff       	call   f01001b0 <_panic>
f0104e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e7e:	8b 40 44             	mov    0x44(%eax),%eax
f0104e81:	85 c0                	test   %eax,%eax
f0104e83:	74 11                	je     f0104e96 <dequeue+0x5e>
f0104e85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e88:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e8e:	8b 52 48             	mov    0x48(%edx),%edx
f0104e91:	89 50 48             	mov    %edx,0x48(%eax)
f0104e94:	eb 0c                	jmp    f0104ea2 <dequeue+0x6a>
f0104e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e99:	8b 50 48             	mov    0x48(%eax),%edx
f0104e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e9f:	89 50 04             	mov    %edx,0x4(%eax)
f0104ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea5:	8b 40 48             	mov    0x48(%eax),%eax
f0104ea8:	85 c0                	test   %eax,%eax
f0104eaa:	74 11                	je     f0104ebd <dequeue+0x85>
f0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eaf:	8b 40 48             	mov    0x48(%eax),%eax
f0104eb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104eb5:	8b 52 44             	mov    0x44(%edx),%edx
f0104eb8:	89 50 44             	mov    %edx,0x44(%eax)
f0104ebb:	eb 0b                	jmp    f0104ec8 <dequeue+0x90>
f0104ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec0:	8b 50 44             	mov    0x44(%eax),%edx
f0104ec3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ec6:	89 10                	mov    %edx,(%eax)
f0104ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecb:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ed5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104edf:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ee2:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee8:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104eee:	c9                   	leave  
f0104eef:	c3                   	ret    

f0104ef0 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104ef0:	55                   	push   %ebp
f0104ef1:	89 e5                	mov    %esp,%ebp
f0104ef3:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104ef6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104efa:	75 16                	jne    f0104f12 <remove_from_queue+0x22>
f0104efc:	68 e4 1a 13 f0       	push   $0xf0131ae4
f0104f01:	68 f2 1a 13 f0       	push   $0xf0131af2
f0104f06:	6a 4d                	push   $0x4d
f0104f08:	68 07 1b 13 f0       	push   $0xf0131b07
f0104f0d:	e8 9e b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104f12:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f16:	0f 84 8a 00 00 00    	je     f0104fa6 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104f1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f20:	75 14                	jne    f0104f36 <remove_from_queue+0x46>
f0104f22:	83 ec 04             	sub    $0x4,%esp
f0104f25:	68 43 1b 13 f0       	push   $0xf0131b43
f0104f2a:	6a 51                	push   $0x51
f0104f2c:	68 07 1b 13 f0       	push   $0xf0131b07
f0104f31:	e8 7a b2 ff ff       	call   f01001b0 <_panic>
f0104f36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f39:	8b 40 44             	mov    0x44(%eax),%eax
f0104f3c:	85 c0                	test   %eax,%eax
f0104f3e:	74 11                	je     f0104f51 <remove_from_queue+0x61>
f0104f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f43:	8b 40 44             	mov    0x44(%eax),%eax
f0104f46:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f49:	8b 52 48             	mov    0x48(%edx),%edx
f0104f4c:	89 50 48             	mov    %edx,0x48(%eax)
f0104f4f:	eb 0c                	jmp    f0104f5d <remove_from_queue+0x6d>
f0104f51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f54:	8b 50 48             	mov    0x48(%eax),%edx
f0104f57:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f5a:	89 50 04             	mov    %edx,0x4(%eax)
f0104f5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f60:	8b 40 48             	mov    0x48(%eax),%eax
f0104f63:	85 c0                	test   %eax,%eax
f0104f65:	74 11                	je     f0104f78 <remove_from_queue+0x88>
f0104f67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f6a:	8b 40 48             	mov    0x48(%eax),%eax
f0104f6d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f70:	8b 52 44             	mov    0x44(%edx),%edx
f0104f73:	89 50 44             	mov    %edx,0x44(%eax)
f0104f76:	eb 0b                	jmp    f0104f83 <remove_from_queue+0x93>
f0104f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f7b:	8b 50 44             	mov    0x44(%eax),%edx
f0104f7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f81:	89 10                	mov    %edx,(%eax)
f0104f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f86:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104f8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f90:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104f97:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9a:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f9d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104fa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fa3:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104fa6:	90                   	nop
f0104fa7:	c9                   	leave  
f0104fa8:	c3                   	ret    

f0104fa9 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104fa9:	55                   	push   %ebp
f0104faa:	89 e5                	mov    %esp,%ebp
f0104fac:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104faf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fb3:	75 07                	jne    f0104fbc <find_env_in_queue+0x13>
f0104fb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fba:	eb 58                	jmp    f0105014 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104fbc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc6:	8b 00                	mov    (%eax),%eax
f0104fc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fcb:	eb 19                	jmp    f0104fe6 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104fcd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fd0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fd3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104fd6:	75 05                	jne    f0104fdd <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104fd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fdb:	eb 37                	jmp    f0105014 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe0:	8b 40 08             	mov    0x8(%eax),%eax
f0104fe3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fe6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104fea:	74 08                	je     f0104ff4 <find_env_in_queue+0x4b>
f0104fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fef:	8b 40 44             	mov    0x44(%eax),%eax
f0104ff2:	eb 05                	jmp    f0104ff9 <find_env_in_queue+0x50>
f0104ff4:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ff9:	8b 55 08             	mov    0x8(%ebp),%edx
f0104ffc:	89 42 08             	mov    %eax,0x8(%edx)
f0104fff:	8b 45 08             	mov    0x8(%ebp),%eax
f0105002:	8b 40 08             	mov    0x8(%eax),%eax
f0105005:	85 c0                	test   %eax,%eax
f0105007:	75 c4                	jne    f0104fcd <find_env_in_queue+0x24>
f0105009:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010500d:	75 be                	jne    f0104fcd <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010500f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105014:	c9                   	leave  
f0105015:	c3                   	ret    

f0105016 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0105016:	55                   	push   %ebp
f0105017:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0105019:	90                   	nop
f010501a:	5d                   	pop    %ebp
f010501b:	c3                   	ret    

f010501c <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f010501c:	55                   	push   %ebp
f010501d:	89 e5                	mov    %esp,%ebp
f010501f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105022:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105026:	74 1d                	je     f0105045 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0105028:	8b 45 08             	mov    0x8(%ebp),%eax
f010502b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0105032:	83 ec 08             	sub    $0x8,%esp
f0105035:	ff 75 08             	pushl  0x8(%ebp)
f0105038:	68 40 3b 25 f0       	push   $0xf0253b40
f010503d:	e8 65 fd ff ff       	call   f0104da7 <enqueue>
f0105042:	83 c4 10             	add    $0x10,%esp
	}
}
f0105045:	90                   	nop
f0105046:	c9                   	leave  
f0105047:	c3                   	ret    

f0105048 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105048:	55                   	push   %ebp
f0105049:	89 e5                	mov    %esp,%ebp
f010504b:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010504e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105052:	0f 84 02 01 00 00    	je     f010515a <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105058:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010505f:	e9 e5 00 00 00       	jmp    f0105149 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105064:	8b 45 08             	mov    0x8(%ebp),%eax
f0105067:	8b 40 4c             	mov    0x4c(%eax),%eax
f010506a:	89 c2                	mov    %eax,%edx
f010506c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506f:	c1 e0 04             	shl    $0x4,%eax
f0105072:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105077:	52                   	push   %edx
f0105078:	50                   	push   %eax
f0105079:	e8 2b ff ff ff       	call   f0104fa9 <find_env_in_queue>
f010507e:	83 c4 08             	add    $0x8,%esp
f0105081:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0105084:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105088:	0f 84 b8 00 00 00    	je     f0105146 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f010508e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105092:	75 17                	jne    f01050ab <sched_remove_ready+0x63>
f0105094:	83 ec 04             	sub    $0x4,%esp
f0105097:	68 43 1b 13 f0       	push   $0xf0131b43
f010509c:	68 90 00 00 00       	push   $0x90
f01050a1:	68 07 1b 13 f0       	push   $0xf0131b07
f01050a6:	e8 05 b1 ff ff       	call   f01001b0 <_panic>
f01050ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01050ae:	8b 40 44             	mov    0x44(%eax),%eax
f01050b1:	85 c0                	test   %eax,%eax
f01050b3:	74 11                	je     f01050c6 <sched_remove_ready+0x7e>
f01050b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b8:	8b 40 44             	mov    0x44(%eax),%eax
f01050bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01050be:	8b 52 48             	mov    0x48(%edx),%edx
f01050c1:	89 50 48             	mov    %edx,0x48(%eax)
f01050c4:	eb 14                	jmp    f01050da <sched_remove_ready+0x92>
f01050c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01050c9:	8b 40 48             	mov    0x48(%eax),%eax
f01050cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050cf:	c1 e2 04             	shl    $0x4,%edx
f01050d2:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f01050d8:	89 02                	mov    %eax,(%edx)
f01050da:	8b 45 08             	mov    0x8(%ebp),%eax
f01050dd:	8b 40 48             	mov    0x48(%eax),%eax
f01050e0:	85 c0                	test   %eax,%eax
f01050e2:	74 11                	je     f01050f5 <sched_remove_ready+0xad>
f01050e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e7:	8b 40 48             	mov    0x48(%eax),%eax
f01050ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01050ed:	8b 52 44             	mov    0x44(%edx),%edx
f01050f0:	89 50 44             	mov    %edx,0x44(%eax)
f01050f3:	eb 14                	jmp    f0105109 <sched_remove_ready+0xc1>
f01050f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01050f8:	8b 40 44             	mov    0x44(%eax),%eax
f01050fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050fe:	c1 e2 04             	shl    $0x4,%edx
f0105101:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0105107:	89 02                	mov    %eax,(%edx)
f0105109:	8b 45 08             	mov    0x8(%ebp),%eax
f010510c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105113:	8b 45 08             	mov    0x8(%ebp),%eax
f0105116:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010511d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105120:	c1 e0 04             	shl    $0x4,%eax
f0105123:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105128:	8b 00                	mov    (%eax),%eax
f010512a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010512d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105130:	c1 e0 04             	shl    $0x4,%eax
f0105133:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105138:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f010513a:	8b 45 08             	mov    0x8(%ebp),%eax
f010513d:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105144:	eb 14                	jmp    f010515a <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105146:	ff 45 f4             	incl   -0xc(%ebp)
f0105149:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f010514e:	0f b6 c0             	movzbl %al,%eax
f0105151:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105154:	0f 8f 0a ff ff ff    	jg     f0105064 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f010515a:	c9                   	leave  
f010515b:	c3                   	ret    

f010515c <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010515c:	55                   	push   %ebp
f010515d:	89 e5                	mov    %esp,%ebp
f010515f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105162:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105166:	74 1d                	je     f0105185 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105168:	8b 45 08             	mov    0x8(%ebp),%eax
f010516b:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105172:	83 ec 08             	sub    $0x8,%esp
f0105175:	ff 75 08             	pushl  0x8(%ebp)
f0105178:	68 d8 be 2b f0       	push   $0xf02bbed8
f010517d:	e8 25 fc ff ff       	call   f0104da7 <enqueue>
f0105182:	83 c4 10             	add    $0x10,%esp
	}
}
f0105185:	90                   	nop
f0105186:	c9                   	leave  
f0105187:	c3                   	ret    

f0105188 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f0105188:	55                   	push   %ebp
f0105189:	89 e5                	mov    %esp,%ebp
f010518b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010518e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105192:	0f 84 92 00 00 00    	je     f010522a <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0105198:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010519c:	75 17                	jne    f01051b5 <sched_remove_new+0x2d>
f010519e:	83 ec 04             	sub    $0x4,%esp
f01051a1:	68 43 1b 13 f0       	push   $0xf0131b43
f01051a6:	68 ab 00 00 00       	push   $0xab
f01051ab:	68 07 1b 13 f0       	push   $0xf0131b07
f01051b0:	e8 fb af ff ff       	call   f01001b0 <_panic>
f01051b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b8:	8b 40 44             	mov    0x44(%eax),%eax
f01051bb:	85 c0                	test   %eax,%eax
f01051bd:	74 11                	je     f01051d0 <sched_remove_new+0x48>
f01051bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01051c2:	8b 40 44             	mov    0x44(%eax),%eax
f01051c5:	8b 55 08             	mov    0x8(%ebp),%edx
f01051c8:	8b 52 48             	mov    0x48(%edx),%edx
f01051cb:	89 50 48             	mov    %edx,0x48(%eax)
f01051ce:	eb 0b                	jmp    f01051db <sched_remove_new+0x53>
f01051d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d3:	8b 40 48             	mov    0x48(%eax),%eax
f01051d6:	a3 dc be 2b f0       	mov    %eax,0xf02bbedc
f01051db:	8b 45 08             	mov    0x8(%ebp),%eax
f01051de:	8b 40 48             	mov    0x48(%eax),%eax
f01051e1:	85 c0                	test   %eax,%eax
f01051e3:	74 11                	je     f01051f6 <sched_remove_new+0x6e>
f01051e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e8:	8b 40 48             	mov    0x48(%eax),%eax
f01051eb:	8b 55 08             	mov    0x8(%ebp),%edx
f01051ee:	8b 52 44             	mov    0x44(%edx),%edx
f01051f1:	89 50 44             	mov    %edx,0x44(%eax)
f01051f4:	eb 0b                	jmp    f0105201 <sched_remove_new+0x79>
f01051f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f9:	8b 40 44             	mov    0x44(%eax),%eax
f01051fc:	a3 d8 be 2b f0       	mov    %eax,0xf02bbed8
f0105201:	8b 45 08             	mov    0x8(%ebp),%eax
f0105204:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010520b:	8b 45 08             	mov    0x8(%ebp),%eax
f010520e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105215:	a1 e4 be 2b f0       	mov    0xf02bbee4,%eax
f010521a:	48                   	dec    %eax
f010521b:	a3 e4 be 2b f0       	mov    %eax,0xf02bbee4
		env->env_status = ENV_UNKNOWN;
f0105220:	8b 45 08             	mov    0x8(%ebp),%eax
f0105223:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010522a:	90                   	nop
f010522b:	c9                   	leave  
f010522c:	c3                   	ret    

f010522d <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010522d:	55                   	push   %ebp
f010522e:	89 e5                	mov    %esp,%ebp
f0105230:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105233:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105237:	74 34                	je     f010526d <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0105239:	e8 b7 85 00 00       	call   f010d7f5 <isBufferingEnabled>
f010523e:	84 c0                	test   %al,%al
f0105240:	74 0e                	je     f0105250 <sched_insert_exit+0x23>
f0105242:	83 ec 0c             	sub    $0xc,%esp
f0105245:	ff 75 08             	pushl  0x8(%ebp)
f0105248:	e8 49 5b 00 00       	call   f010ad96 <cleanup_buffers>
f010524d:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105250:	8b 45 08             	mov    0x8(%ebp),%eax
f0105253:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f010525a:	83 ec 08             	sub    $0x8,%esp
f010525d:	ff 75 08             	pushl  0x8(%ebp)
f0105260:	68 a4 9a 2b f0       	push   $0xf02b9aa4
f0105265:	e8 3d fb ff ff       	call   f0104da7 <enqueue>
f010526a:	83 c4 10             	add    $0x10,%esp
	}
}
f010526d:	90                   	nop
f010526e:	c9                   	leave  
f010526f:	c3                   	ret    

f0105270 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f0105270:	55                   	push   %ebp
f0105271:	89 e5                	mov    %esp,%ebp
f0105273:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105276:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010527a:	0f 84 92 00 00 00    	je     f0105312 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0105280:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105284:	75 17                	jne    f010529d <sched_remove_exit+0x2d>
f0105286:	83 ec 04             	sub    $0x4,%esp
f0105289:	68 43 1b 13 f0       	push   $0xf0131b43
f010528e:	68 c3 00 00 00       	push   $0xc3
f0105293:	68 07 1b 13 f0       	push   $0xf0131b07
f0105298:	e8 13 af ff ff       	call   f01001b0 <_panic>
f010529d:	8b 45 08             	mov    0x8(%ebp),%eax
f01052a0:	8b 40 44             	mov    0x44(%eax),%eax
f01052a3:	85 c0                	test   %eax,%eax
f01052a5:	74 11                	je     f01052b8 <sched_remove_exit+0x48>
f01052a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01052aa:	8b 40 44             	mov    0x44(%eax),%eax
f01052ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01052b0:	8b 52 48             	mov    0x48(%edx),%edx
f01052b3:	89 50 48             	mov    %edx,0x48(%eax)
f01052b6:	eb 0b                	jmp    f01052c3 <sched_remove_exit+0x53>
f01052b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01052bb:	8b 40 48             	mov    0x48(%eax),%eax
f01052be:	a3 a8 9a 2b f0       	mov    %eax,0xf02b9aa8
f01052c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c6:	8b 40 48             	mov    0x48(%eax),%eax
f01052c9:	85 c0                	test   %eax,%eax
f01052cb:	74 11                	je     f01052de <sched_remove_exit+0x6e>
f01052cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d0:	8b 40 48             	mov    0x48(%eax),%eax
f01052d3:	8b 55 08             	mov    0x8(%ebp),%edx
f01052d6:	8b 52 44             	mov    0x44(%edx),%edx
f01052d9:	89 50 44             	mov    %edx,0x44(%eax)
f01052dc:	eb 0b                	jmp    f01052e9 <sched_remove_exit+0x79>
f01052de:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e1:	8b 40 44             	mov    0x44(%eax),%eax
f01052e4:	a3 a4 9a 2b f0       	mov    %eax,0xf02b9aa4
f01052e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ec:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01052f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01052f6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01052fd:	a1 b0 9a 2b f0       	mov    0xf02b9ab0,%eax
f0105302:	48                   	dec    %eax
f0105303:	a3 b0 9a 2b f0       	mov    %eax,0xf02b9ab0
		env->env_status = ENV_UNKNOWN;
f0105308:	8b 45 08             	mov    0x8(%ebp),%eax
f010530b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105312:	90                   	nop
f0105313:	c9                   	leave  
f0105314:	c3                   	ret    

f0105315 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0105315:	55                   	push   %ebp
f0105316:	89 e5                	mov    %esp,%ebp
f0105318:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010531b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010531f:	74 0e                	je     f010532f <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105321:	83 ec 0c             	sub    $0xc,%esp
f0105324:	ff 75 08             	pushl  0x8(%ebp)
f0105327:	e8 30 fe ff ff       	call   f010515c <sched_insert_new>
f010532c:	83 c4 10             	add    $0x10,%esp
	}
}
f010532f:	90                   	nop
f0105330:	c9                   	leave  
f0105331:	c3                   	ret    

f0105332 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0105332:	55                   	push   %ebp
f0105333:	89 e5                	mov    %esp,%ebp
f0105335:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105338:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010533f:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105344:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105347:	eb 3d                	jmp    f0105386 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105349:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010534c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010534f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105352:	75 2a                	jne    f010537e <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105354:	83 ec 0c             	sub    $0xc,%esp
f0105357:	ff 75 f4             	pushl  -0xc(%ebp)
f010535a:	e8 29 fe ff ff       	call   f0105188 <sched_remove_new>
f010535f:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105362:	83 ec 0c             	sub    $0xc,%esp
f0105365:	ff 75 f4             	pushl  -0xc(%ebp)
f0105368:	e8 af fc ff ff       	call   f010501c <sched_insert_ready0>
f010536d:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105370:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f0105375:	85 c0                	test   %eax,%eax
f0105377:	75 36                	jne    f01053af <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105379:	e8 7d 0e 00 00       	call   f01061fb <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010537e:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105383:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105386:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010538a:	74 08                	je     f0105394 <sched_run_env+0x62>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	eb 05                	jmp    f0105399 <sched_run_env+0x67>
f0105394:	b8 00 00 00 00       	mov    $0x0,%eax
f0105399:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f010539e:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f01053a3:	85 c0                	test   %eax,%eax
f01053a5:	75 a2                	jne    f0105349 <sched_run_env+0x17>
f01053a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053ab:	75 9c                	jne    f0105349 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053ad:	eb 01                	jmp    f01053b0 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01053af:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053b0:	90                   	nop
f01053b1:	c9                   	leave  
f01053b2:	c3                   	ret    

f01053b3 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01053b3:	55                   	push   %ebp
f01053b4:	89 e5                	mov    %esp,%ebp
f01053b6:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01053c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01053c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053cb:	75 59                	jne    f0105426 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053cd:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01053d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053d5:	eb 28                	jmp    f01053ff <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f01053d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053da:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053dd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053e0:	75 15                	jne    f01053f7 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01053e2:	83 ec 0c             	sub    $0xc,%esp
f01053e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01053e8:	e8 9b fd ff ff       	call   f0105188 <sched_remove_new>
f01053ed:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01053f0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053f7:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f01053fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105403:	74 08                	je     f010540d <sched_exit_env+0x5a>
f0105405:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105408:	8b 40 44             	mov    0x44(%eax),%eax
f010540b:	eb 05                	jmp    f0105412 <sched_exit_env+0x5f>
f010540d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105412:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105417:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f010541c:	85 c0                	test   %eax,%eax
f010541e:	75 b7                	jne    f01053d7 <sched_exit_env+0x24>
f0105420:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105424:	75 b1                	jne    f01053d7 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105426:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010542a:	0f 85 6e 01 00 00    	jne    f010559e <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105430:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105437:	e9 4e 01 00 00       	jmp    f010558a <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010543c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010543f:	c1 e0 04             	shl    $0x4,%eax
f0105442:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105447:	8b 00                	mov    (%eax),%eax
f0105449:	85 c0                	test   %eax,%eax
f010544b:	0f 84 30 01 00 00    	je     f0105581 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f0105451:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105458:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010545b:	c1 e0 04             	shl    $0x4,%eax
f010545e:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105463:	8b 00                	mov    (%eax),%eax
f0105465:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105468:	e9 d4 00 00 00       	jmp    f0105541 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010546d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105470:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105473:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105476:	0f 85 b5 00 00 00    	jne    f0105531 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010547c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105480:	75 17                	jne    f0105499 <sched_exit_env+0xe6>
f0105482:	83 ec 04             	sub    $0x4,%esp
f0105485:	68 43 1b 13 f0       	push   $0xf0131b43
f010548a:	68 10 01 00 00       	push   $0x110
f010548f:	68 07 1b 13 f0       	push   $0xf0131b07
f0105494:	e8 17 ad ff ff       	call   f01001b0 <_panic>
f0105499:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010549c:	8b 40 44             	mov    0x44(%eax),%eax
f010549f:	85 c0                	test   %eax,%eax
f01054a1:	74 11                	je     f01054b4 <sched_exit_env+0x101>
f01054a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a6:	8b 40 44             	mov    0x44(%eax),%eax
f01054a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054ac:	8b 52 48             	mov    0x48(%edx),%edx
f01054af:	89 50 48             	mov    %edx,0x48(%eax)
f01054b2:	eb 14                	jmp    f01054c8 <sched_exit_env+0x115>
f01054b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054b7:	8b 40 48             	mov    0x48(%eax),%eax
f01054ba:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054bd:	c1 e2 04             	shl    $0x4,%edx
f01054c0:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f01054c6:	89 02                	mov    %eax,(%edx)
f01054c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054cb:	8b 40 48             	mov    0x48(%eax),%eax
f01054ce:	85 c0                	test   %eax,%eax
f01054d0:	74 11                	je     f01054e3 <sched_exit_env+0x130>
f01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d5:	8b 40 48             	mov    0x48(%eax),%eax
f01054d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054db:	8b 52 44             	mov    0x44(%edx),%edx
f01054de:	89 50 44             	mov    %edx,0x44(%eax)
f01054e1:	eb 14                	jmp    f01054f7 <sched_exit_env+0x144>
f01054e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e6:	8b 40 44             	mov    0x44(%eax),%eax
f01054e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054ec:	c1 e2 04             	shl    $0x4,%edx
f01054ef:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f01054f5:	89 02                	mov    %eax,(%edx)
f01054f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054fa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105504:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010550b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010550e:	c1 e0 04             	shl    $0x4,%eax
f0105511:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105516:	8b 00                	mov    (%eax),%eax
f0105518:	8d 50 ff             	lea    -0x1(%eax),%edx
f010551b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010551e:	c1 e0 04             	shl    $0x4,%eax
f0105521:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105526:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105528:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010552f:	eb 50                	jmp    f0105581 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105531:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105534:	c1 e0 04             	shl    $0x4,%eax
f0105537:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010553c:	8b 00                	mov    (%eax),%eax
f010553e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105541:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105545:	74 08                	je     f010554f <sched_exit_env+0x19c>
f0105547:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010554a:	8b 40 44             	mov    0x44(%eax),%eax
f010554d:	eb 05                	jmp    f0105554 <sched_exit_env+0x1a1>
f010554f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105554:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105557:	c1 e2 04             	shl    $0x4,%edx
f010555a:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105560:	89 02                	mov    %eax,(%edx)
f0105562:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105565:	c1 e0 04             	shl    $0x4,%eax
f0105568:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010556d:	8b 00                	mov    (%eax),%eax
f010556f:	85 c0                	test   %eax,%eax
f0105571:	0f 85 f6 fe ff ff    	jne    f010546d <sched_exit_env+0xba>
f0105577:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010557b:	0f 85 ec fe ff ff    	jne    f010546d <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105581:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105585:	75 16                	jne    f010559d <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105587:	ff 45 ec             	incl   -0x14(%ebp)
f010558a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f010558f:	0f b6 c0             	movzbl %al,%eax
f0105592:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105595:	0f 8f a1 fe ff ff    	jg     f010543c <sched_exit_env+0x89>
f010559b:	eb 01                	jmp    f010559e <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f010559d:	90                   	nop
		}
	}
	if (!found)
f010559e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055a2:	75 1c                	jne    f01055c0 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01055a4:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01055a9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055ac:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055af:	75 0f                	jne    f01055c0 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f01055b1:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01055b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01055b9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01055c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055c4:	74 2a                	je     f01055f0 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f01055c6:	83 ec 0c             	sub    $0xc,%esp
f01055c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01055cc:	e8 5c fc ff ff       	call   f010522d <sched_insert_exit>
f01055d1:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01055d4:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01055d9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055dc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055df:	75 0f                	jne    f01055f0 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055e1:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01055e8:	00 00 00 
			fos_scheduler();
f01055eb:	e8 0b 0c 00 00       	call   f01061fb <fos_scheduler>
		}
	}
}
f01055f0:	90                   	nop
f01055f1:	c9                   	leave  
f01055f2:	c3                   	ret    

f01055f3 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f01055f3:	55                   	push   %ebp
f01055f4:	89 e5                	mov    %esp,%ebp
f01055f6:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01055f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105600:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105607:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010560b:	0f 85 9d 00 00 00    	jne    f01056ae <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105611:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105616:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105619:	eb 64                	jmp    f010567f <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f010561b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105621:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105624:	75 51                	jne    f0105677 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105626:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105629:	8d 50 5c             	lea    0x5c(%eax),%edx
f010562c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010562f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105632:	83 ec 04             	sub    $0x4,%esp
f0105635:	52                   	push   %edx
f0105636:	50                   	push   %eax
f0105637:	68 64 1b 13 f0       	push   $0xf0131b64
f010563c:	e8 f0 b7 ff ff       	call   f0100e31 <cprintf>
f0105641:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105644:	83 ec 0c             	sub    $0xc,%esp
f0105647:	ff 75 f4             	pushl  -0xc(%ebp)
f010564a:	e8 39 fb ff ff       	call   f0105188 <sched_remove_new>
f010564f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105652:	83 ec 0c             	sub    $0xc,%esp
f0105655:	ff 75 f4             	pushl  -0xc(%ebp)
f0105658:	e8 2e 43 00 00       	call   f010998b <env_free>
f010565d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105660:	83 ec 0c             	sub    $0xc,%esp
f0105663:	68 89 1b 13 f0       	push   $0xf0131b89
f0105668:	e8 c4 b7 ff ff       	call   f0100e31 <cprintf>
f010566d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105670:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105677:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f010567c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010567f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105683:	74 08                	je     f010568d <sched_kill_env+0x9a>
f0105685:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105688:	8b 40 44             	mov    0x44(%eax),%eax
f010568b:	eb 05                	jmp    f0105692 <sched_kill_env+0x9f>
f010568d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105692:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105697:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f010569c:	85 c0                	test   %eax,%eax
f010569e:	0f 85 77 ff ff ff    	jne    f010561b <sched_kill_env+0x28>
f01056a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a8:	0f 85 6d ff ff ff    	jne    f010561b <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f01056ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056b2:	0f 85 aa 01 00 00    	jne    f0105862 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056bf:	e9 8a 01 00 00       	jmp    f010584e <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056c7:	c1 e0 04             	shl    $0x4,%eax
f01056ca:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f01056cf:	8b 00                	mov    (%eax),%eax
f01056d1:	85 c0                	test   %eax,%eax
f01056d3:	0f 84 6c 01 00 00    	je     f0105845 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f01056d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056e3:	c1 e0 04             	shl    $0x4,%eax
f01056e6:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f01056eb:	8b 00                	mov    (%eax),%eax
f01056ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056f0:	e9 10 01 00 00       	jmp    f0105805 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f01056f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01056fe:	0f 85 f1 00 00 00    	jne    f01057f5 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105704:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105707:	8d 50 5c             	lea    0x5c(%eax),%edx
f010570a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010570d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105710:	ff 75 ec             	pushl  -0x14(%ebp)
f0105713:	52                   	push   %edx
f0105714:	50                   	push   %eax
f0105715:	68 90 1b 13 f0       	push   $0xf0131b90
f010571a:	e8 12 b7 ff ff       	call   f0100e31 <cprintf>
f010571f:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105722:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105726:	75 17                	jne    f010573f <sched_kill_env+0x14c>
f0105728:	83 ec 04             	sub    $0x4,%esp
f010572b:	68 43 1b 13 f0       	push   $0xf0131b43
f0105730:	68 54 01 00 00       	push   $0x154
f0105735:	68 07 1b 13 f0       	push   $0xf0131b07
f010573a:	e8 71 aa ff ff       	call   f01001b0 <_panic>
f010573f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105742:	8b 40 44             	mov    0x44(%eax),%eax
f0105745:	85 c0                	test   %eax,%eax
f0105747:	74 11                	je     f010575a <sched_kill_env+0x167>
f0105749:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574c:	8b 40 44             	mov    0x44(%eax),%eax
f010574f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105752:	8b 52 48             	mov    0x48(%edx),%edx
f0105755:	89 50 48             	mov    %edx,0x48(%eax)
f0105758:	eb 14                	jmp    f010576e <sched_kill_env+0x17b>
f010575a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575d:	8b 40 48             	mov    0x48(%eax),%eax
f0105760:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105763:	c1 e2 04             	shl    $0x4,%edx
f0105766:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f010576c:	89 02                	mov    %eax,(%edx)
f010576e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105771:	8b 40 48             	mov    0x48(%eax),%eax
f0105774:	85 c0                	test   %eax,%eax
f0105776:	74 11                	je     f0105789 <sched_kill_env+0x196>
f0105778:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577b:	8b 40 48             	mov    0x48(%eax),%eax
f010577e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105781:	8b 52 44             	mov    0x44(%edx),%edx
f0105784:	89 50 44             	mov    %edx,0x44(%eax)
f0105787:	eb 14                	jmp    f010579d <sched_kill_env+0x1aa>
f0105789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578c:	8b 40 44             	mov    0x44(%eax),%eax
f010578f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105792:	c1 e2 04             	shl    $0x4,%edx
f0105795:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f010579b:	89 02                	mov    %eax,(%edx)
f010579d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057aa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057b4:	c1 e0 04             	shl    $0x4,%eax
f01057b7:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f01057bc:	8b 00                	mov    (%eax),%eax
f01057be:	8d 50 ff             	lea    -0x1(%eax),%edx
f01057c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057c4:	c1 e0 04             	shl    $0x4,%eax
f01057c7:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f01057cc:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01057ce:	83 ec 0c             	sub    $0xc,%esp
f01057d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01057d4:	e8 b2 41 00 00       	call   f010998b <env_free>
f01057d9:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01057dc:	83 ec 0c             	sub    $0xc,%esp
f01057df:	68 89 1b 13 f0       	push   $0xf0131b89
f01057e4:	e8 48 b6 ff ff       	call   f0100e31 <cprintf>
f01057e9:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01057ec:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01057f3:	eb 50                	jmp    f0105845 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01057f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057f8:	c1 e0 04             	shl    $0x4,%eax
f01057fb:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105800:	8b 00                	mov    (%eax),%eax
f0105802:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105805:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105809:	74 08                	je     f0105813 <sched_kill_env+0x220>
f010580b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580e:	8b 40 44             	mov    0x44(%eax),%eax
f0105811:	eb 05                	jmp    f0105818 <sched_kill_env+0x225>
f0105813:	b8 00 00 00 00       	mov    $0x0,%eax
f0105818:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010581b:	c1 e2 04             	shl    $0x4,%edx
f010581e:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105824:	89 02                	mov    %eax,(%edx)
f0105826:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105829:	c1 e0 04             	shl    $0x4,%eax
f010582c:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105831:	8b 00                	mov    (%eax),%eax
f0105833:	85 c0                	test   %eax,%eax
f0105835:	0f 85 ba fe ff ff    	jne    f01056f5 <sched_kill_env+0x102>
f010583b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010583f:	0f 85 b0 fe ff ff    	jne    f01056f5 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105845:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105849:	75 16                	jne    f0105861 <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010584b:	ff 45 ec             	incl   -0x14(%ebp)
f010584e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0105853:	0f b6 c0             	movzbl %al,%eax
f0105856:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105859:	0f 8f 65 fe ff ff    	jg     f01056c4 <sched_kill_env+0xd1>
f010585f:	eb 01                	jmp    f0105862 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f0105861:	90                   	nop
		}
	}
	if (!found)
f0105862:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105866:	0f 85 a4 00 00 00    	jne    f0105910 <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010586c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105873:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105878:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010587b:	eb 64                	jmp    f01058e1 <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010587d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105880:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105883:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105886:	75 51                	jne    f01058d9 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105888:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010588b:	8d 50 5c             	lea    0x5c(%eax),%edx
f010588e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105891:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105894:	83 ec 04             	sub    $0x4,%esp
f0105897:	52                   	push   %edx
f0105898:	50                   	push   %eax
f0105899:	68 bc 1b 13 f0       	push   $0xf0131bbc
f010589e:	e8 8e b5 ff ff       	call   f0100e31 <cprintf>
f01058a3:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058a6:	83 ec 0c             	sub    $0xc,%esp
f01058a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ac:	e8 bf f9 ff ff       	call   f0105270 <sched_remove_exit>
f01058b1:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058b4:	83 ec 0c             	sub    $0xc,%esp
f01058b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ba:	e8 cc 40 00 00       	call   f010998b <env_free>
f01058bf:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058c2:	83 ec 0c             	sub    $0xc,%esp
f01058c5:	68 89 1b 13 f0       	push   $0xf0131b89
f01058ca:	e8 62 b5 ff ff       	call   f0100e31 <cprintf>
f01058cf:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058d2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058d9:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f01058de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058e5:	74 08                	je     f01058ef <sched_kill_env+0x2fc>
f01058e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ea:	8b 40 44             	mov    0x44(%eax),%eax
f01058ed:	eb 05                	jmp    f01058f4 <sched_kill_env+0x301>
f01058ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01058f4:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f01058f9:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f01058fe:	85 c0                	test   %eax,%eax
f0105900:	0f 85 77 ff ff ff    	jne    f010587d <sched_kill_env+0x28a>
f0105906:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010590a:	0f 85 6d ff ff ff    	jne    f010587d <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f0105910:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105914:	0f 85 9d 00 00 00    	jne    f01059b7 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f010591a:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010591f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105922:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105925:	0f 85 8c 00 00 00    	jne    f01059b7 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f010592b:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0105930:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105933:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105936:	8b 40 54             	mov    0x54(%eax),%eax
f0105939:	83 f8 02             	cmp    $0x2,%eax
f010593c:	74 19                	je     f0105957 <sched_kill_env+0x364>
f010593e:	68 e4 1b 13 f0       	push   $0xf0131be4
f0105943:	68 f2 1a 13 f0       	push   $0xf0131af2
f0105948:	68 77 01 00 00       	push   $0x177
f010594d:	68 07 1b 13 f0       	push   $0xf0131b07
f0105952:	e8 59 a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105957:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010595a:	8d 50 5c             	lea    0x5c(%eax),%edx
f010595d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105960:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105963:	83 ec 04             	sub    $0x4,%esp
f0105966:	52                   	push   %edx
f0105967:	50                   	push   %eax
f0105968:	68 08 1c 13 f0       	push   $0xf0131c08
f010596d:	e8 bf b4 ff ff       	call   f0100e31 <cprintf>
f0105972:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105975:	83 ec 0c             	sub    $0xc,%esp
f0105978:	ff 75 f4             	pushl  -0xc(%ebp)
f010597b:	e8 0b 40 00 00       	call   f010998b <env_free>
f0105980:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105983:	83 ec 0c             	sub    $0xc,%esp
f0105986:	68 89 1b 13 f0       	push   $0xf0131b89
f010598b:	e8 a1 b4 ff ff       	call   f0100e31 <cprintf>
f0105990:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105993:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010599a:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f010599f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01059a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059a5:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059a8:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01059af:	00 00 00 
			fos_scheduler();
f01059b2:	e8 44 08 00 00       	call   f01061fb <fos_scheduler>
		}
	}
}
f01059b7:	90                   	nop
f01059b8:	c9                   	leave  
f01059b9:	c3                   	ret    

f01059ba <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f01059ba:	55                   	push   %ebp
f01059bb:	89 e5                	mov    %esp,%ebp
f01059bd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01059c0:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01059c5:	85 c0                	test   %eax,%eax
f01059c7:	74 69                	je     f0105a32 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01059c9:	83 ec 0c             	sub    $0xc,%esp
f01059cc:	68 34 1c 13 f0       	push   $0xf0131c34
f01059d1:	e8 5b b4 ff ff       	call   f0100e31 <cprintf>
f01059d6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059d9:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01059de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059e1:	eb 26                	jmp    f0105a09 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01059e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059e6:	8d 50 5c             	lea    0x5c(%eax),%edx
f01059e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059ec:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059ef:	83 ec 04             	sub    $0x4,%esp
f01059f2:	52                   	push   %edx
f01059f3:	50                   	push   %eax
f01059f4:	68 56 1c 13 f0       	push   $0xf0131c56
f01059f9:	e8 33 b4 ff ff       	call   f0100e31 <cprintf>
f01059fe:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a01:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a0d:	74 08                	je     f0105a17 <sched_print_all+0x5d>
f0105a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a12:	8b 40 44             	mov    0x44(%eax),%eax
f0105a15:	eb 05                	jmp    f0105a1c <sched_print_all+0x62>
f0105a17:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a1c:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105a21:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105a26:	85 c0                	test   %eax,%eax
f0105a28:	75 b9                	jne    f01059e3 <sched_print_all+0x29>
f0105a2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a2e:	75 b3                	jne    f01059e3 <sched_print_all+0x29>
f0105a30:	eb 10                	jmp    f0105a42 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105a32:	83 ec 0c             	sub    $0xc,%esp
f0105a35:	68 60 1c 13 f0       	push   $0xf0131c60
f0105a3a:	e8 f2 b3 ff ff       	call   f0100e31 <cprintf>
f0105a3f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a42:	83 ec 0c             	sub    $0xc,%esp
f0105a45:	68 7c 1c 13 f0       	push   $0xf0131c7c
f0105a4a:	e8 e2 b3 ff ff       	call   f0100e31 <cprintf>
f0105a4f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a59:	e9 c8 00 00 00       	jmp    f0105b26 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a61:	c1 e0 04             	shl    $0x4,%eax
f0105a64:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105a69:	8b 00                	mov    (%eax),%eax
f0105a6b:	85 c0                	test   %eax,%eax
f0105a6d:	0f 84 8d 00 00 00    	je     f0105b00 <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a73:	83 ec 08             	sub    $0x8,%esp
f0105a76:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a79:	68 b0 1c 13 f0       	push   $0xf0131cb0
f0105a7e:	e8 ae b3 ff ff       	call   f0100e31 <cprintf>
f0105a83:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105a86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a89:	c1 e0 04             	shl    $0x4,%eax
f0105a8c:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105a91:	8b 00                	mov    (%eax),%eax
f0105a93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a96:	eb 2e                	jmp    f0105ac6 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a9b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aa1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105aa4:	83 ec 04             	sub    $0x4,%esp
f0105aa7:	52                   	push   %edx
f0105aa8:	50                   	push   %eax
f0105aa9:	68 56 1c 13 f0       	push   $0xf0131c56
f0105aae:	e8 7e b3 ff ff       	call   f0100e31 <cprintf>
f0105ab3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ab9:	c1 e0 04             	shl    $0x4,%eax
f0105abc:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105ac1:	8b 00                	mov    (%eax),%eax
f0105ac3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ac6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105aca:	74 08                	je     f0105ad4 <sched_print_all+0x11a>
f0105acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105acf:	8b 40 44             	mov    0x44(%eax),%eax
f0105ad2:	eb 05                	jmp    f0105ad9 <sched_print_all+0x11f>
f0105ad4:	b8 00 00 00 00       	mov    $0x0,%eax
f0105ad9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105adc:	c1 e2 04             	shl    $0x4,%edx
f0105adf:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105ae5:	89 02                	mov    %eax,(%edx)
f0105ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aea:	c1 e0 04             	shl    $0x4,%eax
f0105aed:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105af2:	8b 00                	mov    (%eax),%eax
f0105af4:	85 c0                	test   %eax,%eax
f0105af6:	75 a0                	jne    f0105a98 <sched_print_all+0xde>
f0105af8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105afc:	75 9a                	jne    f0105a98 <sched_print_all+0xde>
f0105afe:	eb 13                	jmp    f0105b13 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105b00:	83 ec 08             	sub    $0x8,%esp
f0105b03:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b06:	68 d8 1c 13 f0       	push   $0xf0131cd8
f0105b0b:	e8 21 b3 ff ff       	call   f0100e31 <cprintf>
f0105b10:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105b13:	83 ec 0c             	sub    $0xc,%esp
f0105b16:	68 7c 1c 13 f0       	push   $0xf0131c7c
f0105b1b:	e8 11 b3 ff ff       	call   f0100e31 <cprintf>
f0105b20:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b23:	ff 45 f0             	incl   -0x10(%ebp)
f0105b26:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0105b2b:	0f b6 c0             	movzbl %al,%eax
f0105b2e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105b31:	0f 8f 27 ff ff ff    	jg     f0105a5e <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105b37:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105b3c:	85 c0                	test   %eax,%eax
f0105b3e:	74 69                	je     f0105ba9 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b40:	83 ec 0c             	sub    $0xc,%esp
f0105b43:	68 fc 1c 13 f0       	push   $0xf0131cfc
f0105b48:	e8 e4 b2 ff ff       	call   f0100e31 <cprintf>
f0105b4d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b50:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105b55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b58:	eb 26                	jmp    f0105b80 <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b5d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b63:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b66:	83 ec 04             	sub    $0x4,%esp
f0105b69:	52                   	push   %edx
f0105b6a:	50                   	push   %eax
f0105b6b:	68 56 1c 13 f0       	push   $0xf0131c56
f0105b70:	e8 bc b2 ff ff       	call   f0100e31 <cprintf>
f0105b75:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b78:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b84:	74 08                	je     f0105b8e <sched_print_all+0x1d4>
f0105b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b89:	8b 40 44             	mov    0x44(%eax),%eax
f0105b8c:	eb 05                	jmp    f0105b93 <sched_print_all+0x1d9>
f0105b8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105b93:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0105b98:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105b9d:	85 c0                	test   %eax,%eax
f0105b9f:	75 b9                	jne    f0105b5a <sched_print_all+0x1a0>
f0105ba1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba5:	75 b3                	jne    f0105b5a <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105ba7:	eb 10                	jmp    f0105bb9 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105ba9:	83 ec 0c             	sub    $0xc,%esp
f0105bac:	68 1e 1d 13 f0       	push   $0xf0131d1e
f0105bb1:	e8 7b b2 ff ff       	call   f0100e31 <cprintf>
f0105bb6:	83 c4 10             	add    $0x10,%esp
	}
}
f0105bb9:	90                   	nop
f0105bba:	c9                   	leave  
f0105bbb:	c3                   	ret    

f0105bbc <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105bbc:	55                   	push   %ebp
f0105bbd:	89 e5                	mov    %esp,%ebp
f0105bbf:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105bc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105bc9:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105bce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bd1:	eb 24                	jmp    f0105bf7 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105bd3:	83 ec 0c             	sub    $0xc,%esp
f0105bd6:	ff 75 f4             	pushl  -0xc(%ebp)
f0105bd9:	e8 aa f5 ff ff       	call   f0105188 <sched_remove_new>
f0105bde:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105be1:	83 ec 0c             	sub    $0xc,%esp
f0105be4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105be7:	e8 30 f4 ff ff       	call   f010501c <sched_insert_ready0>
f0105bec:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105bef:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105bf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bfb:	74 08                	je     f0105c05 <sched_run_all+0x49>
f0105bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c00:	8b 40 44             	mov    0x44(%eax),%eax
f0105c03:	eb 05                	jmp    f0105c0a <sched_run_all+0x4e>
f0105c05:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c0a:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105c0f:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105c14:	85 c0                	test   %eax,%eax
f0105c16:	75 bb                	jne    f0105bd3 <sched_run_all+0x17>
f0105c18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c1c:	75 b5                	jne    f0105bd3 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105c1e:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f0105c23:	85 c0                	test   %eax,%eax
f0105c25:	75 05                	jne    f0105c2c <sched_run_all+0x70>
		fos_scheduler();
f0105c27:	e8 cf 05 00 00       	call   f01061fb <fos_scheduler>
}
f0105c2c:	90                   	nop
f0105c2d:	c9                   	leave  
f0105c2e:	c3                   	ret    

f0105c2f <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105c2f:	55                   	push   %ebp
f0105c30:	89 e5                	mov    %esp,%ebp
f0105c32:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105c35:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105c3a:	85 c0                	test   %eax,%eax
f0105c3c:	0f 84 95 00 00 00    	je     f0105cd7 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c42:	83 ec 0c             	sub    $0xc,%esp
f0105c45:	68 3c 1d 13 f0       	push   $0xf0131d3c
f0105c4a:	e8 e2 b1 ff ff       	call   f0100e31 <cprintf>
f0105c4f:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c52:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105c57:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c5a:	eb 52                	jmp    f0105cae <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5f:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c65:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c68:	83 ec 04             	sub    $0x4,%esp
f0105c6b:	52                   	push   %edx
f0105c6c:	50                   	push   %eax
f0105c6d:	68 68 1d 13 f0       	push   $0xf0131d68
f0105c72:	e8 ba b1 ff ff       	call   f0100e31 <cprintf>
f0105c77:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c7a:	83 ec 0c             	sub    $0xc,%esp
f0105c7d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c80:	e8 03 f5 ff ff       	call   f0105188 <sched_remove_new>
f0105c85:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105c88:	83 ec 0c             	sub    $0xc,%esp
f0105c8b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c8e:	e8 f8 3c 00 00       	call   f010998b <env_free>
f0105c93:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105c96:	83 ec 0c             	sub    $0xc,%esp
f0105c99:	68 89 1b 13 f0       	push   $0xf0131b89
f0105c9e:	e8 8e b1 ff ff       	call   f0100e31 <cprintf>
f0105ca3:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105ca6:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105cab:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cb2:	74 08                	je     f0105cbc <sched_kill_all+0x8d>
f0105cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cb7:	8b 40 44             	mov    0x44(%eax),%eax
f0105cba:	eb 05                	jmp    f0105cc1 <sched_kill_all+0x92>
f0105cbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cc1:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105cc6:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105ccb:	85 c0                	test   %eax,%eax
f0105ccd:	75 8d                	jne    f0105c5c <sched_kill_all+0x2d>
f0105ccf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cd3:	75 87                	jne    f0105c5c <sched_kill_all+0x2d>
f0105cd5:	eb 10                	jmp    f0105ce7 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105cd7:	83 ec 0c             	sub    $0xc,%esp
f0105cda:	68 7b 1d 13 f0       	push   $0xf0131d7b
f0105cdf:	e8 4d b1 ff ff       	call   f0100e31 <cprintf>
f0105ce4:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105ce7:	83 ec 0c             	sub    $0xc,%esp
f0105cea:	68 7c 1c 13 f0       	push   $0xf0131c7c
f0105cef:	e8 3d b1 ff ff       	call   f0100e31 <cprintf>
f0105cf4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105cf7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105cfe:	e9 9d 01 00 00       	jmp    f0105ea0 <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105d03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d06:	c1 e0 04             	shl    $0x4,%eax
f0105d09:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105d0e:	8b 00                	mov    (%eax),%eax
f0105d10:	85 c0                	test   %eax,%eax
f0105d12:	0f 84 62 01 00 00    	je     f0105e7a <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105d18:	83 ec 08             	sub    $0x8,%esp
f0105d1b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105d1e:	68 98 1d 13 f0       	push   $0xf0131d98
f0105d23:	e8 09 b1 ff ff       	call   f0100e31 <cprintf>
f0105d28:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105d2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d2e:	c1 e0 04             	shl    $0x4,%eax
f0105d31:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105d36:	8b 00                	mov    (%eax),%eax
f0105d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d3b:	e9 f8 00 00 00       	jmp    f0105e38 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d43:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d49:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d4c:	83 ec 04             	sub    $0x4,%esp
f0105d4f:	52                   	push   %edx
f0105d50:	50                   	push   %eax
f0105d51:	68 68 1d 13 f0       	push   $0xf0131d68
f0105d56:	e8 d6 b0 ff ff       	call   f0100e31 <cprintf>
f0105d5b:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d62:	75 17                	jne    f0105d7b <sched_kill_all+0x14c>
f0105d64:	83 ec 04             	sub    $0x4,%esp
f0105d67:	68 43 1b 13 f0       	push   $0xf0131b43
f0105d6c:	68 e5 01 00 00       	push   $0x1e5
f0105d71:	68 07 1b 13 f0       	push   $0xf0131b07
f0105d76:	e8 35 a4 ff ff       	call   f01001b0 <_panic>
f0105d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d7e:	8b 40 44             	mov    0x44(%eax),%eax
f0105d81:	85 c0                	test   %eax,%eax
f0105d83:	74 11                	je     f0105d96 <sched_kill_all+0x167>
f0105d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d88:	8b 40 44             	mov    0x44(%eax),%eax
f0105d8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d8e:	8b 52 48             	mov    0x48(%edx),%edx
f0105d91:	89 50 48             	mov    %edx,0x48(%eax)
f0105d94:	eb 14                	jmp    f0105daa <sched_kill_all+0x17b>
f0105d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d99:	8b 40 48             	mov    0x48(%eax),%eax
f0105d9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d9f:	c1 e2 04             	shl    $0x4,%edx
f0105da2:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f0105da8:	89 02                	mov    %eax,(%edx)
f0105daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dad:	8b 40 48             	mov    0x48(%eax),%eax
f0105db0:	85 c0                	test   %eax,%eax
f0105db2:	74 11                	je     f0105dc5 <sched_kill_all+0x196>
f0105db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db7:	8b 40 48             	mov    0x48(%eax),%eax
f0105dba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105dbd:	8b 52 44             	mov    0x44(%edx),%edx
f0105dc0:	89 50 44             	mov    %edx,0x44(%eax)
f0105dc3:	eb 14                	jmp    f0105dd9 <sched_kill_all+0x1aa>
f0105dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dc8:	8b 40 44             	mov    0x44(%eax),%eax
f0105dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dce:	c1 e2 04             	shl    $0x4,%edx
f0105dd1:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0105dd7:	89 02                	mov    %eax,(%edx)
f0105dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ddc:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105de6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105df0:	c1 e0 04             	shl    $0x4,%eax
f0105df3:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105df8:	8b 00                	mov    (%eax),%eax
f0105dfa:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e00:	c1 e0 04             	shl    $0x4,%eax
f0105e03:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105e08:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105e0a:	83 ec 0c             	sub    $0xc,%esp
f0105e0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105e10:	e8 76 3b 00 00       	call   f010998b <env_free>
f0105e15:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105e18:	83 ec 0c             	sub    $0xc,%esp
f0105e1b:	68 89 1b 13 f0       	push   $0xf0131b89
f0105e20:	e8 0c b0 ff ff       	call   f0100e31 <cprintf>
f0105e25:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105e28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e2b:	c1 e0 04             	shl    $0x4,%eax
f0105e2e:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105e33:	8b 00                	mov    (%eax),%eax
f0105e35:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e3c:	74 08                	je     f0105e46 <sched_kill_all+0x217>
f0105e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e41:	8b 40 44             	mov    0x44(%eax),%eax
f0105e44:	eb 05                	jmp    f0105e4b <sched_kill_all+0x21c>
f0105e46:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e4e:	c1 e2 04             	shl    $0x4,%edx
f0105e51:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105e57:	89 02                	mov    %eax,(%edx)
f0105e59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e5c:	c1 e0 04             	shl    $0x4,%eax
f0105e5f:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105e64:	8b 00                	mov    (%eax),%eax
f0105e66:	85 c0                	test   %eax,%eax
f0105e68:	0f 85 d2 fe ff ff    	jne    f0105d40 <sched_kill_all+0x111>
f0105e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e72:	0f 85 c8 fe ff ff    	jne    f0105d40 <sched_kill_all+0x111>
f0105e78:	eb 13                	jmp    f0105e8d <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e7a:	83 ec 08             	sub    $0x8,%esp
f0105e7d:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e80:	68 d8 1c 13 f0       	push   $0xf0131cd8
f0105e85:	e8 a7 af ff ff       	call   f0100e31 <cprintf>
f0105e8a:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105e8d:	83 ec 0c             	sub    $0xc,%esp
f0105e90:	68 7c 1c 13 f0       	push   $0xf0131c7c
f0105e95:	e8 97 af ff ff       	call   f0100e31 <cprintf>
f0105e9a:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105e9d:	ff 45 f0             	incl   -0x10(%ebp)
f0105ea0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0105ea5:	0f b6 c0             	movzbl %al,%eax
f0105ea8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105eab:	0f 8f 52 fe ff ff    	jg     f0105d03 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105eb1:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105eb6:	85 c0                	test   %eax,%eax
f0105eb8:	0f 84 95 00 00 00    	je     f0105f53 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105ebe:	83 ec 0c             	sub    $0xc,%esp
f0105ec1:	68 cc 1d 13 f0       	push   $0xf0131dcc
f0105ec6:	e8 66 af ff ff       	call   f0100e31 <cprintf>
f0105ecb:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105ece:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105ed3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ed6:	eb 52                	jmp    f0105f2a <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105edb:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105ede:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ee1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ee4:	83 ec 04             	sub    $0x4,%esp
f0105ee7:	52                   	push   %edx
f0105ee8:	50                   	push   %eax
f0105ee9:	68 68 1d 13 f0       	push   $0xf0131d68
f0105eee:	e8 3e af ff ff       	call   f0100e31 <cprintf>
f0105ef3:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105ef6:	83 ec 0c             	sub    $0xc,%esp
f0105ef9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105efc:	e8 6f f3 ff ff       	call   f0105270 <sched_remove_exit>
f0105f01:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105f04:	83 ec 0c             	sub    $0xc,%esp
f0105f07:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f0a:	e8 7c 3a 00 00       	call   f010998b <env_free>
f0105f0f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105f12:	83 ec 0c             	sub    $0xc,%esp
f0105f15:	68 89 1b 13 f0       	push   $0xf0131b89
f0105f1a:	e8 12 af ff ff       	call   f0100e31 <cprintf>
f0105f1f:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f22:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105f27:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f2e:	74 08                	je     f0105f38 <sched_kill_all+0x309>
f0105f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f33:	8b 40 44             	mov    0x44(%eax),%eax
f0105f36:	eb 05                	jmp    f0105f3d <sched_kill_all+0x30e>
f0105f38:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f3d:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0105f42:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105f47:	85 c0                	test   %eax,%eax
f0105f49:	75 8d                	jne    f0105ed8 <sched_kill_all+0x2a9>
f0105f4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4f:	75 87                	jne    f0105ed8 <sched_kill_all+0x2a9>
f0105f51:	eb 10                	jmp    f0105f63 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f53:	83 ec 0c             	sub    $0xc,%esp
f0105f56:	68 1e 1d 13 f0       	push   $0xf0131d1e
f0105f5b:	e8 d1 ae ff ff       	call   f0100e31 <cprintf>
f0105f60:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f63:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f0105f6a:	00 00 00 
	fos_scheduler();
f0105f6d:	e8 89 02 00 00       	call   f01061fb <fos_scheduler>

f0105f72 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f72:	55                   	push   %ebp
f0105f73:	89 e5                	mov    %esp,%ebp
f0105f75:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f7f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105f86:	e9 3e 01 00 00       	jmp    f01060c9 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105f8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f8e:	c1 e0 04             	shl    $0x4,%eax
f0105f91:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105f96:	8b 00                	mov    (%eax),%eax
f0105f98:	85 c0                	test   %eax,%eax
f0105f9a:	0f 84 26 01 00 00    	je     f01060c6 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105fa0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105fa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105faa:	c1 e0 04             	shl    $0x4,%eax
f0105fad:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105fb2:	8b 00                	mov    (%eax),%eax
f0105fb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fb7:	e9 ca 00 00 00       	jmp    f0106086 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105fbc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fc0:	75 17                	jne    f0105fd9 <sched_exit_all_ready_envs+0x67>
f0105fc2:	83 ec 04             	sub    $0x4,%esp
f0105fc5:	68 43 1b 13 f0       	push   $0xf0131b43
f0105fca:	68 14 02 00 00       	push   $0x214
f0105fcf:	68 07 1b 13 f0       	push   $0xf0131b07
f0105fd4:	e8 d7 a1 ff ff       	call   f01001b0 <_panic>
f0105fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fdc:	8b 40 44             	mov    0x44(%eax),%eax
f0105fdf:	85 c0                	test   %eax,%eax
f0105fe1:	74 11                	je     f0105ff4 <sched_exit_all_ready_envs+0x82>
f0105fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe6:	8b 40 44             	mov    0x44(%eax),%eax
f0105fe9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105fec:	8b 52 48             	mov    0x48(%edx),%edx
f0105fef:	89 50 48             	mov    %edx,0x48(%eax)
f0105ff2:	eb 14                	jmp    f0106008 <sched_exit_all_ready_envs+0x96>
f0105ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ff7:	8b 40 48             	mov    0x48(%eax),%eax
f0105ffa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ffd:	c1 e2 04             	shl    $0x4,%edx
f0106000:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f0106006:	89 02                	mov    %eax,(%edx)
f0106008:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010600b:	8b 40 48             	mov    0x48(%eax),%eax
f010600e:	85 c0                	test   %eax,%eax
f0106010:	74 11                	je     f0106023 <sched_exit_all_ready_envs+0xb1>
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	8b 40 48             	mov    0x48(%eax),%eax
f0106018:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010601b:	8b 52 44             	mov    0x44(%edx),%edx
f010601e:	89 50 44             	mov    %edx,0x44(%eax)
f0106021:	eb 14                	jmp    f0106037 <sched_exit_all_ready_envs+0xc5>
f0106023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106026:	8b 40 44             	mov    0x44(%eax),%eax
f0106029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010602c:	c1 e2 04             	shl    $0x4,%edx
f010602f:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0106035:	89 02                	mov    %eax,(%edx)
f0106037:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010603a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106044:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010604b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010604e:	c1 e0 04             	shl    $0x4,%eax
f0106051:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0106056:	8b 00                	mov    (%eax),%eax
f0106058:	8d 50 ff             	lea    -0x1(%eax),%edx
f010605b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010605e:	c1 e0 04             	shl    $0x4,%eax
f0106061:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0106066:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106068:	83 ec 0c             	sub    $0xc,%esp
f010606b:	ff 75 f4             	pushl  -0xc(%ebp)
f010606e:	e8 ba f1 ff ff       	call   f010522d <sched_insert_exit>
f0106073:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106076:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106079:	c1 e0 04             	shl    $0x4,%eax
f010607c:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0106081:	8b 00                	mov    (%eax),%eax
f0106083:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106086:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010608a:	74 08                	je     f0106094 <sched_exit_all_ready_envs+0x122>
f010608c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010608f:	8b 40 44             	mov    0x44(%eax),%eax
f0106092:	eb 05                	jmp    f0106099 <sched_exit_all_ready_envs+0x127>
f0106094:	b8 00 00 00 00       	mov    $0x0,%eax
f0106099:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010609c:	c1 e2 04             	shl    $0x4,%edx
f010609f:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f01060a5:	89 02                	mov    %eax,(%edx)
f01060a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060aa:	c1 e0 04             	shl    $0x4,%eax
f01060ad:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f01060b2:	8b 00                	mov    (%eax),%eax
f01060b4:	85 c0                	test   %eax,%eax
f01060b6:	0f 85 00 ff ff ff    	jne    f0105fbc <sched_exit_all_ready_envs+0x4a>
f01060bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060c0:	0f 85 f6 fe ff ff    	jne    f0105fbc <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01060c6:	ff 45 f0             	incl   -0x10(%ebp)
f01060c9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01060ce:	0f b6 c0             	movzbl %al,%eax
f01060d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01060d4:	0f 8f b1 fe ff ff    	jg     f0105f8b <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01060da:	90                   	nop
f01060db:	c9                   	leave  
f01060dc:	c3                   	ret    

f01060dd <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f01060dd:	55                   	push   %ebp
f01060de:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060e0:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f01060e5:	8b 15 04 bf 2b f0    	mov    0xf02bbf04,%edx
}
f01060eb:	5d                   	pop    %ebp
f01060ec:	c3                   	ret    

f01060ed <env_get_nice>:
int env_get_nice(struct Env* e)
{
f01060ed:	55                   	push   %ebp
f01060ee:	89 e5                	mov    %esp,%ebp
f01060f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01060f3:	83 ec 04             	sub    $0x4,%esp
f01060f6:	68 f8 1d 13 f0       	push   $0xf0131df8
f01060fb:	68 26 02 00 00       	push   $0x226
f0106100:	68 07 1b 13 f0       	push   $0xf0131b07
f0106105:	e8 a6 a0 ff ff       	call   f01001b0 <_panic>

f010610a <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f010610a:	55                   	push   %ebp
f010610b:	89 e5                	mov    %esp,%ebp
f010610d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106110:	83 ec 04             	sub    $0x4,%esp
f0106113:	68 f8 1d 13 f0       	push   $0xf0131df8
f0106118:	68 2e 02 00 00       	push   $0x22e
f010611d:	68 07 1b 13 f0       	push   $0xf0131b07
f0106122:	e8 89 a0 ff ff       	call   f01001b0 <_panic>

f0106127 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0106127:	55                   	push   %ebp
f0106128:	89 e5                	mov    %esp,%ebp
f010612a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010612d:	83 ec 04             	sub    $0x4,%esp
f0106130:	68 f8 1d 13 f0       	push   $0xf0131df8
f0106135:	68 35 02 00 00       	push   $0x235
f010613a:	68 07 1b 13 f0       	push   $0xf0131b07
f010613f:	e8 6c a0 ff ff       	call   f01001b0 <_panic>

f0106144 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106144:	55                   	push   %ebp
f0106145:	89 e5                	mov    %esp,%ebp
f0106147:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010614a:	83 ec 04             	sub    $0x4,%esp
f010614d:	68 f8 1d 13 f0       	push   $0xf0131df8
f0106152:	68 3d 02 00 00       	push   $0x23d
f0106157:	68 07 1b 13 f0       	push   $0xf0131b07
f010615c:	e8 4f a0 ff ff       	call   f01001b0 <_panic>

f0106161 <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0106161:	55                   	push   %ebp
f0106162:	89 e5                	mov    %esp,%ebp
f0106164:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f0106169:	85 c0                	test   %eax,%eax
f010616b:	75 07                	jne    f0106174 <isSchedMethodRR+0x13>
f010616d:	b8 01 00 00 00       	mov    $0x1,%eax
f0106172:	eb 05                	jmp    f0106179 <isSchedMethodRR+0x18>
f0106174:	b8 00 00 00 00       	mov    $0x0,%eax
f0106179:	5d                   	pop    %ebp
f010617a:	c3                   	ret    

f010617b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010617b:	55                   	push   %ebp
f010617c:	89 e5                	mov    %esp,%ebp
f010617e:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f0106183:	83 f8 01             	cmp    $0x1,%eax
f0106186:	75 07                	jne    f010618f <isSchedMethodMLFQ+0x14>
f0106188:	b8 01 00 00 00       	mov    $0x1,%eax
f010618d:	eb 05                	jmp    f0106194 <isSchedMethodMLFQ+0x19>
f010618f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106194:	5d                   	pop    %ebp
f0106195:	c3                   	ret    

f0106196 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0106196:	55                   	push   %ebp
f0106197:	89 e5                	mov    %esp,%ebp
f0106199:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f010619e:	83 f8 02             	cmp    $0x2,%eax
f01061a1:	75 07                	jne    f01061aa <isSchedMethodBSD+0x14>
f01061a3:	b8 01 00 00 00       	mov    $0x1,%eax
f01061a8:	eb 05                	jmp    f01061af <isSchedMethodBSD+0x19>
f01061aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01061af:	5d                   	pop    %ebp
f01061b0:	c3                   	ret    

f01061b1 <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f01061b1:	55                   	push   %ebp
f01061b2:	89 e5                	mov    %esp,%ebp
f01061b4:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01061b7:	c7 05 b4 9a 2b f0 00 	movl   $0x0,0xf02b9ab4
f01061be:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f01061c1:	83 ec 0c             	sub    $0xc,%esp
f01061c4:	6a 0a                	push   $0xa
f01061c6:	e8 2b 01 00 00       	call   f01062f6 <sched_init_RR>
f01061cb:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01061ce:	83 ec 0c             	sub    $0xc,%esp
f01061d1:	68 d8 be 2b f0       	push   $0xf02bbed8
f01061d6:	e8 8b eb ff ff       	call   f0104d66 <init_queue>
f01061db:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01061de:	83 ec 0c             	sub    $0xc,%esp
f01061e1:	68 a4 9a 2b f0       	push   $0xf02b9aa4
f01061e6:	e8 7b eb ff ff       	call   f0104d66 <init_queue>
f01061eb:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f01061ee:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f01061f5:	00 00 00 
}
f01061f8:	90                   	nop
f01061f9:	c9                   	leave  
f01061fa:	c3                   	ret    

f01061fb <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f01061fb:	55                   	push   %ebp
f01061fc:	89 e5                	mov    %esp,%ebp
f01061fe:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f0106201:	e8 c0 7e 02 00       	call   f012e0c6 <chk1>
	scheduler_status = SCH_STARTED;
f0106206:	c7 05 f4 be 2b f0 01 	movl   $0x1,0xf02bbef4
f010620d:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0106210:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0106217:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f010621c:	85 c0                	test   %eax,%eax
f010621e:	75 48                	jne    f0106268 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0106220:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0106225:	85 c0                	test   %eax,%eax
f0106227:	74 16                	je     f010623f <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0106229:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010622e:	83 ec 08             	sub    $0x8,%esp
f0106231:	50                   	push   %eax
f0106232:	68 40 3b 25 f0       	push   $0xf0253b40
f0106237:	e8 6b eb ff ff       	call   f0104da7 <enqueue>
f010623c:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010623f:	83 ec 0c             	sub    $0xc,%esp
f0106242:	68 40 3b 25 f0       	push   $0xf0253b40
f0106247:	e8 ec eb ff ff       	call   f0104e38 <dequeue>
f010624c:	83 c4 10             	add    $0x10,%esp
f010624f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106252:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f0106257:	0f b6 c0             	movzbl %al,%eax
f010625a:	83 ec 0c             	sub    $0xc,%esp
f010625d:	50                   	push   %eax
f010625e:	e8 31 e9 ff ff       	call   f0104b94 <kclock_set_quantum>
f0106263:	83 c4 10             	add    $0x10,%esp
f0106266:	eb 26                	jmp    f010628e <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106268:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f010626d:	83 f8 01             	cmp    $0x1,%eax
f0106270:	75 0a                	jne    f010627c <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106272:	e8 f9 00 00 00       	call   f0106370 <fos_scheduler_MLFQ>
f0106277:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010627a:	eb 12                	jmp    f010628e <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010627c:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f0106281:	83 f8 02             	cmp    $0x2,%eax
f0106284:	75 08                	jne    f010628e <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f0106286:	e8 02 01 00 00       	call   f010638d <fos_scheduler_BSD>
f010628b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010628e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0106293:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0106296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106299:	a3 54 32 25 f0       	mov    %eax,0xf0253254
	chk2(next_env) ;
f010629e:	83 ec 0c             	sub    $0xc,%esp
f01062a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01062a4:	e8 5a 7e 02 00       	call   f012e103 <chk2>
f01062a9:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01062ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062af:	a3 54 32 25 f0       	mov    %eax,0xf0253254

	//sched_print_all();

	if(next_env != NULL)
f01062b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01062b8:	74 0b                	je     f01062c5 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01062ba:	83 ec 0c             	sub    $0xc,%esp
f01062bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c0:	e8 69 36 00 00       	call   f010992e <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01062c5:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01062cc:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01062cf:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01062d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062da:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01062dd:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f01062e4:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01062e7:	83 ec 0c             	sub    $0xc,%esp
f01062ea:	6a 00                	push   $0x0
f01062ec:	e8 5f b8 ff ff       	call   f0101b50 <run_command_prompt>
f01062f1:	83 c4 10             	add    $0x10,%esp
f01062f4:	eb f1                	jmp    f01062e7 <fos_scheduler+0xec>

f01062f6 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f01062f6:	55                   	push   %ebp
f01062f7:	89 e5                	mov    %esp,%ebp
f01062f9:	83 ec 18             	sub    $0x18,%esp
f01062fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01062ff:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0106302:	c6 05 14 bf 2b f0 01 	movb   $0x1,0xf02bbf14
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0106309:	8a 45 f4             	mov    -0xc(%ebp),%al
f010630c:	a2 c8 be 2b f0       	mov    %al,0xf02bbec8
	kclock_set_quantum(quantums[0]);
f0106311:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f0106316:	0f b6 c0             	movzbl %al,%eax
f0106319:	83 ec 0c             	sub    $0xc,%esp
f010631c:	50                   	push   %eax
f010631d:	e8 72 e8 ff ff       	call   f0104b94 <kclock_set_quantum>
f0106322:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106325:	83 ec 0c             	sub    $0xc,%esp
f0106328:	68 40 3b 25 f0       	push   $0xf0253b40
f010632d:	e8 34 ea ff ff       	call   f0104d66 <init_queue>
f0106332:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106335:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f010633c:	00 00 00 
	scheduler_method = SCH_RR;
f010633f:	c7 05 e8 be 2b f0 00 	movl   $0x0,0xf02bbee8
f0106346:	00 00 00 
	//=========================================
	//=========================================
}
f0106349:	90                   	nop
f010634a:	c9                   	leave  
f010634b:	c3                   	ret    

f010634c <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010634c:	55                   	push   %ebp
f010634d:	89 e5                	mov    %esp,%ebp
f010634f:	83 ec 04             	sub    $0x4,%esp
f0106352:	8b 45 08             	mov    0x8(%ebp),%eax
f0106355:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106358:	90                   	nop
f0106359:	c9                   	leave  
f010635a:	c3                   	ret    

f010635b <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f010635b:	55                   	push   %ebp
f010635c:	89 e5                	mov    %esp,%ebp
f010635e:	83 ec 08             	sub    $0x8,%esp
f0106361:	8b 55 08             	mov    0x8(%ebp),%edx
f0106364:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106367:	88 55 fc             	mov    %dl,-0x4(%ebp)
f010636a:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010636d:	90                   	nop
f010636e:	c9                   	leave  
f010636f:	c3                   	ret    

f0106370 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0106370:	55                   	push   %ebp
f0106371:	89 e5                	mov    %esp,%ebp
f0106373:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106376:	83 ec 04             	sub    $0x4,%esp
f0106379:	68 0c 1e 13 f0       	push   $0xf0131e0c
f010637e:	68 b9 00 00 00       	push   $0xb9
f0106383:	68 1c 1e 13 f0       	push   $0xf0131e1c
f0106388:	e8 23 9e ff ff       	call   f01001b0 <_panic>

f010638d <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f010638d:	55                   	push   %ebp
f010638e:	89 e5                	mov    %esp,%ebp
f0106390:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106393:	83 ec 04             	sub    $0x4,%esp
f0106396:	68 2d 1e 13 f0       	push   $0xf0131e2d
f010639b:	68 c5 00 00 00       	push   $0xc5
f01063a0:	68 1c 1e 13 f0       	push   $0xf0131e1c
f01063a5:	e8 06 9e ff ff       	call   f01001b0 <_panic>

f01063aa <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01063aa:	55                   	push   %ebp
f01063ab:	89 e5                	mov    %esp,%ebp
f01063ad:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01063b0:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f01063b5:	8b 15 04 bf 2b f0    	mov    0xf02bbf04,%edx
f01063bb:	83 c0 01             	add    $0x1,%eax
f01063be:	83 d2 00             	adc    $0x0,%edx
f01063c1:	a3 00 bf 2b f0       	mov    %eax,0xf02bbf00
f01063c6:	89 15 04 bf 2b f0    	mov    %edx,0xf02bbf04
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01063cc:	83 ec 0c             	sub    $0xc,%esp
f01063cf:	6a 01                	push   $0x1
f01063d1:	e8 5c 73 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f01063d6:	83 c4 10             	add    $0x10,%esp
f01063d9:	85 c0                	test   %eax,%eax
f01063db:	74 05                	je     f01063e2 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01063dd:	e8 05 00 00 00       	call   f01063e7 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01063e2:	e8 14 fe ff ff       	call   f01061fb <fos_scheduler>

f01063e7 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f01063e7:	55                   	push   %ebp
f01063e8:	89 e5                	mov    %esp,%ebp
f01063ea:	53                   	push   %ebx
f01063eb:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f01063ee:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01063f3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01063f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01063fa:	0f 84 a9 01 00 00    	je     f01065a9 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106400:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106407:	e9 9f 00 00 00       	jmp    f01064ab <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010640c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010640f:	89 d0                	mov    %edx,%eax
f0106411:	01 c0                	add    %eax,%eax
f0106413:	01 d0                	add    %edx,%eax
f0106415:	c1 e0 03             	shl    $0x3,%eax
f0106418:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010641e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106421:	01 d0                	add    %edx,%eax
f0106423:	83 c0 08             	add    $0x8,%eax
f0106426:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f0106429:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010642c:	8a 40 04             	mov    0x4(%eax),%al
f010642f:	3c 01                	cmp    $0x1,%al
f0106431:	74 74                	je     f01064a7 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106433:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106436:	8b 00                	mov    (%eax),%eax
f0106438:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f010643b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106444:	83 ec 08             	sub    $0x8,%esp
f0106447:	ff 75 e4             	pushl  -0x1c(%ebp)
f010644a:	50                   	push   %eax
f010644b:	e8 75 1c 00 00       	call   f01080c5 <pt_get_page_permissions>
f0106450:	83 c4 10             	add    $0x10,%esp
f0106453:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106456:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106459:	8b 40 08             	mov    0x8(%eax),%eax
f010645c:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010645f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106462:	83 e0 20             	and    $0x20,%eax
f0106465:	85 c0                	test   %eax,%eax
f0106467:	74 2e                	je     f0106497 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106469:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010646c:	c1 e8 02             	shr    $0x2,%eax
f010646f:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106474:	89 c2                	mov    %eax,%edx
f0106476:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106479:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010647c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010647f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106485:	6a 20                	push   $0x20
f0106487:	6a 00                	push   $0x0
f0106489:	ff 75 e4             	pushl  -0x1c(%ebp)
f010648c:	50                   	push   %eax
f010648d:	e8 6f 1b 00 00       	call   f0108001 <pt_set_page_permissions>
f0106492:	83 c4 10             	add    $0x10,%esp
f0106495:	eb 11                	jmp    f01064a8 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f0106497:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010649a:	c1 e8 02             	shr    $0x2,%eax
f010649d:	89 c2                	mov    %eax,%edx
f010649f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064a2:	89 50 08             	mov    %edx,0x8(%eax)
f01064a5:	eb 01                	jmp    f01064a8 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01064a7:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01064a8:	ff 45 f4             	incl   -0xc(%ebp)
f01064ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064ae:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01064b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064b7:	39 c2                	cmp    %eax,%edx
f01064b9:	0f 87 4d ff ff ff    	ja     f010640c <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01064bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064c6:	e9 d4 00 00 00       	jmp    f010659f <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01064cb:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064d1:	89 d0                	mov    %edx,%eax
f01064d3:	01 c0                	add    %eax,%eax
f01064d5:	01 d0                	add    %edx,%eax
f01064d7:	c1 e0 03             	shl    $0x3,%eax
f01064da:	01 c8                	add    %ecx,%eax
f01064dc:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064e1:	8a 00                	mov    (%eax),%al
f01064e3:	3c 01                	cmp    $0x1,%al
f01064e5:	0f 84 b1 00 00 00    	je     f010659c <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01064eb:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064f1:	89 d0                	mov    %edx,%eax
f01064f3:	01 c0                	add    %eax,%eax
f01064f5:	01 d0                	add    %edx,%eax
f01064f7:	c1 e0 03             	shl    $0x3,%eax
f01064fa:	01 c8                	add    %ecx,%eax
f01064fc:	05 80 d5 01 00       	add    $0x1d580,%eax
f0106501:	8b 00                	mov    (%eax),%eax
f0106503:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106506:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106509:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010650c:	89 d0                	mov    %edx,%eax
f010650e:	01 c0                	add    %eax,%eax
f0106510:	01 d0                	add    %edx,%eax
f0106512:	c1 e0 03             	shl    $0x3,%eax
f0106515:	01 c8                	add    %ecx,%eax
f0106517:	05 88 d5 01 00       	add    $0x1d588,%eax
f010651c:	8b 00                	mov    (%eax),%eax
f010651e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106521:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106524:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010652a:	83 ec 08             	sub    $0x8,%esp
f010652d:	ff 75 d8             	pushl  -0x28(%ebp)
f0106530:	50                   	push   %eax
f0106531:	e8 6b 1c 00 00       	call   f01081a1 <pd_is_table_used>
f0106536:	83 c4 10             	add    $0x10,%esp
f0106539:	85 c0                	test   %eax,%eax
f010653b:	74 3f                	je     f010657c <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010653d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106540:	c1 e8 02             	shr    $0x2,%eax
f0106543:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106548:	89 c1                	mov    %eax,%ecx
f010654a:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010654d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106550:	89 d0                	mov    %edx,%eax
f0106552:	01 c0                	add    %eax,%eax
f0106554:	01 d0                	add    %edx,%eax
f0106556:	c1 e0 03             	shl    $0x3,%eax
f0106559:	01 d8                	add    %ebx,%eax
f010655b:	05 88 d5 01 00       	add    $0x1d588,%eax
f0106560:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106562:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106565:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010656b:	83 ec 08             	sub    $0x8,%esp
f010656e:	ff 75 d8             	pushl  -0x28(%ebp)
f0106571:	50                   	push   %eax
f0106572:	e8 4e 1c 00 00       	call   f01081c5 <pd_set_table_unused>
f0106577:	83 c4 10             	add    $0x10,%esp
f010657a:	eb 20                	jmp    f010659c <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010657c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010657f:	c1 e8 02             	shr    $0x2,%eax
f0106582:	89 c1                	mov    %eax,%ecx
f0106584:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106587:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010658a:	89 d0                	mov    %edx,%eax
f010658c:	01 c0                	add    %eax,%eax
f010658e:	01 d0                	add    %edx,%eax
f0106590:	c1 e0 03             	shl    $0x3,%eax
f0106593:	01 d8                	add    %ebx,%eax
f0106595:	05 88 d5 01 00       	add    $0x1d588,%eax
f010659a:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010659c:	ff 45 f0             	incl   -0x10(%ebp)
f010659f:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01065a3:	0f 8e 22 ff ff ff    	jle    f01064cb <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01065a9:	90                   	nop
f01065aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01065ad:	c9                   	leave  
f01065ae:	c3                   	ret    

f01065af <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01065af:	55                   	push   %ebp
f01065b0:	89 e5                	mov    %esp,%ebp
f01065b2:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01065b5:	c7 05 4c 32 25 f0 01 	movl   $0x1,0xf025324c
f01065bc:	00 00 00 
f01065bf:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01065c6:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01065ca:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01065cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065d0:	ee                   	out    %al,(%dx)
f01065d1:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01065d8:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01065dc:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01065df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065e2:	ee                   	out    %al,(%dx)
f01065e3:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f01065ea:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f01065ee:	8a 45 b4             	mov    -0x4c(%ebp),%al
f01065f1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01065f4:	ee                   	out    %al,(%dx)
f01065f5:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f01065fc:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106600:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106603:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106606:	ee                   	out    %al,(%dx)
f0106607:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010660e:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106612:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106615:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106618:	ee                   	out    %al,(%dx)
f0106619:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106620:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106624:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106627:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010662a:	ee                   	out    %al,(%dx)
f010662b:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106632:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106636:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106639:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010663c:	ee                   	out    %al,(%dx)
f010663d:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106644:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106648:	8a 45 b9             	mov    -0x47(%ebp),%al
f010664b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010664e:	ee                   	out    %al,(%dx)
f010664f:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106656:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f010665a:	8a 45 ba             	mov    -0x46(%ebp),%al
f010665d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106660:	ee                   	out    %al,(%dx)
f0106661:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106668:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010666c:	8a 45 bb             	mov    -0x45(%ebp),%al
f010666f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106672:	ee                   	out    %al,(%dx)
f0106673:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f010667a:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010667e:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106681:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106684:	ee                   	out    %al,(%dx)
f0106685:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f010668c:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106690:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106693:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106696:	ee                   	out    %al,(%dx)
f0106697:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f010669e:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01066a2:	8a 45 be             	mov    -0x42(%ebp),%al
f01066a5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01066a8:	ee                   	out    %al,(%dx)
f01066a9:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01066b0:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01066b4:	8a 45 bf             	mov    -0x41(%ebp),%al
f01066b7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01066ba:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01066bb:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f01066c1:	66 83 f8 ff          	cmp    $0xffff,%ax
f01066c5:	74 15                	je     f01066dc <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01066c7:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f01066cd:	0f b7 c0             	movzwl %ax,%eax
f01066d0:	83 ec 0c             	sub    $0xc,%esp
f01066d3:	50                   	push   %eax
f01066d4:	e8 06 00 00 00       	call   f01066df <irq_setmask_8259A>
f01066d9:	83 c4 10             	add    $0x10,%esp
}
f01066dc:	90                   	nop
f01066dd:	c9                   	leave  
f01066de:	c3                   	ret    

f01066df <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01066df:	55                   	push   %ebp
f01066e0:	89 e5                	mov    %esp,%ebp
f01066e2:	83 ec 14             	sub    $0x14,%esp
f01066e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01066e8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f01066ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01066ef:	66 a3 64 c9 18 f0    	mov    %ax,0xf018c964
	if (!didinit)
f01066f5:	a1 4c 32 25 f0       	mov    0xf025324c,%eax
f01066fa:	85 c0                	test   %eax,%eax
f01066fc:	74 34                	je     f0106732 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f01066fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106701:	0f b6 c0             	movzbl %al,%eax
f0106704:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f010670b:	88 45 f6             	mov    %al,-0xa(%ebp)
f010670e:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106711:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106714:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106715:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106718:	66 c1 e8 08          	shr    $0x8,%ax
f010671c:	0f b6 c0             	movzbl %al,%eax
f010671f:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106726:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106729:	8a 45 f7             	mov    -0x9(%ebp),%al
f010672c:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010672f:	ee                   	out    %al,(%dx)
f0106730:	eb 01                	jmp    f0106733 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106732:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106733:	c9                   	leave  
f0106734:	c3                   	ret    

f0106735 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106735:	55                   	push   %ebp
f0106736:	89 e5                	mov    %esp,%ebp
f0106738:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f010673b:	83 ec 08             	sub    $0x8,%esp
f010673e:	68 00 10 00 00       	push   $0x1000
f0106743:	68 00 10 00 00       	push   $0x1000
f0106748:	e8 0a 02 00 00       	call   f0106957 <boot_allocate_space>
f010674d:	83 c4 10             	add    $0x10,%esp
f0106750:	a3 10 bf 2b f0       	mov    %eax,0xf02bbf10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106755:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f010675a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010675d:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106764:	77 14                	ja     f010677a <initialize_kernel_VM+0x45>
f0106766:	ff 75 e8             	pushl  -0x18(%ebp)
f0106769:	68 44 1e 13 f0       	push   $0xf0131e44
f010676e:	6a 45                	push   $0x45
f0106770:	68 78 1e 13 f0       	push   $0xf0131e78
f0106775:	e8 36 9a ff ff       	call   f01001b0 <_panic>
f010677a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010677d:	05 00 00 00 10       	add    $0x10000000,%eax
f0106782:	a3 40 bf 2b f0       	mov    %eax,0xf02bbf40
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0106787:	c7 45 e4 00 40 18 f0 	movl   $0xf0184000,-0x1c(%ebp)
f010678e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0106795:	77 14                	ja     f01067ab <initialize_kernel_VM+0x76>
f0106797:	ff 75 e4             	pushl  -0x1c(%ebp)
f010679a:	68 44 1e 13 f0       	push   $0xf0131e44
f010679f:	6a 4d                	push   $0x4d
f01067a1:	68 78 1e 13 f0       	push   $0xf0131e78
f01067a6:	e8 05 9a ff ff       	call   f01001b0 <_panic>
f01067ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067ae:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01067b4:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01067b9:	83 ec 0c             	sub    $0xc,%esp
f01067bc:	6a 02                	push   $0x2
f01067be:	52                   	push   %edx
f01067bf:	68 00 80 00 00       	push   $0x8000
f01067c4:	68 00 80 bf ef       	push   $0xefbf8000
f01067c9:	50                   	push   %eax
f01067ca:	e8 fc 01 00 00       	call   f01069cb <boot_map_range>
f01067cf:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01067d2:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01067d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01067e7:	eb 25                	jmp    f010680e <initialize_kernel_VM+0xd9>
	{
		++nTables;
f01067e9:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f01067ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01067ef:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01067f4:	83 ec 04             	sub    $0x4,%esp
f01067f7:	6a 01                	push   $0x1
f01067f9:	52                   	push   %edx
f01067fa:	50                   	push   %eax
f01067fb:	e8 3f 02 00 00       	call   f0106a3f <boot_get_page_table>
f0106800:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106803:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f010680a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010680e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106812:	72 d5                	jb     f01067e9 <initialize_kernel_VM+0xb4>
f0106814:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106818:	77 06                	ja     f0106820 <initialize_kernel_VM+0xeb>
f010681a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010681e:	76 c9                	jbe    f01067e9 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0106820:	8b 15 b0 be 2b f0    	mov    0xf02bbeb0,%edx
f0106826:	89 d0                	mov    %edx,%eax
f0106828:	01 c0                	add    %eax,%eax
f010682a:	01 d0                	add    %edx,%eax
f010682c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106833:	01 c8                	add    %ecx,%eax
f0106835:	01 d0                	add    %edx,%eax
f0106837:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010683a:	83 ec 08             	sub    $0x8,%esp
f010683d:	68 00 10 00 00       	push   $0x1000
f0106842:	ff 75 e0             	pushl  -0x20(%ebp)
f0106845:	e8 0d 01 00 00       	call   f0106957 <boot_allocate_space>
f010684a:	83 c4 10             	add    $0x10,%esp
f010684d:	a3 f0 be 2b f0       	mov    %eax,0xf02bbef0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106852:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106859:	83 ec 08             	sub    $0x8,%esp
f010685c:	68 00 10 00 00       	push   $0x1000
f0106861:	ff 75 dc             	pushl  -0x24(%ebp)
f0106864:	e8 ee 00 00 00       	call   f0106957 <boot_allocate_space>
f0106869:	83 c4 10             	add    $0x10,%esp
f010686c:	a3 30 3b 25 f0       	mov    %eax,0xf0253b30
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0106871:	e8 fe 04 00 00       	call   f0106d74 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106876:	83 ec 0c             	sub    $0xc,%esp
f0106879:	6a 08                	push   $0x8
f010687b:	e8 fb 72 02 00       	call   f012db7b <nearest_pow2_ceil>
f0106880:	83 c4 10             	add    $0x10,%esp
f0106883:	83 ec 04             	sub    $0x4,%esp
f0106886:	50                   	push   %eax
f0106887:	6a 08                	push   $0x8
f0106889:	68 98 1e 13 f0       	push   $0xf0131e98
f010688e:	e8 9e a5 ff ff       	call   f0100e31 <cprintf>
f0106893:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0106896:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f010689d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01068a0:	83 ec 08             	sub    $0x8,%esp
f01068a3:	68 00 10 00 00       	push   $0x1000
f01068a8:	50                   	push   %eax
f01068a9:	e8 a9 00 00 00       	call   f0106957 <boot_allocate_space>
f01068ae:	83 c4 10             	add    $0x10,%esp
f01068b1:	a3 50 32 25 f0       	mov    %eax,0xf0253250
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01068b6:	a1 50 32 25 f0       	mov    0xf0253250,%eax
f01068bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01068be:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01068c5:	77 17                	ja     f01068de <initialize_kernel_VM+0x1a9>
f01068c7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01068ca:	68 44 1e 13 f0       	push   $0xf0131e44
f01068cf:	68 96 00 00 00       	push   $0x96
f01068d4:	68 78 1e 13 f0       	push   $0xf0131e78
f01068d9:	e8 d2 98 ff ff       	call   f01001b0 <_panic>
f01068de:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068e1:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01068e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01068ea:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01068ef:	83 ec 0c             	sub    $0xc,%esp
f01068f2:	6a 04                	push   $0x4
f01068f4:	51                   	push   %ecx
f01068f5:	52                   	push   %edx
f01068f6:	68 00 00 c0 ee       	push   $0xeec00000
f01068fb:	50                   	push   %eax
f01068fc:	e8 ca 00 00 00       	call   f01069cb <boot_map_range>
f0106901:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106904:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106909:	05 ec 0e 00 00       	add    $0xeec,%eax
f010690e:	8b 15 10 bf 2b f0    	mov    0xf02bbf10,%edx
f0106914:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010691a:	8b 12                	mov    (%edx),%edx
f010691c:	83 ca 05             	or     $0x5,%edx
f010691f:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0106921:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106926:	83 ec 0c             	sub    $0xc,%esp
f0106929:	6a 02                	push   $0x2
f010692b:	6a 00                	push   $0x0
f010692d:	68 ff ff ff 0f       	push   $0xfffffff
f0106932:	68 00 00 00 f0       	push   $0xf0000000
f0106937:	50                   	push   %eax
f0106938:	e8 8e 00 00 00       	call   f01069cb <boot_map_range>
f010693d:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106940:	e8 0d 7a 02 00       	call   f012e352 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106945:	c7 05 a0 9a 2b f0 19 	movl   $0x19,0xf02b9aa0
f010694c:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010694f:	e8 20 03 00 00       	call   f0106c74 <turn_on_paging>
}
f0106954:	90                   	nop
f0106955:	c9                   	leave  
f0106956:	c3                   	ret    

f0106957 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106957:	55                   	push   %ebp
f0106958:	89 e5                	mov    %esp,%ebp
f010695a:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010695d:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106962:	85 c0                	test   %eax,%eax
f0106964:	75 0a                	jne    f0106970 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106966:	c7 05 0c bf 2b f0 5c 	movl   $0xf02de65c,0xf02bbf0c
f010696d:	e6 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106973:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106976:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f010697b:	89 c2                	mov    %eax,%edx
f010697d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106980:	01 d0                	add    %edx,%eax
f0106982:	48                   	dec    %eax
f0106983:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106986:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106989:	ba 00 00 00 00       	mov    $0x0,%edx
f010698e:	f7 75 f4             	divl   -0xc(%ebp)
f0106991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106994:	29 d0                	sub    %edx,%eax
f0106996:	a3 0c bf 2b f0       	mov    %eax,0xf02bbf0c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f010699b:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f01069a0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01069a3:	8b 15 0c bf 2b f0    	mov    0xf02bbf0c,%edx
f01069a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ac:	01 d0                	add    %edx,%eax
f01069ae:	a3 0c bf 2b f0       	mov    %eax,0xf02bbf0c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01069b3:	83 ec 04             	sub    $0x4,%esp
f01069b6:	ff 75 08             	pushl  0x8(%ebp)
f01069b9:	6a 00                	push   $0x0
f01069bb:	ff 75 ec             	pushl  -0x14(%ebp)
f01069be:	e8 1b 86 02 00       	call   f012efde <memset>
f01069c3:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01069c6:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01069c9:	c9                   	leave  
f01069ca:	c3                   	ret    

f01069cb <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01069cb:	55                   	push   %ebp
f01069cc:	89 e5                	mov    %esp,%ebp
f01069ce:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01069d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01069df:	eb 53                	jmp    f0106a34 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069e1:	83 ec 04             	sub    $0x4,%esp
f01069e4:	6a 01                	push   $0x1
f01069e6:	ff 75 0c             	pushl  0xc(%ebp)
f01069e9:	ff 75 08             	pushl  0x8(%ebp)
f01069ec:	e8 4e 00 00 00       	call   f0106a3f <boot_get_page_table>
f01069f1:	83 c4 10             	add    $0x10,%esp
f01069f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01069f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069fa:	c1 e8 0c             	shr    $0xc,%eax
f01069fd:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106a02:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106a05:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a12:	01 c2                	add    %eax,%edx
f0106a14:	8b 45 18             	mov    0x18(%ebp),%eax
f0106a17:	0b 45 14             	or     0x14(%ebp),%eax
f0106a1a:	83 c8 01             	or     $0x1,%eax
f0106a1d:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106a1f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106a26:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106a2d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a37:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106a3a:	72 a5                	jb     f01069e1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106a3c:	90                   	nop
f0106a3d:	c9                   	leave  
f0106a3e:	c3                   	ret    

f0106a3f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106a3f:	55                   	push   %ebp
f0106a40:	89 e5                	mov    %esp,%ebp
f0106a42:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a48:	c1 e8 16             	shr    $0x16,%eax
f0106a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a58:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5b:	01 d0                	add    %edx,%eax
f0106a5d:	8b 00                	mov    (%eax),%eax
f0106a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a70:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a76:	c1 e8 0c             	shr    $0xc,%eax
f0106a79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a7c:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0106a81:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a84:	72 17                	jb     f0106a9d <boot_get_page_table+0x5e>
f0106a86:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a89:	68 c0 1e 13 f0       	push   $0xf0131ec0
f0106a8e:	68 18 01 00 00       	push   $0x118
f0106a93:	68 78 1e 13 f0       	push   $0xf0131e78
f0106a98:	e8 13 97 ff ff       	call   f01001b0 <_panic>
f0106a9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106aa0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106aa5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106aa8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106aac:	75 72                	jne    f0106b20 <boot_get_page_table+0xe1>
	{
		if (create)
f0106aae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106ab2:	74 65                	je     f0106b19 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106ab4:	83 ec 08             	sub    $0x8,%esp
f0106ab7:	68 00 10 00 00       	push   $0x1000
f0106abc:	68 00 10 00 00       	push   $0x1000
f0106ac1:	e8 91 fe ff ff       	call   f0106957 <boot_allocate_space>
f0106ac6:	83 c4 10             	add    $0x10,%esp
f0106ac9:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106acc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106acf:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106ad2:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106ad9:	77 17                	ja     f0106af2 <boot_get_page_table+0xb3>
f0106adb:	ff 75 dc             	pushl  -0x24(%ebp)
f0106ade:	68 44 1e 13 f0       	push   $0xf0131e44
f0106ae3:	68 1e 01 00 00       	push   $0x11e
f0106ae8:	68 78 1e 13 f0       	push   $0xf0131e78
f0106aed:	e8 be 96 ff ff       	call   f01001b0 <_panic>
f0106af2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106af5:	05 00 00 00 10       	add    $0x10000000,%eax
f0106afa:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b0a:	01 d0                	add    %edx,%eax
f0106b0c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106b0f:	83 ca 03             	or     $0x3,%edx
f0106b12:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106b14:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b17:	eb 0a                	jmp    f0106b23 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106b19:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b1e:	eb 03                	jmp    f0106b23 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106b20:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106b23:	c9                   	leave  
f0106b24:	c3                   	ret    

f0106b25 <nvram_read>:


int nvram_read(int r)
{
f0106b25:	55                   	push   %ebp
f0106b26:	89 e5                	mov    %esp,%ebp
f0106b28:	53                   	push   %ebx
f0106b29:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106b2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b2f:	83 ec 0c             	sub    $0xc,%esp
f0106b32:	50                   	push   %eax
f0106b33:	e8 6a de ff ff       	call   f01049a2 <mc146818_read>
f0106b38:	83 c4 10             	add    $0x10,%esp
f0106b3b:	89 c3                	mov    %eax,%ebx
f0106b3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b40:	40                   	inc    %eax
f0106b41:	83 ec 0c             	sub    $0xc,%esp
f0106b44:	50                   	push   %eax
f0106b45:	e8 58 de ff ff       	call   f01049a2 <mc146818_read>
f0106b4a:	83 c4 10             	add    $0x10,%esp
f0106b4d:	c1 e0 08             	shl    $0x8,%eax
f0106b50:	09 d8                	or     %ebx,%eax
}
f0106b52:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b55:	c9                   	leave  
f0106b56:	c3                   	ret    

f0106b57 <detect_memory>:

void detect_memory()
{
f0106b57:	55                   	push   %ebp
f0106b58:	89 e5                	mov    %esp,%ebp
f0106b5a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b5d:	83 ec 0c             	sub    $0xc,%esp
f0106b60:	6a 15                	push   $0x15
f0106b62:	e8 be ff ff ff       	call   f0106b25 <nvram_read>
f0106b67:	83 c4 10             	add    $0x10,%esp
f0106b6a:	c1 e0 0a             	shl    $0xa,%eax
f0106b6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b73:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b78:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b7b:	83 ec 0c             	sub    $0xc,%esp
f0106b7e:	6a 17                	push   $0x17
f0106b80:	e8 a0 ff ff ff       	call   f0106b25 <nvram_read>
f0106b85:	83 c4 10             	add    $0x10,%esp
f0106b88:	c1 e0 0a             	shl    $0xa,%eax
f0106b8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106b8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b96:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106b99:	83 ec 0c             	sub    $0xc,%esp
f0106b9c:	6a 34                	push   $0x34
f0106b9e:	e8 82 ff ff ff       	call   f0106b25 <nvram_read>
f0106ba3:	83 c4 10             	add    $0x10,%esp
f0106ba6:	c1 e0 10             	shl    $0x10,%eax
f0106ba9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106bac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106bb7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106bbb:	74 18                	je     f0106bd5 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106bbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bc0:	05 00 00 00 01       	add    $0x1000000,%eax
f0106bc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bcb:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106bd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106bd3:	eb 19                	jmp    f0106bee <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106bd5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106bd9:	74 0d                	je     f0106be8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106bdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bde:	05 00 00 10 00       	add    $0x100000,%eax
f0106be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106be6:	eb 06                	jmp    f0106bee <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106be8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106beb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106bee:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bf8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106bfb:	76 32                	jbe    f0106c2f <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106bfd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106c00:	c1 e8 0a             	shr    $0xa,%eax
f0106c03:	89 c2                	mov    %eax,%edx
f0106c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c08:	c1 e8 0a             	shr    $0xa,%eax
f0106c0b:	83 ec 04             	sub    $0x4,%esp
f0106c0e:	52                   	push   %edx
f0106c0f:	50                   	push   %eax
f0106c10:	68 f0 1e 13 f0       	push   $0xf0131ef0
f0106c15:	e8 17 a2 ff ff       	call   f0100e31 <cprintf>
f0106c1a:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106c1d:	83 ec 0c             	sub    $0xc,%esp
f0106c20:	68 38 1f 13 f0       	push   $0xf0131f38
f0106c25:	e8 07 a2 ff ff       	call   f0100e31 <cprintf>
f0106c2a:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106c2d:	eb fe                	jmp    f0106c2d <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c32:	c1 e8 0c             	shr    $0xc,%eax
f0106c35:	a3 b0 be 2b f0       	mov    %eax,0xf02bbeb0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c3d:	c1 e8 0a             	shr    $0xa,%eax
f0106c40:	83 ec 08             	sub    $0x8,%esp
f0106c43:	50                   	push   %eax
f0106c44:	68 cc 1f 13 f0       	push   $0xf0131fcc
f0106c49:	e8 e3 a1 ff ff       	call   f0100e31 <cprintf>
f0106c4e:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c54:	c1 e8 0a             	shr    $0xa,%eax
f0106c57:	89 c2                	mov    %eax,%edx
f0106c59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c5c:	c1 e8 0a             	shr    $0xa,%eax
f0106c5f:	83 ec 04             	sub    $0x4,%esp
f0106c62:	52                   	push   %edx
f0106c63:	50                   	push   %eax
f0106c64:	68 ed 1f 13 f0       	push   $0xf0131fed
f0106c69:	e8 c3 a1 ff ff       	call   f0100e31 <cprintf>
f0106c6e:	83 c4 10             	add    $0x10,%esp
}
f0106c71:	90                   	nop
f0106c72:	c9                   	leave  
f0106c73:	c3                   	ret    

f0106c74 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c74:	55                   	push   %ebp
f0106c75:	89 e5                	mov    %esp,%ebp
f0106c77:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c7a:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c81:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106c88:	eb 24                	jmp    f0106cae <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106c8a:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106c8f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106c92:	c1 e2 02             	shl    $0x2,%edx
f0106c95:	01 c2                	add    %eax,%edx
f0106c97:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106c9c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106c9f:	c1 e1 02             	shl    $0x2,%ecx
f0106ca2:	01 c8                	add    %ecx,%eax
f0106ca4:	8b 00                	mov    (%eax),%eax
f0106ca6:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106ca8:	ff 45 fc             	incl   -0x4(%ebp)
f0106cab:	ff 45 f8             	incl   -0x8(%ebp)
f0106cae:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106cb3:	c1 e8 16             	shr    $0x16,%eax
f0106cb6:	89 c2                	mov    %eax,%edx
f0106cb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106cbb:	39 c2                	cmp    %eax,%edx
f0106cbd:	77 cb                	ja     f0106c8a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106cbf:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106cc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cca:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106ccd:	0f 20 c0             	mov    %cr0,%eax
f0106cd0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106cd3:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106cd6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106cd9:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106ce0:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106ce4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106ce7:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106cea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106ced:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106cf0:	0f 01 15 b0 c9 18 f0 	lgdtl  0xf018c9b0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106cf7:	b8 23 00 00 00       	mov    $0x23,%eax
f0106cfc:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106cfe:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d03:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106d05:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d0a:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106d0c:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d11:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106d13:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d18:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106d1a:	ea 21 6d 10 f0 08 00 	ljmp   $0x8,$0xf0106d21
	asm volatile("lldt %%ax" :: "a" (0));
f0106d21:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d26:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106d29:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106d30:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d37:	eb 19                	jmp    f0106d52 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106d39:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106d3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d41:	c1 e2 02             	shl    $0x2,%edx
f0106d44:	01 d0                	add    %edx,%eax
f0106d46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d4c:	ff 45 f4             	incl   -0xc(%ebp)
f0106d4f:	ff 45 f0             	incl   -0x10(%ebp)
f0106d52:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106d57:	c1 e8 16             	shr    $0x16,%eax
f0106d5a:	89 c2                	mov    %eax,%edx
f0106d5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d5f:	39 c2                	cmp    %eax,%edx
f0106d61:	77 d6                	ja     f0106d39 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d63:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0106d68:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d6e:	0f 22 d8             	mov    %eax,%cr3
}
f0106d71:	90                   	nop
f0106d72:	c9                   	leave  
f0106d73:	c3                   	ret    

f0106d74 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d74:	55                   	push   %ebp
f0106d75:	89 e5                	mov    %esp,%ebp
f0106d77:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d7a:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106d7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106d82:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106d89:	77 17                	ja     f0106da2 <setup_listing_to_all_page_tables_entries+0x2e>
f0106d8b:	ff 75 f4             	pushl  -0xc(%ebp)
f0106d8e:	68 44 1e 13 f0       	push   $0xf0131e44
f0106d93:	68 ae 01 00 00       	push   $0x1ae
f0106d98:	68 78 1e 13 f0       	push   $0xf0131e78
f0106d9d:	e8 0e 94 ff ff       	call   f01001b0 <_panic>
f0106da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106da5:	05 00 00 00 10       	add    $0x10000000,%eax
f0106daa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106dad:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106db2:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106db7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dba:	83 ca 03             	or     $0x3,%edx
f0106dbd:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106dbf:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106dc4:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106dca:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106dcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106dd2:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106dd9:	77 17                	ja     f0106df2 <setup_listing_to_all_page_tables_entries+0x7e>
f0106ddb:	ff 75 ec             	pushl  -0x14(%ebp)
f0106dde:	68 44 1e 13 f0       	push   $0xf0131e44
f0106de3:	68 b3 01 00 00       	push   $0x1b3
f0106de8:	68 78 1e 13 f0       	push   $0xf0131e78
f0106ded:	e8 be 93 ff ff       	call   f01001b0 <_panic>
f0106df2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106df5:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dfa:	83 c8 05             	or     $0x5,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

}
f0106dff:	90                   	nop
f0106e00:	c9                   	leave  
f0106e01:	c3                   	ret    

f0106e02 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e02:	55                   	push   %ebp
f0106e03:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e08:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0106e0e:	29 d0                	sub    %edx,%eax
f0106e10:	c1 f8 02             	sar    $0x2,%eax
f0106e13:	89 c2                	mov    %eax,%edx
f0106e15:	89 d0                	mov    %edx,%eax
f0106e17:	c1 e0 03             	shl    $0x3,%eax
f0106e1a:	01 d0                	add    %edx,%eax
f0106e1c:	c1 e0 03             	shl    $0x3,%eax
f0106e1f:	01 d0                	add    %edx,%eax
f0106e21:	c1 e0 03             	shl    $0x3,%eax
f0106e24:	01 d0                	add    %edx,%eax
f0106e26:	c1 e0 03             	shl    $0x3,%eax
f0106e29:	01 d0                	add    %edx,%eax
f0106e2b:	89 c1                	mov    %eax,%ecx
f0106e2d:	c1 e1 0f             	shl    $0xf,%ecx
f0106e30:	01 c8                	add    %ecx,%eax
f0106e32:	c1 e0 03             	shl    $0x3,%eax
f0106e35:	01 d0                	add    %edx,%eax
f0106e37:	f7 d8                	neg    %eax
}
f0106e39:	5d                   	pop    %ebp
f0106e3a:	c3                   	ret    

f0106e3b <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106e3b:	55                   	push   %ebp
f0106e3c:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106e3e:	ff 75 08             	pushl  0x8(%ebp)
f0106e41:	e8 bc ff ff ff       	call   f0106e02 <to_frame_number>
f0106e46:	83 c4 04             	add    $0x4,%esp
f0106e49:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e4c:	c9                   	leave  
f0106e4d:	c3                   	ret    

f0106e4e <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e4e:	55                   	push   %ebp
f0106e4f:	89 e5                	mov    %esp,%ebp
f0106e51:	53                   	push   %ebx
f0106e52:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e58:	c1 e8 0c             	shr    $0xc,%eax
f0106e5b:	89 c2                	mov    %eax,%edx
f0106e5d:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0106e62:	39 c2                	cmp    %eax,%edx
f0106e64:	72 14                	jb     f0106e7a <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e66:	83 ec 04             	sub    $0x4,%esp
f0106e69:	68 0c 20 13 f0       	push   $0xf013200c
f0106e6e:	6a 55                	push   $0x55
f0106e70:	68 31 20 13 f0       	push   $0xf0132031
f0106e75:	e8 36 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e7a:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106e80:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e83:	c1 e8 0c             	shr    $0xc,%eax
f0106e86:	89 c2                	mov    %eax,%edx
f0106e88:	89 d0                	mov    %edx,%eax
f0106e8a:	01 c0                	add    %eax,%eax
f0106e8c:	01 d0                	add    %edx,%eax
f0106e8e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e95:	01 d8                	add    %ebx,%eax
f0106e97:	01 d0                	add    %edx,%eax
f0106e99:	01 c8                	add    %ecx,%eax
}
f0106e9b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106e9e:	c9                   	leave  
f0106e9f:	c3                   	ret    

f0106ea0 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106ea0:	55                   	push   %ebp
f0106ea1:	89 e5                	mov    %esp,%ebp
f0106ea3:	83 ec 10             	sub    $0x10,%esp
f0106ea6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ea9:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106eac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106eaf:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106eb2:	90                   	nop
f0106eb3:	c9                   	leave  
f0106eb4:	c3                   	ret    

f0106eb5 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106eb5:	55                   	push   %ebp
f0106eb6:	89 e5                	mov    %esp,%ebp
f0106eb8:	56                   	push   %esi
f0106eb9:	53                   	push   %ebx
f0106eba:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106ebd:	c7 05 b8 be 2b f0 00 	movl   $0x0,0xf02bbeb8
f0106ec4:	00 00 00 
f0106ec7:	c7 05 bc be 2b f0 00 	movl   $0x0,0xf02bbebc
f0106ece:	00 00 00 
f0106ed1:	c7 05 c4 be 2b f0 00 	movl   $0x0,0xf02bbec4
f0106ed8:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106edb:	c7 05 20 3b 25 f0 00 	movl   $0x0,0xf0253b20
f0106ee2:	00 00 00 
f0106ee5:	c7 05 24 3b 25 f0 00 	movl   $0x0,0xf0253b24
f0106eec:	00 00 00 
f0106eef:	c7 05 2c 3b 25 f0 00 	movl   $0x0,0xf0253b2c
f0106ef6:	00 00 00 

	frames_info[0].references = 1;
f0106ef9:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106efe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106f04:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106f09:	83 c0 1c             	add    $0x1c,%eax
f0106f0c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106f12:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106f17:	83 c0 38             	add    $0x38,%eax
f0106f1a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106f20:	c7 05 fc be 2b f0 00 	movl   $0xf0001000,0xf02bbefc
f0106f27:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106f2a:	c7 05 18 bf 2b f0 00 	movl   $0xf0002000,0xf02bbf18
f0106f31:	20 00 f0 
	i =0;
f0106f34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106f3b:	eb 1f                	jmp    f0106f5c <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106f3d:	8b 15 fc be 2b f0    	mov    0xf02bbefc,%edx
f0106f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f46:	01 d0                	add    %edx,%eax
f0106f48:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f4b:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0106f51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f54:	01 d0                	add    %edx,%eax
f0106f56:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f59:	ff 45 f4             	incl   -0xc(%ebp)
f0106f5c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f63:	7e d8                	jle    f0106f3d <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f65:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f6f:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f74:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f77:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f7f:	f7 75 f0             	divl   -0x10(%ebp)
f0106f82:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f85:	29 d0                	sub    %edx,%eax
f0106f87:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106f8a:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106f91:	e9 20 01 00 00       	jmp    f01070b6 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106f96:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f9f:	89 d0                	mov    %edx,%eax
f0106fa1:	01 c0                	add    %eax,%eax
f0106fa3:	01 d0                	add    %edx,%eax
f0106fa5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fac:	01 d8                	add    %ebx,%eax
f0106fae:	01 d0                	add    %edx,%eax
f0106fb0:	01 c8                	add    %ecx,%eax
f0106fb2:	83 ec 0c             	sub    $0xc,%esp
f0106fb5:	50                   	push   %eax
f0106fb6:	e8 31 03 00 00       	call   f01072ec <initialize_frame_info>
f0106fbb:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106fbe:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106fc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fc7:	89 d0                	mov    %edx,%eax
f0106fc9:	01 c0                	add    %eax,%eax
f0106fcb:	01 d0                	add    %edx,%eax
f0106fcd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fd4:	01 d8                	add    %ebx,%eax
f0106fd6:	01 d0                	add    %edx,%eax
f0106fd8:	01 c8                	add    %ecx,%eax
f0106fda:	85 c0                	test   %eax,%eax
f0106fdc:	75 14                	jne    f0106ff2 <initialize_paging+0x13d>
f0106fde:	83 ec 04             	sub    $0x4,%esp
f0106fe1:	68 4c 20 13 f0       	push   $0xf013204c
f0106fe6:	6a 5c                	push   $0x5c
f0106fe8:	68 6f 20 13 f0       	push   $0xf013206f
f0106fed:	e8 be 91 ff ff       	call   f01001b0 <_panic>
f0106ff2:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106ff8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ffb:	89 d0                	mov    %edx,%eax
f0106ffd:	01 c0                	add    %eax,%eax
f0106fff:	01 d0                	add    %edx,%eax
f0107001:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107008:	01 d8                	add    %ebx,%eax
f010700a:	01 d0                	add    %edx,%eax
f010700c:	01 c8                	add    %ecx,%eax
f010700e:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f0107014:	89 10                	mov    %edx,(%eax)
f0107016:	8b 00                	mov    (%eax),%eax
f0107018:	85 c0                	test   %eax,%eax
f010701a:	74 27                	je     f0107043 <initialize_paging+0x18e>
f010701c:	8b 0d b8 be 2b f0    	mov    0xf02bbeb8,%ecx
f0107022:	8b 1d f0 be 2b f0    	mov    0xf02bbef0,%ebx
f0107028:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010702b:	89 d0                	mov    %edx,%eax
f010702d:	01 c0                	add    %eax,%eax
f010702f:	01 d0                	add    %edx,%eax
f0107031:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107038:	01 f0                	add    %esi,%eax
f010703a:	01 d0                	add    %edx,%eax
f010703c:	01 d8                	add    %ebx,%eax
f010703e:	89 41 04             	mov    %eax,0x4(%ecx)
f0107041:	eb 21                	jmp    f0107064 <initialize_paging+0x1af>
f0107043:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107049:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704c:	89 d0                	mov    %edx,%eax
f010704e:	01 c0                	add    %eax,%eax
f0107050:	01 d0                	add    %edx,%eax
f0107052:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107059:	01 d8                	add    %ebx,%eax
f010705b:	01 d0                	add    %edx,%eax
f010705d:	01 c8                	add    %ecx,%eax
f010705f:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f0107064:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f010706a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010706d:	89 d0                	mov    %edx,%eax
f010706f:	01 c0                	add    %eax,%eax
f0107071:	01 d0                	add    %edx,%eax
f0107073:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010707a:	01 d8                	add    %ebx,%eax
f010707c:	01 d0                	add    %edx,%eax
f010707e:	01 c8                	add    %ecx,%eax
f0107080:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f0107085:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f010708b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708e:	89 d0                	mov    %edx,%eax
f0107090:	01 c0                	add    %eax,%eax
f0107092:	01 d0                	add    %edx,%eax
f0107094:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010709b:	01 d8                	add    %ebx,%eax
f010709d:	01 d0                	add    %edx,%eax
f010709f:	01 c8                	add    %ecx,%eax
f01070a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070a8:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01070ad:	40                   	inc    %eax
f01070ae:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01070b3:	ff 45 f4             	incl   -0xc(%ebp)
f01070b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070b9:	85 c0                	test   %eax,%eax
f01070bb:	79 05                	jns    f01070c2 <initialize_paging+0x20d>
f01070bd:	05 ff 0f 00 00       	add    $0xfff,%eax
f01070c2:	c1 f8 0c             	sar    $0xc,%eax
f01070c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01070c8:	0f 8f c8 fe ff ff    	jg     f0106f96 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070ce:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01070d5:	eb 25                	jmp    f01070fc <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01070d7:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01070dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070e0:	89 d0                	mov    %edx,%eax
f01070e2:	01 c0                	add    %eax,%eax
f01070e4:	01 d0                	add    %edx,%eax
f01070e6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070ed:	01 d8                	add    %ebx,%eax
f01070ef:	01 d0                	add    %edx,%eax
f01070f1:	01 c8                	add    %ecx,%eax
f01070f3:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070f9:	ff 45 f4             	incl   -0xc(%ebp)
f01070fc:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0107103:	7e d2                	jle    f01070d7 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0107105:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010710c:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0107111:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107114:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f010711b:	77 14                	ja     f0107131 <initialize_paging+0x27c>
f010711d:	ff 75 e0             	pushl  -0x20(%ebp)
f0107120:	68 8c 20 13 f0       	push   $0xf013208c
f0107125:	6a 64                	push   $0x64
f0107127:	68 6f 20 13 f0       	push   $0xf013206f
f010712c:	e8 7f 90 ff ff       	call   f01001b0 <_panic>
f0107131:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107134:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010713a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010713d:	01 d0                	add    %edx,%eax
f010713f:	48                   	dec    %eax
f0107140:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107143:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107146:	ba 00 00 00 00       	mov    $0x0,%edx
f010714b:	f7 75 e4             	divl   -0x1c(%ebp)
f010714e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107151:	29 d0                	sub    %edx,%eax
f0107153:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107156:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010715d:	eb 25                	jmp    f0107184 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010715f:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107165:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107168:	89 d0                	mov    %edx,%eax
f010716a:	01 c0                	add    %eax,%eax
f010716c:	01 d0                	add    %edx,%eax
f010716e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107175:	01 d8                	add    %ebx,%eax
f0107177:	01 d0                	add    %edx,%eax
f0107179:	01 c8                	add    %ecx,%eax
f010717b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107181:	ff 45 f4             	incl   -0xc(%ebp)
f0107184:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107187:	85 c0                	test   %eax,%eax
f0107189:	79 05                	jns    f0107190 <initialize_paging+0x2db>
f010718b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107190:	c1 f8 0c             	sar    $0xc,%eax
f0107193:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107196:	7f c7                	jg     f010715f <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0107198:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010719b:	85 c0                	test   %eax,%eax
f010719d:	79 05                	jns    f01071a4 <initialize_paging+0x2ef>
f010719f:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071a4:	c1 f8 0c             	sar    $0xc,%eax
f01071a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01071aa:	e9 20 01 00 00       	jmp    f01072cf <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f01071af:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01071b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071b8:	89 d0                	mov    %edx,%eax
f01071ba:	01 c0                	add    %eax,%eax
f01071bc:	01 d0                	add    %edx,%eax
f01071be:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071c5:	01 d8                	add    %ebx,%eax
f01071c7:	01 d0                	add    %edx,%eax
f01071c9:	01 c8                	add    %ecx,%eax
f01071cb:	83 ec 0c             	sub    $0xc,%esp
f01071ce:	50                   	push   %eax
f01071cf:	e8 18 01 00 00       	call   f01072ec <initialize_frame_info>
f01071d4:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01071d7:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01071dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071e0:	89 d0                	mov    %edx,%eax
f01071e2:	01 c0                	add    %eax,%eax
f01071e4:	01 d0                	add    %edx,%eax
f01071e6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071ed:	01 d8                	add    %ebx,%eax
f01071ef:	01 d0                	add    %edx,%eax
f01071f1:	01 c8                	add    %ecx,%eax
f01071f3:	85 c0                	test   %eax,%eax
f01071f5:	75 14                	jne    f010720b <initialize_paging+0x356>
f01071f7:	83 ec 04             	sub    $0x4,%esp
f01071fa:	68 4c 20 13 f0       	push   $0xf013204c
f01071ff:	6a 70                	push   $0x70
f0107201:	68 6f 20 13 f0       	push   $0xf013206f
f0107206:	e8 a5 8f ff ff       	call   f01001b0 <_panic>
f010720b:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107211:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107214:	89 d0                	mov    %edx,%eax
f0107216:	01 c0                	add    %eax,%eax
f0107218:	01 d0                	add    %edx,%eax
f010721a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107221:	01 d8                	add    %ebx,%eax
f0107223:	01 d0                	add    %edx,%eax
f0107225:	01 c8                	add    %ecx,%eax
f0107227:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f010722d:	89 10                	mov    %edx,(%eax)
f010722f:	8b 00                	mov    (%eax),%eax
f0107231:	85 c0                	test   %eax,%eax
f0107233:	74 27                	je     f010725c <initialize_paging+0x3a7>
f0107235:	8b 0d b8 be 2b f0    	mov    0xf02bbeb8,%ecx
f010723b:	8b 1d f0 be 2b f0    	mov    0xf02bbef0,%ebx
f0107241:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107244:	89 d0                	mov    %edx,%eax
f0107246:	01 c0                	add    %eax,%eax
f0107248:	01 d0                	add    %edx,%eax
f010724a:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107251:	01 f0                	add    %esi,%eax
f0107253:	01 d0                	add    %edx,%eax
f0107255:	01 d8                	add    %ebx,%eax
f0107257:	89 41 04             	mov    %eax,0x4(%ecx)
f010725a:	eb 21                	jmp    f010727d <initialize_paging+0x3c8>
f010725c:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107262:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107265:	89 d0                	mov    %edx,%eax
f0107267:	01 c0                	add    %eax,%eax
f0107269:	01 d0                	add    %edx,%eax
f010726b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107272:	01 d8                	add    %ebx,%eax
f0107274:	01 d0                	add    %edx,%eax
f0107276:	01 c8                	add    %ecx,%eax
f0107278:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f010727d:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107283:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107286:	89 d0                	mov    %edx,%eax
f0107288:	01 c0                	add    %eax,%eax
f010728a:	01 d0                	add    %edx,%eax
f010728c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107293:	01 d8                	add    %ebx,%eax
f0107295:	01 d0                	add    %edx,%eax
f0107297:	01 c8                	add    %ecx,%eax
f0107299:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f010729e:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01072a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a7:	89 d0                	mov    %edx,%eax
f01072a9:	01 c0                	add    %eax,%eax
f01072ab:	01 d0                	add    %edx,%eax
f01072ad:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072b4:	01 d8                	add    %ebx,%eax
f01072b6:	01 d0                	add    %edx,%eax
f01072b8:	01 c8                	add    %ecx,%eax
f01072ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01072c1:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01072c6:	40                   	inc    %eax
f01072c7:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01072cc:	ff 45 f4             	incl   -0xc(%ebp)
f01072cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072d2:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01072d7:	39 c2                	cmp    %eax,%edx
f01072d9:	0f 82 d0 fe ff ff    	jb     f01071af <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01072df:	e8 f2 c5 ff ff       	call   f01038d6 <initialize_disk_page_file>
}
f01072e4:	90                   	nop
f01072e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01072e8:	5b                   	pop    %ebx
f01072e9:	5e                   	pop    %esi
f01072ea:	5d                   	pop    %ebp
f01072eb:	c3                   	ret    

f01072ec <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01072ec:	55                   	push   %ebp
f01072ed:	89 e5                	mov    %esp,%ebp
f01072ef:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01072f2:	83 ec 04             	sub    $0x4,%esp
f01072f5:	6a 1c                	push   $0x1c
f01072f7:	6a 00                	push   $0x0
f01072f9:	ff 75 08             	pushl  0x8(%ebp)
f01072fc:	e8 dd 7c 02 00       	call   f012efde <memset>
f0107301:	83 c4 10             	add    $0x10,%esp
}
f0107304:	90                   	nop
f0107305:	c9                   	leave  
f0107306:	c3                   	ret    

f0107307 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0107307:	55                   	push   %ebp
f0107308:	89 e5                	mov    %esp,%ebp
f010730a:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010730d:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f0107313:	8b 45 08             	mov    0x8(%ebp),%eax
f0107316:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0107318:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010731f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107322:	8b 00                	mov    (%eax),%eax
f0107324:	85 c0                	test   %eax,%eax
f0107326:	75 17                	jne    f010733f <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0107328:	83 ec 04             	sub    $0x4,%esp
f010732b:	68 c0 20 13 f0       	push   $0xf01320c0
f0107330:	68 98 00 00 00       	push   $0x98
f0107335:	68 6f 20 13 f0       	push   $0xf013206f
f010733a:	e8 71 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010733f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107342:	8b 00                	mov    (%eax),%eax
f0107344:	85 c0                	test   %eax,%eax
f0107346:	75 17                	jne    f010735f <allocate_frame+0x58>
f0107348:	83 ec 04             	sub    $0x4,%esp
f010734b:	68 0d 21 13 f0       	push   $0xf013210d
f0107350:	68 9e 00 00 00       	push   $0x9e
f0107355:	68 6f 20 13 f0       	push   $0xf013206f
f010735a:	e8 51 8e ff ff       	call   f01001b0 <_panic>
f010735f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107362:	8b 00                	mov    (%eax),%eax
f0107364:	8b 00                	mov    (%eax),%eax
f0107366:	85 c0                	test   %eax,%eax
f0107368:	74 14                	je     f010737e <allocate_frame+0x77>
f010736a:	8b 45 08             	mov    0x8(%ebp),%eax
f010736d:	8b 00                	mov    (%eax),%eax
f010736f:	8b 00                	mov    (%eax),%eax
f0107371:	8b 55 08             	mov    0x8(%ebp),%edx
f0107374:	8b 12                	mov    (%edx),%edx
f0107376:	8b 52 04             	mov    0x4(%edx),%edx
f0107379:	89 50 04             	mov    %edx,0x4(%eax)
f010737c:	eb 0d                	jmp    f010738b <allocate_frame+0x84>
f010737e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107381:	8b 00                	mov    (%eax),%eax
f0107383:	8b 40 04             	mov    0x4(%eax),%eax
f0107386:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f010738b:	8b 45 08             	mov    0x8(%ebp),%eax
f010738e:	8b 00                	mov    (%eax),%eax
f0107390:	8b 40 04             	mov    0x4(%eax),%eax
f0107393:	85 c0                	test   %eax,%eax
f0107395:	74 13                	je     f01073aa <allocate_frame+0xa3>
f0107397:	8b 45 08             	mov    0x8(%ebp),%eax
f010739a:	8b 00                	mov    (%eax),%eax
f010739c:	8b 40 04             	mov    0x4(%eax),%eax
f010739f:	8b 55 08             	mov    0x8(%ebp),%edx
f01073a2:	8b 12                	mov    (%edx),%edx
f01073a4:	8b 12                	mov    (%edx),%edx
f01073a6:	89 10                	mov    %edx,(%eax)
f01073a8:	eb 0c                	jmp    f01073b6 <allocate_frame+0xaf>
f01073aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ad:	8b 00                	mov    (%eax),%eax
f01073af:	8b 00                	mov    (%eax),%eax
f01073b1:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f01073b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01073b9:	8b 00                	mov    (%eax),%eax
f01073bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01073c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01073c4:	8b 00                	mov    (%eax),%eax
f01073c6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073cd:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01073d2:	48                   	dec    %eax
f01073d3:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01073d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073db:	8b 00                	mov    (%eax),%eax
f01073dd:	8a 40 14             	mov    0x14(%eax),%al
f01073e0:	84 c0                	test   %al,%al
f01073e2:	74 23                	je     f0107407 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01073e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073e7:	8b 00                	mov    (%eax),%eax
f01073e9:	8b 50 0c             	mov    0xc(%eax),%edx
f01073ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ef:	8b 00                	mov    (%eax),%eax
f01073f1:	8b 40 10             	mov    0x10(%eax),%eax
f01073f4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01073fa:	83 ec 08             	sub    $0x8,%esp
f01073fd:	52                   	push   %edx
f01073fe:	50                   	push   %eax
f01073ff:	e8 0a 0d 00 00       	call   f010810e <pt_clear_page_table_entry>
f0107404:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107407:	8b 45 08             	mov    0x8(%ebp),%eax
f010740a:	8b 00                	mov    (%eax),%eax
f010740c:	83 ec 0c             	sub    $0xc,%esp
f010740f:	50                   	push   %eax
f0107410:	e8 d7 fe ff ff       	call   f01072ec <initialize_frame_info>
f0107415:	83 c4 10             	add    $0x10,%esp
	return 0;
f0107418:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010741d:	c9                   	leave  
f010741e:	c3                   	ret    

f010741f <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f010741f:	55                   	push   %ebp
f0107420:	89 e5                	mov    %esp,%ebp
f0107422:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107425:	83 ec 0c             	sub    $0xc,%esp
f0107428:	ff 75 08             	pushl  0x8(%ebp)
f010742b:	e8 bc fe ff ff       	call   f01072ec <initialize_frame_info>
f0107430:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107433:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107437:	75 17                	jne    f0107450 <free_frame+0x31>
f0107439:	83 ec 04             	sub    $0x4,%esp
f010743c:	68 4c 20 13 f0       	push   $0xf013204c
f0107441:	68 bb 00 00 00       	push   $0xbb
f0107446:	68 6f 20 13 f0       	push   $0xf013206f
f010744b:	e8 60 8d ff ff       	call   f01001b0 <_panic>
f0107450:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f0107456:	8b 45 08             	mov    0x8(%ebp),%eax
f0107459:	89 10                	mov    %edx,(%eax)
f010745b:	8b 45 08             	mov    0x8(%ebp),%eax
f010745e:	8b 00                	mov    (%eax),%eax
f0107460:	85 c0                	test   %eax,%eax
f0107462:	74 0d                	je     f0107471 <free_frame+0x52>
f0107464:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0107469:	8b 55 08             	mov    0x8(%ebp),%edx
f010746c:	89 50 04             	mov    %edx,0x4(%eax)
f010746f:	eb 08                	jmp    f0107479 <free_frame+0x5a>
f0107471:	8b 45 08             	mov    0x8(%ebp),%eax
f0107474:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f0107481:	8b 45 08             	mov    0x8(%ebp),%eax
f0107484:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010748b:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f0107490:	40                   	inc    %eax
f0107491:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f0107496:	90                   	nop
f0107497:	c9                   	leave  
f0107498:	c3                   	ret    

f0107499 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0107499:	55                   	push   %ebp
f010749a:	89 e5                	mov    %esp,%ebp
f010749c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010749f:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a2:	8b 40 08             	mov    0x8(%eax),%eax
f01074a5:	48                   	dec    %eax
f01074a6:	8b 55 08             	mov    0x8(%ebp),%edx
f01074a9:	66 89 42 08          	mov    %ax,0x8(%edx)
f01074ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01074b0:	8b 40 08             	mov    0x8(%eax),%eax
f01074b3:	66 85 c0             	test   %ax,%ax
f01074b6:	75 0e                	jne    f01074c6 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01074b8:	83 ec 0c             	sub    $0xc,%esp
f01074bb:	ff 75 08             	pushl  0x8(%ebp)
f01074be:	e8 5c ff ff ff       	call   f010741f <free_frame>
f01074c3:	83 c4 10             	add    $0x10,%esp
}
f01074c6:	90                   	nop
f01074c7:	c9                   	leave  
f01074c8:	c3                   	ret    

f01074c9 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01074c9:	55                   	push   %ebp
f01074ca:	89 e5                	mov    %esp,%ebp
f01074cc:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074d2:	c1 e8 16             	shr    $0x16,%eax
f01074d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01074df:	01 d0                	add    %edx,%eax
f01074e1:	8b 00                	mov    (%eax),%eax
f01074e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01074e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e9:	83 e0 01             	and    $0x1,%eax
f01074ec:	85 c0                	test   %eax,%eax
f01074ee:	74 4e                	je     f010753e <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01074f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01074fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01074fe:	c1 e8 0c             	shr    $0xc,%eax
f0107501:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107504:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0107509:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010750c:	72 17                	jb     f0107525 <get_page_table+0x5c>
f010750e:	ff 75 f0             	pushl  -0x10(%ebp)
f0107511:	68 2c 21 13 f0       	push   $0xf013212c
f0107516:	68 e2 00 00 00       	push   $0xe2
f010751b:	68 6f 20 13 f0       	push   $0xf013206f
f0107520:	e8 8b 8c ff ff       	call   f01001b0 <_panic>
f0107525:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107528:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010752d:	89 c2                	mov    %eax,%edx
f010752f:	8b 45 10             	mov    0x10(%ebp),%eax
f0107532:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107534:	b8 00 00 00 00       	mov    $0x0,%eax
f0107539:	e9 8f 00 00 00       	jmp    f01075cd <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f010753e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107542:	74 7b                	je     f01075bf <get_page_table+0xf6>
f0107544:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107547:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010754a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010754d:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0107550:	83 ec 0c             	sub    $0xc,%esp
f0107553:	6a 00                	push   $0x0
f0107555:	e8 87 4f 00 00       	call   f010c4e1 <fault_handler>
f010755a:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010755d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107560:	c1 e8 16             	shr    $0x16,%eax
f0107563:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010756a:	8b 45 08             	mov    0x8(%ebp),%eax
f010756d:	01 d0                	add    %edx,%eax
f010756f:	8b 00                	mov    (%eax),%eax
f0107571:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107574:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107577:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010757c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010757f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107582:	c1 e8 0c             	shr    $0xc,%eax
f0107585:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107588:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010758d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107590:	72 17                	jb     f01075a9 <get_page_table+0xe0>
f0107592:	ff 75 e8             	pushl  -0x18(%ebp)
f0107595:	68 2c 21 13 f0       	push   $0xf013212c
f010759a:	68 fa 00 00 00       	push   $0xfa
f010759f:	68 6f 20 13 f0       	push   $0xf013206f
f01075a4:	e8 07 8c ff ff       	call   f01001b0 <_panic>
f01075a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075ac:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01075b1:	89 c2                	mov    %eax,%edx
f01075b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01075b6:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01075b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01075bd:	eb 0e                	jmp    f01075cd <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01075bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01075c2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01075c8:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01075cd:	c9                   	leave  
f01075ce:	c3                   	ret    

f01075cf <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f01075cf:	55                   	push   %ebp
f01075d0:	89 e5                	mov    %esp,%ebp
f01075d2:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f01075d5:	83 ec 04             	sub    $0x4,%esp
f01075d8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01075db:	50                   	push   %eax
f01075dc:	ff 75 0c             	pushl  0xc(%ebp)
f01075df:	ff 75 08             	pushl  0x8(%ebp)
f01075e2:	e8 08 00 00 00       	call   f01075ef <__static_cpt>
f01075e7:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f01075ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01075ed:	c9                   	leave  
f01075ee:	c3                   	ret    

f01075ef <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01075ef:	55                   	push   %ebp
f01075f0:	89 e5                	mov    %esp,%ebp
f01075f2:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f01075f5:	83 ec 0c             	sub    $0xc,%esp
f01075f8:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01075fb:	50                   	push   %eax
f01075fc:	e8 06 fd ff ff       	call   f0107307 <allocate_frame>
f0107601:	83 c4 10             	add    $0x10,%esp
f0107604:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107607:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010760a:	83 ec 0c             	sub    $0xc,%esp
f010760d:	50                   	push   %eax
f010760e:	e8 28 f8 ff ff       	call   f0106e3b <to_physical_address>
f0107613:	83 c4 10             	add    $0x10,%esp
f0107616:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0107619:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010761c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010761f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107622:	c1 e8 0c             	shr    $0xc,%eax
f0107625:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107628:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010762d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0107630:	72 17                	jb     f0107649 <__static_cpt+0x5a>
f0107632:	ff 75 ec             	pushl  -0x14(%ebp)
f0107635:	68 2c 21 13 f0       	push   $0xf013212c
f010763a:	68 2f 01 00 00       	push   $0x12f
f010763f:	68 6f 20 13 f0       	push   $0xf013206f
f0107644:	e8 67 8b ff ff       	call   f01001b0 <_panic>
f0107649:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010764c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107651:	89 c2                	mov    %eax,%edx
f0107653:	8b 45 10             	mov    0x10(%ebp),%eax
f0107656:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107658:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010765b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0107661:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107664:	c1 e8 16             	shr    $0x16,%eax
f0107667:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010766e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107671:	01 d0                	add    %edx,%eax
f0107673:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107676:	83 ca 07             	or     $0x7,%edx
f0107679:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f010767b:	8b 45 10             	mov    0x10(%ebp),%eax
f010767e:	8b 00                	mov    (%eax),%eax
f0107680:	83 ec 04             	sub    $0x4,%esp
f0107683:	68 00 10 00 00       	push   $0x1000
f0107688:	6a 00                	push   $0x0
f010768a:	50                   	push   %eax
f010768b:	e8 4e 79 02 00       	call   f012efde <memset>
f0107690:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107693:	0f 20 d8             	mov    %cr3,%eax
f0107696:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107699:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010769c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010769f:	90                   	nop
f01076a0:	c9                   	leave  
f01076a1:	c3                   	ret    

f01076a2 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01076a2:	55                   	push   %ebp
f01076a3:	89 e5                	mov    %esp,%ebp
f01076a5:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01076a8:	ff 75 0c             	pushl  0xc(%ebp)
f01076ab:	e8 8b f7 ff ff       	call   f0106e3b <to_physical_address>
f01076b0:	83 c4 04             	add    $0x4,%esp
f01076b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01076b6:	83 ec 04             	sub    $0x4,%esp
f01076b9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076bc:	50                   	push   %eax
f01076bd:	ff 75 10             	pushl  0x10(%ebp)
f01076c0:	ff 75 08             	pushl  0x8(%ebp)
f01076c3:	e8 01 fe ff ff       	call   f01074c9 <get_page_table>
f01076c8:	83 c4 10             	add    $0x10,%esp
f01076cb:	83 f8 01             	cmp    $0x1,%eax
f01076ce:	75 15                	jne    f01076e5 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f01076d0:	83 ec 04             	sub    $0x4,%esp
f01076d3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076d6:	50                   	push   %eax
f01076d7:	ff 75 10             	pushl  0x10(%ebp)
f01076da:	ff 75 08             	pushl  0x8(%ebp)
f01076dd:	e8 0d ff ff ff       	call   f01075ef <__static_cpt>
f01076e2:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f01076e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076e8:	8b 55 10             	mov    0x10(%ebp),%edx
f01076eb:	c1 ea 0c             	shr    $0xc,%edx
f01076ee:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01076f4:	c1 e2 02             	shl    $0x2,%edx
f01076f7:	01 d0                	add    %edx,%eax
f01076f9:	8b 00                	mov    (%eax),%eax
f01076fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f01076fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107701:	83 e0 01             	and    $0x1,%eax
f0107704:	85 c0                	test   %eax,%eax
f0107706:	74 25                	je     f010772d <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0107708:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010770b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107710:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107713:	75 07                	jne    f010771c <map_frame+0x7a>
			return 0;
f0107715:	b8 00 00 00 00       	mov    $0x0,%eax
f010771a:	eb 43                	jmp    f010775f <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010771c:	83 ec 08             	sub    $0x8,%esp
f010771f:	ff 75 10             	pushl  0x10(%ebp)
f0107722:	ff 75 08             	pushl  0x8(%ebp)
f0107725:	e8 a7 00 00 00       	call   f01077d1 <unmap_frame>
f010772a:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010772d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107730:	8b 40 08             	mov    0x8(%eax),%eax
f0107733:	40                   	inc    %eax
f0107734:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107737:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010773b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010773e:	8b 55 10             	mov    0x10(%ebp),%edx
f0107741:	c1 ea 0c             	shr    $0xc,%edx
f0107744:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010774a:	c1 e2 02             	shl    $0x2,%edx
f010774d:	01 c2                	add    %eax,%edx
f010774f:	8b 45 14             	mov    0x14(%ebp),%eax
f0107752:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107755:	83 c8 01             	or     $0x1,%eax
f0107758:	89 02                	mov    %eax,(%edx)

	return 0;
f010775a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010775f:	c9                   	leave  
f0107760:	c3                   	ret    

f0107761 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0107761:	55                   	push   %ebp
f0107762:	89 e5                	mov    %esp,%ebp
f0107764:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107767:	83 ec 04             	sub    $0x4,%esp
f010776a:	ff 75 10             	pushl  0x10(%ebp)
f010776d:	ff 75 0c             	pushl  0xc(%ebp)
f0107770:	ff 75 08             	pushl  0x8(%ebp)
f0107773:	e8 51 fd ff ff       	call   f01074c9 <get_page_table>
f0107778:	83 c4 10             	add    $0x10,%esp
f010777b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010777e:	8b 45 10             	mov    0x10(%ebp),%eax
f0107781:	8b 00                	mov    (%eax),%eax
f0107783:	85 c0                	test   %eax,%eax
f0107785:	74 43                	je     f01077ca <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0107787:	8b 45 0c             	mov    0xc(%ebp),%eax
f010778a:	c1 e8 0c             	shr    $0xc,%eax
f010778d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107792:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0107795:	8b 45 10             	mov    0x10(%ebp),%eax
f0107798:	8b 00                	mov    (%eax),%eax
f010779a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010779d:	c1 e2 02             	shl    $0x2,%edx
f01077a0:	01 d0                	add    %edx,%eax
f01077a2:	8b 00                	mov    (%eax),%eax
f01077a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01077a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01077ab:	74 16                	je     f01077c3 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01077ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077b5:	83 ec 0c             	sub    $0xc,%esp
f01077b8:	50                   	push   %eax
f01077b9:	e8 90 f6 ff ff       	call   f0106e4e <to_frame_info>
f01077be:	83 c4 10             	add    $0x10,%esp
f01077c1:	eb 0c                	jmp    f01077cf <get_frame_info+0x6e>
		}
		return 0;
f01077c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01077c8:	eb 05                	jmp    f01077cf <get_frame_info+0x6e>
	}
	return 0;
f01077ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01077cf:	c9                   	leave  
f01077d0:	c3                   	ret    

f01077d1 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f01077d1:	55                   	push   %ebp
f01077d2:	89 e5                	mov    %esp,%ebp
f01077d4:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01077d7:	83 ec 04             	sub    $0x4,%esp
f01077da:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01077dd:	50                   	push   %eax
f01077de:	ff 75 0c             	pushl  0xc(%ebp)
f01077e1:	ff 75 08             	pushl  0x8(%ebp)
f01077e4:	e8 78 ff ff ff       	call   f0107761 <get_frame_info>
f01077e9:	83 c4 10             	add    $0x10,%esp
f01077ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f01077ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01077f3:	74 60                	je     f0107855 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f01077f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077f8:	8a 40 14             	mov    0x14(%eax),%al
f01077fb:	84 c0                	test   %al,%al
f01077fd:	74 1c                	je     f010781b <unmap_frame+0x4a>
f01077ff:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107806:	77 13                	ja     f010781b <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0107808:	83 ec 08             	sub    $0x8,%esp
f010780b:	ff 75 0c             	pushl  0xc(%ebp)
f010780e:	68 5c 21 13 f0       	push   $0xf013215c
f0107813:	e8 19 96 ff ff       	call   f0100e31 <cprintf>
f0107818:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010781b:	83 ec 0c             	sub    $0xc,%esp
f010781e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107821:	e8 73 fc ff ff       	call   f0107499 <decrement_references>
f0107826:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107829:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010782c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010782f:	c1 ea 0c             	shr    $0xc,%edx
f0107832:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107838:	c1 e2 02             	shl    $0x2,%edx
f010783b:	01 d0                	add    %edx,%eax
f010783d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107843:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107846:	83 ec 08             	sub    $0x8,%esp
f0107849:	50                   	push   %eax
f010784a:	ff 75 08             	pushl  0x8(%ebp)
f010784d:	e8 4e f6 ff ff       	call   f0106ea0 <tlb_invalidate>
f0107852:	83 c4 10             	add    $0x10,%esp
	}
}
f0107855:	90                   	nop
f0107856:	c9                   	leave  
f0107857:	c3                   	ret    

f0107858 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107858:	55                   	push   %ebp
f0107859:	89 e5                	mov    %esp,%ebp
f010785b:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010785e:	ff 75 0c             	pushl  0xc(%ebp)
f0107861:	e8 d5 f5 ff ff       	call   f0106e3b <to_physical_address>
f0107866:	83 c4 04             	add    $0x4,%esp
f0107869:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010786c:	8b 45 10             	mov    0x10(%ebp),%eax
f010786f:	c1 e8 16             	shr    $0x16,%eax
f0107872:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107879:	8b 45 08             	mov    0x8(%ebp),%eax
f010787c:	01 d0                	add    %edx,%eax
f010787e:	8b 00                	mov    (%eax),%eax
f0107880:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107883:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107886:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010788b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010788e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107891:	c1 e8 0c             	shr    $0xc,%eax
f0107894:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107897:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010789c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010789f:	72 17                	jb     f01078b8 <loadtime_map_frame+0x60>
f01078a1:	ff 75 ec             	pushl  -0x14(%ebp)
f01078a4:	68 2c 21 13 f0       	push   $0xf013212c
f01078a9:	68 e5 01 00 00       	push   $0x1e5
f01078ae:	68 6f 20 13 f0       	push   $0xf013206f
f01078b3:	e8 f8 88 ff ff       	call   f01001b0 <_panic>
f01078b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078bb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01078c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f01078c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078c7:	75 15                	jne    f01078de <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f01078c9:	83 ec 04             	sub    $0x4,%esp
f01078cc:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01078cf:	50                   	push   %eax
f01078d0:	ff 75 10             	pushl  0x10(%ebp)
f01078d3:	ff 75 08             	pushl  0x8(%ebp)
f01078d6:	e8 14 fd ff ff       	call   f01075ef <__static_cpt>
f01078db:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f01078de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078e1:	8b 40 08             	mov    0x8(%eax),%eax
f01078e4:	40                   	inc    %eax
f01078e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078e8:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01078ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078ef:	8b 55 10             	mov    0x10(%ebp),%edx
f01078f2:	c1 ea 0c             	shr    $0xc,%edx
f01078f5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01078fb:	c1 e2 02             	shl    $0x2,%edx
f01078fe:	01 c2                	add    %eax,%edx
f0107900:	8b 45 14             	mov    0x14(%ebp),%eax
f0107903:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107906:	83 c8 01             	or     $0x1,%eax
f0107909:	89 02                	mov    %eax,(%edx)

	return 0;
f010790b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107910:	c9                   	leave  
f0107911:	c3                   	ret    

f0107912 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107912:	55                   	push   %ebp
f0107913:	89 e5                	mov    %esp,%ebp
f0107915:	57                   	push   %edi
f0107916:	56                   	push   %esi
f0107917:	53                   	push   %ebx
f0107918:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f010791b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107922:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107929:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0107930:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0107935:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107938:	eb 1a                	jmp    f0107954 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010793a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010793d:	8a 40 14             	mov    0x14(%eax),%al
f0107940:	84 c0                	test   %al,%al
f0107942:	74 05                	je     f0107949 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107944:	ff 45 e8             	incl   -0x18(%ebp)
f0107947:	eb 03                	jmp    f010794c <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107949:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010794c:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0107951:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107954:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107958:	74 07                	je     f0107961 <calculate_available_frames+0x4f>
f010795a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795d:	8b 00                	mov    (%eax),%eax
f010795f:	eb 05                	jmp    f0107966 <calculate_available_frames+0x54>
f0107961:	b8 00 00 00 00       	mov    $0x0,%eax
f0107966:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f010796b:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0107970:	85 c0                	test   %eax,%eax
f0107972:	75 c6                	jne    f010793a <calculate_available_frames+0x28>
f0107974:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107978:	75 c0                	jne    f010793a <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010797a:	a1 20 3b 25 f0       	mov    0xf0253b20,%eax
f010797f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107982:	eb 0b                	jmp    f010798f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0107984:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107987:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f010798c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010798f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107993:	74 07                	je     f010799c <calculate_available_frames+0x8a>
f0107995:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107998:	8b 00                	mov    (%eax),%eax
f010799a:	eb 05                	jmp    f01079a1 <calculate_available_frames+0x8f>
f010799c:	b8 00 00 00 00       	mov    $0x0,%eax
f01079a1:	a3 28 3b 25 f0       	mov    %eax,0xf0253b28
f01079a6:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f01079ab:	85 c0                	test   %eax,%eax
f01079ad:	75 d5                	jne    f0107984 <calculate_available_frames+0x72>
f01079af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079b3:	75 cf                	jne    f0107984 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01079b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01079bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079be:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01079c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01079c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01079ca:	89 c3                	mov    %eax,%ebx
f01079cc:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01079cf:	ba 03 00 00 00       	mov    $0x3,%edx
f01079d4:	89 df                	mov    %ebx,%edi
f01079d6:	89 c6                	mov    %eax,%esi
f01079d8:	89 d1                	mov    %edx,%ecx
f01079da:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01079dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01079df:	83 c4 20             	add    $0x20,%esp
f01079e2:	5b                   	pop    %ebx
f01079e3:	5e                   	pop    %esi
f01079e4:	5f                   	pop    %edi
f01079e5:	5d                   	pop    %ebp
f01079e6:	c2 04 00             	ret    $0x4

f01079e9 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01079e9:	55                   	push   %ebp
f01079ea:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01079ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01079ef:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f01079f5:	29 d0                	sub    %edx,%eax
f01079f7:	c1 f8 02             	sar    $0x2,%eax
f01079fa:	89 c2                	mov    %eax,%edx
f01079fc:	89 d0                	mov    %edx,%eax
f01079fe:	c1 e0 03             	shl    $0x3,%eax
f0107a01:	01 d0                	add    %edx,%eax
f0107a03:	c1 e0 03             	shl    $0x3,%eax
f0107a06:	01 d0                	add    %edx,%eax
f0107a08:	c1 e0 03             	shl    $0x3,%eax
f0107a0b:	01 d0                	add    %edx,%eax
f0107a0d:	c1 e0 03             	shl    $0x3,%eax
f0107a10:	01 d0                	add    %edx,%eax
f0107a12:	89 c1                	mov    %eax,%ecx
f0107a14:	c1 e1 0f             	shl    $0xf,%ecx
f0107a17:	01 c8                	add    %ecx,%eax
f0107a19:	c1 e0 03             	shl    $0x3,%eax
f0107a1c:	01 d0                	add    %edx,%eax
f0107a1e:	f7 d8                	neg    %eax
}
f0107a20:	5d                   	pop    %ebp
f0107a21:	c3                   	ret    

f0107a22 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107a22:	55                   	push   %ebp
f0107a23:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107a25:	ff 75 08             	pushl  0x8(%ebp)
f0107a28:	e8 bc ff ff ff       	call   f01079e9 <to_frame_number>
f0107a2d:	83 c4 04             	add    $0x4,%esp
f0107a30:	c1 e0 0c             	shl    $0xc,%eax
}
f0107a33:	c9                   	leave  
f0107a34:	c3                   	ret    

f0107a35 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107a35:	55                   	push   %ebp
f0107a36:	89 e5                	mov    %esp,%ebp
f0107a38:	53                   	push   %ebx
f0107a39:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a3f:	c1 e8 0c             	shr    $0xc,%eax
f0107a42:	89 c2                	mov    %eax,%edx
f0107a44:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0107a49:	39 c2                	cmp    %eax,%edx
f0107a4b:	72 14                	jb     f0107a61 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a4d:	83 ec 04             	sub    $0x4,%esp
f0107a50:	68 80 21 13 f0       	push   $0xf0132180
f0107a55:	6a 55                	push   $0x55
f0107a57:	68 a5 21 13 f0       	push   $0xf01321a5
f0107a5c:	e8 4f 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a61:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a6a:	c1 e8 0c             	shr    $0xc,%eax
f0107a6d:	89 c2                	mov    %eax,%edx
f0107a6f:	89 d0                	mov    %edx,%eax
f0107a71:	01 c0                	add    %eax,%eax
f0107a73:	01 d0                	add    %edx,%eax
f0107a75:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a7c:	01 d8                	add    %ebx,%eax
f0107a7e:	01 d0                	add    %edx,%eax
f0107a80:	01 c8                	add    %ecx,%eax
}
f0107a82:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a85:	c9                   	leave  
f0107a86:	c3                   	ret    

f0107a87 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107a87:	55                   	push   %ebp
f0107a88:	89 e5                	mov    %esp,%ebp
f0107a8a:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107a8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107a94:	eb 5f                	jmp    f0107af5 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107a96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107a99:	89 d0                	mov    %edx,%eax
f0107a9b:	01 c0                	add    %eax,%eax
f0107a9d:	01 d0                	add    %edx,%eax
f0107a9f:	01 c0                	add    %eax,%eax
f0107aa1:	01 d0                	add    %edx,%eax
f0107aa3:	c1 e0 02             	shl    $0x2,%eax
f0107aa6:	01 d0                	add    %edx,%eax
f0107aa8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107aaf:	01 d0                	add    %edx,%eax
f0107ab1:	c1 e0 04             	shl    $0x4,%eax
f0107ab4:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107ab9:	83 ec 04             	sub    $0x4,%esp
f0107abc:	68 50 10 00 00       	push   $0x1050
f0107ac1:	6a 00                	push   $0x0
f0107ac3:	50                   	push   %eax
f0107ac4:	e8 15 75 02 00       	call   f012efde <memset>
f0107ac9:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107acc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107acf:	89 d0                	mov    %edx,%eax
f0107ad1:	01 c0                	add    %eax,%eax
f0107ad3:	01 d0                	add    %edx,%eax
f0107ad5:	01 c0                	add    %eax,%eax
f0107ad7:	01 d0                	add    %edx,%eax
f0107ad9:	c1 e0 02             	shl    $0x2,%eax
f0107adc:	01 d0                	add    %edx,%eax
f0107ade:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107ae5:	01 d0                	add    %edx,%eax
f0107ae7:	c1 e0 04             	shl    $0x4,%eax
f0107aea:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107aef:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107af2:	ff 45 f4             	incl   -0xc(%ebp)
f0107af5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107af9:	7e 9b                	jle    f0107a96 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107afb:	90                   	nop
f0107afc:	c9                   	leave  
f0107afd:	c3                   	ret    

f0107afe <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107afe:	55                   	push   %ebp
f0107aff:	89 e5                	mov    %esp,%ebp
f0107b01:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107b04:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107b12:	eb 34                	jmp    f0107b48 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107b14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b17:	89 d0                	mov    %edx,%eax
f0107b19:	01 c0                	add    %eax,%eax
f0107b1b:	01 d0                	add    %edx,%eax
f0107b1d:	01 c0                	add    %eax,%eax
f0107b1f:	01 d0                	add    %edx,%eax
f0107b21:	c1 e0 02             	shl    $0x2,%eax
f0107b24:	01 d0                	add    %edx,%eax
f0107b26:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b2d:	01 d0                	add    %edx,%eax
f0107b2f:	c1 e0 04             	shl    $0x4,%eax
f0107b32:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107b37:	8a 00                	mov    (%eax),%al
f0107b39:	84 c0                	test   %al,%al
f0107b3b:	74 08                	je     f0107b45 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107b3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b40:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b43:	eb 09                	jmp    f0107b4e <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b45:	ff 45 f0             	incl   -0x10(%ebp)
f0107b48:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b4c:	7e c6                	jle    f0107b14 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b4e:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b52:	75 0a                	jne    f0107b5e <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b54:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b59:	e9 8b 00 00 00       	jmp    f0107be9 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b61:	89 d0                	mov    %edx,%eax
f0107b63:	01 c0                	add    %eax,%eax
f0107b65:	01 d0                	add    %edx,%eax
f0107b67:	01 c0                	add    %eax,%eax
f0107b69:	01 d0                	add    %edx,%eax
f0107b6b:	c1 e0 02             	shl    $0x2,%eax
f0107b6e:	01 d0                	add    %edx,%eax
f0107b70:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b77:	01 d0                	add    %edx,%eax
f0107b79:	c1 e0 04             	shl    $0x4,%eax
f0107b7c:	8d 90 60 3b 25 f0    	lea    -0xfdac4a0(%eax),%edx
f0107b82:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b85:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b8a:	89 d0                	mov    %edx,%eax
f0107b8c:	01 c0                	add    %eax,%eax
f0107b8e:	01 d0                	add    %edx,%eax
f0107b90:	01 c0                	add    %eax,%eax
f0107b92:	01 d0                	add    %edx,%eax
f0107b94:	c1 e0 02             	shl    $0x2,%eax
f0107b97:	01 d0                	add    %edx,%eax
f0107b99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107ba0:	01 d0                	add    %edx,%eax
f0107ba2:	c1 e0 04             	shl    $0x4,%eax
f0107ba5:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107baa:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bb0:	89 d0                	mov    %edx,%eax
f0107bb2:	01 c0                	add    %eax,%eax
f0107bb4:	01 d0                	add    %edx,%eax
f0107bb6:	01 c0                	add    %eax,%eax
f0107bb8:	01 d0                	add    %edx,%eax
f0107bba:	c1 e0 02             	shl    $0x2,%eax
f0107bbd:	01 d0                	add    %edx,%eax
f0107bbf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bc6:	01 d0                	add    %edx,%eax
f0107bc8:	c1 e0 04             	shl    $0x4,%eax
f0107bcb:	83 c0 50             	add    $0x50,%eax
f0107bce:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107bd3:	83 ec 04             	sub    $0x4,%esp
f0107bd6:	68 00 10 00 00       	push   $0x1000
f0107bdb:	6a 00                	push   $0x0
f0107bdd:	50                   	push   %eax
f0107bde:	e8 fb 73 02 00       	call   f012efde <memset>
f0107be3:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107be9:	c9                   	leave  
f0107bea:	c3                   	ret    

f0107beb <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107beb:	55                   	push   %ebp
f0107bec:	89 e5                	mov    %esp,%ebp
f0107bee:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107bf1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107bf8:	e9 95 00 00 00       	jmp    f0107c92 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107bfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c00:	89 d0                	mov    %edx,%eax
f0107c02:	01 c0                	add    %eax,%eax
f0107c04:	01 d0                	add    %edx,%eax
f0107c06:	01 c0                	add    %eax,%eax
f0107c08:	01 d0                	add    %edx,%eax
f0107c0a:	c1 e0 02             	shl    $0x2,%eax
f0107c0d:	01 d0                	add    %edx,%eax
f0107c0f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c16:	01 d0                	add    %edx,%eax
f0107c18:	c1 e0 04             	shl    $0x4,%eax
f0107c1b:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107c20:	8a 00                	mov    (%eax),%al
f0107c22:	84 c0                	test   %al,%al
f0107c24:	75 68                	jne    f0107c8e <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107c26:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c29:	89 d0                	mov    %edx,%eax
f0107c2b:	01 c0                	add    %eax,%eax
f0107c2d:	01 d0                	add    %edx,%eax
f0107c2f:	01 c0                	add    %eax,%eax
f0107c31:	01 d0                	add    %edx,%eax
f0107c33:	c1 e0 02             	shl    $0x2,%eax
f0107c36:	01 d0                	add    %edx,%eax
f0107c38:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c3f:	01 d0                	add    %edx,%eax
f0107c41:	c1 e0 04             	shl    $0x4,%eax
f0107c44:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107c49:	8b 00                	mov    (%eax),%eax
f0107c4b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c4e:	75 3f                	jne    f0107c8f <get_share_object_ID+0xa4>
f0107c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c53:	89 d0                	mov    %edx,%eax
f0107c55:	01 c0                	add    %eax,%eax
f0107c57:	01 d0                	add    %edx,%eax
f0107c59:	01 c0                	add    %eax,%eax
f0107c5b:	01 d0                	add    %edx,%eax
f0107c5d:	c1 e0 02             	shl    $0x2,%eax
f0107c60:	01 d0                	add    %edx,%eax
f0107c62:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c69:	01 d0                	add    %edx,%eax
f0107c6b:	c1 e0 04             	shl    $0x4,%eax
f0107c6e:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107c73:	83 c0 04             	add    $0x4,%eax
f0107c76:	83 ec 08             	sub    $0x8,%esp
f0107c79:	50                   	push   %eax
f0107c7a:	ff 75 0c             	pushl  0xc(%ebp)
f0107c7d:	e8 7a 72 02 00       	call   f012eefc <strcmp>
f0107c82:	83 c4 10             	add    $0x10,%esp
f0107c85:	85 c0                	test   %eax,%eax
f0107c87:	75 06                	jne    f0107c8f <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c8c:	eb 13                	jmp    f0107ca1 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107c8e:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107c8f:	ff 45 f4             	incl   -0xc(%ebp)
f0107c92:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107c96:	0f 8e 61 ff ff ff    	jle    f0107bfd <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107c9c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107ca1:	c9                   	leave  
f0107ca2:	c3                   	ret    

f0107ca3 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107ca3:	55                   	push   %ebp
f0107ca4:	89 e5                	mov    %esp,%ebp
f0107ca6:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107ca9:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107cad:	76 0a                	jbe    f0107cb9 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107caf:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107cb4:	e9 93 00 00 00       	jmp    f0107d4c <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107cb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cbc:	89 d0                	mov    %edx,%eax
f0107cbe:	01 c0                	add    %eax,%eax
f0107cc0:	01 d0                	add    %edx,%eax
f0107cc2:	01 c0                	add    %eax,%eax
f0107cc4:	01 d0                	add    %edx,%eax
f0107cc6:	c1 e0 02             	shl    $0x2,%eax
f0107cc9:	01 d0                	add    %edx,%eax
f0107ccb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cd2:	01 d0                	add    %edx,%eax
f0107cd4:	c1 e0 04             	shl    $0x4,%eax
f0107cd7:	83 c0 50             	add    $0x50,%eax
f0107cda:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107cdf:	83 ec 0c             	sub    $0xc,%esp
f0107ce2:	50                   	push   %eax
f0107ce3:	e8 3e 01 00 00       	call   f0107e26 <clear_frames_storage>
f0107ce8:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107ceb:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cee:	89 d0                	mov    %edx,%eax
f0107cf0:	01 c0                	add    %eax,%eax
f0107cf2:	01 d0                	add    %edx,%eax
f0107cf4:	01 c0                	add    %eax,%eax
f0107cf6:	01 d0                	add    %edx,%eax
f0107cf8:	c1 e0 02             	shl    $0x2,%eax
f0107cfb:	01 d0                	add    %edx,%eax
f0107cfd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d04:	01 d0                	add    %edx,%eax
f0107d06:	c1 e0 04             	shl    $0x4,%eax
f0107d09:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107d0e:	83 ec 04             	sub    $0x4,%esp
f0107d11:	68 50 10 00 00       	push   $0x1050
f0107d16:	6a 00                	push   $0x0
f0107d18:	50                   	push   %eax
f0107d19:	e8 c0 72 02 00       	call   f012efde <memset>
f0107d1e:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107d21:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d24:	89 d0                	mov    %edx,%eax
f0107d26:	01 c0                	add    %eax,%eax
f0107d28:	01 d0                	add    %edx,%eax
f0107d2a:	01 c0                	add    %eax,%eax
f0107d2c:	01 d0                	add    %edx,%eax
f0107d2e:	c1 e0 02             	shl    $0x2,%eax
f0107d31:	01 d0                	add    %edx,%eax
f0107d33:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d3a:	01 d0                	add    %edx,%eax
f0107d3c:	c1 e0 04             	shl    $0x4,%eax
f0107d3f:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107d44:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d4c:	c9                   	leave  
f0107d4d:	c3                   	ret    

f0107d4e <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d4e:	55                   	push   %ebp
f0107d4f:	89 e5                	mov    %esp,%ebp
f0107d51:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d54:	83 ec 0c             	sub    $0xc,%esp
f0107d57:	68 00 10 00 00       	push   $0x1000
f0107d5c:	e8 e0 01 00 00       	call   f0107f41 <kmalloc>
f0107d61:	83 c4 10             	add    $0x10,%esp
f0107d64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d6b:	75 17                	jne    f0107d84 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d6d:	83 ec 04             	sub    $0x4,%esp
f0107d70:	68 bf 21 13 f0       	push   $0xf01321bf
f0107d75:	68 a6 00 00 00       	push   $0xa6
f0107d7a:	68 dc 21 13 f0       	push   $0xf01321dc
f0107d7f:	e8 2c 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107d87:	c9                   	leave  
f0107d88:	c3                   	ret    

f0107d89 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107d89:	55                   	push   %ebp
f0107d8a:	89 e5                	mov    %esp,%ebp
f0107d8c:	53                   	push   %ebx
f0107d8d:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107d90:	8b 45 10             	mov    0x10(%ebp),%eax
f0107d93:	c1 e0 0c             	shl    $0xc,%eax
f0107d96:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107d99:	83 ec 04             	sub    $0x4,%esp
f0107d9c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107d9f:	50                   	push   %eax
f0107da0:	ff 75 f4             	pushl  -0xc(%ebp)
f0107da3:	ff 75 08             	pushl  0x8(%ebp)
f0107da6:	e8 1e f7 ff ff       	call   f01074c9 <get_page_table>
f0107dab:	83 c4 10             	add    $0x10,%esp
f0107dae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107db1:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107db5:	75 15                	jne    f0107dcc <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107db7:	83 ec 04             	sub    $0x4,%esp
f0107dba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dbd:	50                   	push   %eax
f0107dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dc1:	ff 75 08             	pushl  0x8(%ebp)
f0107dc4:	e8 26 f8 ff ff       	call   f01075ef <__static_cpt>
f0107dc9:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107dcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107dcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107dd2:	c1 ea 0c             	shr    $0xc,%edx
f0107dd5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ddb:	c1 e2 02             	shl    $0x2,%edx
f0107dde:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107de1:	83 ec 0c             	sub    $0xc,%esp
f0107de4:	ff 75 0c             	pushl  0xc(%ebp)
f0107de7:	e8 36 fc ff ff       	call   f0107a22 <to_physical_address>
f0107dec:	83 c4 10             	add    $0x10,%esp
f0107def:	83 c8 01             	or     $0x1,%eax
f0107df2:	89 03                	mov    %eax,(%ebx)
}
f0107df4:	90                   	nop
f0107df5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107df8:	c9                   	leave  
f0107df9:	c3                   	ret    

f0107dfa <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107dfa:	55                   	push   %ebp
f0107dfb:	89 e5                	mov    %esp,%ebp
f0107dfd:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e03:	c1 e0 0c             	shl    $0xc,%eax
f0107e06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107e09:	83 ec 04             	sub    $0x4,%esp
f0107e0c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e0f:	50                   	push   %eax
f0107e10:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e13:	ff 75 08             	pushl  0x8(%ebp)
f0107e16:	e8 46 f9 ff ff       	call   f0107761 <get_frame_info>
f0107e1b:	83 c4 10             	add    $0x10,%esp
f0107e1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107e21:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107e24:	c9                   	leave  
f0107e25:	c3                   	ret    

f0107e26 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107e26:	55                   	push   %ebp
f0107e27:	89 e5                	mov    %esp,%ebp
f0107e29:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107e2c:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107e3a:	eb 5b                	jmp    f0107e97 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107e3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e46:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e49:	01 d0                	add    %edx,%eax
f0107e4b:	8b 00                	mov    (%eax),%eax
f0107e4d:	85 c0                	test   %eax,%eax
f0107e4f:	74 43                	je     f0107e94 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e5e:	01 d0                	add    %edx,%eax
f0107e60:	8b 00                	mov    (%eax),%eax
f0107e62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e67:	83 ec 0c             	sub    $0xc,%esp
f0107e6a:	50                   	push   %eax
f0107e6b:	e8 c5 fb ff ff       	call   f0107a35 <to_frame_info>
f0107e70:	83 c4 10             	add    $0x10,%esp
f0107e73:	83 ec 0c             	sub    $0xc,%esp
f0107e76:	50                   	push   %eax
f0107e77:	e8 a3 f5 ff ff       	call   f010741f <free_frame>
f0107e7c:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e89:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e8c:	01 d0                	add    %edx,%eax
f0107e8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e94:	ff 45 f4             	incl   -0xc(%ebp)
f0107e97:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107e9e:	7e 9c                	jle    f0107e3c <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107ea0:	90                   	nop
f0107ea1:	c9                   	leave  
f0107ea2:	c3                   	ret    

f0107ea3 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107ea3:	55                   	push   %ebp
f0107ea4:	89 e5                	mov    %esp,%ebp
f0107ea6:	83 ec 18             	sub    $0x18,%esp
f0107ea9:	8b 45 14             	mov    0x14(%ebp),%eax
f0107eac:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107eaf:	83 ec 04             	sub    $0x4,%esp
f0107eb2:	68 00 22 13 f0       	push   $0xf0132200
f0107eb7:	68 f6 00 00 00       	push   $0xf6
f0107ebc:	68 dc 21 13 f0       	push   $0xf01321dc
f0107ec1:	e8 ea 82 ff ff       	call   f01001b0 <_panic>

f0107ec6 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107ec6:	55                   	push   %ebp
f0107ec7:	89 e5                	mov    %esp,%ebp
f0107ec9:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107ecc:	83 ec 04             	sub    $0x4,%esp
f0107ecf:	68 34 22 13 f0       	push   $0xf0132234
f0107ed4:	68 02 01 00 00       	push   $0x102
f0107ed9:	68 dc 21 13 f0       	push   $0xf01321dc
f0107ede:	e8 cd 82 ff ff       	call   f01001b0 <_panic>

f0107ee3 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107ee3:	55                   	push   %ebp
f0107ee4:	89 e5                	mov    %esp,%ebp
f0107ee6:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107ee9:	83 ec 04             	sub    $0x4,%esp
f0107eec:	68 68 22 13 f0       	push   $0xf0132268
f0107ef1:	68 0c 01 00 00       	push   $0x10c
f0107ef6:	68 dc 21 13 f0       	push   $0xf01321dc
f0107efb:	e8 b0 82 ff ff       	call   f01001b0 <_panic>

f0107f00 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107f00:	55                   	push   %ebp
f0107f01:	89 e5                	mov    %esp,%ebp
f0107f03:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107f06:	83 ec 04             	sub    $0x4,%esp
f0107f09:	68 98 22 13 f0       	push   $0xf0132298
f0107f0e:	68 1b 01 00 00       	push   $0x11b
f0107f13:	68 dc 21 13 f0       	push   $0xf01321dc
f0107f18:	e8 93 82 ff ff       	call   f01001b0 <_panic>

f0107f1d <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107f1d:	55                   	push   %ebp
f0107f1e:	89 e5                	mov    %esp,%ebp
f0107f20:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107f23:	83 ec 04             	sub    $0x4,%esp
f0107f26:	68 c8 22 13 f0       	push   $0xf01322c8
f0107f2b:	6a 13                	push   $0x13
f0107f2d:	68 dc 22 13 f0       	push   $0xf01322dc
f0107f32:	e8 79 82 ff ff       	call   f01001b0 <_panic>

f0107f37 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107f37:	55                   	push   %ebp
f0107f38:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107f3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107f3f:	5d                   	pop    %ebp
f0107f40:	c3                   	ret    

f0107f41 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107f41:	55                   	push   %ebp
f0107f42:	89 e5                	mov    %esp,%ebp
f0107f44:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107f47:	83 ec 04             	sub    $0x4,%esp
f0107f4a:	68 f0 22 13 f0       	push   $0xf01322f0
f0107f4f:	6a 36                	push   $0x36
f0107f51:	68 dc 22 13 f0       	push   $0xf01322dc
f0107f56:	e8 b2 83 ff ff       	call   f010030d <_panic_into_prompt>

f0107f5b <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107f5b:	55                   	push   %ebp
f0107f5c:	89 e5                	mov    %esp,%ebp
f0107f5e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107f61:	83 ec 04             	sub    $0x4,%esp
f0107f64:	68 18 23 13 f0       	push   $0xf0132318
f0107f69:	6a 3f                	push   $0x3f
f0107f6b:	68 dc 22 13 f0       	push   $0xf01322dc
f0107f70:	e8 3b 82 ff ff       	call   f01001b0 <_panic>

f0107f75 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107f75:	55                   	push   %ebp
f0107f76:	89 e5                	mov    %esp,%ebp
f0107f78:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107f7b:	83 ec 04             	sub    $0x4,%esp
f0107f7e:	68 3c 23 13 f0       	push   $0xf013233c
f0107f83:	6a 47                	push   $0x47
f0107f85:	68 dc 22 13 f0       	push   $0xf01322dc
f0107f8a:	e8 21 82 ff ff       	call   f01001b0 <_panic>

f0107f8f <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107f8f:	55                   	push   %ebp
f0107f90:	89 e5                	mov    %esp,%ebp
f0107f92:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107f95:	83 ec 04             	sub    $0x4,%esp
f0107f98:	68 70 23 13 f0       	push   $0xf0132370
f0107f9d:	6a 54                	push   $0x54
f0107f9f:	68 dc 22 13 f0       	push   $0xf01322dc
f0107fa4:	e8 07 82 ff ff       	call   f01001b0 <_panic>

f0107fa9 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107fa9:	55                   	push   %ebp
f0107faa:	89 e5                	mov    %esp,%ebp
f0107fac:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107faf:	83 ec 04             	sub    $0x4,%esp
f0107fb2:	68 a5 23 13 f0       	push   $0xf01323a5
f0107fb7:	6a 5d                	push   $0x5d
f0107fb9:	68 dc 22 13 f0       	push   $0xf01322dc
f0107fbe:	e8 ed 81 ff ff       	call   f01001b0 <_panic>

f0107fc3 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107fc3:	55                   	push   %ebp
f0107fc4:	89 e5                	mov    %esp,%ebp
f0107fc6:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fc9:	83 ec 04             	sub    $0x4,%esp
f0107fcc:	68 a5 23 13 f0       	push   $0xf01323a5
f0107fd1:	6a 63                	push   $0x63
f0107fd3:	68 dc 22 13 f0       	push   $0xf01322dc
f0107fd8:	e8 d3 81 ff ff       	call   f01001b0 <_panic>

f0107fdd <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107fdd:	55                   	push   %ebp
f0107fde:	89 e5                	mov    %esp,%ebp
f0107fe0:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fe3:	83 ec 04             	sub    $0x4,%esp
f0107fe6:	68 a5 23 13 f0       	push   $0xf01323a5
f0107feb:	6a 68                	push   $0x68
f0107fed:	68 dc 22 13 f0       	push   $0xf01322dc
f0107ff2:	e8 b9 81 ff ff       	call   f01001b0 <_panic>

f0107ff7 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107ff7:	55                   	push   %ebp
f0107ff8:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0107ffa:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0107fff:	5d                   	pop    %ebp
f0108000:	c3                   	ret    

f0108001 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108001:	55                   	push   %ebp
f0108002:	89 e5                	mov    %esp,%ebp
f0108004:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108007:	83 ec 04             	sub    $0x4,%esp
f010800a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010800d:	50                   	push   %eax
f010800e:	ff 75 0c             	pushl  0xc(%ebp)
f0108011:	ff 75 08             	pushl  0x8(%ebp)
f0108014:	e8 b0 f4 ff ff       	call   f01074c9 <get_page_table>
f0108019:	83 c4 10             	add    $0x10,%esp
f010801c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010801f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108022:	85 c0                	test   %eax,%eax
f0108024:	74 64                	je     f010808a <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108026:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108029:	8b 55 0c             	mov    0xc(%ebp),%edx
f010802c:	c1 ea 0c             	shr    $0xc,%edx
f010802f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108035:	c1 e2 02             	shl    $0x2,%edx
f0108038:	01 c2                	add    %eax,%edx
f010803a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010803d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108040:	c1 e9 0c             	shr    $0xc,%ecx
f0108043:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108049:	c1 e1 02             	shl    $0x2,%ecx
f010804c:	01 c8                	add    %ecx,%eax
f010804e:	8b 00                	mov    (%eax),%eax
f0108050:	0b 45 10             	or     0x10(%ebp),%eax
f0108053:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108055:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108058:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805b:	c1 ea 0c             	shr    $0xc,%edx
f010805e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108064:	c1 e2 02             	shl    $0x2,%edx
f0108067:	01 d0                	add    %edx,%eax
f0108069:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010806c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010806f:	c1 e9 0c             	shr    $0xc,%ecx
f0108072:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108078:	c1 e1 02             	shl    $0x2,%ecx
f010807b:	01 ca                	add    %ecx,%edx
f010807d:	8b 12                	mov    (%edx),%edx
f010807f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108082:	f7 d1                	not    %ecx
f0108084:	21 ca                	and    %ecx,%edx
f0108086:	89 10                	mov    %edx,(%eax)
f0108088:	eb 27                	jmp    f01080b1 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f010808a:	83 ec 08             	sub    $0x8,%esp
f010808d:	ff 75 0c             	pushl  0xc(%ebp)
f0108090:	68 b8 23 13 f0       	push   $0xf01323b8
f0108095:	e8 97 8d ff ff       	call   f0100e31 <cprintf>
f010809a:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f010809d:	83 ec 04             	sub    $0x4,%esp
f01080a0:	68 e0 23 13 f0       	push   $0xf01323e0
f01080a5:	6a 1c                	push   $0x1c
f01080a7:	68 54 24 13 f0       	push   $0xf0132454
f01080ac:	e8 ff 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080b4:	83 ec 08             	sub    $0x8,%esp
f01080b7:	50                   	push   %eax
f01080b8:	6a 00                	push   $0x0
f01080ba:	e8 e1 ed ff ff       	call   f0106ea0 <tlb_invalidate>
f01080bf:	83 c4 10             	add    $0x10,%esp
}
f01080c2:	90                   	nop
f01080c3:	c9                   	leave  
f01080c4:	c3                   	ret    

f01080c5 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01080c5:	55                   	push   %ebp
f01080c6:	89 e5                	mov    %esp,%ebp
f01080c8:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01080cb:	83 ec 04             	sub    $0x4,%esp
f01080ce:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01080d1:	50                   	push   %eax
f01080d2:	ff 75 0c             	pushl  0xc(%ebp)
f01080d5:	ff 75 08             	pushl  0x8(%ebp)
f01080d8:	e8 ec f3 ff ff       	call   f01074c9 <get_page_table>
f01080dd:	83 c4 10             	add    $0x10,%esp
f01080e0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f01080e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080e6:	85 c0                	test   %eax,%eax
f01080e8:	74 1d                	je     f0108107 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f01080ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080ed:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080f0:	c1 ea 0c             	shr    $0xc,%edx
f01080f3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01080f9:	c1 e2 02             	shl    $0x2,%edx
f01080fc:	01 d0                	add    %edx,%eax
f01080fe:	8b 00                	mov    (%eax),%eax
f0108100:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108105:	eb 05                	jmp    f010810c <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108107:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010810c:	c9                   	leave  
f010810d:	c3                   	ret    

f010810e <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f010810e:	55                   	push   %ebp
f010810f:	89 e5                	mov    %esp,%ebp
f0108111:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108114:	83 ec 04             	sub    $0x4,%esp
f0108117:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010811a:	50                   	push   %eax
f010811b:	ff 75 0c             	pushl  0xc(%ebp)
f010811e:	ff 75 08             	pushl  0x8(%ebp)
f0108121:	e8 a3 f3 ff ff       	call   f01074c9 <get_page_table>
f0108126:	83 c4 10             	add    $0x10,%esp
f0108129:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010812c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010812f:	85 c0                	test   %eax,%eax
f0108131:	74 46                	je     f0108179 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108133:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108136:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108139:	c1 ea 0c             	shr    $0xc,%edx
f010813c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108142:	c1 e2 02             	shl    $0x2,%edx
f0108145:	01 d0                	add    %edx,%eax
f0108147:	8b 00                	mov    (%eax),%eax
f0108149:	83 ec 04             	sub    $0x4,%esp
f010814c:	50                   	push   %eax
f010814d:	ff 75 0c             	pushl  0xc(%ebp)
f0108150:	68 70 24 13 f0       	push   $0xf0132470
f0108155:	e8 d7 8c ff ff       	call   f0100e31 <cprintf>
f010815a:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010815d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108160:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108163:	c1 ea 0c             	shr    $0xc,%edx
f0108166:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010816c:	c1 e2 02             	shl    $0x2,%edx
f010816f:	01 d0                	add    %edx,%eax
f0108171:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108177:	eb 14                	jmp    f010818d <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108179:	83 ec 04             	sub    $0x4,%esp
f010817c:	68 98 24 13 f0       	push   $0xf0132498
f0108181:	6a 47                	push   $0x47
f0108183:	68 54 24 13 f0       	push   $0xf0132454
f0108188:	e8 23 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010818d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108190:	83 ec 08             	sub    $0x8,%esp
f0108193:	50                   	push   %eax
f0108194:	6a 00                	push   $0x0
f0108196:	e8 05 ed ff ff       	call   f0106ea0 <tlb_invalidate>
f010819b:	83 c4 10             	add    $0x10,%esp
}
f010819e:	90                   	nop
f010819f:	c9                   	leave  
f01081a0:	c3                   	ret    

f01081a1 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01081a1:	55                   	push   %ebp
f01081a2:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01081a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081a7:	c1 e8 16             	shr    $0x16,%eax
f01081aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081b4:	01 d0                	add    %edx,%eax
f01081b6:	8b 00                	mov    (%eax),%eax
f01081b8:	83 e0 20             	and    $0x20,%eax
f01081bb:	85 c0                	test   %eax,%eax
f01081bd:	0f 95 c0             	setne  %al
f01081c0:	0f b6 c0             	movzbl %al,%eax
}
f01081c3:	5d                   	pop    %ebp
f01081c4:	c3                   	ret    

f01081c5 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01081c5:	55                   	push   %ebp
f01081c6:	89 e5                	mov    %esp,%ebp
f01081c8:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01081cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ce:	c1 e8 16             	shr    $0x16,%eax
f01081d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01081db:	01 d0                	add    %edx,%eax
f01081dd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081e0:	c1 ea 16             	shr    $0x16,%edx
f01081e3:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01081ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01081ed:	01 ca                	add    %ecx,%edx
f01081ef:	8b 12                	mov    (%edx),%edx
f01081f1:	83 e2 df             	and    $0xffffffdf,%edx
f01081f4:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01081f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081f9:	83 ec 08             	sub    $0x8,%esp
f01081fc:	50                   	push   %eax
f01081fd:	6a 00                	push   $0x0
f01081ff:	e8 9c ec ff ff       	call   f0106ea0 <tlb_invalidate>
f0108204:	83 c4 10             	add    $0x10,%esp
}
f0108207:	90                   	nop
f0108208:	c9                   	leave  
f0108209:	c3                   	ret    

f010820a <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f010820a:	55                   	push   %ebp
f010820b:	89 e5                	mov    %esp,%ebp
f010820d:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0108210:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108213:	c1 e8 16             	shr    $0x16,%eax
f0108216:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010821d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108220:	01 d0                	add    %edx,%eax
f0108222:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108228:	0f 20 d8             	mov    %cr3,%eax
f010822b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010822e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108231:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108234:	90                   	nop
f0108235:	c9                   	leave  
f0108236:	c3                   	ret    

f0108237 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108237:	55                   	push   %ebp
f0108238:	89 e5                	mov    %esp,%ebp
f010823a:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010823d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108244:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f010824b:	eb 22                	jmp    f010826f <env_page_ws_get_size+0x38>
f010824d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108250:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108253:	89 d0                	mov    %edx,%eax
f0108255:	01 c0                	add    %eax,%eax
f0108257:	01 d0                	add    %edx,%eax
f0108259:	c1 e0 03             	shl    $0x3,%eax
f010825c:	01 c8                	add    %ecx,%eax
f010825e:	05 bc 00 00 00       	add    $0xbc,%eax
f0108263:	8a 00                	mov    (%eax),%al
f0108265:	84 c0                	test   %al,%al
f0108267:	75 03                	jne    f010826c <env_page_ws_get_size+0x35>
f0108269:	ff 45 f8             	incl   -0x8(%ebp)
f010826c:	ff 45 fc             	incl   -0x4(%ebp)
f010826f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108272:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108278:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010827b:	39 c2                	cmp    %eax,%edx
f010827d:	77 ce                	ja     f010824d <env_page_ws_get_size+0x16>
	return counter;
f010827f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108282:	c9                   	leave  
f0108283:	c3                   	ret    

f0108284 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108284:	55                   	push   %ebp
f0108285:	89 e5                	mov    %esp,%ebp
f0108287:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010828a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108291:	eb 4e                	jmp    f01082e1 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108293:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108296:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108299:	89 d0                	mov    %edx,%eax
f010829b:	01 c0                	add    %eax,%eax
f010829d:	01 d0                	add    %edx,%eax
f010829f:	c1 e0 03             	shl    $0x3,%eax
f01082a2:	01 c8                	add    %ecx,%eax
f01082a4:	05 b8 00 00 00       	add    $0xb8,%eax
f01082a9:	8b 00                	mov    (%eax),%eax
f01082ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082b1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082b6:	89 c2                	mov    %eax,%edx
f01082b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01082be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01082c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082c6:	39 c2                	cmp    %eax,%edx
f01082c8:	75 14                	jne    f01082de <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f01082ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082cd:	83 ec 08             	sub    $0x8,%esp
f01082d0:	50                   	push   %eax
f01082d1:	ff 75 08             	pushl  0x8(%ebp)
f01082d4:	e8 c8 00 00 00       	call   f01083a1 <env_page_ws_clear_entry>
f01082d9:	83 c4 10             	add    $0x10,%esp
			break;
f01082dc:	eb 13                	jmp    f01082f1 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01082de:	ff 45 f4             	incl   -0xc(%ebp)
f01082e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e4:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01082ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082ed:	39 c2                	cmp    %eax,%edx
f01082ef:	77 a2                	ja     f0108293 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01082f1:	90                   	nop
f01082f2:	c9                   	leave  
f01082f3:	c3                   	ret    

f01082f4 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01082f4:	55                   	push   %ebp
f01082f5:	89 e5                	mov    %esp,%ebp
f01082f7:	53                   	push   %ebx
f01082f8:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01082fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fe:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108304:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108307:	77 16                	ja     f010831f <env_page_ws_set_entry+0x2b>
f0108309:	68 10 25 13 f0       	push   $0xf0132510
f010830e:	68 46 25 13 f0       	push   $0xf0132546
f0108313:	6a 77                	push   $0x77
f0108315:	68 5c 25 13 f0       	push   $0xf013255c
f010831a:	e8 91 7e ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010831f:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108326:	76 16                	jbe    f010833e <env_page_ws_set_entry+0x4a>
f0108328:	68 7c 25 13 f0       	push   $0xf013257c
f010832d:	68 46 25 13 f0       	push   $0xf0132546
f0108332:	6a 78                	push   $0x78
f0108334:	68 5c 25 13 f0       	push   $0xf013255c
f0108339:	e8 72 7e ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010833e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108341:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108344:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108347:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010834c:	89 c1                	mov    %eax,%ecx
f010834e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108351:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108354:	89 d0                	mov    %edx,%eax
f0108356:	01 c0                	add    %eax,%eax
f0108358:	01 d0                	add    %edx,%eax
f010835a:	c1 e0 03             	shl    $0x3,%eax
f010835d:	01 d8                	add    %ebx,%eax
f010835f:	05 b8 00 00 00       	add    $0xb8,%eax
f0108364:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108366:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108369:	8b 55 0c             	mov    0xc(%ebp),%edx
f010836c:	89 d0                	mov    %edx,%eax
f010836e:	01 c0                	add    %eax,%eax
f0108370:	01 d0                	add    %edx,%eax
f0108372:	c1 e0 03             	shl    $0x3,%eax
f0108375:	01 c8                	add    %ecx,%eax
f0108377:	05 bc 00 00 00       	add    $0xbc,%eax
f010837c:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010837f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108382:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108385:	89 d0                	mov    %edx,%eax
f0108387:	01 c0                	add    %eax,%eax
f0108389:	01 d0                	add    %edx,%eax
f010838b:	c1 e0 03             	shl    $0x3,%eax
f010838e:	01 c8                	add    %ecx,%eax
f0108390:	05 c0 00 00 00       	add    $0xc0,%eax
f0108395:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010839b:	90                   	nop
}
f010839c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010839f:	c9                   	leave  
f01083a0:	c3                   	ret    

f01083a1 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01083a1:	55                   	push   %ebp
f01083a2:	89 e5                	mov    %esp,%ebp
f01083a4:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01083a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083aa:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083b0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083b3:	77 19                	ja     f01083ce <env_page_ws_clear_entry+0x2d>
f01083b5:	68 b0 25 13 f0       	push   $0xf01325b0
f01083ba:	68 46 25 13 f0       	push   $0xf0132546
f01083bf:	68 83 00 00 00       	push   $0x83
f01083c4:	68 5c 25 13 f0       	push   $0xf013255c
f01083c9:	e8 e2 7d ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01083ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083d4:	89 d0                	mov    %edx,%eax
f01083d6:	01 c0                	add    %eax,%eax
f01083d8:	01 d0                	add    %edx,%eax
f01083da:	c1 e0 03             	shl    $0x3,%eax
f01083dd:	01 c8                	add    %ecx,%eax
f01083df:	05 b8 00 00 00       	add    $0xb8,%eax
f01083e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01083ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ed:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083f0:	89 d0                	mov    %edx,%eax
f01083f2:	01 c0                	add    %eax,%eax
f01083f4:	01 d0                	add    %edx,%eax
f01083f6:	c1 e0 03             	shl    $0x3,%eax
f01083f9:	01 c8                	add    %ecx,%eax
f01083fb:	05 bc 00 00 00       	add    $0xbc,%eax
f0108400:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108403:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108406:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108409:	89 d0                	mov    %edx,%eax
f010840b:	01 c0                	add    %eax,%eax
f010840d:	01 d0                	add    %edx,%eax
f010840f:	c1 e0 03             	shl    $0x3,%eax
f0108412:	01 c8                	add    %ecx,%eax
f0108414:	05 c0 00 00 00       	add    $0xc0,%eax
f0108419:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010841f:	90                   	nop
f0108420:	c9                   	leave  
f0108421:	c3                   	ret    

f0108422 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108422:	55                   	push   %ebp
f0108423:	89 e5                	mov    %esp,%ebp
f0108425:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108428:	8b 45 08             	mov    0x8(%ebp),%eax
f010842b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108431:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108434:	77 19                	ja     f010844f <env_page_ws_get_virtual_address+0x2d>
f0108436:	68 b0 25 13 f0       	push   $0xf01325b0
f010843b:	68 46 25 13 f0       	push   $0xf0132546
f0108440:	68 8b 00 00 00       	push   $0x8b
f0108445:	68 5c 25 13 f0       	push   $0xf013255c
f010844a:	e8 61 7d ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010844f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108452:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108455:	89 d0                	mov    %edx,%eax
f0108457:	01 c0                	add    %eax,%eax
f0108459:	01 d0                	add    %edx,%eax
f010845b:	c1 e0 03             	shl    $0x3,%eax
f010845e:	01 c8                	add    %ecx,%eax
f0108460:	05 b8 00 00 00       	add    $0xb8,%eax
f0108465:	8b 00                	mov    (%eax),%eax
f0108467:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010846a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010846d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108472:	c9                   	leave  
f0108473:	c3                   	ret    

f0108474 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108474:	55                   	push   %ebp
f0108475:	89 e5                	mov    %esp,%ebp
f0108477:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010847a:	8b 45 08             	mov    0x8(%ebp),%eax
f010847d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108483:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108486:	77 19                	ja     f01084a1 <env_page_ws_get_time_stamp+0x2d>
f0108488:	68 b0 25 13 f0       	push   $0xf01325b0
f010848d:	68 46 25 13 f0       	push   $0xf0132546
f0108492:	68 91 00 00 00       	push   $0x91
f0108497:	68 5c 25 13 f0       	push   $0xf013255c
f010849c:	e8 0f 7d ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01084a1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084a7:	89 d0                	mov    %edx,%eax
f01084a9:	01 c0                	add    %eax,%eax
f01084ab:	01 d0                	add    %edx,%eax
f01084ad:	c1 e0 03             	shl    $0x3,%eax
f01084b0:	01 c8                	add    %ecx,%eax
f01084b2:	05 c0 00 00 00       	add    $0xc0,%eax
f01084b7:	8b 00                	mov    (%eax),%eax
}
f01084b9:	c9                   	leave  
f01084ba:	c3                   	ret    

f01084bb <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01084bb:	55                   	push   %ebp
f01084bc:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f01084be:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084c1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084c4:	89 d0                	mov    %edx,%eax
f01084c6:	01 c0                	add    %eax,%eax
f01084c8:	01 d0                	add    %edx,%eax
f01084ca:	c1 e0 03             	shl    $0x3,%eax
f01084cd:	01 c8                	add    %ecx,%eax
f01084cf:	05 bc 00 00 00       	add    $0xbc,%eax
f01084d4:	8a 00                	mov    (%eax),%al
f01084d6:	0f b6 c0             	movzbl %al,%eax
}
f01084d9:	5d                   	pop    %ebp
f01084da:	c3                   	ret    

f01084db <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f01084db:	55                   	push   %ebp
f01084dc:	89 e5                	mov    %esp,%ebp
f01084de:	53                   	push   %ebx
f01084df:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01084e2:	83 ec 0c             	sub    $0xc,%esp
f01084e5:	6a 02                	push   $0x2
f01084e7:	e8 46 52 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f01084ec:	83 c4 10             	add    $0x10,%esp
f01084ef:	85 c0                	test   %eax,%eax
f01084f1:	0f 84 fe 00 00 00    	je     f01085f5 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01084f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01084fe:	83 ec 0c             	sub    $0xc,%esp
f0108501:	68 e8 25 13 f0       	push   $0xf01325e8
f0108506:	e8 26 89 ff ff       	call   f0100e31 <cprintf>
f010850b:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010850e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108511:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0108517:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010851a:	eb 2c                	jmp    f0108548 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010851c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010851f:	8b 10                	mov    (%eax),%edx
f0108521:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108524:	8d 48 01             	lea    0x1(%eax),%ecx
f0108527:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010852a:	83 ec 04             	sub    $0x4,%esp
f010852d:	52                   	push   %edx
f010852e:	50                   	push   %eax
f010852f:	68 02 26 13 f0       	push   $0xf0132602
f0108534:	e8 f8 88 ff ff       	call   f0100e31 <cprintf>
f0108539:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010853c:	8b 45 08             	mov    0x8(%ebp),%eax
f010853f:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108545:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108548:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010854c:	74 08                	je     f0108556 <env_page_ws_print+0x7b>
f010854e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108551:	8b 40 10             	mov    0x10(%eax),%eax
f0108554:	eb 05                	jmp    f010855b <env_page_ws_print+0x80>
f0108556:	b8 00 00 00 00       	mov    $0x0,%eax
f010855b:	8b 55 08             	mov    0x8(%ebp),%edx
f010855e:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0108564:	8b 45 08             	mov    0x8(%ebp),%eax
f0108567:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f010856d:	85 c0                	test   %eax,%eax
f010856f:	75 ab                	jne    f010851c <env_page_ws_print+0x41>
f0108571:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108575:	75 a5                	jne    f010851c <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108577:	83 ec 0c             	sub    $0xc,%esp
f010857a:	68 0a 26 13 f0       	push   $0xf013260a
f010857f:	e8 ad 88 ff ff       	call   f0100e31 <cprintf>
f0108584:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108587:	8b 45 08             	mov    0x8(%ebp),%eax
f010858a:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0108590:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108593:	eb 2c                	jmp    f01085c1 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108595:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108598:	8b 10                	mov    (%eax),%edx
f010859a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010859d:	8d 48 01             	lea    0x1(%eax),%ecx
f01085a0:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01085a3:	83 ec 04             	sub    $0x4,%esp
f01085a6:	52                   	push   %edx
f01085a7:	50                   	push   %eax
f01085a8:	68 02 26 13 f0       	push   $0xf0132602
f01085ad:	e8 7f 88 ff ff       	call   f0100e31 <cprintf>
f01085b2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01085b8:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01085be:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01085c5:	74 08                	je     f01085cf <env_page_ws_print+0xf4>
f01085c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085ca:	8b 40 10             	mov    0x10(%eax),%eax
f01085cd:	eb 05                	jmp    f01085d4 <env_page_ws_print+0xf9>
f01085cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01085d4:	8b 55 08             	mov    0x8(%ebp),%edx
f01085d7:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01085dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01085e0:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01085e6:	85 c0                	test   %eax,%eax
f01085e8:	75 ab                	jne    f0108595 <env_page_ws_print+0xba>
f01085ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01085ee:	75 a5                	jne    f0108595 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01085f0:	e9 a2 01 00 00       	jmp    f0108797 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01085f5:	83 ec 0c             	sub    $0xc,%esp
f01085f8:	68 25 26 13 f0       	push   $0xf0132625
f01085fd:	e8 2f 88 ff ff       	call   f0100e31 <cprintf>
f0108602:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108605:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010860c:	e9 74 01 00 00       	jmp    f0108785 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108611:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108614:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108617:	89 d0                	mov    %edx,%eax
f0108619:	01 c0                	add    %eax,%eax
f010861b:	01 d0                	add    %edx,%eax
f010861d:	c1 e0 03             	shl    $0x3,%eax
f0108620:	01 c8                	add    %ecx,%eax
f0108622:	05 bc 00 00 00       	add    $0xbc,%eax
f0108627:	8a 00                	mov    (%eax),%al
f0108629:	84 c0                	test   %al,%al
f010862b:	74 43                	je     f0108670 <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010862d:	83 ec 0c             	sub    $0xc,%esp
f0108630:	68 2f 26 13 f0       	push   $0xf013262f
f0108635:	e8 f7 87 ff ff       	call   f0100e31 <cprintf>
f010863a:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010863d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108640:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108646:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108649:	75 10                	jne    f010865b <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f010864b:	83 ec 0c             	sub    $0xc,%esp
f010864e:	68 3e 26 13 f0       	push   $0xf013263e
f0108653:	e8 d9 87 ff ff       	call   f0100e31 <cprintf>
f0108658:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010865b:	83 ec 0c             	sub    $0xc,%esp
f010865e:	68 44 26 13 f0       	push   $0xf0132644
f0108663:	e8 c9 87 ff ff       	call   f0100e31 <cprintf>
f0108668:	83 c4 10             	add    $0x10,%esp
				continue;
f010866b:	e9 12 01 00 00       	jmp    f0108782 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108670:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108673:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108676:	89 d0                	mov    %edx,%eax
f0108678:	01 c0                	add    %eax,%eax
f010867a:	01 d0                	add    %edx,%eax
f010867c:	c1 e0 03             	shl    $0x3,%eax
f010867f:	01 c8                	add    %ecx,%eax
f0108681:	05 b8 00 00 00       	add    $0xb8,%eax
f0108686:	8b 00                	mov    (%eax),%eax
f0108688:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f010868b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010868e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108691:	89 d0                	mov    %edx,%eax
f0108693:	01 c0                	add    %eax,%eax
f0108695:	01 d0                	add    %edx,%eax
f0108697:	c1 e0 03             	shl    $0x3,%eax
f010869a:	01 c8                	add    %ecx,%eax
f010869c:	05 c0 00 00 00       	add    $0xc0,%eax
f01086a1:	8b 00                	mov    (%eax),%eax
f01086a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01086a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01086af:	83 ec 08             	sub    $0x8,%esp
f01086b2:	ff 75 e8             	pushl  -0x18(%ebp)
f01086b5:	50                   	push   %eax
f01086b6:	e8 0a fa ff ff       	call   f01080c5 <pt_get_page_permissions>
f01086bb:	83 c4 10             	add    $0x10,%esp
f01086be:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01086c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086c4:	83 e0 40             	and    $0x40,%eax
f01086c7:	85 c0                	test   %eax,%eax
f01086c9:	0f 95 c0             	setne  %al
f01086cc:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01086cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086d2:	83 e0 20             	and    $0x20,%eax
f01086d5:	85 c0                	test   %eax,%eax
f01086d7:	0f 95 c0             	setne  %al
f01086da:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01086dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086e0:	25 00 02 00 00       	and    $0x200,%eax
f01086e5:	85 c0                	test   %eax,%eax
f01086e7:	0f 95 c0             	setne  %al
f01086ea:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f01086ed:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086f3:	89 d0                	mov    %edx,%eax
f01086f5:	01 c0                	add    %eax,%eax
f01086f7:	01 d0                	add    %edx,%eax
f01086f9:	c1 e0 03             	shl    $0x3,%eax
f01086fc:	01 c8                	add    %ecx,%eax
f01086fe:	05 b8 00 00 00       	add    $0xb8,%eax
f0108703:	8b 00                	mov    (%eax),%eax
f0108705:	83 ec 04             	sub    $0x4,%esp
f0108708:	50                   	push   %eax
f0108709:	ff 75 ec             	pushl  -0x14(%ebp)
f010870c:	68 46 26 13 f0       	push   $0xf0132646
f0108711:	e8 1b 87 ff ff       	call   f0100e31 <cprintf>
f0108716:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108719:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010871c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010871f:	89 d0                	mov    %edx,%eax
f0108721:	01 c0                	add    %eax,%eax
f0108723:	01 d0                	add    %edx,%eax
f0108725:	c1 e0 03             	shl    $0x3,%eax
f0108728:	01 c8                	add    %ecx,%eax
f010872a:	05 c4 00 00 00       	add    $0xc4,%eax
f010872f:	8b 18                	mov    (%eax),%ebx
f0108731:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108735:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0108739:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010873d:	83 ec 08             	sub    $0x8,%esp
f0108740:	53                   	push   %ebx
f0108741:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108744:	51                   	push   %ecx
f0108745:	52                   	push   %edx
f0108746:	50                   	push   %eax
f0108747:	68 58 26 13 f0       	push   $0xf0132658
f010874c:	e8 e0 86 ff ff       	call   f0100e31 <cprintf>
f0108751:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108754:	8b 45 08             	mov    0x8(%ebp),%eax
f0108757:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010875d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108760:	75 10                	jne    f0108772 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f0108762:	83 ec 0c             	sub    $0xc,%esp
f0108765:	68 9f 26 13 f0       	push   $0xf013269f
f010876a:	e8 c2 86 ff ff       	call   f0100e31 <cprintf>
f010876f:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108772:	83 ec 0c             	sub    $0xc,%esp
f0108775:	68 44 26 13 f0       	push   $0xf0132644
f010877a:	e8 b2 86 ff ff       	call   f0100e31 <cprintf>
f010877f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108782:	ff 45 ec             	incl   -0x14(%ebp)
f0108785:	8b 45 08             	mov    0x8(%ebp),%eax
f0108788:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010878e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108791:	0f 87 7a fe ff ff    	ja     f0108611 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108797:	90                   	nop
f0108798:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010879b:	c9                   	leave  
f010879c:	c3                   	ret    

f010879d <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f010879d:	55                   	push   %ebp
f010879e:	89 e5                	mov    %esp,%ebp
f01087a0:	53                   	push   %ebx
f01087a1:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01087a4:	83 ec 0c             	sub    $0xc,%esp
f01087a7:	68 a4 26 13 f0       	push   $0xf01326a4
f01087ac:	e8 80 86 ff ff       	call   f0100e31 <cprintf>
f01087b1:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01087b4:	83 ec 0c             	sub    $0xc,%esp
f01087b7:	68 d9 26 13 f0       	push   $0xf01326d9
f01087bc:	e8 70 86 ff ff       	call   f0100e31 <cprintf>
f01087c1:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01087c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01087cb:	e9 19 01 00 00       	jmp    f01088e9 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f01087d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087d6:	89 d0                	mov    %edx,%eax
f01087d8:	01 c0                	add    %eax,%eax
f01087da:	01 d0                	add    %edx,%eax
f01087dc:	c1 e0 03             	shl    $0x3,%eax
f01087df:	01 c8                	add    %ecx,%eax
f01087e1:	05 84 d5 01 00       	add    $0x1d584,%eax
f01087e6:	8a 00                	mov    (%eax),%al
f01087e8:	84 c0                	test   %al,%al
f01087ea:	74 43                	je     f010882f <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f01087ec:	83 ec 0c             	sub    $0xc,%esp
f01087ef:	68 2f 26 13 f0       	push   $0xf013262f
f01087f4:	e8 38 86 ff ff       	call   f0100e31 <cprintf>
f01087f9:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01087fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01087ff:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108805:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108808:	75 10                	jne    f010881a <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f010880a:	83 ec 0c             	sub    $0xc,%esp
f010880d:	68 3e 26 13 f0       	push   $0xf013263e
f0108812:	e8 1a 86 ff ff       	call   f0100e31 <cprintf>
f0108817:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010881a:	83 ec 0c             	sub    $0xc,%esp
f010881d:	68 44 26 13 f0       	push   $0xf0132644
f0108822:	e8 0a 86 ff ff       	call   f0100e31 <cprintf>
f0108827:	83 c4 10             	add    $0x10,%esp
			continue;
f010882a:	e9 b7 00 00 00       	jmp    f01088e6 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010882f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108832:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108835:	89 d0                	mov    %edx,%eax
f0108837:	01 c0                	add    %eax,%eax
f0108839:	01 d0                	add    %edx,%eax
f010883b:	c1 e0 03             	shl    $0x3,%eax
f010883e:	01 c8                	add    %ecx,%eax
f0108840:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108845:	8b 00                	mov    (%eax),%eax
f0108847:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f010884a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010884d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108850:	89 d0                	mov    %edx,%eax
f0108852:	01 c0                	add    %eax,%eax
f0108854:	01 d0                	add    %edx,%eax
f0108856:	c1 e0 03             	shl    $0x3,%eax
f0108859:	01 c8                	add    %ecx,%eax
f010885b:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108860:	8b 00                	mov    (%eax),%eax
f0108862:	83 ec 04             	sub    $0x4,%esp
f0108865:	50                   	push   %eax
f0108866:	ff 75 f4             	pushl  -0xc(%ebp)
f0108869:	68 e4 26 13 f0       	push   $0xf01326e4
f010886e:	e8 be 85 ff ff       	call   f0100e31 <cprintf>
f0108873:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108876:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108879:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010887c:	89 d0                	mov    %edx,%eax
f010887e:	01 c0                	add    %eax,%eax
f0108880:	01 d0                	add    %edx,%eax
f0108882:	c1 e0 03             	shl    $0x3,%eax
f0108885:	01 c8                	add    %ecx,%eax
f0108887:	05 88 d5 01 00       	add    $0x1d588,%eax
f010888c:	8b 18                	mov    (%eax),%ebx
f010888e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108891:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108897:	83 ec 08             	sub    $0x8,%esp
f010889a:	ff 75 f0             	pushl  -0x10(%ebp)
f010889d:	50                   	push   %eax
f010889e:	e8 fe f8 ff ff       	call   f01081a1 <pd_is_table_used>
f01088a3:	83 c4 10             	add    $0x10,%esp
f01088a6:	83 ec 04             	sub    $0x4,%esp
f01088a9:	53                   	push   %ebx
f01088aa:	50                   	push   %eax
f01088ab:	68 fc 26 13 f0       	push   $0xf01326fc
f01088b0:	e8 7c 85 ff ff       	call   f0100e31 <cprintf>
f01088b5:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01088b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01088bb:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f01088c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01088c4:	75 10                	jne    f01088d6 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f01088c6:	83 ec 0c             	sub    $0xc,%esp
f01088c9:	68 9f 26 13 f0       	push   $0xf013269f
f01088ce:	e8 5e 85 ff ff       	call   f0100e31 <cprintf>
f01088d3:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01088d6:	83 ec 0c             	sub    $0xc,%esp
f01088d9:	68 44 26 13 f0       	push   $0xf0132644
f01088de:	e8 4e 85 ff ff       	call   f0100e31 <cprintf>
f01088e3:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01088e6:	ff 45 f4             	incl   -0xc(%ebp)
f01088e9:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01088ed:	0f 86 dd fe ff ff    	jbe    f01087d0 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01088f3:	90                   	nop
f01088f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01088f7:	c9                   	leave  
f01088f8:	c3                   	ret    

f01088f9 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f01088f9:	55                   	push   %ebp
f01088fa:	89 e5                	mov    %esp,%ebp
f01088fc:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01088ff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108906:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010890d:	eb 22                	jmp    f0108931 <env_table_ws_get_size+0x38>
f010890f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108912:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108915:	89 d0                	mov    %edx,%eax
f0108917:	01 c0                	add    %eax,%eax
f0108919:	01 d0                	add    %edx,%eax
f010891b:	c1 e0 03             	shl    $0x3,%eax
f010891e:	01 c8                	add    %ecx,%eax
f0108920:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108925:	8a 00                	mov    (%eax),%al
f0108927:	84 c0                	test   %al,%al
f0108929:	75 03                	jne    f010892e <env_table_ws_get_size+0x35>
f010892b:	ff 45 f8             	incl   -0x8(%ebp)
f010892e:	ff 45 fc             	incl   -0x4(%ebp)
f0108931:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108935:	7e d8                	jle    f010890f <env_table_ws_get_size+0x16>
	return counter;
f0108937:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010893a:	c9                   	leave  
f010893b:	c3                   	ret    

f010893c <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010893c:	55                   	push   %ebp
f010893d:	89 e5                	mov    %esp,%ebp
f010893f:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108942:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108949:	eb 4e                	jmp    f0108999 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010894b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010894e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108951:	89 d0                	mov    %edx,%eax
f0108953:	01 c0                	add    %eax,%eax
f0108955:	01 d0                	add    %edx,%eax
f0108957:	c1 e0 03             	shl    $0x3,%eax
f010895a:	01 c8                	add    %ecx,%eax
f010895c:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108961:	8b 00                	mov    (%eax),%eax
f0108963:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108966:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108969:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010896e:	89 c2                	mov    %eax,%edx
f0108970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108973:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108976:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108979:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010897e:	39 c2                	cmp    %eax,%edx
f0108980:	75 14                	jne    f0108996 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0108982:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108985:	83 ec 08             	sub    $0x8,%esp
f0108988:	50                   	push   %eax
f0108989:	ff 75 08             	pushl  0x8(%ebp)
f010898c:	e8 bc 00 00 00       	call   f0108a4d <env_table_ws_clear_entry>
f0108991:	83 c4 10             	add    $0x10,%esp
			break;
f0108994:	eb 09                	jmp    f010899f <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108996:	ff 45 f4             	incl   -0xc(%ebp)
f0108999:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010899d:	7e ac                	jle    f010894b <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f010899f:	90                   	nop
f01089a0:	c9                   	leave  
f01089a1:	c3                   	ret    

f01089a2 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01089a2:	55                   	push   %ebp
f01089a3:	89 e5                	mov    %esp,%ebp
f01089a5:	53                   	push   %ebx
f01089a6:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089a9:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089ad:	76 19                	jbe    f01089c8 <env_table_ws_set_entry+0x26>
f01089af:	68 20 27 13 f0       	push   $0xf0132720
f01089b4:	68 46 25 13 f0       	push   $0xf0132546
f01089b9:	68 07 01 00 00       	push   $0x107
f01089be:	68 5c 25 13 f0       	push   $0xf013255c
f01089c3:	e8 e8 77 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01089c8:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01089cf:	76 19                	jbe    f01089ea <env_table_ws_set_entry+0x48>
f01089d1:	68 7c 25 13 f0       	push   $0xf013257c
f01089d6:	68 46 25 13 f0       	push   $0xf0132546
f01089db:	68 08 01 00 00       	push   $0x108
f01089e0:	68 5c 25 13 f0       	push   $0xf013255c
f01089e5:	e8 c6 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01089ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01089ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089f3:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01089f8:	89 c1                	mov    %eax,%ecx
f01089fa:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01089fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a00:	89 d0                	mov    %edx,%eax
f0108a02:	01 c0                	add    %eax,%eax
f0108a04:	01 d0                	add    %edx,%eax
f0108a06:	c1 e0 03             	shl    $0x3,%eax
f0108a09:	01 d8                	add    %ebx,%eax
f0108a0b:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a10:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108a12:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a15:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a18:	89 d0                	mov    %edx,%eax
f0108a1a:	01 c0                	add    %eax,%eax
f0108a1c:	01 d0                	add    %edx,%eax
f0108a1e:	c1 e0 03             	shl    $0x3,%eax
f0108a21:	01 c8                	add    %ecx,%eax
f0108a23:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108a28:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108a2b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a2e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a31:	89 d0                	mov    %edx,%eax
f0108a33:	01 c0                	add    %eax,%eax
f0108a35:	01 d0                	add    %edx,%eax
f0108a37:	c1 e0 03             	shl    $0x3,%eax
f0108a3a:	01 c8                	add    %ecx,%eax
f0108a3c:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108a41:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108a47:	90                   	nop
}
f0108a48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108a4b:	c9                   	leave  
f0108a4c:	c3                   	ret    

f0108a4d <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108a4d:	55                   	push   %ebp
f0108a4e:	89 e5                	mov    %esp,%ebp
f0108a50:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a53:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a57:	76 19                	jbe    f0108a72 <env_table_ws_clear_entry+0x25>
f0108a59:	68 20 27 13 f0       	push   $0xf0132720
f0108a5e:	68 46 25 13 f0       	push   $0xf0132546
f0108a63:	68 13 01 00 00       	push   $0x113
f0108a68:	68 5c 25 13 f0       	push   $0xf013255c
f0108a6d:	e8 3e 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108a72:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a75:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a78:	89 d0                	mov    %edx,%eax
f0108a7a:	01 c0                	add    %eax,%eax
f0108a7c:	01 d0                	add    %edx,%eax
f0108a7e:	c1 e0 03             	shl    $0x3,%eax
f0108a81:	01 c8                	add    %ecx,%eax
f0108a83:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a88:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108a8e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a91:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a94:	89 d0                	mov    %edx,%eax
f0108a96:	01 c0                	add    %eax,%eax
f0108a98:	01 d0                	add    %edx,%eax
f0108a9a:	c1 e0 03             	shl    $0x3,%eax
f0108a9d:	01 c8                	add    %ecx,%eax
f0108a9f:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108aa4:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108aa7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aaa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108aad:	89 d0                	mov    %edx,%eax
f0108aaf:	01 c0                	add    %eax,%eax
f0108ab1:	01 d0                	add    %edx,%eax
f0108ab3:	c1 e0 03             	shl    $0x3,%eax
f0108ab6:	01 c8                	add    %ecx,%eax
f0108ab8:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108abd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108ac3:	90                   	nop
f0108ac4:	c9                   	leave  
f0108ac5:	c3                   	ret    

f0108ac6 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108ac6:	55                   	push   %ebp
f0108ac7:	89 e5                	mov    %esp,%ebp
f0108ac9:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108acc:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108ad0:	76 19                	jbe    f0108aeb <env_table_ws_get_virtual_address+0x25>
f0108ad2:	68 20 27 13 f0       	push   $0xf0132720
f0108ad7:	68 46 25 13 f0       	push   $0xf0132546
f0108adc:	68 1b 01 00 00       	push   $0x11b
f0108ae1:	68 5c 25 13 f0       	push   $0xf013255c
f0108ae6:	e8 c5 76 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108aeb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aee:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108af1:	89 d0                	mov    %edx,%eax
f0108af3:	01 c0                	add    %eax,%eax
f0108af5:	01 d0                	add    %edx,%eax
f0108af7:	c1 e0 03             	shl    $0x3,%eax
f0108afa:	01 c8                	add    %ecx,%eax
f0108afc:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108b01:	8b 00                	mov    (%eax),%eax
f0108b03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b09:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108b0e:	c9                   	leave  
f0108b0f:	c3                   	ret    

f0108b10 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108b10:	55                   	push   %ebp
f0108b11:	89 e5                	mov    %esp,%ebp
f0108b13:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b16:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b1a:	76 19                	jbe    f0108b35 <env_table_ws_get_time_stamp+0x25>
f0108b1c:	68 20 27 13 f0       	push   $0xf0132720
f0108b21:	68 46 25 13 f0       	push   $0xf0132546
f0108b26:	68 22 01 00 00       	push   $0x122
f0108b2b:	68 5c 25 13 f0       	push   $0xf013255c
f0108b30:	e8 7b 76 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108b35:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b38:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b3b:	89 d0                	mov    %edx,%eax
f0108b3d:	01 c0                	add    %eax,%eax
f0108b3f:	01 d0                	add    %edx,%eax
f0108b41:	c1 e0 03             	shl    $0x3,%eax
f0108b44:	01 c8                	add    %ecx,%eax
f0108b46:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108b4b:	8b 00                	mov    (%eax),%eax
}
f0108b4d:	c9                   	leave  
f0108b4e:	c3                   	ret    

f0108b4f <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108b4f:	55                   	push   %ebp
f0108b50:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108b52:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b58:	89 d0                	mov    %edx,%eax
f0108b5a:	01 c0                	add    %eax,%eax
f0108b5c:	01 d0                	add    %edx,%eax
f0108b5e:	c1 e0 03             	shl    $0x3,%eax
f0108b61:	01 c8                	add    %ecx,%eax
f0108b63:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108b68:	8a 00                	mov    (%eax),%al
f0108b6a:	0f b6 c0             	movzbl %al,%eax
}
f0108b6d:	5d                   	pop    %ebp
f0108b6e:	c3                   	ret    

f0108b6f <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108b6f:	55                   	push   %ebp
f0108b70:	89 e5                	mov    %esp,%ebp
f0108b72:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0108b75:	83 ec 04             	sub    $0x4,%esp
f0108b78:	68 54 27 13 f0       	push   $0xf0132754
f0108b7d:	6a 1f                	push   $0x1f
f0108b7f:	68 82 27 13 f0       	push   $0xf0132782
f0108b84:	e8 27 76 ff ff       	call   f01001b0 <_panic>

f0108b89 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108b89:	55                   	push   %ebp
f0108b8a:	89 e5                	mov    %esp,%ebp
f0108b8c:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108b8f:	83 ec 04             	sub    $0x4,%esp
f0108b92:	68 a0 27 13 f0       	push   $0xf01327a0
f0108b97:	6a 32                	push   $0x32
f0108b99:	68 82 27 13 f0       	push   $0xf0132782
f0108b9e:	e8 0d 76 ff ff       	call   f01001b0 <_panic>

f0108ba3 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108ba3:	55                   	push   %ebp
f0108ba4:	89 e5                	mov    %esp,%ebp
f0108ba6:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0108ba9:	83 ec 04             	sub    $0x4,%esp
f0108bac:	68 d0 27 13 f0       	push   $0xf01327d0
f0108bb1:	6a 41                	push   $0x41
f0108bb3:	68 82 27 13 f0       	push   $0xf0132782
f0108bb8:	e8 f3 75 ff ff       	call   f01001b0 <_panic>

f0108bbd <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108bbd:	55                   	push   %ebp
f0108bbe:	89 e5                	mov    %esp,%ebp
f0108bc0:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108bc3:	83 ec 04             	sub    $0x4,%esp
f0108bc6:	68 fc 27 13 f0       	push   $0xf01327fc
f0108bcb:	6a 4e                	push   $0x4e
f0108bcd:	68 82 27 13 f0       	push   $0xf0132782
f0108bd2:	e8 d9 75 ff ff       	call   f01001b0 <_panic>

f0108bd7 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bd7:	55                   	push   %ebp
f0108bd8:	89 e5                	mov    %esp,%ebp
f0108bda:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bdd:	83 ec 04             	sub    $0x4,%esp
f0108be0:	68 2c 28 13 f0       	push   $0xf013282c
f0108be5:	6a 57                	push   $0x57
f0108be7:	68 82 27 13 f0       	push   $0xf0132782
f0108bec:	e8 bf 75 ff ff       	call   f01001b0 <_panic>

f0108bf1 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108bf1:	55                   	push   %ebp
f0108bf2:	89 e5                	mov    %esp,%ebp
f0108bf4:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108bf7:	83 ec 04             	sub    $0x4,%esp
f0108bfa:	68 64 28 13 f0       	push   $0xf0132864
f0108bff:	6a 63                	push   $0x63
f0108c01:	68 82 27 13 f0       	push   $0xf0132782
f0108c06:	e8 a5 75 ff ff       	call   f01001b0 <_panic>

f0108c0b <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c0b:	55                   	push   %ebp
f0108c0c:	89 e5                	mov    %esp,%ebp
f0108c0e:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c11:	e8 2e 4e 02 00       	call   f012da44 <inctst>
	return;
f0108c16:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108c17:	c9                   	leave  
f0108c18:	c3                   	ret    

f0108c19 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c19:	55                   	push   %ebp
f0108c1a:	89 e5                	mov    %esp,%ebp
f0108c1c:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c1f:	e8 20 4e 02 00       	call   f012da44 <inctst>
	return;
f0108c24:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108c25:	c9                   	leave  
f0108c26:	c3                   	ret    

f0108c27 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c27:	55                   	push   %ebp
f0108c28:	89 e5                	mov    %esp,%ebp
f0108c2a:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108c2d:	83 ec 04             	sub    $0x4,%esp
f0108c30:	68 9c 28 13 f0       	push   $0xf013289c
f0108c35:	68 99 00 00 00       	push   $0x99
f0108c3a:	68 82 27 13 f0       	push   $0xf0132782
f0108c3f:	e8 6c 75 ff ff       	call   f01001b0 <_panic>

f0108c44 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c44:	55                   	push   %ebp
f0108c45:	89 e5                	mov    %esp,%ebp
f0108c47:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c4a:	83 ec 04             	sub    $0x4,%esp
f0108c4d:	68 dc 28 13 f0       	push   $0xf01328dc
f0108c52:	68 a3 00 00 00       	push   $0xa3
f0108c57:	68 82 27 13 f0       	push   $0xf0132782
f0108c5c:	e8 4f 75 ff ff       	call   f01001b0 <_panic>

f0108c61 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108c61:	55                   	push   %ebp
f0108c62:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108c64:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c67:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0108c6d:	29 d0                	sub    %edx,%eax
f0108c6f:	c1 f8 02             	sar    $0x2,%eax
f0108c72:	89 c2                	mov    %eax,%edx
f0108c74:	89 d0                	mov    %edx,%eax
f0108c76:	c1 e0 03             	shl    $0x3,%eax
f0108c79:	01 d0                	add    %edx,%eax
f0108c7b:	c1 e0 03             	shl    $0x3,%eax
f0108c7e:	01 d0                	add    %edx,%eax
f0108c80:	c1 e0 03             	shl    $0x3,%eax
f0108c83:	01 d0                	add    %edx,%eax
f0108c85:	c1 e0 03             	shl    $0x3,%eax
f0108c88:	01 d0                	add    %edx,%eax
f0108c8a:	89 c1                	mov    %eax,%ecx
f0108c8c:	c1 e1 0f             	shl    $0xf,%ecx
f0108c8f:	01 c8                	add    %ecx,%eax
f0108c91:	c1 e0 03             	shl    $0x3,%eax
f0108c94:	01 d0                	add    %edx,%eax
f0108c96:	f7 d8                	neg    %eax
}
f0108c98:	5d                   	pop    %ebp
f0108c99:	c3                   	ret    

f0108c9a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108c9a:	55                   	push   %ebp
f0108c9b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108c9d:	ff 75 08             	pushl  0x8(%ebp)
f0108ca0:	e8 bc ff ff ff       	call   f0108c61 <to_frame_number>
f0108ca5:	83 c4 04             	add    $0x4,%esp
f0108ca8:	c1 e0 0c             	shl    $0xc,%eax
}
f0108cab:	c9                   	leave  
f0108cac:	c3                   	ret    

f0108cad <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108cad:	55                   	push   %ebp
f0108cae:	89 e5                	mov    %esp,%ebp
f0108cb0:	57                   	push   %edi
f0108cb1:	56                   	push   %esi
f0108cb2:	53                   	push   %ebx
f0108cb3:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108cb9:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108cc0:	83 ec 0c             	sub    $0xc,%esp
f0108cc3:	ff 75 08             	pushl  0x8(%ebp)
f0108cc6:	e8 f6 21 00 00       	call   f010aec1 <get_user_program_info>
f0108ccb:	83 c4 10             	add    $0x10,%esp
f0108cce:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108cd1:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108cd5:	75 0a                	jne    f0108ce1 <env_create+0x34>
f0108cd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0108cdc:	e9 45 0c 00 00       	jmp    f0109926 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108ce1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ce4:	8b 40 08             	mov    0x8(%eax),%eax
f0108ce7:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108cea:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108cf1:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108cf4:	83 ec 0c             	sub    $0xc,%esp
f0108cf7:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0108cfd:	50                   	push   %eax
f0108cfe:	e8 aa 0f 00 00       	call   f0109cad <allocate_environment>
f0108d03:	83 c4 10             	add    $0x10,%esp
f0108d06:	85 c0                	test   %eax,%eax
f0108d08:	79 0a                	jns    f0108d14 <env_create+0x67>
	{
		return 0;
f0108d0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d0f:	e9 12 0c 00 00       	jmp    f0109926 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108d14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d17:	8b 00                	mov    (%eax),%eax
f0108d19:	83 ec 0c             	sub    $0xc,%esp
f0108d1c:	50                   	push   %eax
f0108d1d:	e8 ce 60 02 00       	call   f012edf0 <strlen>
f0108d22:	83 c4 10             	add    $0x10,%esp
f0108d25:	83 f8 3f             	cmp    $0x3f,%eax
f0108d28:	7f 1d                	jg     f0108d47 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108d2a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d2d:	8b 00                	mov    (%eax),%eax
f0108d2f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d35:	83 c2 5c             	add    $0x5c,%edx
f0108d38:	83 ec 08             	sub    $0x8,%esp
f0108d3b:	50                   	push   %eax
f0108d3c:	52                   	push   %edx
f0108d3d:	e8 fd 60 02 00       	call   f012ee3f <strcpy>
f0108d42:	83 c4 10             	add    $0x10,%esp
f0108d45:	eb 1d                	jmp    f0108d64 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d4a:	8b 00                	mov    (%eax),%eax
f0108d4c:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d52:	83 c2 5c             	add    $0x5c,%edx
f0108d55:	83 ec 04             	sub    $0x4,%esp
f0108d58:	6a 3f                	push   $0x3f
f0108d5a:	50                   	push   %eax
f0108d5b:	52                   	push   %edx
f0108d5c:	e8 0c 61 02 00       	call   f012ee6d <strncpy>
f0108d61:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108d64:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108d6b:	00 00 00 

		allocate_frame(&p) ;
f0108d6e:	83 ec 0c             	sub    $0xc,%esp
f0108d71:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0108d77:	50                   	push   %eax
f0108d78:	e8 8a e5 ff ff       	call   f0107307 <allocate_frame>
f0108d7d:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108d80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108d86:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108d8c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108d92:	83 ec 0c             	sub    $0xc,%esp
f0108d95:	50                   	push   %eax
f0108d96:	e8 ff fe ff ff       	call   f0108c9a <to_physical_address>
f0108d9b:	83 c4 10             	add    $0x10,%esp
f0108d9e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108da1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108da4:	c1 e8 0c             	shr    $0xc,%eax
f0108da7:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108daa:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0108daf:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108db2:	72 17                	jb     f0108dcb <env_create+0x11e>
f0108db4:	ff 75 b0             	pushl  -0x50(%ebp)
f0108db7:	68 08 29 13 f0       	push   $0xf0132908
f0108dbc:	68 8a 00 00 00       	push   $0x8a
f0108dc1:	68 37 29 13 f0       	push   $0xf0132937
f0108dc6:	e8 e5 73 ff ff       	call   f01001b0 <_panic>
f0108dcb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dce:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108dd3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108dd6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108ddc:	83 ec 0c             	sub    $0xc,%esp
f0108ddf:	50                   	push   %eax
f0108de0:	e8 b5 fe ff ff       	call   f0108c9a <to_physical_address>
f0108de5:	83 c4 10             	add    $0x10,%esp
f0108de8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108deb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108df1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108df4:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108dfa:	83 ec 0c             	sub    $0xc,%esp
f0108dfd:	6a 02                	push   $0x2
f0108dff:	e8 2e 49 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f0108e04:	83 c4 10             	add    $0x10,%esp
f0108e07:	85 c0                	test   %eax,%eax
f0108e09:	74 21                	je     f0108e2c <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108e0b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e11:	8b 55 10             	mov    0x10(%ebp),%edx
f0108e14:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108e1a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e20:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e23:	2b 55 10             	sub    0x10(%ebp),%edx
f0108e26:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108e2c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108e30:	75 12                	jne    f0108e44 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108e32:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e38:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108e3f:	00 00 00 
f0108e42:	eb 0f                	jmp    f0108e53 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108e44:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e4a:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e4d:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108e53:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e59:	83 ec 04             	sub    $0x4,%esp
f0108e5c:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108e5f:	ff 75 a8             	pushl  -0x58(%ebp)
f0108e62:	50                   	push   %eax
f0108e63:	e8 ac 16 00 00       	call   f010a514 <initialize_environment>
f0108e68:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108e6b:	0f 20 d8             	mov    %cr3,%eax
f0108e6e:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108e71:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108e74:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108e77:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e7d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108e83:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108e89:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e8f:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108e92:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108e99:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108ea0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ea6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108eac:	48                   	dec    %eax
f0108ead:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108eb0:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108eb7:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108eba:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108ec0:	83 ec 08             	sub    $0x8,%esp
f0108ec3:	ff 75 b8             	pushl  -0x48(%ebp)
f0108ec6:	50                   	push   %eax
f0108ec7:	e8 b1 1d 00 00       	call   f010ac7d <PROGRAM_SEGMENT_FIRST>
f0108ecc:	83 c4 0c             	add    $0xc,%esp
f0108ecf:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108ed5:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108edb:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108ee0:	89 c7                	mov    %eax,%edi
f0108ee2:	89 d6                	mov    %edx,%esi
f0108ee4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108ee6:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108eec:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108eef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108ef2:	8b 40 10             	mov    0x10(%eax),%eax
f0108ef5:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108ef8:	75 07                	jne    f0108f01 <env_create+0x254>
f0108efa:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108f01:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f07:	e9 24 03 00 00       	jmp    f0109230 <env_create+0x583>
	{
		segment_counter++;
f0108f0c:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108f0f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108f16:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108f19:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f1f:	83 ec 0c             	sub    $0xc,%esp
f0108f22:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108f28:	52                   	push   %edx
f0108f29:	ff 75 dc             	pushl  -0x24(%ebp)
f0108f2c:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108f32:	52                   	push   %edx
f0108f33:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108f36:	50                   	push   %eax
f0108f37:	e8 2f 0e 00 00       	call   f0109d6b <program_segment_alloc_map_copy_workingset>
f0108f3c:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108f3f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108f45:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108f48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f4b:	8b 00                	mov    (%eax),%eax
f0108f4d:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108f50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f53:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f56:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108f59:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f5c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108f5f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108f62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f67:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108f6a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108f71:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108f74:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108f77:	01 d0                	add    %edx,%eax
f0108f79:	48                   	dec    %eax
f0108f7a:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108f7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f80:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f85:	f7 75 84             	divl   -0x7c(%ebp)
f0108f88:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f8b:	29 d0                	sub    %edx,%eax
f0108f8d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108f93:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f96:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108f99:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108f9f:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f0108fa4:	83 ec 04             	sub    $0x4,%esp
f0108fa7:	68 00 10 00 00       	push   $0x1000
f0108fac:	6a 00                	push   $0x0
f0108fae:	50                   	push   %eax
f0108faf:	e8 2a 60 02 00       	call   f012efde <memset>
f0108fb4:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108fb7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108fba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108fbd:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0108fc3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108fc9:	01 d0                	add    %edx,%eax
f0108fcb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fce:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fd1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108fd4:	eb 13                	jmp    f0108fe9 <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108fd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108fd9:	8a 10                	mov    (%eax),%dl
f0108fdb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108fde:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fe0:	ff 45 cc             	incl   -0x34(%ebp)
f0108fe3:	ff 45 d4             	incl   -0x2c(%ebp)
f0108fe6:	ff 45 d0             	incl   -0x30(%ebp)
f0108fe9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108fec:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0108ff2:	72 e2                	jb     f0108fd6 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108ff4:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0108ffa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109000:	83 ec 04             	sub    $0x4,%esp
f0109003:	52                   	push   %edx
f0109004:	ff 75 88             	pushl  -0x78(%ebp)
f0109007:	50                   	push   %eax
f0109008:	e8 a0 ae ff ff       	call   f0103ead <pf_add_env_page>
f010900d:	83 c4 10             	add    $0x10,%esp
f0109010:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109013:	75 17                	jne    f010902c <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109015:	83 ec 04             	sub    $0x4,%esp
f0109018:	68 54 29 13 f0       	push   $0xf0132954
f010901d:	68 de 00 00 00       	push   $0xde
f0109022:	68 37 29 13 f0       	push   $0xf0132937
f0109027:	e8 84 71 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010902c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010902f:	8b 50 04             	mov    0x4(%eax),%edx
f0109032:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109035:	01 d0                	add    %edx,%eax
f0109037:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010903d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109048:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010904e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109051:	8b 50 04             	mov    0x4(%eax),%edx
f0109054:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109057:	01 d0                	add    %edx,%eax
f0109059:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010905f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109065:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109068:	eb 43                	jmp    f01090ad <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010906a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010906d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109073:	83 ec 04             	sub    $0x4,%esp
f0109076:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109079:	52                   	push   %edx
f010907a:	50                   	push   %eax
f010907b:	e8 2d ae ff ff       	call   f0103ead <pf_add_env_page>
f0109080:	83 c4 10             	add    $0x10,%esp
f0109083:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109086:	75 17                	jne    f010909f <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109088:	83 ec 04             	sub    $0x4,%esp
f010908b:	68 54 29 13 f0       	push   $0xf0132954
f0109090:	68 eb 00 00 00       	push   $0xeb
f0109095:	68 37 29 13 f0       	push   $0xf0132937
f010909a:	e8 11 71 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010909f:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01090a6:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01090ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090b0:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f01090b6:	72 b2                	jb     f010906a <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01090b8:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f01090bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01090c0:	83 ec 04             	sub    $0x4,%esp
f01090c3:	68 00 10 00 00       	push   $0x1000
f01090c8:	6a 00                	push   $0x0
f01090ca:	ff 75 d0             	pushl  -0x30(%ebp)
f01090cd:	e8 0c 5f 02 00       	call   f012efde <memset>
f01090d2:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090d5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01090db:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01090de:	eb 13                	jmp    f01090f3 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f01090e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01090e3:	8a 10                	mov    (%eax),%dl
f01090e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01090e8:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090ea:	ff 45 cc             	incl   -0x34(%ebp)
f01090ed:	ff 45 d4             	incl   -0x2c(%ebp)
f01090f0:	ff 45 d0             	incl   -0x30(%ebp)
f01090f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090f6:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f01090fc:	72 e2                	jb     f01090e0 <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01090fe:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0109104:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010910a:	83 ec 04             	sub    $0x4,%esp
f010910d:	52                   	push   %edx
f010910e:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109114:	50                   	push   %eax
f0109115:	e8 93 ad ff ff       	call   f0103ead <pf_add_env_page>
f010911a:	83 c4 10             	add    $0x10,%esp
f010911d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109120:	75 17                	jne    f0109139 <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109122:	83 ec 04             	sub    $0x4,%esp
f0109125:	68 54 29 13 f0       	push   $0xf0132954
f010912a:	68 fa 00 00 00       	push   $0xfa
f010912f:	68 37 29 13 f0       	push   $0xf0132937
f0109134:	e8 77 70 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109139:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0109140:	10 00 00 
f0109143:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109146:	8b 50 04             	mov    0x4(%eax),%edx
f0109149:	8b 45 90             	mov    -0x70(%ebp),%eax
f010914c:	01 c2                	add    %eax,%edx
f010914e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109154:	01 d0                	add    %edx,%eax
f0109156:	48                   	dec    %eax
f0109157:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010915d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109163:	ba 00 00 00 00       	mov    $0x0,%edx
f0109168:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010916e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109174:	29 d0                	sub    %edx,%eax
f0109176:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109179:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010917c:	8b 50 08             	mov    0x8(%eax),%edx
f010917f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109182:	01 d0                	add    %edx,%eax
f0109184:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109187:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010918d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109194:	eb 41                	jmp    f01091d7 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109196:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010919c:	83 ec 04             	sub    $0x4,%esp
f010919f:	6a 01                	push   $0x1
f01091a1:	ff 75 c8             	pushl  -0x38(%ebp)
f01091a4:	50                   	push   %eax
f01091a5:	e8 cd ab ff ff       	call   f0103d77 <pf_add_empty_env_page>
f01091aa:	83 c4 10             	add    $0x10,%esp
f01091ad:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091b0:	75 17                	jne    f01091c9 <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091b2:	83 ec 04             	sub    $0x4,%esp
f01091b5:	68 54 29 13 f0       	push   $0xf0132954
f01091ba:	68 07 01 00 00       	push   $0x107
f01091bf:	68 37 29 13 f0       	push   $0xf0132937
f01091c4:	e8 e7 6f ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091c9:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091d0:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01091d7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01091de:	10 00 00 
f01091e1:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f01091e7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01091ed:	01 d0                	add    %edx,%eax
f01091ef:	48                   	dec    %eax
f01091f0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01091f6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01091fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0109201:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109207:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010920d:	29 d0                	sub    %edx,%eax
f010920f:	89 c2                	mov    %eax,%edx
f0109211:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109214:	39 c2                	cmp    %eax,%edx
f0109216:	0f 87 7a ff ff ff    	ja     f0109196 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010921c:	83 ec 08             	sub    $0x8,%esp
f010921f:	ff 75 b8             	pushl  -0x48(%ebp)
f0109222:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109225:	e8 48 19 00 00       	call   f010ab72 <PROGRAM_SEGMENT_NEXT>
f010922a:	83 c4 10             	add    $0x10,%esp
f010922d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109230:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109234:	0f 85 d2 fc ff ff    	jne    f0108f0c <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f010923a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109241:	e9 a7 00 00 00       	jmp    f01092ed <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109246:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010924c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010924f:	89 d0                	mov    %edx,%eax
f0109251:	01 c0                	add    %eax,%eax
f0109253:	01 d0                	add    %edx,%eax
f0109255:	c1 e0 03             	shl    $0x3,%eax
f0109258:	01 c8                	add    %ecx,%eax
f010925a:	05 bc 00 00 00       	add    $0xbc,%eax
f010925f:	8a 00                	mov    (%eax),%al
f0109261:	84 c0                	test   %al,%al
f0109263:	0f 85 81 00 00 00    	jne    f01092ea <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109269:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010926f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109272:	89 d0                	mov    %edx,%eax
f0109274:	01 c0                	add    %eax,%eax
f0109276:	01 d0                	add    %edx,%eax
f0109278:	c1 e0 03             	shl    $0x3,%eax
f010927b:	01 c8                	add    %ecx,%eax
f010927d:	05 b8 00 00 00       	add    $0xb8,%eax
f0109282:	8b 00                	mov    (%eax),%eax
f0109284:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010928a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109290:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109296:	83 ec 04             	sub    $0x4,%esp
f0109299:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f010929f:	52                   	push   %edx
f01092a0:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f01092a6:	50                   	push   %eax
f01092a7:	e8 1d e2 ff ff       	call   f01074c9 <get_page_table>
f01092ac:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01092af:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01092b5:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f01092bb:	c1 ea 0c             	shr    $0xc,%edx
f01092be:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01092c4:	c1 e2 02             	shl    $0x2,%edx
f01092c7:	01 d0                	add    %edx,%eax
f01092c9:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f01092cf:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f01092d5:	c1 e9 0c             	shr    $0xc,%ecx
f01092d8:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01092de:	c1 e1 02             	shl    $0x2,%ecx
f01092e1:	01 ca                	add    %ecx,%edx
f01092e3:	8b 12                	mov    (%edx),%edx
f01092e5:	83 e2 bf             	and    $0xffffffbf,%edx
f01092e8:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01092ea:	ff 45 c4             	incl   -0x3c(%ebp)
f01092ed:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092f3:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01092f9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01092fc:	39 c2                	cmp    %eax,%edx
f01092fe:	0f 87 42 ff ff ff    	ja     f0109246 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109304:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109307:	8b 50 08             	mov    0x8(%eax),%edx
f010930a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109310:	83 ec 08             	sub    $0x8,%esp
f0109313:	52                   	push   %edx
f0109314:	50                   	push   %eax
f0109315:	e8 18 18 00 00       	call   f010ab32 <set_environment_entry_point>
f010931a:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010931d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109323:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f010932a:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010932d:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0109334:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109337:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010933e:	e9 3c 05 00 00       	jmp    f010987f <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0109343:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f010934a:	00 00 00 
		allocate_frame(&pp);
f010934d:	83 ec 0c             	sub    $0xc,%esp
f0109350:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109356:	50                   	push   %eax
f0109357:	e8 ab df ff ff       	call   f0107307 <allocate_frame>
f010935c:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010935f:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0109365:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010936b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109371:	6a 06                	push   $0x6
f0109373:	ff 75 c0             	pushl  -0x40(%ebp)
f0109376:	52                   	push   %edx
f0109377:	50                   	push   %eax
f0109378:	e8 db e4 ff ff       	call   f0107858 <loadtime_map_frame>
f010937d:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109380:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109383:	83 ec 04             	sub    $0x4,%esp
f0109386:	68 00 10 00 00       	push   $0x1000
f010938b:	6a 00                	push   $0x0
f010938d:	50                   	push   %eax
f010938e:	e8 4b 5c 02 00       	call   f012efde <memset>
f0109393:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109396:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010939c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f01093a2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093a8:	83 ec 04             	sub    $0x4,%esp
f01093ab:	ff 75 c0             	pushl  -0x40(%ebp)
f01093ae:	52                   	push   %edx
f01093af:	50                   	push   %eax
f01093b0:	e8 3f ef ff ff       	call   f01082f4 <env_page_ws_set_entry>
f01093b5:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f01093b8:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093be:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f01093c4:	8d 48 01             	lea    0x1(%eax),%ecx
f01093c7:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f01093cd:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f01093d3:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01093d9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093df:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f01093e5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093eb:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f01093f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01093f6:	f7 f3                	div    %ebx
f01093f8:	89 d0                	mov    %edx,%eax
f01093fa:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109400:	83 ec 0c             	sub    $0xc,%esp
f0109403:	6a 02                	push   $0x2
f0109405:	e8 28 43 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f010940a:	83 c4 10             	add    $0x10,%esp
f010940d:	85 c0                	test   %eax,%eax
f010940f:	0f 84 46 04 00 00    	je     f010985b <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109415:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010941b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109421:	89 d0                	mov    %edx,%eax
f0109423:	01 c0                	add    %eax,%eax
f0109425:	01 d0                	add    %edx,%eax
f0109427:	c1 e0 03             	shl    $0x3,%eax
f010942a:	05 b0 00 00 00       	add    $0xb0,%eax
f010942f:	01 c8                	add    %ecx,%eax
f0109431:	83 c0 08             	add    $0x8,%eax
f0109434:	85 c0                	test   %eax,%eax
f0109436:	75 17                	jne    f010944f <env_create+0x7a2>
f0109438:	83 ec 04             	sub    $0x4,%esp
f010943b:	68 99 29 13 f0       	push   $0xf0132999
f0109440:	68 67 01 00 00       	push   $0x167
f0109445:	68 37 29 13 f0       	push   $0xf0132937
f010944a:	e8 61 6d ff ff       	call   f01001b0 <_panic>
f010944f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109455:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010945b:	89 d0                	mov    %edx,%eax
f010945d:	01 c0                	add    %eax,%eax
f010945f:	01 d0                	add    %edx,%eax
f0109461:	c1 e0 03             	shl    $0x3,%eax
f0109464:	01 c8                	add    %ecx,%eax
f0109466:	05 c8 00 00 00       	add    $0xc8,%eax
f010946b:	8b 00                	mov    (%eax),%eax
f010946d:	85 c0                	test   %eax,%eax
f010946f:	74 41                	je     f01094b2 <env_create+0x805>
f0109471:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109477:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010947d:	89 d0                	mov    %edx,%eax
f010947f:	01 c0                	add    %eax,%eax
f0109481:	01 d0                	add    %edx,%eax
f0109483:	c1 e0 03             	shl    $0x3,%eax
f0109486:	01 c8                	add    %ecx,%eax
f0109488:	05 c8 00 00 00       	add    $0xc8,%eax
f010948d:	8b 10                	mov    (%eax),%edx
f010948f:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109495:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010949b:	89 c8                	mov    %ecx,%eax
f010949d:	01 c0                	add    %eax,%eax
f010949f:	01 c8                	add    %ecx,%eax
f01094a1:	c1 e0 03             	shl    $0x3,%eax
f01094a4:	01 d8                	add    %ebx,%eax
f01094a6:	05 cc 00 00 00       	add    $0xcc,%eax
f01094ab:	8b 00                	mov    (%eax),%eax
f01094ad:	89 42 14             	mov    %eax,0x14(%edx)
f01094b0:	eb 2a                	jmp    f01094dc <env_create+0x82f>
f01094b2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01094b8:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094be:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094c4:	89 c8                	mov    %ecx,%eax
f01094c6:	01 c0                	add    %eax,%eax
f01094c8:	01 c8                	add    %ecx,%eax
f01094ca:	c1 e0 03             	shl    $0x3,%eax
f01094cd:	01 d8                	add    %ebx,%eax
f01094cf:	05 cc 00 00 00       	add    $0xcc,%eax
f01094d4:	8b 00                	mov    (%eax),%eax
f01094d6:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f01094dc:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01094e2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094e8:	89 d0                	mov    %edx,%eax
f01094ea:	01 c0                	add    %eax,%eax
f01094ec:	01 d0                	add    %edx,%eax
f01094ee:	c1 e0 03             	shl    $0x3,%eax
f01094f1:	01 c8                	add    %ecx,%eax
f01094f3:	05 cc 00 00 00       	add    $0xcc,%eax
f01094f8:	8b 00                	mov    (%eax),%eax
f01094fa:	85 c0                	test   %eax,%eax
f01094fc:	74 41                	je     f010953f <env_create+0x892>
f01094fe:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109504:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010950a:	89 d0                	mov    %edx,%eax
f010950c:	01 c0                	add    %eax,%eax
f010950e:	01 d0                	add    %edx,%eax
f0109510:	c1 e0 03             	shl    $0x3,%eax
f0109513:	01 c8                	add    %ecx,%eax
f0109515:	05 cc 00 00 00       	add    $0xcc,%eax
f010951a:	8b 10                	mov    (%eax),%edx
f010951c:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109522:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109528:	89 c8                	mov    %ecx,%eax
f010952a:	01 c0                	add    %eax,%eax
f010952c:	01 c8                	add    %ecx,%eax
f010952e:	c1 e0 03             	shl    $0x3,%eax
f0109531:	01 d8                	add    %ebx,%eax
f0109533:	05 c8 00 00 00       	add    $0xc8,%eax
f0109538:	8b 00                	mov    (%eax),%eax
f010953a:	89 42 10             	mov    %eax,0x10(%edx)
f010953d:	eb 2a                	jmp    f0109569 <env_create+0x8bc>
f010953f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109545:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010954b:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109551:	89 c8                	mov    %ecx,%eax
f0109553:	01 c0                	add    %eax,%eax
f0109555:	01 c8                	add    %ecx,%eax
f0109557:	c1 e0 03             	shl    $0x3,%eax
f010955a:	01 d8                	add    %ebx,%eax
f010955c:	05 c8 00 00 00       	add    $0xc8,%eax
f0109561:	8b 00                	mov    (%eax),%eax
f0109563:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f0109569:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010956f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109575:	89 d0                	mov    %edx,%eax
f0109577:	01 c0                	add    %eax,%eax
f0109579:	01 d0                	add    %edx,%eax
f010957b:	c1 e0 03             	shl    $0x3,%eax
f010957e:	01 c8                	add    %ecx,%eax
f0109580:	05 c8 00 00 00       	add    $0xc8,%eax
f0109585:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010958b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109591:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109597:	89 d0                	mov    %edx,%eax
f0109599:	01 c0                	add    %eax,%eax
f010959b:	01 d0                	add    %edx,%eax
f010959d:	c1 e0 03             	shl    $0x3,%eax
f01095a0:	01 c8                	add    %ecx,%eax
f01095a2:	05 cc 00 00 00       	add    $0xcc,%eax
f01095a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095b3:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f01095b9:	4a                   	dec    %edx
f01095ba:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01095c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095c6:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01095cc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095d2:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f01095d8:	39 c2                	cmp    %eax,%edx
f01095da:	0f 83 40 01 00 00    	jae    f0109720 <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01095e0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01095e6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095ec:	89 d0                	mov    %edx,%eax
f01095ee:	01 c0                	add    %eax,%eax
f01095f0:	01 d0                	add    %edx,%eax
f01095f2:	c1 e0 03             	shl    $0x3,%eax
f01095f5:	05 b0 00 00 00       	add    $0xb0,%eax
f01095fa:	01 c8                	add    %ecx,%eax
f01095fc:	83 c0 08             	add    $0x8,%eax
f01095ff:	85 c0                	test   %eax,%eax
f0109601:	75 17                	jne    f010961a <env_create+0x96d>
f0109603:	83 ec 04             	sub    $0x4,%esp
f0109606:	68 b8 29 13 f0       	push   $0xf01329b8
f010960b:	68 6c 01 00 00       	push   $0x16c
f0109610:	68 37 29 13 f0       	push   $0xf0132937
f0109615:	e8 96 6b ff ff       	call   f01001b0 <_panic>
f010961a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109620:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109626:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010962c:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109632:	89 d8                	mov    %ebx,%eax
f0109634:	01 c0                	add    %eax,%eax
f0109636:	01 d8                	add    %ebx,%eax
f0109638:	c1 e0 03             	shl    $0x3,%eax
f010963b:	01 d0                	add    %edx,%eax
f010963d:	05 c8 00 00 00       	add    $0xc8,%eax
f0109642:	89 08                	mov    %ecx,(%eax)
f0109644:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010964a:	89 c8                	mov    %ecx,%eax
f010964c:	01 c0                	add    %eax,%eax
f010964e:	01 c8                	add    %ecx,%eax
f0109650:	c1 e0 03             	shl    $0x3,%eax
f0109653:	01 d0                	add    %edx,%eax
f0109655:	05 c8 00 00 00       	add    $0xc8,%eax
f010965a:	8b 00                	mov    (%eax),%eax
f010965c:	85 c0                	test   %eax,%eax
f010965e:	74 30                	je     f0109690 <env_create+0x9e3>
f0109660:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109666:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010966c:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109672:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109678:	89 c8                	mov    %ecx,%eax
f010967a:	01 c0                	add    %eax,%eax
f010967c:	01 c8                	add    %ecx,%eax
f010967e:	c1 e0 03             	shl    $0x3,%eax
f0109681:	05 b0 00 00 00       	add    $0xb0,%eax
f0109686:	01 d8                	add    %ebx,%eax
f0109688:	83 c0 08             	add    $0x8,%eax
f010968b:	89 42 14             	mov    %eax,0x14(%edx)
f010968e:	eb 2b                	jmp    f01096bb <env_create+0xa0e>
f0109690:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109696:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010969c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096a2:	89 c8                	mov    %ecx,%eax
f01096a4:	01 c0                	add    %eax,%eax
f01096a6:	01 c8                	add    %ecx,%eax
f01096a8:	c1 e0 03             	shl    $0x3,%eax
f01096ab:	05 b0 00 00 00       	add    $0xb0,%eax
f01096b0:	01 d8                	add    %ebx,%eax
f01096b2:	83 c0 08             	add    $0x8,%eax
f01096b5:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f01096bb:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096c1:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096c7:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096cd:	89 c8                	mov    %ecx,%eax
f01096cf:	01 c0                	add    %eax,%eax
f01096d1:	01 c8                	add    %ecx,%eax
f01096d3:	c1 e0 03             	shl    $0x3,%eax
f01096d6:	05 b0 00 00 00       	add    $0xb0,%eax
f01096db:	01 d8                	add    %ebx,%eax
f01096dd:	83 c0 08             	add    $0x8,%eax
f01096e0:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f01096e6:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01096ec:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096f2:	89 d0                	mov    %edx,%eax
f01096f4:	01 c0                	add    %eax,%eax
f01096f6:	01 d0                	add    %edx,%eax
f01096f8:	c1 e0 03             	shl    $0x3,%eax
f01096fb:	01 c8                	add    %ecx,%eax
f01096fd:	05 cc 00 00 00       	add    $0xcc,%eax
f0109702:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109708:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010970e:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109714:	42                   	inc    %edx
f0109715:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010971b:	e9 3b 01 00 00       	jmp    f010985b <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109720:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109726:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010972c:	89 d0                	mov    %edx,%eax
f010972e:	01 c0                	add    %eax,%eax
f0109730:	01 d0                	add    %edx,%eax
f0109732:	c1 e0 03             	shl    $0x3,%eax
f0109735:	05 b0 00 00 00       	add    $0xb0,%eax
f010973a:	01 c8                	add    %ecx,%eax
f010973c:	83 c0 08             	add    $0x8,%eax
f010973f:	85 c0                	test   %eax,%eax
f0109741:	75 17                	jne    f010975a <env_create+0xaad>
f0109743:	83 ec 04             	sub    $0x4,%esp
f0109746:	68 b8 29 13 f0       	push   $0xf01329b8
f010974b:	68 70 01 00 00       	push   $0x170
f0109750:	68 37 29 13 f0       	push   $0xf0132937
f0109755:	e8 56 6a ff ff       	call   f01001b0 <_panic>
f010975a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109760:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109766:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010976c:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109772:	89 d8                	mov    %ebx,%eax
f0109774:	01 c0                	add    %eax,%eax
f0109776:	01 d8                	add    %ebx,%eax
f0109778:	c1 e0 03             	shl    $0x3,%eax
f010977b:	01 d0                	add    %edx,%eax
f010977d:	05 c8 00 00 00       	add    $0xc8,%eax
f0109782:	89 08                	mov    %ecx,(%eax)
f0109784:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010978a:	89 c8                	mov    %ecx,%eax
f010978c:	01 c0                	add    %eax,%eax
f010978e:	01 c8                	add    %ecx,%eax
f0109790:	c1 e0 03             	shl    $0x3,%eax
f0109793:	01 d0                	add    %edx,%eax
f0109795:	05 c8 00 00 00       	add    $0xc8,%eax
f010979a:	8b 00                	mov    (%eax),%eax
f010979c:	85 c0                	test   %eax,%eax
f010979e:	74 30                	je     f01097d0 <env_create+0xb23>
f01097a0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097a6:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f01097ac:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097b2:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097b8:	89 c8                	mov    %ecx,%eax
f01097ba:	01 c0                	add    %eax,%eax
f01097bc:	01 c8                	add    %ecx,%eax
f01097be:	c1 e0 03             	shl    $0x3,%eax
f01097c1:	05 b0 00 00 00       	add    $0xb0,%eax
f01097c6:	01 d8                	add    %ebx,%eax
f01097c8:	83 c0 08             	add    $0x8,%eax
f01097cb:	89 42 14             	mov    %eax,0x14(%edx)
f01097ce:	eb 2b                	jmp    f01097fb <env_create+0xb4e>
f01097d0:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01097d6:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097dc:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097e2:	89 c8                	mov    %ecx,%eax
f01097e4:	01 c0                	add    %eax,%eax
f01097e6:	01 c8                	add    %ecx,%eax
f01097e8:	c1 e0 03             	shl    $0x3,%eax
f01097eb:	05 b0 00 00 00       	add    $0xb0,%eax
f01097f0:	01 d8                	add    %ebx,%eax
f01097f2:	83 c0 08             	add    $0x8,%eax
f01097f5:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f01097fb:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109801:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109807:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010980d:	89 c8                	mov    %ecx,%eax
f010980f:	01 c0                	add    %eax,%eax
f0109811:	01 c8                	add    %ecx,%eax
f0109813:	c1 e0 03             	shl    $0x3,%eax
f0109816:	05 b0 00 00 00       	add    $0xb0,%eax
f010981b:	01 d8                	add    %ebx,%eax
f010981d:	83 c0 08             	add    $0x8,%eax
f0109820:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109826:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010982c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109832:	89 d0                	mov    %edx,%eax
f0109834:	01 c0                	add    %eax,%eax
f0109836:	01 d0                	add    %edx,%eax
f0109838:	c1 e0 03             	shl    $0x3,%eax
f010983b:	01 c8                	add    %ecx,%eax
f010983d:	05 cc 00 00 00       	add    $0xcc,%eax
f0109842:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109848:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010984e:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0109854:	42                   	inc    %edx
f0109855:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010985b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109861:	83 ec 04             	sub    $0x4,%esp
f0109864:	6a 01                	push   $0x1
f0109866:	ff 75 c0             	pushl  -0x40(%ebp)
f0109869:	50                   	push   %eax
f010986a:	e8 08 a5 ff ff       	call   f0103d77 <pf_add_empty_env_page>
f010986f:	83 c4 10             	add    $0x10,%esp
f0109872:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109878:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010987f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109882:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0109888:	0f 83 b5 fa ff ff    	jae    f0109343 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010988e:	83 ec 0c             	sub    $0xc,%esp
f0109891:	6a 02                	push   $0x2
f0109893:	e8 9a 3e 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f0109898:	83 c4 10             	add    $0x10,%esp
f010989b:	85 c0                	test   %eax,%eax
f010989d:	74 75                	je     f0109914 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f010989f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01098a6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098ac:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01098b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098b5:	eb 2e                	jmp    f01098e5 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01098b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01098ba:	8b 10                	mov    (%eax),%edx
f01098bc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098c2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01098c8:	6a 01                	push   $0x1
f01098ca:	6a 00                	push   $0x0
f01098cc:	52                   	push   %edx
f01098cd:	50                   	push   %eax
f01098ce:	e8 2e e7 ff ff       	call   f0108001 <pt_set_page_permissions>
f01098d3:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01098d6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098dc:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01098e2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098e5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098eb:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01098ef:	74 08                	je     f01098f9 <env_create+0xc4c>
f01098f1:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01098f4:	8b 52 10             	mov    0x10(%edx),%edx
f01098f7:	eb 05                	jmp    f01098fe <env_create+0xc51>
f01098f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01098fe:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109904:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f010990a:	85 c0                	test   %eax,%eax
f010990c:	75 a9                	jne    f01098b7 <env_create+0xc0a>
f010990e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109912:	75 a3                	jne    f01098b7 <env_create+0xc0a>
f0109914:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109917:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010991a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010991d:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109920:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109926:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109929:	5b                   	pop    %ebx
f010992a:	5e                   	pop    %esi
f010992b:	5f                   	pop    %edi
f010992c:	5d                   	pop    %ebp
f010992d:	c3                   	ret    

f010992e <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010992e:	55                   	push   %ebp
f010992f:	89 e5                	mov    %esp,%ebp
f0109931:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109934:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109939:	3b 45 08             	cmp    0x8(%ebp),%eax
f010993c:	74 2e                	je     f010996c <env_run+0x3e>
	{
		curenv = e ;
f010993e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109941:	a3 54 32 25 f0       	mov    %eax,0xf0253254
		curenv->env_runs++ ;
f0109946:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010994b:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f0109951:	42                   	inc    %edx
f0109952:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109958:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010995d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109963:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109966:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109969:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010996c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109971:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109978:	e8 5c b1 ff ff       	call   f0104ad9 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010997d:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109982:	83 ec 0c             	sub    $0xc,%esp
f0109985:	50                   	push   %eax
f0109986:	e8 f5 00 00 00       	call   f0109a80 <env_pop_tf>

f010998b <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010998b:	55                   	push   %ebp
f010998c:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010998e:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f010998f:	5d                   	pop    %ebp
f0109990:	c3                   	ret    

f0109991 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109991:	55                   	push   %ebp
f0109992:	89 e5                	mov    %esp,%ebp
f0109994:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109997:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010999c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010999f:	83 ec 0c             	sub    $0xc,%esp
f01099a2:	50                   	push   %eax
f01099a3:	e8 0b ba ff ff       	call   f01053b3 <sched_exit_env>
f01099a8:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01099ab:	e8 4b c8 ff ff       	call   f01061fb <fos_scheduler>

f01099b0 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01099b0:	55                   	push   %ebp
f01099b1:	89 e5                	mov    %esp,%ebp
f01099b3:	53                   	push   %ebx
f01099b4:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01099b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01099bb:	75 15                	jne    f01099d2 <envid2env+0x22>
		*env_store = curenv;
f01099bd:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f01099c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099c6:	89 10                	mov    %edx,(%eax)
		return 0;
f01099c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01099cd:	e9 a9 00 00 00       	jmp    f0109a7b <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01099d2:	8b 1d 50 32 25 f0    	mov    0xf0253250,%ebx
f01099d8:	83 ec 0c             	sub    $0xc,%esp
f01099db:	6a 08                	push   $0x8
f01099dd:	e8 99 41 02 00       	call   f012db7b <nearest_pow2_ceil>
f01099e2:	83 c4 10             	add    $0x10,%esp
f01099e5:	8d 50 ff             	lea    -0x1(%eax),%edx
f01099e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01099eb:	21 c2                	and    %eax,%edx
f01099ed:	89 d0                	mov    %edx,%eax
f01099ef:	01 c0                	add    %eax,%eax
f01099f1:	01 d0                	add    %edx,%eax
f01099f3:	01 c0                	add    %eax,%eax
f01099f5:	01 d0                	add    %edx,%eax
f01099f7:	c1 e0 02             	shl    $0x2,%eax
f01099fa:	01 d0                	add    %edx,%eax
f01099fc:	01 c0                	add    %eax,%eax
f01099fe:	01 d0                	add    %edx,%eax
f0109a00:	c1 e0 02             	shl    $0x2,%eax
f0109a03:	01 d0                	add    %edx,%eax
f0109a05:	c1 e0 02             	shl    $0x2,%eax
f0109a08:	01 d0                	add    %edx,%eax
f0109a0a:	c1 e0 02             	shl    $0x2,%eax
f0109a0d:	01 d0                	add    %edx,%eax
f0109a0f:	c1 e0 05             	shl    $0x5,%eax
f0109a12:	01 d8                	add    %ebx,%eax
f0109a14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a1a:	8b 40 54             	mov    0x54(%eax),%eax
f0109a1d:	85 c0                	test   %eax,%eax
f0109a1f:	74 0b                	je     f0109a2c <envid2env+0x7c>
f0109a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a24:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a27:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a2a:	74 10                	je     f0109a3c <envid2env+0x8c>
		*env_store = 0;
f0109a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a35:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a3a:	eb 3f                	jmp    f0109a7b <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109a3c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109a40:	74 2c                	je     f0109a6e <envid2env+0xbe>
f0109a42:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109a47:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109a4a:	74 22                	je     f0109a6e <envid2env+0xbe>
f0109a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a4f:	8b 50 50             	mov    0x50(%eax),%edx
f0109a52:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109a57:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a5a:	39 c2                	cmp    %eax,%edx
f0109a5c:	74 10                	je     f0109a6e <envid2env+0xbe>
		*env_store = 0;
f0109a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a67:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a6c:	eb 0d                	jmp    f0109a7b <envid2env+0xcb>
	}

	*env_store = e;
f0109a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a74:	89 10                	mov    %edx,(%eax)
	return 0;
f0109a76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109a7b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109a7e:	c9                   	leave  
f0109a7f:	c3                   	ret    

f0109a80 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109a80:	55                   	push   %ebp
f0109a81:	89 e5                	mov    %esp,%ebp
f0109a83:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109a86:	8b 65 08             	mov    0x8(%ebp),%esp
f0109a89:	61                   	popa   
f0109a8a:	07                   	pop    %es
f0109a8b:	1f                   	pop    %ds
f0109a8c:	83 c4 08             	add    $0x8,%esp
f0109a8f:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109a90:	83 ec 04             	sub    $0x4,%esp
f0109a93:	68 db 29 13 f0       	push   $0xf01329db
f0109a98:	68 23 02 00 00       	push   $0x223
f0109a9d:	68 37 29 13 f0       	push   $0xf0132937
f0109aa2:	e8 09 67 ff ff       	call   f01001b0 <_panic>

f0109aa7 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109aa7:	55                   	push   %ebp
f0109aa8:	89 e5                	mov    %esp,%ebp
f0109aaa:	53                   	push   %ebx
f0109aab:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109aae:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109ab5:	e9 e3 01 00 00       	jmp    f0109c9d <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109aba:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ac3:	89 d0                	mov    %edx,%eax
f0109ac5:	01 c0                	add    %eax,%eax
f0109ac7:	01 d0                	add    %edx,%eax
f0109ac9:	01 c0                	add    %eax,%eax
f0109acb:	01 d0                	add    %edx,%eax
f0109acd:	c1 e0 02             	shl    $0x2,%eax
f0109ad0:	01 d0                	add    %edx,%eax
f0109ad2:	01 c0                	add    %eax,%eax
f0109ad4:	01 d0                	add    %edx,%eax
f0109ad6:	c1 e0 02             	shl    $0x2,%eax
f0109ad9:	01 d0                	add    %edx,%eax
f0109adb:	c1 e0 02             	shl    $0x2,%eax
f0109ade:	01 d0                	add    %edx,%eax
f0109ae0:	c1 e0 02             	shl    $0x2,%eax
f0109ae3:	01 d0                	add    %edx,%eax
f0109ae5:	c1 e0 05             	shl    $0x5,%eax
f0109ae8:	01 c8                	add    %ecx,%eax
f0109aea:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109af1:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109afa:	89 d0                	mov    %edx,%eax
f0109afc:	01 c0                	add    %eax,%eax
f0109afe:	01 d0                	add    %edx,%eax
f0109b00:	01 c0                	add    %eax,%eax
f0109b02:	01 d0                	add    %edx,%eax
f0109b04:	c1 e0 02             	shl    $0x2,%eax
f0109b07:	01 d0                	add    %edx,%eax
f0109b09:	01 c0                	add    %eax,%eax
f0109b0b:	01 d0                	add    %edx,%eax
f0109b0d:	c1 e0 02             	shl    $0x2,%eax
f0109b10:	01 d0                	add    %edx,%eax
f0109b12:	c1 e0 02             	shl    $0x2,%eax
f0109b15:	01 d0                	add    %edx,%eax
f0109b17:	c1 e0 02             	shl    $0x2,%eax
f0109b1a:	01 d0                	add    %edx,%eax
f0109b1c:	c1 e0 05             	shl    $0x5,%eax
f0109b1f:	01 c8                	add    %ecx,%eax
f0109b21:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109b28:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109b2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b31:	89 d0                	mov    %edx,%eax
f0109b33:	01 c0                	add    %eax,%eax
f0109b35:	01 d0                	add    %edx,%eax
f0109b37:	01 c0                	add    %eax,%eax
f0109b39:	01 d0                	add    %edx,%eax
f0109b3b:	c1 e0 02             	shl    $0x2,%eax
f0109b3e:	01 d0                	add    %edx,%eax
f0109b40:	01 c0                	add    %eax,%eax
f0109b42:	01 d0                	add    %edx,%eax
f0109b44:	c1 e0 02             	shl    $0x2,%eax
f0109b47:	01 d0                	add    %edx,%eax
f0109b49:	c1 e0 02             	shl    $0x2,%eax
f0109b4c:	01 d0                	add    %edx,%eax
f0109b4e:	c1 e0 02             	shl    $0x2,%eax
f0109b51:	01 d0                	add    %edx,%eax
f0109b53:	c1 e0 05             	shl    $0x5,%eax
f0109b56:	01 c8                	add    %ecx,%eax
f0109b58:	85 c0                	test   %eax,%eax
f0109b5a:	75 17                	jne    f0109b73 <env_init+0xcc>
f0109b5c:	83 ec 04             	sub    $0x4,%esp
f0109b5f:	68 b8 29 13 f0       	push   $0xf01329b8
f0109b64:	68 3f 02 00 00       	push   $0x23f
f0109b69:	68 37 29 13 f0       	push   $0xf0132937
f0109b6e:	e8 3d 66 ff ff       	call   f01001b0 <_panic>
f0109b73:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109b79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b7c:	89 d0                	mov    %edx,%eax
f0109b7e:	01 c0                	add    %eax,%eax
f0109b80:	01 d0                	add    %edx,%eax
f0109b82:	01 c0                	add    %eax,%eax
f0109b84:	01 d0                	add    %edx,%eax
f0109b86:	c1 e0 02             	shl    $0x2,%eax
f0109b89:	01 d0                	add    %edx,%eax
f0109b8b:	01 c0                	add    %eax,%eax
f0109b8d:	01 d0                	add    %edx,%eax
f0109b8f:	c1 e0 02             	shl    $0x2,%eax
f0109b92:	01 d0                	add    %edx,%eax
f0109b94:	c1 e0 02             	shl    $0x2,%eax
f0109b97:	01 d0                	add    %edx,%eax
f0109b99:	c1 e0 02             	shl    $0x2,%eax
f0109b9c:	01 d0                	add    %edx,%eax
f0109b9e:	c1 e0 05             	shl    $0x5,%eax
f0109ba1:	01 c8                	add    %ecx,%eax
f0109ba3:	8b 15 58 32 25 f0    	mov    0xf0253258,%edx
f0109ba9:	89 50 44             	mov    %edx,0x44(%eax)
f0109bac:	8b 40 44             	mov    0x44(%eax),%eax
f0109baf:	85 c0                	test   %eax,%eax
f0109bb1:	74 3b                	je     f0109bee <env_init+0x147>
f0109bb3:	8b 0d 58 32 25 f0    	mov    0xf0253258,%ecx
f0109bb9:	8b 1d 50 32 25 f0    	mov    0xf0253250,%ebx
f0109bbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc2:	89 d0                	mov    %edx,%eax
f0109bc4:	01 c0                	add    %eax,%eax
f0109bc6:	01 d0                	add    %edx,%eax
f0109bc8:	01 c0                	add    %eax,%eax
f0109bca:	01 d0                	add    %edx,%eax
f0109bcc:	c1 e0 02             	shl    $0x2,%eax
f0109bcf:	01 d0                	add    %edx,%eax
f0109bd1:	01 c0                	add    %eax,%eax
f0109bd3:	01 d0                	add    %edx,%eax
f0109bd5:	c1 e0 02             	shl    $0x2,%eax
f0109bd8:	01 d0                	add    %edx,%eax
f0109bda:	c1 e0 02             	shl    $0x2,%eax
f0109bdd:	01 d0                	add    %edx,%eax
f0109bdf:	c1 e0 02             	shl    $0x2,%eax
f0109be2:	01 d0                	add    %edx,%eax
f0109be4:	c1 e0 05             	shl    $0x5,%eax
f0109be7:	01 d8                	add    %ebx,%eax
f0109be9:	89 41 48             	mov    %eax,0x48(%ecx)
f0109bec:	eb 35                	jmp    f0109c23 <env_init+0x17c>
f0109bee:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109bf4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bf7:	89 d0                	mov    %edx,%eax
f0109bf9:	01 c0                	add    %eax,%eax
f0109bfb:	01 d0                	add    %edx,%eax
f0109bfd:	01 c0                	add    %eax,%eax
f0109bff:	01 d0                	add    %edx,%eax
f0109c01:	c1 e0 02             	shl    $0x2,%eax
f0109c04:	01 d0                	add    %edx,%eax
f0109c06:	01 c0                	add    %eax,%eax
f0109c08:	01 d0                	add    %edx,%eax
f0109c0a:	c1 e0 02             	shl    $0x2,%eax
f0109c0d:	01 d0                	add    %edx,%eax
f0109c0f:	c1 e0 02             	shl    $0x2,%eax
f0109c12:	01 d0                	add    %edx,%eax
f0109c14:	c1 e0 02             	shl    $0x2,%eax
f0109c17:	01 d0                	add    %edx,%eax
f0109c19:	c1 e0 05             	shl    $0x5,%eax
f0109c1c:	01 c8                	add    %ecx,%eax
f0109c1e:	a3 5c 32 25 f0       	mov    %eax,0xf025325c
f0109c23:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109c29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c2c:	89 d0                	mov    %edx,%eax
f0109c2e:	01 c0                	add    %eax,%eax
f0109c30:	01 d0                	add    %edx,%eax
f0109c32:	01 c0                	add    %eax,%eax
f0109c34:	01 d0                	add    %edx,%eax
f0109c36:	c1 e0 02             	shl    $0x2,%eax
f0109c39:	01 d0                	add    %edx,%eax
f0109c3b:	01 c0                	add    %eax,%eax
f0109c3d:	01 d0                	add    %edx,%eax
f0109c3f:	c1 e0 02             	shl    $0x2,%eax
f0109c42:	01 d0                	add    %edx,%eax
f0109c44:	c1 e0 02             	shl    $0x2,%eax
f0109c47:	01 d0                	add    %edx,%eax
f0109c49:	c1 e0 02             	shl    $0x2,%eax
f0109c4c:	01 d0                	add    %edx,%eax
f0109c4e:	c1 e0 05             	shl    $0x5,%eax
f0109c51:	01 c8                	add    %ecx,%eax
f0109c53:	a3 58 32 25 f0       	mov    %eax,0xf0253258
f0109c58:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109c5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c61:	89 d0                	mov    %edx,%eax
f0109c63:	01 c0                	add    %eax,%eax
f0109c65:	01 d0                	add    %edx,%eax
f0109c67:	01 c0                	add    %eax,%eax
f0109c69:	01 d0                	add    %edx,%eax
f0109c6b:	c1 e0 02             	shl    $0x2,%eax
f0109c6e:	01 d0                	add    %edx,%eax
f0109c70:	01 c0                	add    %eax,%eax
f0109c72:	01 d0                	add    %edx,%eax
f0109c74:	c1 e0 02             	shl    $0x2,%eax
f0109c77:	01 d0                	add    %edx,%eax
f0109c79:	c1 e0 02             	shl    $0x2,%eax
f0109c7c:	01 d0                	add    %edx,%eax
f0109c7e:	c1 e0 02             	shl    $0x2,%eax
f0109c81:	01 d0                	add    %edx,%eax
f0109c83:	c1 e0 05             	shl    $0x5,%eax
f0109c86:	01 c8                	add    %ecx,%eax
f0109c88:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109c8f:	a1 64 32 25 f0       	mov    0xf0253264,%eax
f0109c94:	40                   	inc    %eax
f0109c95:	a3 64 32 25 f0       	mov    %eax,0xf0253264
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109c9a:	ff 4d f4             	decl   -0xc(%ebp)
f0109c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109ca1:	0f 89 13 fe ff ff    	jns    f0109aba <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109ca7:	90                   	nop
f0109ca8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109cab:	c9                   	leave  
f0109cac:	c3                   	ret    

f0109cad <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109cad:	55                   	push   %ebp
f0109cae:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109cb0:	8b 15 58 32 25 f0    	mov    0xf0253258,%edx
f0109cb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cb9:	89 10                	mov    %edx,(%eax)
f0109cbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cbe:	8b 00                	mov    (%eax),%eax
f0109cc0:	85 c0                	test   %eax,%eax
f0109cc2:	75 07                	jne    f0109ccb <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109cc4:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109cc9:	eb 11                	jmp    f0109cdc <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109ccb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cce:	8b 00                	mov    (%eax),%eax
f0109cd0:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109cd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109cdc:	5d                   	pop    %ebp
f0109cdd:	c3                   	ret    

f0109cde <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109cde:	55                   	push   %ebp
f0109cdf:	89 e5                	mov    %esp,%ebp
f0109ce1:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109ce4:	83 ec 04             	sub    $0x4,%esp
f0109ce7:	68 a0 da 01 00       	push   $0x1daa0
f0109cec:	6a 00                	push   $0x0
f0109cee:	ff 75 08             	pushl  0x8(%ebp)
f0109cf1:	e8 e8 52 02 00       	call   f012efde <memset>
f0109cf6:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109cf9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cfc:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109d03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d07:	75 17                	jne    f0109d20 <free_environment+0x42>
f0109d09:	83 ec 04             	sub    $0x4,%esp
f0109d0c:	68 b8 29 13 f0       	push   $0xf01329b8
f0109d11:	68 5c 02 00 00       	push   $0x25c
f0109d16:	68 37 29 13 f0       	push   $0xf0132937
f0109d1b:	e8 90 64 ff ff       	call   f01001b0 <_panic>
f0109d20:	8b 15 58 32 25 f0    	mov    0xf0253258,%edx
f0109d26:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d29:	89 50 44             	mov    %edx,0x44(%eax)
f0109d2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d2f:	8b 40 44             	mov    0x44(%eax),%eax
f0109d32:	85 c0                	test   %eax,%eax
f0109d34:	74 0d                	je     f0109d43 <free_environment+0x65>
f0109d36:	a1 58 32 25 f0       	mov    0xf0253258,%eax
f0109d3b:	8b 55 08             	mov    0x8(%ebp),%edx
f0109d3e:	89 50 48             	mov    %edx,0x48(%eax)
f0109d41:	eb 08                	jmp    f0109d4b <free_environment+0x6d>
f0109d43:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d46:	a3 5c 32 25 f0       	mov    %eax,0xf025325c
f0109d4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4e:	a3 58 32 25 f0       	mov    %eax,0xf0253258
f0109d53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d56:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d5d:	a1 64 32 25 f0       	mov    0xf0253264,%eax
f0109d62:	40                   	inc    %eax
f0109d63:	a3 64 32 25 f0       	mov    %eax,0xf0253264
}
f0109d68:	90                   	nop
f0109d69:	c9                   	leave  
f0109d6a:	c3                   	ret    

f0109d6b <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109d6b:	55                   	push   %ebp
f0109d6c:	89 e5                	mov    %esp,%ebp
f0109d6e:	53                   	push   %ebx
f0109d6f:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109d72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d75:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0109d81:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109d84:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109d8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109d8e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109d91:	01 c2                	add    %eax,%edx
f0109d93:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109d96:	01 d0                	add    %edx,%eax
f0109d98:	48                   	dec    %eax
f0109d99:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109d9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109d9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109da4:	f7 75 dc             	divl   -0x24(%ebp)
f0109da7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109daa:	29 d0                	sub    %edx,%eax
f0109dac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109daf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109db2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109db5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109db8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109dc0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109dc7:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109dce:	8b 45 10             	mov    0x10(%ebp),%eax
f0109dd1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109dd7:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109dde:	0f 85 38 06 00 00    	jne    f010a41c <program_segment_alloc_map_copy_workingset+0x6b1>
f0109de4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de7:	83 c0 5c             	add    $0x5c,%eax
f0109dea:	83 ec 08             	sub    $0x8,%esp
f0109ded:	68 e7 29 13 f0       	push   $0xf01329e7
f0109df2:	50                   	push   %eax
f0109df3:	e8 04 51 02 00       	call   f012eefc <strcmp>
f0109df8:	83 c4 10             	add    $0x10,%esp
f0109dfb:	85 c0                	test   %eax,%eax
f0109dfd:	0f 84 19 06 00 00    	je     f010a41c <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109e03:	8b 45 14             	mov    0x14(%ebp),%eax
f0109e06:	83 f8 06             	cmp    $0x6,%eax
f0109e09:	76 05                	jbe    f0109e10 <program_segment_alloc_map_copy_workingset+0xa5>
f0109e0b:	b8 06 00 00 00       	mov    $0x6,%eax
f0109e10:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109e13:	e9 04 06 00 00       	jmp    f010a41c <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109e18:	83 ec 0c             	sub    $0xc,%esp
f0109e1b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109e1e:	50                   	push   %eax
f0109e1f:	e8 e3 d4 ff ff       	call   f0107307 <allocate_frame>
f0109e24:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109e27:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109e33:	6a 06                	push   $0x6
f0109e35:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e38:	52                   	push   %edx
f0109e39:	50                   	push   %eax
f0109e3a:	e8 19 da ff ff       	call   f0107858 <loadtime_map_frame>
f0109e3f:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109e42:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e45:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e4e:	89 d0                	mov    %edx,%eax
f0109e50:	01 c0                	add    %eax,%eax
f0109e52:	01 d0                	add    %edx,%eax
f0109e54:	c1 e0 03             	shl    $0x3,%eax
f0109e57:	01 c8                	add    %ecx,%eax
f0109e59:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109e5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e62:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e67:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e6d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e70:	89 d0                	mov    %edx,%eax
f0109e72:	01 c0                	add    %eax,%eax
f0109e74:	01 d0                	add    %edx,%eax
f0109e76:	c1 e0 03             	shl    $0x3,%eax
f0109e79:	01 c8                	add    %ecx,%eax
f0109e7b:	05 bc 00 00 00       	add    $0xbc,%eax
f0109e80:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109e83:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e86:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e8c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e8f:	89 d0                	mov    %edx,%eax
f0109e91:	01 c0                	add    %eax,%eax
f0109e93:	01 d0                	add    %edx,%eax
f0109e95:	c1 e0 03             	shl    $0x3,%eax
f0109e98:	01 c8                	add    %ecx,%eax
f0109e9a:	05 c0 00 00 00       	add    $0xc0,%eax
f0109e9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109ea5:	83 ec 0c             	sub    $0xc,%esp
f0109ea8:	6a 02                	push   $0x2
f0109eaa:	e8 83 38 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f0109eaf:	83 c4 10             	add    $0x10,%esp
f0109eb2:	85 c0                	test   %eax,%eax
f0109eb4:	0f 84 2c 04 00 00    	je     f010a2e6 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ebd:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ec3:	89 d0                	mov    %edx,%eax
f0109ec5:	01 c0                	add    %eax,%eax
f0109ec7:	01 d0                	add    %edx,%eax
f0109ec9:	c1 e0 03             	shl    $0x3,%eax
f0109ecc:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ed2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed5:	01 d0                	add    %edx,%eax
f0109ed7:	83 c0 08             	add    $0x8,%eax
f0109eda:	85 c0                	test   %eax,%eax
f0109edc:	75 17                	jne    f0109ef5 <program_segment_alloc_map_copy_workingset+0x18a>
f0109ede:	83 ec 04             	sub    $0x4,%esp
f0109ee1:	68 99 29 13 f0       	push   $0xf0132999
f0109ee6:	68 9f 02 00 00       	push   $0x29f
f0109eeb:	68 37 29 13 f0       	push   $0xf0132937
f0109ef0:	e8 bb 62 ff ff       	call   f01001b0 <_panic>
f0109ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef8:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109efe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f01:	89 d0                	mov    %edx,%eax
f0109f03:	01 c0                	add    %eax,%eax
f0109f05:	01 d0                	add    %edx,%eax
f0109f07:	c1 e0 03             	shl    $0x3,%eax
f0109f0a:	01 c8                	add    %ecx,%eax
f0109f0c:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f11:	8b 00                	mov    (%eax),%eax
f0109f13:	85 c0                	test   %eax,%eax
f0109f15:	74 41                	je     f0109f58 <program_segment_alloc_map_copy_workingset+0x1ed>
f0109f17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f1a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f20:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f23:	89 d0                	mov    %edx,%eax
f0109f25:	01 c0                	add    %eax,%eax
f0109f27:	01 d0                	add    %edx,%eax
f0109f29:	c1 e0 03             	shl    $0x3,%eax
f0109f2c:	01 c8                	add    %ecx,%eax
f0109f2e:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f33:	8b 10                	mov    (%eax),%edx
f0109f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f38:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109f3e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109f41:	89 c8                	mov    %ecx,%eax
f0109f43:	01 c0                	add    %eax,%eax
f0109f45:	01 c8                	add    %ecx,%eax
f0109f47:	c1 e0 03             	shl    $0x3,%eax
f0109f4a:	01 d8                	add    %ebx,%eax
f0109f4c:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f51:	8b 00                	mov    (%eax),%eax
f0109f53:	89 42 14             	mov    %eax,0x14(%edx)
f0109f56:	eb 27                	jmp    f0109f7f <program_segment_alloc_map_copy_workingset+0x214>
f0109f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f5b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f61:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f64:	89 d0                	mov    %edx,%eax
f0109f66:	01 c0                	add    %eax,%eax
f0109f68:	01 d0                	add    %edx,%eax
f0109f6a:	c1 e0 03             	shl    $0x3,%eax
f0109f6d:	01 c8                	add    %ecx,%eax
f0109f6f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f74:	8b 10                	mov    (%eax),%edx
f0109f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f79:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f82:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f88:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f8b:	89 d0                	mov    %edx,%eax
f0109f8d:	01 c0                	add    %eax,%eax
f0109f8f:	01 d0                	add    %edx,%eax
f0109f91:	c1 e0 03             	shl    $0x3,%eax
f0109f94:	01 c8                	add    %ecx,%eax
f0109f96:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f9b:	8b 00                	mov    (%eax),%eax
f0109f9d:	85 c0                	test   %eax,%eax
f0109f9f:	74 41                	je     f0109fe2 <program_segment_alloc_map_copy_workingset+0x277>
f0109fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109faa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fad:	89 d0                	mov    %edx,%eax
f0109faf:	01 c0                	add    %eax,%eax
f0109fb1:	01 d0                	add    %edx,%eax
f0109fb3:	c1 e0 03             	shl    $0x3,%eax
f0109fb6:	01 c8                	add    %ecx,%eax
f0109fb8:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fbd:	8b 10                	mov    (%eax),%edx
f0109fbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc2:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109fc8:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109fcb:	89 c8                	mov    %ecx,%eax
f0109fcd:	01 c0                	add    %eax,%eax
f0109fcf:	01 c8                	add    %ecx,%eax
f0109fd1:	c1 e0 03             	shl    $0x3,%eax
f0109fd4:	01 d8                	add    %ebx,%eax
f0109fd6:	05 c8 00 00 00       	add    $0xc8,%eax
f0109fdb:	8b 00                	mov    (%eax),%eax
f0109fdd:	89 42 10             	mov    %eax,0x10(%edx)
f0109fe0:	eb 27                	jmp    f010a009 <program_segment_alloc_map_copy_workingset+0x29e>
f0109fe2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe5:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109feb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fee:	89 d0                	mov    %edx,%eax
f0109ff0:	01 c0                	add    %eax,%eax
f0109ff2:	01 d0                	add    %edx,%eax
f0109ff4:	c1 e0 03             	shl    $0x3,%eax
f0109ff7:	01 c8                	add    %ecx,%eax
f0109ff9:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ffe:	8b 10                	mov    (%eax),%edx
f010a000:	8b 45 08             	mov    0x8(%ebp),%eax
f010a003:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a009:	8b 45 08             	mov    0x8(%ebp),%eax
f010a00c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a012:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a015:	89 d0                	mov    %edx,%eax
f010a017:	01 c0                	add    %eax,%eax
f010a019:	01 d0                	add    %edx,%eax
f010a01b:	c1 e0 03             	shl    $0x3,%eax
f010a01e:	01 c8                	add    %ecx,%eax
f010a020:	05 c8 00 00 00       	add    $0xc8,%eax
f010a025:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a02b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a034:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a037:	89 d0                	mov    %edx,%eax
f010a039:	01 c0                	add    %eax,%eax
f010a03b:	01 d0                	add    %edx,%eax
f010a03d:	c1 e0 03             	shl    $0x3,%eax
f010a040:	01 c8                	add    %ecx,%eax
f010a042:	05 cc 00 00 00       	add    $0xcc,%eax
f010a047:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a04d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a050:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a056:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a059:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05c:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a062:	8b 45 08             	mov    0x8(%ebp),%eax
f010a065:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a06b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a06e:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a074:	48                   	dec    %eax
f010a075:	39 c2                	cmp    %eax,%edx
f010a077:	0f 83 37 01 00 00    	jae    f010a1b4 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a07d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a080:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a086:	89 d0                	mov    %edx,%eax
f010a088:	01 c0                	add    %eax,%eax
f010a08a:	01 d0                	add    %edx,%eax
f010a08c:	c1 e0 03             	shl    $0x3,%eax
f010a08f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a095:	8b 45 08             	mov    0x8(%ebp),%eax
f010a098:	01 d0                	add    %edx,%eax
f010a09a:	83 c0 08             	add    $0x8,%eax
f010a09d:	85 c0                	test   %eax,%eax
f010a09f:	75 17                	jne    f010a0b8 <program_segment_alloc_map_copy_workingset+0x34d>
f010a0a1:	83 ec 04             	sub    $0x4,%esp
f010a0a4:	68 b8 29 13 f0       	push   $0xf01329b8
f010a0a9:	68 a3 02 00 00       	push   $0x2a3
f010a0ae:	68 37 29 13 f0       	push   $0xf0132937
f010a0b3:	e8 f8 60 ff ff       	call   f01001b0 <_panic>
f010a0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0bb:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c4:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a0ca:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a0cd:	89 d0                	mov    %edx,%eax
f010a0cf:	01 c0                	add    %eax,%eax
f010a0d1:	01 d0                	add    %edx,%eax
f010a0d3:	c1 e0 03             	shl    $0x3,%eax
f010a0d6:	01 d8                	add    %ebx,%eax
f010a0d8:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0dd:	89 08                	mov    %ecx,(%eax)
f010a0df:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a0e2:	89 d0                	mov    %edx,%eax
f010a0e4:	01 c0                	add    %eax,%eax
f010a0e6:	01 d0                	add    %edx,%eax
f010a0e8:	c1 e0 03             	shl    $0x3,%eax
f010a0eb:	01 c8                	add    %ecx,%eax
f010a0ed:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0f2:	8b 00                	mov    (%eax),%eax
f010a0f4:	85 c0                	test   %eax,%eax
f010a0f6:	74 2e                	je     f010a126 <program_segment_alloc_map_copy_workingset+0x3bb>
f010a0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0fb:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a101:	8b 45 08             	mov    0x8(%ebp),%eax
f010a104:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a10a:	89 c8                	mov    %ecx,%eax
f010a10c:	01 c0                	add    %eax,%eax
f010a10e:	01 c8                	add    %ecx,%eax
f010a110:	c1 e0 03             	shl    $0x3,%eax
f010a113:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a119:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11c:	01 c8                	add    %ecx,%eax
f010a11e:	83 c0 08             	add    $0x8,%eax
f010a121:	89 42 14             	mov    %eax,0x14(%edx)
f010a124:	eb 29                	jmp    f010a14f <program_segment_alloc_map_copy_workingset+0x3e4>
f010a126:	8b 45 08             	mov    0x8(%ebp),%eax
f010a129:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a12f:	89 d0                	mov    %edx,%eax
f010a131:	01 c0                	add    %eax,%eax
f010a133:	01 d0                	add    %edx,%eax
f010a135:	c1 e0 03             	shl    $0x3,%eax
f010a138:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a13e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a141:	01 d0                	add    %edx,%eax
f010a143:	8d 50 08             	lea    0x8(%eax),%edx
f010a146:	8b 45 08             	mov    0x8(%ebp),%eax
f010a149:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a152:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a158:	89 d0                	mov    %edx,%eax
f010a15a:	01 c0                	add    %eax,%eax
f010a15c:	01 d0                	add    %edx,%eax
f010a15e:	c1 e0 03             	shl    $0x3,%eax
f010a161:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a167:	8b 45 08             	mov    0x8(%ebp),%eax
f010a16a:	01 d0                	add    %edx,%eax
f010a16c:	8d 50 08             	lea    0x8(%eax),%edx
f010a16f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a172:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a178:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a181:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a184:	89 d0                	mov    %edx,%eax
f010a186:	01 c0                	add    %eax,%eax
f010a188:	01 d0                	add    %edx,%eax
f010a18a:	c1 e0 03             	shl    $0x3,%eax
f010a18d:	01 c8                	add    %ecx,%eax
f010a18f:	05 cc 00 00 00       	add    $0xcc,%eax
f010a194:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a19a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19d:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a1a3:	8d 50 01             	lea    0x1(%eax),%edx
f010a1a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a9:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a1af:	e9 32 01 00 00       	jmp    f010a2e6 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b7:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1bd:	89 d0                	mov    %edx,%eax
f010a1bf:	01 c0                	add    %eax,%eax
f010a1c1:	01 d0                	add    %edx,%eax
f010a1c3:	c1 e0 03             	shl    $0x3,%eax
f010a1c6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a1cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cf:	01 d0                	add    %edx,%eax
f010a1d1:	83 c0 08             	add    $0x8,%eax
f010a1d4:	85 c0                	test   %eax,%eax
f010a1d6:	75 17                	jne    f010a1ef <program_segment_alloc_map_copy_workingset+0x484>
f010a1d8:	83 ec 04             	sub    $0x4,%esp
f010a1db:	68 b8 29 13 f0       	push   $0xf01329b8
f010a1e0:	68 a8 02 00 00       	push   $0x2a8
f010a1e5:	68 37 29 13 f0       	push   $0xf0132937
f010a1ea:	e8 c1 5f ff ff       	call   f01001b0 <_panic>
f010a1ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1f2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1fb:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a201:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a204:	89 d0                	mov    %edx,%eax
f010a206:	01 c0                	add    %eax,%eax
f010a208:	01 d0                	add    %edx,%eax
f010a20a:	c1 e0 03             	shl    $0x3,%eax
f010a20d:	01 d8                	add    %ebx,%eax
f010a20f:	05 c8 00 00 00       	add    $0xc8,%eax
f010a214:	89 08                	mov    %ecx,(%eax)
f010a216:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a219:	89 d0                	mov    %edx,%eax
f010a21b:	01 c0                	add    %eax,%eax
f010a21d:	01 d0                	add    %edx,%eax
f010a21f:	c1 e0 03             	shl    $0x3,%eax
f010a222:	01 c8                	add    %ecx,%eax
f010a224:	05 c8 00 00 00       	add    $0xc8,%eax
f010a229:	8b 00                	mov    (%eax),%eax
f010a22b:	85 c0                	test   %eax,%eax
f010a22d:	74 2e                	je     f010a25d <program_segment_alloc_map_copy_workingset+0x4f2>
f010a22f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a232:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a238:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23b:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a241:	89 c8                	mov    %ecx,%eax
f010a243:	01 c0                	add    %eax,%eax
f010a245:	01 c8                	add    %ecx,%eax
f010a247:	c1 e0 03             	shl    $0x3,%eax
f010a24a:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a250:	8b 45 08             	mov    0x8(%ebp),%eax
f010a253:	01 c8                	add    %ecx,%eax
f010a255:	83 c0 08             	add    $0x8,%eax
f010a258:	89 42 14             	mov    %eax,0x14(%edx)
f010a25b:	eb 29                	jmp    f010a286 <program_segment_alloc_map_copy_workingset+0x51b>
f010a25d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a260:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a266:	89 d0                	mov    %edx,%eax
f010a268:	01 c0                	add    %eax,%eax
f010a26a:	01 d0                	add    %edx,%eax
f010a26c:	c1 e0 03             	shl    $0x3,%eax
f010a26f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a275:	8b 45 08             	mov    0x8(%ebp),%eax
f010a278:	01 d0                	add    %edx,%eax
f010a27a:	8d 50 08             	lea    0x8(%eax),%edx
f010a27d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a280:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a286:	8b 45 08             	mov    0x8(%ebp),%eax
f010a289:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a28f:	89 d0                	mov    %edx,%eax
f010a291:	01 c0                	add    %eax,%eax
f010a293:	01 d0                	add    %edx,%eax
f010a295:	c1 e0 03             	shl    $0x3,%eax
f010a298:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a29e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a1:	01 d0                	add    %edx,%eax
f010a2a3:	8d 50 08             	lea    0x8(%eax),%edx
f010a2a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a9:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a2af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2bb:	89 d0                	mov    %edx,%eax
f010a2bd:	01 c0                	add    %eax,%eax
f010a2bf:	01 d0                	add    %edx,%eax
f010a2c1:	c1 e0 03             	shl    $0x3,%eax
f010a2c4:	01 c8                	add    %ecx,%eax
f010a2c6:	05 cc 00 00 00       	add    $0xcc,%eax
f010a2cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a2d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d4:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a2da:	8d 50 01             	lea    0x1(%eax),%edx
f010a2dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e0:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e9:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a2ef:	8d 50 01             	lea    0x1(%eax),%edx
f010a2f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f5:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a2fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fe:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a304:	8b 55 08             	mov    0x8(%ebp),%edx
f010a307:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a30d:	ba 00 00 00 00       	mov    $0x0,%edx
f010a312:	f7 f1                	div    %ecx
f010a314:	8b 45 08             	mov    0x8(%ebp),%eax
f010a317:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a31d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a320:	c1 e8 16             	shr    $0x16,%eax
f010a323:	89 c2                	mov    %eax,%edx
f010a325:	8b 45 18             	mov    0x18(%ebp),%eax
f010a328:	8b 00                	mov    (%eax),%eax
f010a32a:	39 c2                	cmp    %eax,%edx
f010a32c:	0f 84 d3 00 00 00    	je     f010a405 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a332:	8b 45 08             	mov    0x8(%ebp),%eax
f010a335:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a33e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a341:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a344:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a349:	89 c1                	mov    %eax,%ecx
f010a34b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a34e:	89 d0                	mov    %edx,%eax
f010a350:	01 c0                	add    %eax,%eax
f010a352:	01 d0                	add    %edx,%eax
f010a354:	c1 e0 03             	shl    $0x3,%eax
f010a357:	01 d8                	add    %ebx,%eax
f010a359:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a35e:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a360:	8b 45 08             	mov    0x8(%ebp),%eax
f010a363:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a369:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a36c:	89 d0                	mov    %edx,%eax
f010a36e:	01 c0                	add    %eax,%eax
f010a370:	01 d0                	add    %edx,%eax
f010a372:	c1 e0 03             	shl    $0x3,%eax
f010a375:	01 c8                	add    %ecx,%eax
f010a377:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a37c:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a37f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a382:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a388:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a38b:	89 d0                	mov    %edx,%eax
f010a38d:	01 c0                	add    %eax,%eax
f010a38f:	01 d0                	add    %edx,%eax
f010a391:	c1 e0 03             	shl    $0x3,%eax
f010a394:	01 c8                	add    %ecx,%eax
f010a396:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a39b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a3a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a4:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3aa:	8d 50 01             	lea    0x1(%eax),%edx
f010a3ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b0:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a3b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b9:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3bf:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a3c4:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3c9:	f7 f1                	div    %ecx
f010a3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ce:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a3d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3dd:	85 c0                	test   %eax,%eax
f010a3df:	75 17                	jne    f010a3f8 <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a3e1:	83 ec 04             	sub    $0x4,%esp
f010a3e4:	68 ec 29 13 f0       	push   $0xf01329ec
f010a3e9:	68 c3 02 00 00       	push   $0x2c3
f010a3ee:	68 37 29 13 f0       	push   $0xf0132937
f010a3f3:	e8 b8 5d ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a3f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3fb:	c1 e8 16             	shr    $0x16,%eax
f010a3fe:	89 c2                	mov    %eax,%edx
f010a400:	8b 45 18             	mov    0x18(%ebp),%eax
f010a403:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a405:	8b 45 10             	mov    0x10(%ebp),%eax
f010a408:	8b 00                	mov    (%eax),%eax
f010a40a:	8d 50 01             	lea    0x1(%eax),%edx
f010a40d:	8b 45 10             	mov    0x10(%ebp),%eax
f010a410:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a412:	ff 45 f0             	incl   -0x10(%ebp)
f010a415:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a41c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a41f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a422:	73 0c                	jae    f010a430 <program_segment_alloc_map_copy_workingset+0x6c5>
f010a424:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a427:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a42a:	0f 82 e8 f9 ff ff    	jb     f0109e18 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a430:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a433:	8b 00                	mov    (%eax),%eax
f010a435:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a438:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a43b:	8b 40 0c             	mov    0xc(%eax),%eax
f010a43e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a441:	eb 10                	jmp    f010a453 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a443:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a446:	8a 10                	mov    (%eax),%dl
f010a448:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a44b:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a44d:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a450:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a453:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a456:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a459:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a45c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a461:	89 c2                	mov    %eax,%edx
f010a463:	8b 45 10             	mov    0x10(%ebp),%eax
f010a466:	8b 00                	mov    (%eax),%eax
f010a468:	c1 e0 0c             	shl    $0xc,%eax
f010a46b:	01 c2                	add    %eax,%edx
f010a46d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a470:	39 c2                	cmp    %eax,%edx
f010a472:	76 1d                	jbe    f010a491 <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a474:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a477:	8b 50 04             	mov    0x4(%eax),%edx
f010a47a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a47d:	01 c2                	add    %eax,%edx
f010a47f:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a482:	39 c2                	cmp    %eax,%edx
f010a484:	77 bd                	ja     f010a443 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a486:	eb 09                	jmp    f010a491 <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a488:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a48b:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a48e:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a491:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a494:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a497:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a49a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a49f:	89 c2                	mov    %eax,%edx
f010a4a1:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4a4:	8b 00                	mov    (%eax),%eax
f010a4a6:	c1 e0 0c             	shl    $0xc,%eax
f010a4a9:	01 c2                	add    %eax,%edx
f010a4ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4ae:	39 c2                	cmp    %eax,%edx
f010a4b0:	77 d6                	ja     f010a488 <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a4b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a4b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a4ba:	c9                   	leave  
f010a4bb:	c3                   	ret    

f010a4bc <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a4bc:	55                   	push   %ebp
f010a4bd:	89 e5                	mov    %esp,%ebp
f010a4bf:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a4c2:	83 ec 0c             	sub    $0xc,%esp
f010a4c5:	68 00 10 00 00       	push   $0x1000
f010a4ca:	e8 72 da ff ff       	call   f0107f41 <kmalloc>
f010a4cf:	83 c4 10             	add    $0x10,%esp
f010a4d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a4d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4d9:	75 17                	jne    f010a4f2 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a4db:	83 ec 04             	sub    $0x4,%esp
f010a4de:	68 8f 2a 13 f0       	push   $0xf0132a8f
f010a4e3:	68 ff 02 00 00       	push   $0x2ff
f010a4e8:	68 37 29 13 f0       	push   $0xf0132937
f010a4ed:	e8 be 5c ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a4f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a4f5:	c9                   	leave  
f010a4f6:	c3                   	ret    

f010a4f7 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a4f7:	55                   	push   %ebp
f010a4f8:	89 e5                	mov    %esp,%ebp
f010a4fa:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	panic("not implemented yet");
f010a4fd:	83 ec 04             	sub    $0x4,%esp
f010a500:	68 ac 2a 13 f0       	push   $0xf0132aac
f010a505:	68 0e 03 00 00       	push   $0x30e
f010a50a:	68 37 29 13 f0       	push   $0xf0132937
f010a50f:	e8 9c 5c ff ff       	call   f01001b0 <_panic>

f010a514 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a514:	55                   	push   %ebp
f010a515:	89 e5                	mov    %esp,%ebp
f010a517:	53                   	push   %ebx
f010a518:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a51b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a51e:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a521:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a527:	8b 45 08             	mov    0x8(%ebp),%eax
f010a52a:	8b 55 10             	mov    0x10(%ebp),%edx
f010a52d:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a533:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a53a:	eb 1a                	jmp    f010a556 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a53c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a545:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a548:	c1 e2 02             	shl    $0x2,%edx
f010a54b:	01 d0                	add    %edx,%eax
f010a54d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a553:	ff 45 f4             	incl   -0xc(%ebp)
f010a556:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a559:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a55e:	76 dc                	jbe    f010a53c <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a560:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a567:	eb 25                	jmp    f010a58e <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a569:	8b 45 08             	mov    0x8(%ebp),%eax
f010a56c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a572:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a575:	c1 e2 02             	shl    $0x2,%edx
f010a578:	01 c2                	add    %eax,%edx
f010a57a:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f010a57f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a582:	c1 e1 02             	shl    $0x2,%ecx
f010a585:	01 c8                	add    %ecx,%eax
f010a587:	8b 00                	mov    (%eax),%eax
f010a589:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a58b:	ff 45 f4             	incl   -0xc(%ebp)
f010a58e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a595:	7e d2                	jle    f010a569 <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a597:	8b 45 08             	mov    0x8(%ebp),%eax
f010a59a:	8b 15 50 32 25 f0    	mov    0xf0253250,%edx
f010a5a0:	29 d0                	sub    %edx,%eax
f010a5a2:	c1 f8 05             	sar    $0x5,%eax
f010a5a5:	89 c2                	mov    %eax,%edx
f010a5a7:	89 d0                	mov    %edx,%eax
f010a5a9:	c1 e0 03             	shl    $0x3,%eax
f010a5ac:	01 d0                	add    %edx,%eax
f010a5ae:	01 c0                	add    %eax,%eax
f010a5b0:	01 d0                	add    %edx,%eax
f010a5b2:	c1 e0 06             	shl    $0x6,%eax
f010a5b5:	01 d0                	add    %edx,%eax
f010a5b7:	89 c1                	mov    %eax,%ecx
f010a5b9:	c1 e1 04             	shl    $0x4,%ecx
f010a5bc:	01 c8                	add    %ecx,%eax
f010a5be:	c1 e0 03             	shl    $0x3,%eax
f010a5c1:	01 d0                	add    %edx,%eax
f010a5c3:	01 c0                	add    %eax,%eax
f010a5c5:	01 d0                	add    %edx,%eax
f010a5c7:	89 c1                	mov    %eax,%ecx
f010a5c9:	c1 e1 04             	shl    $0x4,%ecx
f010a5cc:	01 c8                	add    %ecx,%eax
f010a5ce:	c1 e0 03             	shl    $0x3,%eax
f010a5d1:	01 d0                	add    %edx,%eax
f010a5d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a5da:	01 d0                	add    %edx,%eax
f010a5dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a5df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a5e2:	89 d0                	mov    %edx,%eax
f010a5e4:	01 c0                	add    %eax,%eax
f010a5e6:	01 d0                	add    %edx,%eax
f010a5e8:	01 c0                	add    %eax,%eax
f010a5ea:	01 d0                	add    %edx,%eax
f010a5ec:	c1 e0 02             	shl    $0x2,%eax
f010a5ef:	01 d0                	add    %edx,%eax
f010a5f1:	01 c0                	add    %eax,%eax
f010a5f3:	01 d0                	add    %edx,%eax
f010a5f5:	c1 e0 02             	shl    $0x2,%eax
f010a5f8:	01 d0                	add    %edx,%eax
f010a5fa:	c1 e0 02             	shl    $0x2,%eax
f010a5fd:	01 d0                	add    %edx,%eax
f010a5ff:	c1 e0 02             	shl    $0x2,%eax
f010a602:	01 d0                	add    %edx,%eax
f010a604:	c1 e0 05             	shl    $0x5,%eax
f010a607:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a60c:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a612:	8b 45 08             	mov    0x8(%ebp),%eax
f010a615:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a61b:	83 ec 0c             	sub    $0xc,%esp
f010a61e:	6a 02                	push   $0x2
f010a620:	e8 0d 31 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f010a625:	83 c4 10             	add    $0x10,%esp
f010a628:	85 c0                	test   %eax,%eax
f010a62a:	0f 84 34 01 00 00    	je     f010a764 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a630:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a637:	e9 14 01 00 00       	jmp    f010a750 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a63c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a63f:	89 d0                	mov    %edx,%eax
f010a641:	01 c0                	add    %eax,%eax
f010a643:	01 d0                	add    %edx,%eax
f010a645:	c1 e0 03             	shl    $0x3,%eax
f010a648:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a64e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a651:	01 d0                	add    %edx,%eax
f010a653:	83 c0 08             	add    $0x8,%eax
f010a656:	85 c0                	test   %eax,%eax
f010a658:	75 17                	jne    f010a671 <initialize_environment+0x15d>
f010a65a:	83 ec 04             	sub    $0x4,%esp
f010a65d:	68 b8 29 13 f0       	push   $0xf01329b8
f010a662:	68 45 03 00 00       	push   $0x345
f010a667:	68 37 29 13 f0       	push   $0xf0132937
f010a66c:	e8 3f 5b ff ff       	call   f01001b0 <_panic>
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a67a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a67d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a680:	89 c8                	mov    %ecx,%eax
f010a682:	01 c0                	add    %eax,%eax
f010a684:	01 c8                	add    %ecx,%eax
f010a686:	c1 e0 03             	shl    $0x3,%eax
f010a689:	01 d8                	add    %ebx,%eax
f010a68b:	05 c8 00 00 00       	add    $0xc8,%eax
f010a690:	89 10                	mov    %edx,(%eax)
f010a692:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a695:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a698:	89 d0                	mov    %edx,%eax
f010a69a:	01 c0                	add    %eax,%eax
f010a69c:	01 d0                	add    %edx,%eax
f010a69e:	c1 e0 03             	shl    $0x3,%eax
f010a6a1:	01 c8                	add    %ecx,%eax
f010a6a3:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6a8:	8b 00                	mov    (%eax),%eax
f010a6aa:	85 c0                	test   %eax,%eax
f010a6ac:	74 28                	je     f010a6d6 <initialize_environment+0x1c2>
f010a6ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b1:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a6b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6ba:	89 c8                	mov    %ecx,%eax
f010a6bc:	01 c0                	add    %eax,%eax
f010a6be:	01 c8                	add    %ecx,%eax
f010a6c0:	c1 e0 03             	shl    $0x3,%eax
f010a6c3:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a6c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6cc:	01 c8                	add    %ecx,%eax
f010a6ce:	83 c0 08             	add    $0x8,%eax
f010a6d1:	89 42 14             	mov    %eax,0x14(%edx)
f010a6d4:	eb 23                	jmp    f010a6f9 <initialize_environment+0x1e5>
f010a6d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6d9:	89 d0                	mov    %edx,%eax
f010a6db:	01 c0                	add    %eax,%eax
f010a6dd:	01 d0                	add    %edx,%eax
f010a6df:	c1 e0 03             	shl    $0x3,%eax
f010a6e2:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6eb:	01 d0                	add    %edx,%eax
f010a6ed:	8d 50 08             	lea    0x8(%eax),%edx
f010a6f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f3:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a6f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6fc:	89 d0                	mov    %edx,%eax
f010a6fe:	01 c0                	add    %eax,%eax
f010a700:	01 d0                	add    %edx,%eax
f010a702:	c1 e0 03             	shl    $0x3,%eax
f010a705:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a70b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70e:	01 d0                	add    %edx,%eax
f010a710:	8d 50 08             	lea    0x8(%eax),%edx
f010a713:	8b 45 08             	mov    0x8(%ebp),%eax
f010a716:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a71c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a71f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a722:	89 d0                	mov    %edx,%eax
f010a724:	01 c0                	add    %eax,%eax
f010a726:	01 d0                	add    %edx,%eax
f010a728:	c1 e0 03             	shl    $0x3,%eax
f010a72b:	01 c8                	add    %ecx,%eax
f010a72d:	05 cc 00 00 00       	add    $0xcc,%eax
f010a732:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a738:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73b:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a741:	8d 50 01             	lea    0x1(%eax),%edx
f010a744:	8b 45 08             	mov    0x8(%ebp),%eax
f010a747:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a74d:	ff 45 f0             	incl   -0x10(%ebp)
f010a750:	8b 45 08             	mov    0x8(%ebp),%eax
f010a753:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a759:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a75c:	39 c2                	cmp    %eax,%edx
f010a75e:	0f 87 d8 fe ff ff    	ja     f010a63c <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a764:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a76b:	eb 54                	jmp    f010a7c1 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a76d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a770:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a773:	89 d0                	mov    %edx,%eax
f010a775:	01 c0                	add    %eax,%eax
f010a777:	01 d0                	add    %edx,%eax
f010a779:	c1 e0 03             	shl    $0x3,%eax
f010a77c:	01 c8                	add    %ecx,%eax
f010a77e:	05 b8 00 00 00       	add    $0xb8,%eax
f010a783:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a789:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a78c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a78f:	89 d0                	mov    %edx,%eax
f010a791:	01 c0                	add    %eax,%eax
f010a793:	01 d0                	add    %edx,%eax
f010a795:	c1 e0 03             	shl    $0x3,%eax
f010a798:	01 c8                	add    %ecx,%eax
f010a79a:	05 bc 00 00 00       	add    $0xbc,%eax
f010a79f:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7a8:	89 d0                	mov    %edx,%eax
f010a7aa:	01 c0                	add    %eax,%eax
f010a7ac:	01 d0                	add    %edx,%eax
f010a7ae:	c1 e0 03             	shl    $0x3,%eax
f010a7b1:	01 c8                	add    %ecx,%eax
f010a7b3:	05 c0 00 00 00       	add    $0xc0,%eax
f010a7b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7be:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c4:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a7ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7cd:	39 c2                	cmp    %eax,%edx
f010a7cf:	77 9c                	ja     f010a76d <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d4:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a7db:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7e5:	eb 54                	jmp    f010a83b <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ed:	89 d0                	mov    %edx,%eax
f010a7ef:	01 c0                	add    %eax,%eax
f010a7f1:	01 d0                	add    %edx,%eax
f010a7f3:	c1 e0 03             	shl    $0x3,%eax
f010a7f6:	01 c8                	add    %ecx,%eax
f010a7f8:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a7fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a803:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a806:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a809:	89 d0                	mov    %edx,%eax
f010a80b:	01 c0                	add    %eax,%eax
f010a80d:	01 d0                	add    %edx,%eax
f010a80f:	c1 e0 03             	shl    $0x3,%eax
f010a812:	01 c8                	add    %ecx,%eax
f010a814:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a819:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a81c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a81f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a822:	89 d0                	mov    %edx,%eax
f010a824:	01 c0                	add    %eax,%eax
f010a826:	01 d0                	add    %edx,%eax
f010a828:	c1 e0 03             	shl    $0x3,%eax
f010a82b:	01 c8                	add    %ecx,%eax
f010a82d:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a832:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a838:	ff 45 f4             	incl   -0xc(%ebp)
f010a83b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a83f:	7e a6                	jle    f010a7e7 <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a841:	8b 45 08             	mov    0x8(%ebp),%eax
f010a844:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a84b:	00 00 00 

	e->pageFaultsCounter=0;
f010a84e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a851:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a858:	00 00 00 
	e->tableFaultsCounter=0;
f010a85b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a85e:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a865:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a868:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86b:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a872:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a875:	8b 45 08             	mov    0x8(%ebp),%eax
f010a878:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a87f:	00 00 00 

	e->nModifiedPages=0;
f010a882:	8b 45 08             	mov    0x8(%ebp),%eax
f010a885:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a88c:	00 00 00 
	e->nNotModifiedPages=0;
f010a88f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a892:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a899:	00 00 00 
	e->nClocks = 0;
f010a89c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89f:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a8a6:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ac:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a8b3:	00 00 00 
	e->nPageOut = 0;
f010a8b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b9:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a8c0:	00 00 00 
	e->nNewPageAdded = 0;
f010a8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c6:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a8cd:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a8d0:	83 ec 04             	sub    $0x4,%esp
f010a8d3:	68 00 00 00 82       	push   $0x82000000
f010a8d8:	68 00 00 00 80       	push   $0x80000000
f010a8dd:	ff 75 08             	pushl  0x8(%ebp)
f010a8e0:	e8 12 fc ff ff       	call   f010a4f7 <initialize_uheap_dynamic_allocator>
f010a8e5:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8e8:	83 ec 0c             	sub    $0xc,%esp
f010a8eb:	ff 75 08             	pushl  0x8(%ebp)
f010a8ee:	e8 09 00 00 00       	call   f010a8fc <complete_environment_initialization>
f010a8f3:	83 c4 10             	add    $0x10,%esp
}
f010a8f6:	90                   	nop
f010a8f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8fa:	c9                   	leave  
f010a8fb:	c3                   	ret    

f010a8fc <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a8fc:	55                   	push   %ebp
f010a8fd:	89 e5                	mov    %esp,%ebp
f010a8ff:	53                   	push   %ebx
f010a900:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a903:	8b 45 08             	mov    0x8(%ebp),%eax
f010a906:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a90c:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a912:	8b 45 08             	mov    0x8(%ebp),%eax
f010a915:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a91b:	83 c8 03             	or     $0x3,%eax
f010a91e:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a920:	8b 45 08             	mov    0x8(%ebp),%eax
f010a923:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a929:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a92f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a932:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a938:	83 c8 05             	or     $0x5,%eax
f010a93b:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a93d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a940:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a947:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a94a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a94d:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a954:	00 00 00 
	e->disk_env_tabledir = 0;
f010a957:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95a:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a961:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a964:	8b 45 08             	mov    0x8(%ebp),%eax
f010a967:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a96e:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a971:	8b 45 08             	mov    0x8(%ebp),%eax
f010a974:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a977:	83 ec 0c             	sub    $0xc,%esp
f010a97a:	6a 08                	push   $0x8
f010a97c:	e8 2f 32 02 00       	call   f012dbb0 <log2_ceil>
f010a981:	83 c4 10             	add    $0x10,%esp
f010a984:	ba 01 00 00 00       	mov    $0x1,%edx
f010a989:	88 c1                	mov    %al,%cl
f010a98b:	d3 e2                	shl    %cl,%edx
f010a98d:	89 d0                	mov    %edx,%eax
f010a98f:	01 d8                	add    %ebx,%eax
f010a991:	89 c3                	mov    %eax,%ebx
f010a993:	83 ec 0c             	sub    $0xc,%esp
f010a996:	6a 08                	push   $0x8
f010a998:	e8 de 31 02 00       	call   f012db7b <nearest_pow2_ceil>
f010a99d:	83 c4 10             	add    $0x10,%esp
f010a9a0:	f7 d8                	neg    %eax
f010a9a2:	21 d8                	and    %ebx,%eax
f010a9a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a9a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9ab:	7f 1b                	jg     f010a9c8 <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a9ad:	83 ec 0c             	sub    $0xc,%esp
f010a9b0:	6a 08                	push   $0x8
f010a9b2:	e8 f9 31 02 00       	call   f012dbb0 <log2_ceil>
f010a9b7:	83 c4 10             	add    $0x10,%esp
f010a9ba:	ba 01 00 00 00       	mov    $0x1,%edx
f010a9bf:	88 c1                	mov    %al,%cl
f010a9c1:	d3 e2                	shl    %cl,%edx
f010a9c3:	89 d0                	mov    %edx,%eax
f010a9c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a9c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9cb:	8b 15 50 32 25 f0    	mov    0xf0253250,%edx
f010a9d1:	29 d0                	sub    %edx,%eax
f010a9d3:	c1 f8 05             	sar    $0x5,%eax
f010a9d6:	89 c2                	mov    %eax,%edx
f010a9d8:	89 d0                	mov    %edx,%eax
f010a9da:	c1 e0 03             	shl    $0x3,%eax
f010a9dd:	01 d0                	add    %edx,%eax
f010a9df:	01 c0                	add    %eax,%eax
f010a9e1:	01 d0                	add    %edx,%eax
f010a9e3:	c1 e0 06             	shl    $0x6,%eax
f010a9e6:	01 d0                	add    %edx,%eax
f010a9e8:	89 c1                	mov    %eax,%ecx
f010a9ea:	c1 e1 04             	shl    $0x4,%ecx
f010a9ed:	01 c8                	add    %ecx,%eax
f010a9ef:	c1 e0 03             	shl    $0x3,%eax
f010a9f2:	01 d0                	add    %edx,%eax
f010a9f4:	01 c0                	add    %eax,%eax
f010a9f6:	01 d0                	add    %edx,%eax
f010a9f8:	89 c1                	mov    %eax,%ecx
f010a9fa:	c1 e1 04             	shl    $0x4,%ecx
f010a9fd:	01 c8                	add    %ecx,%eax
f010a9ff:	c1 e0 03             	shl    $0x3,%eax
f010aa02:	01 d0                	add    %edx,%eax
f010aa04:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010aa0b:	01 d0                	add    %edx,%eax
f010aa0d:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aa10:	89 c2                	mov    %eax,%edx
f010aa12:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa15:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aa18:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010aa1d:	85 c0                	test   %eax,%eax
f010aa1f:	75 0c                	jne    f010aa2d <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010aa21:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa24:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aa2b:	eb 0e                	jmp    f010aa3b <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aa2d:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010aa32:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa35:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa38:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3e:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa45:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa48:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aa4f:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa52:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa55:	83 ec 04             	sub    $0x4,%esp
f010aa58:	6a 44                	push   $0x44
f010aa5a:	6a 00                	push   $0x0
f010aa5c:	50                   	push   %eax
f010aa5d:	e8 7c 45 02 00       	call   f012efde <memset>
f010aa62:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa65:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa68:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa71:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa77:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7a:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa80:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa83:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa8a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8d:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa93:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa96:	8b 40 38             	mov    0x38(%eax),%eax
f010aa99:	80 cc 02             	or     $0x2,%ah
f010aa9c:	89 c2                	mov    %eax,%edx
f010aa9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa1:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aaa4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aaa8:	75 17                	jne    f010aac1 <complete_environment_initialization+0x1c5>
f010aaaa:	83 ec 04             	sub    $0x4,%esp
f010aaad:	68 99 29 13 f0       	push   $0xf0132999
f010aab2:	68 b1 03 00 00       	push   $0x3b1
f010aab7:	68 37 29 13 f0       	push   $0xf0132937
f010aabc:	e8 ef 56 ff ff       	call   f01001b0 <_panic>
f010aac1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac4:	8b 40 44             	mov    0x44(%eax),%eax
f010aac7:	85 c0                	test   %eax,%eax
f010aac9:	74 11                	je     f010aadc <complete_environment_initialization+0x1e0>
f010aacb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aace:	8b 40 44             	mov    0x44(%eax),%eax
f010aad1:	8b 55 08             	mov    0x8(%ebp),%edx
f010aad4:	8b 52 48             	mov    0x48(%edx),%edx
f010aad7:	89 50 48             	mov    %edx,0x48(%eax)
f010aada:	eb 0b                	jmp    f010aae7 <complete_environment_initialization+0x1eb>
f010aadc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadf:	8b 40 48             	mov    0x48(%eax),%eax
f010aae2:	a3 5c 32 25 f0       	mov    %eax,0xf025325c
f010aae7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaea:	8b 40 48             	mov    0x48(%eax),%eax
f010aaed:	85 c0                	test   %eax,%eax
f010aaef:	74 11                	je     f010ab02 <complete_environment_initialization+0x206>
f010aaf1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf4:	8b 40 48             	mov    0x48(%eax),%eax
f010aaf7:	8b 55 08             	mov    0x8(%ebp),%edx
f010aafa:	8b 52 44             	mov    0x44(%edx),%edx
f010aafd:	89 50 44             	mov    %edx,0x44(%eax)
f010ab00:	eb 0b                	jmp    f010ab0d <complete_environment_initialization+0x211>
f010ab02:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab05:	8b 40 44             	mov    0x44(%eax),%eax
f010ab08:	a3 58 32 25 f0       	mov    %eax,0xf0253258
f010ab0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab10:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ab17:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab1a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ab21:	a1 64 32 25 f0       	mov    0xf0253264,%eax
f010ab26:	48                   	dec    %eax
f010ab27:	a3 64 32 25 f0       	mov    %eax,0xf0253264
	return ;
f010ab2c:	90                   	nop
}
f010ab2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ab30:	c9                   	leave  
f010ab31:	c3                   	ret    

f010ab32 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab32:	55                   	push   %ebp
f010ab33:	89 e5                	mov    %esp,%ebp
f010ab35:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab38:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab41:	8b 00                	mov    (%eax),%eax
f010ab43:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab48:	74 17                	je     f010ab61 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab4a:	83 ec 04             	sub    $0x4,%esp
f010ab4d:	68 c0 2a 13 f0       	push   $0xf0132ac0
f010ab52:	68 bd 03 00 00       	push   $0x3bd
f010ab57:	68 37 29 13 f0       	push   $0xf0132937
f010ab5c:	e8 4f 56 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab64:	8b 40 18             	mov    0x18(%eax),%eax
f010ab67:	89 c2                	mov    %eax,%edx
f010ab69:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab6c:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab6f:	90                   	nop
f010ab70:	c9                   	leave  
f010ab71:	c3                   	ret    

f010ab72 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ab72:	55                   	push   %ebp
f010ab73:	89 e5                	mov    %esp,%ebp
f010ab75:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ab78:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7b:	8b 40 10             	mov    0x10(%eax),%eax
f010ab7e:	8d 48 01             	lea    0x1(%eax),%ecx
f010ab81:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab84:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ab87:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab93:	8b 00                	mov    (%eax),%eax
f010ab95:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab9a:	74 17                	je     f010abb3 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ab9c:	83 ec 04             	sub    $0x4,%esp
f010ab9f:	68 c0 2a 13 f0       	push   $0xf0132ac0
f010aba4:	68 cc 03 00 00       	push   $0x3cc
f010aba9:	68 37 29 13 f0       	push   $0xf0132937
f010abae:	e8 fd 55 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010abb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abb6:	8b 50 1c             	mov    0x1c(%eax),%edx
f010abb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abbc:	01 d0                	add    %edx,%eax
f010abbe:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010abc1:	eb 0f                	jmp    f010abd2 <PROGRAM_SEGMENT_NEXT+0x60>
f010abc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010abc6:	8b 40 10             	mov    0x10(%eax),%eax
f010abc9:	8d 50 01             	lea    0x1(%eax),%edx
f010abcc:	8b 45 08             	mov    0x8(%ebp),%eax
f010abcf:	89 50 10             	mov    %edx,0x10(%eax)
f010abd2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abd5:	8b 40 10             	mov    0x10(%eax),%eax
f010abd8:	c1 e0 05             	shl    $0x5,%eax
f010abdb:	89 c2                	mov    %eax,%edx
f010abdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abe0:	01 d0                	add    %edx,%eax
f010abe2:	8b 00                	mov    (%eax),%eax
f010abe4:	83 f8 01             	cmp    $0x1,%eax
f010abe7:	74 13                	je     f010abfc <PROGRAM_SEGMENT_NEXT+0x8a>
f010abe9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abec:	8b 50 10             	mov    0x10(%eax),%edx
f010abef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abf2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abf5:	0f b7 c0             	movzwl %ax,%eax
f010abf8:	39 c2                	cmp    %eax,%edx
f010abfa:	72 c7                	jb     f010abc3 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010abfc:	8b 45 08             	mov    0x8(%ebp),%eax
f010abff:	8b 40 10             	mov    0x10(%eax),%eax
f010ac02:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ac05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac08:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac0b:	0f b7 c0             	movzwl %ax,%eax
f010ac0e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac11:	7e 63                	jle    f010ac76 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac16:	c1 e0 05             	shl    $0x5,%eax
f010ac19:	89 c2                	mov    %eax,%edx
f010ac1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac1e:	01 d0                	add    %edx,%eax
f010ac20:	8b 50 04             	mov    0x4(%eax),%edx
f010ac23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac26:	01 c2                	add    %eax,%edx
f010ac28:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2b:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ac2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac30:	c1 e0 05             	shl    $0x5,%eax
f010ac33:	89 c2                	mov    %eax,%edx
f010ac35:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac38:	01 d0                	add    %edx,%eax
f010ac3a:	8b 50 14             	mov    0x14(%eax),%edx
f010ac3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac40:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ac43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac46:	c1 e0 05             	shl    $0x5,%eax
f010ac49:	89 c2                	mov    %eax,%edx
f010ac4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac4e:	01 d0                	add    %edx,%eax
f010ac50:	8b 50 10             	mov    0x10(%eax),%edx
f010ac53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac56:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ac59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac5c:	c1 e0 05             	shl    $0x5,%eax
f010ac5f:	89 c2                	mov    %eax,%edx
f010ac61:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac64:	01 d0                	add    %edx,%eax
f010ac66:	8b 40 08             	mov    0x8(%eax),%eax
f010ac69:	89 c2                	mov    %eax,%edx
f010ac6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6e:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ac71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac74:	eb 05                	jmp    f010ac7b <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ac76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac7b:	c9                   	leave  
f010ac7c:	c3                   	ret    

f010ac7d <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ac7d:	55                   	push   %ebp
f010ac7e:	89 e5                	mov    %esp,%ebp
f010ac80:	57                   	push   %edi
f010ac81:	56                   	push   %esi
f010ac82:	53                   	push   %ebx
f010ac83:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ac86:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac96:	8b 00                	mov    (%eax),%eax
f010ac98:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ac9d:	74 17                	je     f010acb6 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ac9f:	83 ec 04             	sub    $0x4,%esp
f010aca2:	68 c0 2a 13 f0       	push   $0xf0132ac0
f010aca7:	68 e8 03 00 00       	push   $0x3e8
f010acac:	68 37 29 13 f0       	push   $0xf0132937
f010acb1:	e8 fa 54 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acb9:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acbf:	01 d0                	add    %edx,%eax
f010acc1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010acc4:	eb 07                	jmp    f010accd <PROGRAM_SEGMENT_FIRST+0x50>
f010acc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acc9:	40                   	inc    %eax
f010acca:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010accd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acd0:	c1 e0 05             	shl    $0x5,%eax
f010acd3:	89 c2                	mov    %eax,%edx
f010acd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acd8:	01 d0                	add    %edx,%eax
f010acda:	8b 00                	mov    (%eax),%eax
f010acdc:	83 f8 01             	cmp    $0x1,%eax
f010acdf:	74 10                	je     f010acf1 <PROGRAM_SEGMENT_FIRST+0x74>
f010ace1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ace4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ace7:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acea:	0f b7 c0             	movzwl %ax,%eax
f010aced:	39 c2                	cmp    %eax,%edx
f010acef:	72 d5                	jb     f010acc6 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010acf1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acf4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010acf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acfa:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acfd:	0f b7 c0             	movzwl %ax,%eax
f010ad00:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ad03:	7e 68                	jle    f010ad6d <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad08:	c1 e0 05             	shl    $0x5,%eax
f010ad0b:	89 c2                	mov    %eax,%edx
f010ad0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad10:	01 d0                	add    %edx,%eax
f010ad12:	8b 50 04             	mov    0x4(%eax),%edx
f010ad15:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad18:	01 d0                	add    %edx,%eax
f010ad1a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ad1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad20:	c1 e0 05             	shl    $0x5,%eax
f010ad23:	89 c2                	mov    %eax,%edx
f010ad25:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad28:	01 d0                	add    %edx,%eax
f010ad2a:	8b 40 14             	mov    0x14(%eax),%eax
f010ad2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ad30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad33:	c1 e0 05             	shl    $0x5,%eax
f010ad36:	89 c2                	mov    %eax,%edx
f010ad38:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad3b:	01 d0                	add    %edx,%eax
f010ad3d:	8b 40 10             	mov    0x10(%eax),%eax
f010ad40:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ad43:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad46:	c1 e0 05             	shl    $0x5,%eax
f010ad49:	89 c2                	mov    %eax,%edx
f010ad4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad4e:	01 d0                	add    %edx,%eax
f010ad50:	8b 40 08             	mov    0x8(%eax),%eax
f010ad53:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ad56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad59:	89 c3                	mov    %eax,%ebx
f010ad5b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad5e:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad63:	89 df                	mov    %ebx,%edi
f010ad65:	89 c6                	mov    %eax,%esi
f010ad67:	89 d1                	mov    %edx,%ecx
f010ad69:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ad6b:	eb 1c                	jmp    f010ad89 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ad6d:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ad74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad77:	89 c3                	mov    %eax,%ebx
f010ad79:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad7c:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad81:	89 df                	mov    %ebx,%edi
f010ad83:	89 c6                	mov    %eax,%esi
f010ad85:	89 d1                	mov    %edx,%ecx
f010ad87:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ad89:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ad8f:	5b                   	pop    %ebx
f010ad90:	5e                   	pop    %esi
f010ad91:	5f                   	pop    %edi
f010ad92:	5d                   	pop    %ebp
f010ad93:	c2 04 00             	ret    $0x4

f010ad96 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010ad96:	55                   	push   %ebp
f010ad97:	89 e5                	mov    %esp,%ebp
f010ad99:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ad9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ada3:	a1 20 3b 25 f0       	mov    0xf0253b20,%eax
f010ada8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010adab:	e9 c6 00 00 00       	jmp    f010ae76 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010adb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adb3:	8b 40 10             	mov    0x10(%eax),%eax
f010adb6:	3b 45 08             	cmp    0x8(%ebp),%eax
f010adb9:	0f 85 af 00 00 00    	jne    f010ae6e <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010adbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adc2:	8b 50 0c             	mov    0xc(%eax),%edx
f010adc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adc8:	8b 40 10             	mov    0x10(%eax),%eax
f010adcb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010add1:	83 ec 08             	sub    $0x8,%esp
f010add4:	52                   	push   %edx
f010add5:	50                   	push   %eax
f010add6:	e8 33 d3 ff ff       	call   f010810e <pt_clear_page_table_entry>
f010addb:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010adde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ade2:	75 17                	jne    f010adfb <cleanup_buffers+0x65>
f010ade4:	83 ec 04             	sub    $0x4,%esp
f010ade7:	68 99 29 13 f0       	push   $0xf0132999
f010adec:	68 0f 04 00 00       	push   $0x40f
f010adf1:	68 37 29 13 f0       	push   $0xf0132937
f010adf6:	e8 b5 53 ff ff       	call   f01001b0 <_panic>
f010adfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adfe:	8b 00                	mov    (%eax),%eax
f010ae00:	85 c0                	test   %eax,%eax
f010ae02:	74 10                	je     f010ae14 <cleanup_buffers+0x7e>
f010ae04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae07:	8b 00                	mov    (%eax),%eax
f010ae09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae0c:	8b 52 04             	mov    0x4(%edx),%edx
f010ae0f:	89 50 04             	mov    %edx,0x4(%eax)
f010ae12:	eb 0b                	jmp    f010ae1f <cleanup_buffers+0x89>
f010ae14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae17:	8b 40 04             	mov    0x4(%eax),%eax
f010ae1a:	a3 24 3b 25 f0       	mov    %eax,0xf0253b24
f010ae1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae22:	8b 40 04             	mov    0x4(%eax),%eax
f010ae25:	85 c0                	test   %eax,%eax
f010ae27:	74 0f                	je     f010ae38 <cleanup_buffers+0xa2>
f010ae29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae2c:	8b 40 04             	mov    0x4(%eax),%eax
f010ae2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae32:	8b 12                	mov    (%edx),%edx
f010ae34:	89 10                	mov    %edx,(%eax)
f010ae36:	eb 0a                	jmp    f010ae42 <cleanup_buffers+0xac>
f010ae38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae3b:	8b 00                	mov    (%eax),%eax
f010ae3d:	a3 20 3b 25 f0       	mov    %eax,0xf0253b20
f010ae42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ae4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae4e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ae55:	a1 2c 3b 25 f0       	mov    0xf0253b2c,%eax
f010ae5a:	48                   	dec    %eax
f010ae5b:	a3 2c 3b 25 f0       	mov    %eax,0xf0253b2c

			free_frame(ptr_fi);
f010ae60:	83 ec 0c             	sub    $0xc,%esp
f010ae63:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae66:	e8 b4 c5 ff ff       	call   f010741f <free_frame>
f010ae6b:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae6e:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f010ae73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae7a:	74 07                	je     f010ae83 <cleanup_buffers+0xed>
f010ae7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae7f:	8b 00                	mov    (%eax),%eax
f010ae81:	eb 05                	jmp    f010ae88 <cleanup_buffers+0xf2>
f010ae83:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae88:	a3 28 3b 25 f0       	mov    %eax,0xf0253b28
f010ae8d:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f010ae92:	85 c0                	test   %eax,%eax
f010ae94:	0f 85 16 ff ff ff    	jne    f010adb0 <cleanup_buffers+0x1a>
f010ae9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae9e:	0f 85 0c ff ff ff    	jne    f010adb0 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010aea4:	90                   	nop
f010aea5:	c9                   	leave  
f010aea6:	c3                   	ret    

f010aea7 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010aea7:	55                   	push   %ebp
f010aea8:	89 e5                	mov    %esp,%ebp
f010aeaa:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010aead:	83 ec 04             	sub    $0x4,%esp
f010aeb0:	68 d6 2a 13 f0       	push   $0xf0132ad6
f010aeb5:	6a 0b                	push   $0xb
f010aeb7:	68 e6 2a 13 f0       	push   $0xf0132ae6
f010aebc:	e8 ef 52 ff ff       	call   f01001b0 <_panic>

f010aec1 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010aec1:	55                   	push   %ebp
f010aec2:	89 e5                	mov    %esp,%ebp
f010aec4:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aece:	eb 29                	jmp    f010aef9 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010aed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aed3:	89 d0                	mov    %edx,%eax
f010aed5:	01 c0                	add    %eax,%eax
f010aed7:	01 d0                	add    %edx,%eax
f010aed9:	c1 e0 02             	shl    $0x2,%eax
f010aedc:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
f010aee1:	8b 00                	mov    (%eax),%eax
f010aee3:	83 ec 08             	sub    $0x8,%esp
f010aee6:	50                   	push   %eax
f010aee7:	ff 75 08             	pushl  0x8(%ebp)
f010aeea:	e8 0d 40 02 00       	call   f012eefc <strcmp>
f010aeef:	83 c4 10             	add    $0x10,%esp
f010aef2:	85 c0                	test   %eax,%eax
f010aef4:	74 0f                	je     f010af05 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aef6:	ff 45 f4             	incl   -0xc(%ebp)
f010aef9:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010aefe:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af01:	7c cd                	jl     f010aed0 <get_user_program_info+0xf>
f010af03:	eb 01                	jmp    f010af06 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010af05:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af06:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010af0b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af0e:	75 1a                	jne    f010af2a <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010af10:	83 ec 08             	sub    $0x8,%esp
f010af13:	ff 75 08             	pushl  0x8(%ebp)
f010af16:	68 72 2c 13 f0       	push   $0xf0132c72
f010af1b:	e8 11 5f ff ff       	call   f0100e31 <cprintf>
f010af20:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af23:	b8 00 00 00 00       	mov    $0x0,%eax
f010af28:	eb 11                	jmp    f010af3b <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010af2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af2d:	89 d0                	mov    %edx,%eax
f010af2f:	01 c0                	add    %eax,%eax
f010af31:	01 d0                	add    %edx,%eax
f010af33:	c1 e0 02             	shl    $0x2,%eax
f010af36:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
}
f010af3b:	c9                   	leave  
f010af3c:	c3                   	ret    

f010af3d <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010af3d:	55                   	push   %ebp
f010af3e:	89 e5                	mov    %esp,%ebp
f010af40:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af4a:	eb 2d                	jmp    f010af79 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010af4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af4f:	89 d0                	mov    %edx,%eax
f010af51:	01 c0                	add    %eax,%eax
f010af53:	01 d0                	add    %edx,%eax
f010af55:	c1 e0 02             	shl    $0x2,%eax
f010af58:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
f010af5d:	8b 00                	mov    (%eax),%eax
f010af5f:	8b 55 08             	mov    0x8(%ebp),%edx
f010af62:	83 c2 5c             	add    $0x5c,%edx
f010af65:	83 ec 08             	sub    $0x8,%esp
f010af68:	50                   	push   %eax
f010af69:	52                   	push   %edx
f010af6a:	e8 8d 3f 02 00       	call   f012eefc <strcmp>
f010af6f:	83 c4 10             	add    $0x10,%esp
f010af72:	85 c0                	test   %eax,%eax
f010af74:	74 0f                	je     f010af85 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af76:	ff 45 f4             	incl   -0xc(%ebp)
f010af79:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010af7e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af81:	7c c9                	jl     f010af4c <get_user_program_info_by_env+0xf>
f010af83:	eb 01                	jmp    f010af86 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010af85:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af86:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010af8b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af8e:	75 17                	jne    f010afa7 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010af90:	83 ec 0c             	sub    $0xc,%esp
f010af93:	68 8d 2c 13 f0       	push   $0xf0132c8d
f010af98:	e8 94 5e ff ff       	call   f0100e31 <cprintf>
f010af9d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afa0:	b8 00 00 00 00       	mov    $0x0,%eax
f010afa5:	eb 11                	jmp    f010afb8 <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010afa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afaa:	89 d0                	mov    %edx,%eax
f010afac:	01 c0                	add    %eax,%eax
f010afae:	01 d0                	add    %edx,%eax
f010afb0:	c1 e0 02             	shl    $0x2,%eax
f010afb3:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
}
f010afb8:	c9                   	leave  
f010afb9:	c3                   	ret    

f010afba <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010afba:	55                   	push   %ebp
f010afbb:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010afbd:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc0:	83 f8 13             	cmp    $0x13,%eax
f010afc3:	77 0c                	ja     f010afd1 <trapname+0x17>
		return excnames[trapno];
f010afc5:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc8:	8b 04 85 e0 30 13 f0 	mov    -0xfeccf20(,%eax,4),%eax
f010afcf:	eb 12                	jmp    f010afe3 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010afd1:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010afd5:	75 07                	jne    f010afde <trapname+0x24>
		return "System call";
f010afd7:	b8 c0 2c 13 f0       	mov    $0xf0132cc0,%eax
f010afdc:	eb 05                	jmp    f010afe3 <trapname+0x29>
	return "(unknown trap)";
f010afde:	b8 cc 2c 13 f0       	mov    $0xf0132ccc,%eax
}
f010afe3:	5d                   	pop    %ebp
f010afe4:	c3                   	ret    

f010afe5 <idt_init>:


void
idt_init(void)
{
f010afe5:	55                   	push   %ebp
f010afe6:	89 e5                	mov    %esp,%ebp
f010afe8:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010afeb:	b8 80 c6 10 f0       	mov    $0xf010c680,%eax
f010aff0:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010aff6:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010affd:	08 00 
f010afff:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b004:	83 e0 e0             	and    $0xffffffe0,%eax
f010b007:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b00c:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b011:	83 e0 1f             	and    $0x1f,%eax
f010b014:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b019:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b01e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b021:	83 c8 0e             	or     $0xe,%eax
f010b024:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b029:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b02e:	83 e0 ef             	and    $0xffffffef,%eax
f010b031:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b036:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b03b:	83 e0 9f             	and    $0xffffff9f,%eax
f010b03e:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b043:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b048:	83 c8 80             	or     $0xffffff80,%eax
f010b04b:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b050:	b8 80 c6 10 f0       	mov    $0xf010c680,%eax
f010b055:	c1 e8 10             	shr    $0x10,%eax
f010b058:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b05e:	b8 88 c6 10 f0       	mov    $0xf010c688,%eax
f010b063:	66 a3 00 34 25 f0    	mov    %ax,0xf0253400
f010b069:	66 c7 05 02 34 25 f0 	movw   $0x8,0xf0253402
f010b070:	08 00 
f010b072:	a0 04 34 25 f0       	mov    0xf0253404,%al
f010b077:	83 e0 e0             	and    $0xffffffe0,%eax
f010b07a:	a2 04 34 25 f0       	mov    %al,0xf0253404
f010b07f:	a0 04 34 25 f0       	mov    0xf0253404,%al
f010b084:	83 e0 1f             	and    $0x1f,%eax
f010b087:	a2 04 34 25 f0       	mov    %al,0xf0253404
f010b08c:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b091:	83 e0 f0             	and    $0xfffffff0,%eax
f010b094:	83 c8 0e             	or     $0xe,%eax
f010b097:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b09c:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0a1:	83 e0 ef             	and    $0xffffffef,%eax
f010b0a4:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0a9:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0ae:	83 c8 60             	or     $0x60,%eax
f010b0b1:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0b6:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0bb:	83 c8 80             	or     $0xffffff80,%eax
f010b0be:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0c3:	b8 88 c6 10 f0       	mov    $0xf010c688,%eax
f010b0c8:	c1 e8 10             	shr    $0x10,%eax
f010b0cb:	66 a3 06 34 25 f0    	mov    %ax,0xf0253406
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b0d1:	b8 92 c6 10 f0       	mov    $0xf010c692,%eax
f010b0d6:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010b0dc:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010b0e3:	08 00 
f010b0e5:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b0ea:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0ed:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b0f2:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b0f7:	83 e0 1f             	and    $0x1f,%eax
f010b0fa:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b0ff:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b104:	83 e0 f0             	and    $0xfffffff0,%eax
f010b107:	83 c8 0e             	or     $0xe,%eax
f010b10a:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b10f:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b114:	83 e0 ef             	and    $0xffffffef,%eax
f010b117:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b11c:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b121:	83 e0 9f             	and    $0xffffff9f,%eax
f010b124:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b129:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b12e:	83 c8 80             	or     $0xffffff80,%eax
f010b131:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b136:	b8 92 c6 10 f0       	mov    $0xf010c692,%eax
f010b13b:	c1 e8 10             	shr    $0x10,%eax
f010b13e:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b144:	b8 9a c6 10 f0       	mov    $0xf010c69a,%eax
f010b149:	66 a3 80 32 25 f0    	mov    %ax,0xf0253280
f010b14f:	66 c7 05 82 32 25 f0 	movw   $0x8,0xf0253282
f010b156:	08 00 
f010b158:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010b15d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b160:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010b165:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010b16a:	83 e0 1f             	and    $0x1f,%eax
f010b16d:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010b172:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b177:	83 e0 f0             	and    $0xfffffff0,%eax
f010b17a:	83 c8 0e             	or     $0xe,%eax
f010b17d:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b182:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b187:	83 e0 ef             	and    $0xffffffef,%eax
f010b18a:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b18f:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b194:	83 c8 60             	or     $0x60,%eax
f010b197:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b19c:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b1a1:	83 c8 80             	or     $0xffffff80,%eax
f010b1a4:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b1a9:	b8 9a c6 10 f0       	mov    $0xf010c69a,%eax
f010b1ae:	c1 e8 10             	shr    $0x10,%eax
f010b1b1:	66 a3 86 32 25 f0    	mov    %ax,0xf0253286
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b1b7:	b8 a4 c6 10 f0       	mov    $0xf010c6a4,%eax
f010b1bc:	66 a3 88 32 25 f0    	mov    %ax,0xf0253288
f010b1c2:	66 c7 05 8a 32 25 f0 	movw   $0x8,0xf025328a
f010b1c9:	08 00 
f010b1cb:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010b1d0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1d3:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010b1d8:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010b1dd:	83 e0 1f             	and    $0x1f,%eax
f010b1e0:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010b1e5:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b1ea:	83 c8 0f             	or     $0xf,%eax
f010b1ed:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b1f2:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b1f7:	83 e0 ef             	and    $0xffffffef,%eax
f010b1fa:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b1ff:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b204:	83 c8 60             	or     $0x60,%eax
f010b207:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b20c:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b211:	83 c8 80             	or     $0xffffff80,%eax
f010b214:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b219:	b8 a4 c6 10 f0       	mov    $0xf010c6a4,%eax
f010b21e:	c1 e8 10             	shr    $0x10,%eax
f010b221:	66 a3 8e 32 25 f0    	mov    %ax,0xf025328e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b227:	b8 ae c6 10 f0       	mov    $0xf010c6ae,%eax
f010b22c:	66 a3 90 32 25 f0    	mov    %ax,0xf0253290
f010b232:	66 c7 05 92 32 25 f0 	movw   $0x8,0xf0253292
f010b239:	08 00 
f010b23b:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b240:	83 e0 e0             	and    $0xffffffe0,%eax
f010b243:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b248:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b24d:	83 e0 1f             	and    $0x1f,%eax
f010b250:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b255:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b25a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b25d:	83 c8 0e             	or     $0xe,%eax
f010b260:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b265:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b26a:	83 e0 ef             	and    $0xffffffef,%eax
f010b26d:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b272:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b277:	83 c8 60             	or     $0x60,%eax
f010b27a:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b27f:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b284:	83 c8 80             	or     $0xffffff80,%eax
f010b287:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b28c:	b8 ae c6 10 f0       	mov    $0xf010c6ae,%eax
f010b291:	c1 e8 10             	shr    $0x10,%eax
f010b294:	66 a3 96 32 25 f0    	mov    %ax,0xf0253296
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b29a:	b8 b8 c6 10 f0       	mov    $0xf010c6b8,%eax
f010b29f:	66 a3 98 32 25 f0    	mov    %ax,0xf0253298
f010b2a5:	66 c7 05 9a 32 25 f0 	movw   $0x8,0xf025329a
f010b2ac:	08 00 
f010b2ae:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b2b3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2b6:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b2bb:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b2c0:	83 e0 1f             	and    $0x1f,%eax
f010b2c3:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b2c8:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b2cd:	83 c8 0f             	or     $0xf,%eax
f010b2d0:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b2d5:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b2da:	83 e0 ef             	and    $0xffffffef,%eax
f010b2dd:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b2e2:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b2e7:	83 c8 60             	or     $0x60,%eax
f010b2ea:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b2ef:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b2f4:	83 c8 80             	or     $0xffffff80,%eax
f010b2f7:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b2fc:	b8 b8 c6 10 f0       	mov    $0xf010c6b8,%eax
f010b301:	c1 e8 10             	shr    $0x10,%eax
f010b304:	66 a3 9e 32 25 f0    	mov    %ax,0xf025329e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b30a:	b8 c2 c6 10 f0       	mov    $0xf010c6c2,%eax
f010b30f:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010b315:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010b31c:	08 00 
f010b31e:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b323:	83 e0 e0             	and    $0xffffffe0,%eax
f010b326:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b32b:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b330:	83 e0 1f             	and    $0x1f,%eax
f010b333:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b338:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b33d:	83 c8 0f             	or     $0xf,%eax
f010b340:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b345:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b34a:	83 e0 ef             	and    $0xffffffef,%eax
f010b34d:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b352:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b357:	83 c8 60             	or     $0x60,%eax
f010b35a:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b35f:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b364:	83 c8 80             	or     $0xffffff80,%eax
f010b367:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b36c:	b8 c2 c6 10 f0       	mov    $0xf010c6c2,%eax
f010b371:	c1 e8 10             	shr    $0x10,%eax
f010b374:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b37a:	b8 cc c6 10 f0       	mov    $0xf010c6cc,%eax
f010b37f:	66 a3 a8 32 25 f0    	mov    %ax,0xf02532a8
f010b385:	66 c7 05 aa 32 25 f0 	movw   $0x8,0xf02532aa
f010b38c:	08 00 
f010b38e:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b393:	83 e0 e0             	and    $0xffffffe0,%eax
f010b396:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b39b:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b3a0:	83 e0 1f             	and    $0x1f,%eax
f010b3a3:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b3a8:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3ad:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3b0:	83 c8 0e             	or     $0xe,%eax
f010b3b3:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3b8:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3bd:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c0:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3c5:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3ca:	83 c8 60             	or     $0x60,%eax
f010b3cd:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3d2:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3d7:	83 c8 80             	or     $0xffffff80,%eax
f010b3da:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3df:	b8 cc c6 10 f0       	mov    $0xf010c6cc,%eax
f010b3e4:	c1 e8 10             	shr    $0x10,%eax
f010b3e7:	66 a3 ae 32 25 f0    	mov    %ax,0xf02532ae
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b3ed:	b8 d6 c6 10 f0       	mov    $0xf010c6d6,%eax
f010b3f2:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b3f8:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010b3ff:	08 00 
f010b401:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b406:	83 e0 e0             	and    $0xffffffe0,%eax
f010b409:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b40e:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b413:	83 e0 1f             	and    $0x1f,%eax
f010b416:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b41b:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b420:	83 e0 f0             	and    $0xfffffff0,%eax
f010b423:	83 c8 0e             	or     $0xe,%eax
f010b426:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b42b:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b430:	83 e0 ef             	and    $0xffffffef,%eax
f010b433:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b438:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b43d:	83 c8 60             	or     $0x60,%eax
f010b440:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b445:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b44a:	83 c8 80             	or     $0xffffff80,%eax
f010b44d:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b452:	b8 d6 c6 10 f0       	mov    $0xf010c6d6,%eax
f010b457:	c1 e8 10             	shr    $0x10,%eax
f010b45a:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b460:	b8 e0 c6 10 f0       	mov    $0xf010c6e0,%eax
f010b465:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010b46b:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010b472:	08 00 
f010b474:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b479:	83 e0 e0             	and    $0xffffffe0,%eax
f010b47c:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b481:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b486:	83 e0 1f             	and    $0x1f,%eax
f010b489:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b48e:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b493:	83 e0 f0             	and    $0xfffffff0,%eax
f010b496:	83 c8 0e             	or     $0xe,%eax
f010b499:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b49e:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4a3:	83 e0 ef             	and    $0xffffffef,%eax
f010b4a6:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4ab:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4b0:	83 c8 60             	or     $0x60,%eax
f010b4b3:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4b8:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4bd:	83 c8 80             	or     $0xffffff80,%eax
f010b4c0:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4c5:	b8 e0 c6 10 f0       	mov    $0xf010c6e0,%eax
f010b4ca:	c1 e8 10             	shr    $0x10,%eax
f010b4cd:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b4d3:	b8 ea c6 10 f0       	mov    $0xf010c6ea,%eax
f010b4d8:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010b4de:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010b4e5:	08 00 
f010b4e7:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010b4ec:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4ef:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010b4f4:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010b4f9:	83 e0 1f             	and    $0x1f,%eax
f010b4fc:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010b501:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b506:	83 e0 f0             	and    $0xfffffff0,%eax
f010b509:	83 c8 0e             	or     $0xe,%eax
f010b50c:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b511:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b516:	83 e0 ef             	and    $0xffffffef,%eax
f010b519:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b51e:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b523:	83 c8 60             	or     $0x60,%eax
f010b526:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b52b:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b530:	83 c8 80             	or     $0xffffff80,%eax
f010b533:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b538:	b8 ea c6 10 f0       	mov    $0xf010c6ea,%eax
f010b53d:	c1 e8 10             	shr    $0x10,%eax
f010b540:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b546:	b8 f2 c6 10 f0       	mov    $0xf010c6f2,%eax
f010b54b:	66 a3 d8 32 25 f0    	mov    %ax,0xf02532d8
f010b551:	66 c7 05 da 32 25 f0 	movw   $0x8,0xf02532da
f010b558:	08 00 
f010b55a:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010b55f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b562:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010b567:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010b56c:	83 e0 1f             	and    $0x1f,%eax
f010b56f:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010b574:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b579:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57c:	83 c8 0e             	or     $0xe,%eax
f010b57f:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b584:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b589:	83 e0 ef             	and    $0xffffffef,%eax
f010b58c:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b591:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b596:	83 c8 60             	or     $0x60,%eax
f010b599:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b59e:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b5a3:	83 c8 80             	or     $0xffffff80,%eax
f010b5a6:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b5ab:	b8 f2 c6 10 f0       	mov    $0xf010c6f2,%eax
f010b5b0:	c1 e8 10             	shr    $0x10,%eax
f010b5b3:	66 a3 de 32 25 f0    	mov    %ax,0xf02532de
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b5b9:	b8 f6 c6 10 f0       	mov    $0xf010c6f6,%eax
f010b5be:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010b5c4:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010b5cb:	08 00 
f010b5cd:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b5d2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d5:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b5da:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b5df:	83 e0 1f             	and    $0x1f,%eax
f010b5e2:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b5e7:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b5ec:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5ef:	83 c8 0e             	or     $0xe,%eax
f010b5f2:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b5f7:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b5fc:	83 e0 ef             	and    $0xffffffef,%eax
f010b5ff:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b604:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b609:	83 c8 60             	or     $0x60,%eax
f010b60c:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b611:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b616:	83 c8 80             	or     $0xffffff80,%eax
f010b619:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b61e:	b8 f6 c6 10 f0       	mov    $0xf010c6f6,%eax
f010b623:	c1 e8 10             	shr    $0x10,%eax
f010b626:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b62c:	b8 fa c6 10 f0       	mov    $0xf010c6fa,%eax
f010b631:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010b637:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010b63e:	08 00 
f010b640:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b645:	83 e0 e0             	and    $0xffffffe0,%eax
f010b648:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b64d:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b652:	83 e0 1f             	and    $0x1f,%eax
f010b655:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b65a:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b65f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b662:	83 c8 0e             	or     $0xe,%eax
f010b665:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b66a:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b66f:	83 e0 ef             	and    $0xffffffef,%eax
f010b672:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b677:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b67c:	83 c8 60             	or     $0x60,%eax
f010b67f:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b684:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b689:	83 c8 80             	or     $0xffffff80,%eax
f010b68c:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b691:	b8 fa c6 10 f0       	mov    $0xf010c6fa,%eax
f010b696:	c1 e8 10             	shr    $0x10,%eax
f010b699:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b69f:	b8 fe c6 10 f0       	mov    $0xf010c6fe,%eax
f010b6a4:	66 a3 00 33 25 f0    	mov    %ax,0xf0253300
f010b6aa:	66 c7 05 02 33 25 f0 	movw   $0x8,0xf0253302
f010b6b1:	08 00 
f010b6b3:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010b6b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6bb:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010b6c0:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010b6c5:	83 e0 1f             	and    $0x1f,%eax
f010b6c8:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010b6cd:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b6d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d5:	83 c8 0e             	or     $0xe,%eax
f010b6d8:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b6dd:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b6e2:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e5:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b6ea:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b6ef:	83 c8 60             	or     $0x60,%eax
f010b6f2:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b6f7:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b6fc:	83 c8 80             	or     $0xffffff80,%eax
f010b6ff:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b704:	b8 fe c6 10 f0       	mov    $0xf010c6fe,%eax
f010b709:	c1 e8 10             	shr    $0x10,%eax
f010b70c:	66 a3 06 33 25 f0    	mov    %ax,0xf0253306
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b712:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b717:	66 a3 08 33 25 f0    	mov    %ax,0xf0253308
f010b71d:	66 c7 05 0a 33 25 f0 	movw   $0x8,0xf025330a
f010b724:	08 00 
f010b726:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010b72b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b72e:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010b733:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010b738:	83 e0 1f             	and    $0x1f,%eax
f010b73b:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010b740:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b745:	83 e0 f0             	and    $0xfffffff0,%eax
f010b748:	83 c8 0e             	or     $0xe,%eax
f010b74b:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b750:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b755:	83 e0 ef             	and    $0xffffffef,%eax
f010b758:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b75d:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b762:	83 c8 60             	or     $0x60,%eax
f010b765:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b76a:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b76f:	83 c8 80             	or     $0xffffff80,%eax
f010b772:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b777:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b77c:	c1 e8 10             	shr    $0x10,%eax
f010b77f:	66 a3 0e 33 25 f0    	mov    %ax,0xf025330e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b785:	b8 08 c7 10 f0       	mov    $0xf010c708,%eax
f010b78a:	66 a3 10 33 25 f0    	mov    %ax,0xf0253310
f010b790:	66 c7 05 12 33 25 f0 	movw   $0x8,0xf0253312
f010b797:	08 00 
f010b799:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010b79e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a1:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010b7a6:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010b7ab:	83 e0 1f             	and    $0x1f,%eax
f010b7ae:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010b7b3:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7b8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7bb:	83 c8 0e             	or     $0xe,%eax
f010b7be:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7c3:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7c8:	83 e0 ef             	and    $0xffffffef,%eax
f010b7cb:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7d0:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7d5:	83 c8 60             	or     $0x60,%eax
f010b7d8:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7dd:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7e2:	83 c8 80             	or     $0xffffff80,%eax
f010b7e5:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7ea:	b8 08 c7 10 f0       	mov    $0xf010c708,%eax
f010b7ef:	c1 e8 10             	shr    $0x10,%eax
f010b7f2:	66 a3 16 33 25 f0    	mov    %ax,0xf0253316
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b7f8:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b7fd:	66 a3 18 33 25 f0    	mov    %ax,0xf0253318
f010b803:	66 c7 05 1a 33 25 f0 	movw   $0x8,0xf025331a
f010b80a:	08 00 
f010b80c:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010b811:	83 e0 e0             	and    $0xffffffe0,%eax
f010b814:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010b819:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010b81e:	83 e0 1f             	and    $0x1f,%eax
f010b821:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010b826:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b82b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b82e:	83 c8 0e             	or     $0xe,%eax
f010b831:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b836:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b83b:	83 e0 ef             	and    $0xffffffef,%eax
f010b83e:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b843:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b848:	83 c8 60             	or     $0x60,%eax
f010b84b:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b850:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b855:	83 c8 80             	or     $0xffffff80,%eax
f010b858:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b85d:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b862:	c1 e8 10             	shr    $0x10,%eax
f010b865:	66 a3 1e 33 25 f0    	mov    %ax,0xf025331e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b86b:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b870:	66 a3 80 33 25 f0    	mov    %ax,0xf0253380
f010b876:	66 c7 05 82 33 25 f0 	movw   $0x8,0xf0253382
f010b87d:	08 00 
f010b87f:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b884:	83 e0 e0             	and    $0xffffffe0,%eax
f010b887:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b88c:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b891:	83 e0 1f             	and    $0x1f,%eax
f010b894:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b899:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b89e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a1:	83 c8 0e             	or     $0xe,%eax
f010b8a4:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8a9:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8ae:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b1:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8b6:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8bb:	83 c8 60             	or     $0x60,%eax
f010b8be:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8c3:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8c8:	83 c8 80             	or     $0xffffff80,%eax
f010b8cb:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8d0:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b8d5:	c1 e8 10             	shr    $0x10,%eax
f010b8d8:	66 a3 86 33 25 f0    	mov    %ax,0xf0253386
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b8de:	b8 1a c7 10 f0       	mov    $0xf010c71a,%eax
f010b8e3:	66 a3 88 33 25 f0    	mov    %ax,0xf0253388
f010b8e9:	66 c7 05 8a 33 25 f0 	movw   $0x8,0xf025338a
f010b8f0:	08 00 
f010b8f2:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b8f7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8fa:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b8ff:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b904:	83 e0 1f             	and    $0x1f,%eax
f010b907:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b90c:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b911:	83 e0 f0             	and    $0xfffffff0,%eax
f010b914:	83 c8 0e             	or     $0xe,%eax
f010b917:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b91c:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b921:	83 e0 ef             	and    $0xffffffef,%eax
f010b924:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b929:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b92e:	83 c8 60             	or     $0x60,%eax
f010b931:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b936:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b93b:	83 c8 80             	or     $0xffffff80,%eax
f010b93e:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b943:	b8 1a c7 10 f0       	mov    $0xf010c71a,%eax
f010b948:	c1 e8 10             	shr    $0x10,%eax
f010b94b:	66 a3 8e 33 25 f0    	mov    %ax,0xf025338e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b951:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b956:	66 a3 90 33 25 f0    	mov    %ax,0xf0253390
f010b95c:	66 c7 05 92 33 25 f0 	movw   $0x8,0xf0253392
f010b963:	08 00 
f010b965:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b96a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96d:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b972:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b977:	83 e0 1f             	and    $0x1f,%eax
f010b97a:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b97f:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b984:	83 e0 f0             	and    $0xfffffff0,%eax
f010b987:	83 c8 0e             	or     $0xe,%eax
f010b98a:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b98f:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b994:	83 e0 ef             	and    $0xffffffef,%eax
f010b997:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b99c:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b9a1:	83 c8 60             	or     $0x60,%eax
f010b9a4:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b9a9:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b9ae:	83 c8 80             	or     $0xffffff80,%eax
f010b9b1:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b9b6:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b9bb:	c1 e8 10             	shr    $0x10,%eax
f010b9be:	66 a3 96 33 25 f0    	mov    %ax,0xf0253396
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b9c4:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b9c9:	66 a3 98 33 25 f0    	mov    %ax,0xf0253398
f010b9cf:	66 c7 05 9a 33 25 f0 	movw   $0x8,0xf025339a
f010b9d6:	08 00 
f010b9d8:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b9dd:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e0:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010b9e5:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b9ea:	83 e0 1f             	and    $0x1f,%eax
f010b9ed:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010b9f2:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b9f7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fa:	83 c8 0e             	or     $0xe,%eax
f010b9fd:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba02:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba07:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0a:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba0f:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba14:	83 c8 60             	or     $0x60,%eax
f010ba17:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba1c:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba21:	83 c8 80             	or     $0xffffff80,%eax
f010ba24:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba29:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010ba2e:	c1 e8 10             	shr    $0x10,%eax
f010ba31:	66 a3 9e 33 25 f0    	mov    %ax,0xf025339e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010ba37:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010ba3c:	66 a3 a0 33 25 f0    	mov    %ax,0xf02533a0
f010ba42:	66 c7 05 a2 33 25 f0 	movw   $0x8,0xf02533a2
f010ba49:	08 00 
f010ba4b:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010ba50:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba53:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010ba58:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010ba5d:	83 e0 1f             	and    $0x1f,%eax
f010ba60:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010ba65:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010ba6a:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6d:	83 c8 0e             	or     $0xe,%eax
f010ba70:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010ba75:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010ba7a:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7d:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010ba82:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010ba87:	83 c8 60             	or     $0x60,%eax
f010ba8a:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010ba8f:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010ba94:	83 c8 80             	or     $0xffffff80,%eax
f010ba97:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010ba9c:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010baa1:	c1 e8 10             	shr    $0x10,%eax
f010baa4:	66 a3 a6 33 25 f0    	mov    %ax,0xf02533a6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010baaa:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010baaf:	66 a3 a8 33 25 f0    	mov    %ax,0xf02533a8
f010bab5:	66 c7 05 aa 33 25 f0 	movw   $0x8,0xf02533aa
f010babc:	08 00 
f010babe:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010bac3:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac6:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010bacb:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010bad0:	83 e0 1f             	and    $0x1f,%eax
f010bad3:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010bad8:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010badd:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae0:	83 c8 0e             	or     $0xe,%eax
f010bae3:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bae8:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010baed:	83 e0 ef             	and    $0xffffffef,%eax
f010baf0:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010baf5:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010bafa:	83 c8 60             	or     $0x60,%eax
f010bafd:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bb02:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010bb07:	83 c8 80             	or     $0xffffff80,%eax
f010bb0a:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bb0f:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010bb14:	c1 e8 10             	shr    $0x10,%eax
f010bb17:	66 a3 ae 33 25 f0    	mov    %ax,0xf02533ae
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bb1d:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010bb22:	66 a3 b0 33 25 f0    	mov    %ax,0xf02533b0
f010bb28:	66 c7 05 b2 33 25 f0 	movw   $0x8,0xf02533b2
f010bb2f:	08 00 
f010bb31:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010bb36:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb39:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010bb3e:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010bb43:	83 e0 1f             	and    $0x1f,%eax
f010bb46:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010bb4b:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb50:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb53:	83 c8 0e             	or     $0xe,%eax
f010bb56:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb5b:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb60:	83 e0 ef             	and    $0xffffffef,%eax
f010bb63:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb68:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb6d:	83 c8 60             	or     $0x60,%eax
f010bb70:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb75:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb7a:	83 c8 80             	or     $0xffffff80,%eax
f010bb7d:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb82:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010bb87:	c1 e8 10             	shr    $0x10,%eax
f010bb8a:	66 a3 b6 33 25 f0    	mov    %ax,0xf02533b6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bb90:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010bb95:	66 a3 b8 33 25 f0    	mov    %ax,0xf02533b8
f010bb9b:	66 c7 05 ba 33 25 f0 	movw   $0x8,0xf02533ba
f010bba2:	08 00 
f010bba4:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010bba9:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbac:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010bbb1:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010bbb6:	83 e0 1f             	and    $0x1f,%eax
f010bbb9:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010bbbe:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbc3:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc6:	83 c8 0e             	or     $0xe,%eax
f010bbc9:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bbce:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbd3:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd6:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bbdb:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbe0:	83 c8 60             	or     $0x60,%eax
f010bbe3:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bbe8:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbed:	83 c8 80             	or     $0xffffff80,%eax
f010bbf0:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bbf5:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010bbfa:	c1 e8 10             	shr    $0x10,%eax
f010bbfd:	66 a3 be 33 25 f0    	mov    %ax,0xf02533be
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bc03:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010bc08:	66 a3 c0 33 25 f0    	mov    %ax,0xf02533c0
f010bc0e:	66 c7 05 c2 33 25 f0 	movw   $0x8,0xf02533c2
f010bc15:	08 00 
f010bc17:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010bc1c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc1f:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010bc24:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010bc29:	83 e0 1f             	and    $0x1f,%eax
f010bc2c:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010bc31:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc36:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc39:	83 c8 0e             	or     $0xe,%eax
f010bc3c:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc41:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc46:	83 e0 ef             	and    $0xffffffef,%eax
f010bc49:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc4e:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc53:	83 c8 60             	or     $0x60,%eax
f010bc56:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc5b:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc60:	83 c8 80             	or     $0xffffff80,%eax
f010bc63:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc68:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010bc6d:	c1 e8 10             	shr    $0x10,%eax
f010bc70:	66 a3 c6 33 25 f0    	mov    %ax,0xf02533c6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc76:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010bc7b:	66 a3 c8 33 25 f0    	mov    %ax,0xf02533c8
f010bc81:	66 c7 05 ca 33 25 f0 	movw   $0x8,0xf02533ca
f010bc88:	08 00 
f010bc8a:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010bc8f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc92:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bc97:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010bc9c:	83 e0 1f             	and    $0x1f,%eax
f010bc9f:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bca4:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bca9:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcac:	83 c8 0e             	or     $0xe,%eax
f010bcaf:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcb4:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bcb9:	83 e0 ef             	and    $0xffffffef,%eax
f010bcbc:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcc1:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bcc6:	83 c8 60             	or     $0x60,%eax
f010bcc9:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcce:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bcd3:	83 c8 80             	or     $0xffffff80,%eax
f010bcd6:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcdb:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010bce0:	c1 e8 10             	shr    $0x10,%eax
f010bce3:	66 a3 ce 33 25 f0    	mov    %ax,0xf02533ce
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bce9:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bcee:	66 a3 d0 33 25 f0    	mov    %ax,0xf02533d0
f010bcf4:	66 c7 05 d2 33 25 f0 	movw   $0x8,0xf02533d2
f010bcfb:	08 00 
f010bcfd:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bd02:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd05:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bd0a:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bd0f:	83 e0 1f             	and    $0x1f,%eax
f010bd12:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bd17:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd1c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd1f:	83 c8 0e             	or     $0xe,%eax
f010bd22:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd27:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd2c:	83 e0 ef             	and    $0xffffffef,%eax
f010bd2f:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd34:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd39:	83 c8 60             	or     $0x60,%eax
f010bd3c:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd41:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd46:	83 c8 80             	or     $0xffffff80,%eax
f010bd49:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd4e:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bd53:	c1 e8 10             	shr    $0x10,%eax
f010bd56:	66 a3 d6 33 25 f0    	mov    %ax,0xf02533d6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bd5c:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bd61:	66 a3 d8 33 25 f0    	mov    %ax,0xf02533d8
f010bd67:	66 c7 05 da 33 25 f0 	movw   $0x8,0xf02533da
f010bd6e:	08 00 
f010bd70:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bd75:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd78:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bd7d:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bd82:	83 e0 1f             	and    $0x1f,%eax
f010bd85:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bd8a:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bd8f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd92:	83 c8 0e             	or     $0xe,%eax
f010bd95:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bd9a:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bd9f:	83 e0 ef             	and    $0xffffffef,%eax
f010bda2:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bda7:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bdac:	83 c8 60             	or     $0x60,%eax
f010bdaf:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bdb4:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bdb9:	83 c8 80             	or     $0xffffff80,%eax
f010bdbc:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bdc1:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bdc6:	c1 e8 10             	shr    $0x10,%eax
f010bdc9:	66 a3 de 33 25 f0    	mov    %ax,0xf02533de
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bdcf:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bdd4:	66 a3 e0 33 25 f0    	mov    %ax,0xf02533e0
f010bdda:	66 c7 05 e2 33 25 f0 	movw   $0x8,0xf02533e2
f010bde1:	08 00 
f010bde3:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010bde8:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdeb:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010bdf0:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010bdf5:	83 e0 1f             	and    $0x1f,%eax
f010bdf8:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010bdfd:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be02:	83 e0 f0             	and    $0xfffffff0,%eax
f010be05:	83 c8 0e             	or     $0xe,%eax
f010be08:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be0d:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be12:	83 e0 ef             	and    $0xffffffef,%eax
f010be15:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be1a:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be1f:	83 c8 60             	or     $0x60,%eax
f010be22:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be27:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be2c:	83 c8 80             	or     $0xffffff80,%eax
f010be2f:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be34:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010be39:	c1 e8 10             	shr    $0x10,%eax
f010be3c:	66 a3 e6 33 25 f0    	mov    %ax,0xf02533e6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010be42:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010be47:	66 a3 e8 33 25 f0    	mov    %ax,0xf02533e8
f010be4d:	66 c7 05 ea 33 25 f0 	movw   $0x8,0xf02533ea
f010be54:	08 00 
f010be56:	a0 ec 33 25 f0       	mov    0xf02533ec,%al
f010be5b:	83 e0 e0             	and    $0xffffffe0,%eax
f010be5e:	a2 ec 33 25 f0       	mov    %al,0xf02533ec
f010be63:	a0 ec 33 25 f0       	mov    0xf02533ec,%al
f010be68:	83 e0 1f             	and    $0x1f,%eax
f010be6b:	a2 ec 33 25 f0       	mov    %al,0xf02533ec
f010be70:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010be75:	83 e0 f0             	and    $0xfffffff0,%eax
f010be78:	83 c8 0e             	or     $0xe,%eax
f010be7b:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010be80:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010be85:	83 e0 ef             	and    $0xffffffef,%eax
f010be88:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010be8d:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010be92:	83 c8 60             	or     $0x60,%eax
f010be95:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010be9a:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010be9f:	83 c8 80             	or     $0xffffff80,%eax
f010bea2:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010bea7:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010beac:	c1 e8 10             	shr    $0x10,%eax
f010beaf:	66 a3 ee 33 25 f0    	mov    %ax,0xf02533ee
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010beb5:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010beba:	66 a3 f0 33 25 f0    	mov    %ax,0xf02533f0
f010bec0:	66 c7 05 f2 33 25 f0 	movw   $0x8,0xf02533f2
f010bec7:	08 00 
f010bec9:	a0 f4 33 25 f0       	mov    0xf02533f4,%al
f010bece:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed1:	a2 f4 33 25 f0       	mov    %al,0xf02533f4
f010bed6:	a0 f4 33 25 f0       	mov    0xf02533f4,%al
f010bedb:	83 e0 1f             	and    $0x1f,%eax
f010bede:	a2 f4 33 25 f0       	mov    %al,0xf02533f4
f010bee3:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bee8:	83 e0 f0             	and    $0xfffffff0,%eax
f010beeb:	83 c8 0e             	or     $0xe,%eax
f010beee:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bef3:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bef8:	83 e0 ef             	and    $0xffffffef,%eax
f010befb:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf00:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bf05:	83 c8 60             	or     $0x60,%eax
f010bf08:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf0d:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bf12:	83 c8 80             	or     $0xffffff80,%eax
f010bf15:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf1a:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010bf1f:	c1 e8 10             	shr    $0x10,%eax
f010bf22:	66 a3 f6 33 25 f0    	mov    %ax,0xf02533f6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bf28:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bf2d:	66 a3 f8 33 25 f0    	mov    %ax,0xf02533f8
f010bf33:	66 c7 05 fa 33 25 f0 	movw   $0x8,0xf02533fa
f010bf3a:	08 00 
f010bf3c:	a0 fc 33 25 f0       	mov    0xf02533fc,%al
f010bf41:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf44:	a2 fc 33 25 f0       	mov    %al,0xf02533fc
f010bf49:	a0 fc 33 25 f0       	mov    0xf02533fc,%al
f010bf4e:	83 e0 1f             	and    $0x1f,%eax
f010bf51:	a2 fc 33 25 f0       	mov    %al,0xf02533fc
f010bf56:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf5b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf5e:	83 c8 0e             	or     $0xe,%eax
f010bf61:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf66:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf6b:	83 e0 ef             	and    $0xffffffef,%eax
f010bf6e:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf73:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf78:	83 c8 60             	or     $0x60,%eax
f010bf7b:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf80:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf85:	83 c8 80             	or     $0xffffff80,%eax
f010bf88:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf8d:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bf92:	c1 e8 10             	shr    $0x10,%eax
f010bf95:	66 a3 fe 33 25 f0    	mov    %ax,0xf02533fe



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bf9b:	c7 05 a4 3a 25 f0 00 	movl   $0xefc00000,0xf0253aa4
f010bfa2:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bfa5:	66 c7 05 a8 3a 25 f0 	movw   $0x10,0xf0253aa8
f010bfac:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bfae:	66 c7 05 a8 c9 18 f0 	movw   $0x68,0xf018c9a8
f010bfb5:	68 00 
f010bfb7:	b8 a0 3a 25 f0       	mov    $0xf0253aa0,%eax
f010bfbc:	66 a3 aa c9 18 f0    	mov    %ax,0xf018c9aa
f010bfc2:	b8 a0 3a 25 f0       	mov    $0xf0253aa0,%eax
f010bfc7:	c1 e8 10             	shr    $0x10,%eax
f010bfca:	a2 ac c9 18 f0       	mov    %al,0xf018c9ac
f010bfcf:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010bfd4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfd7:	83 c8 09             	or     $0x9,%eax
f010bfda:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010bfdf:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010bfe4:	83 c8 10             	or     $0x10,%eax
f010bfe7:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010bfec:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010bff1:	83 e0 9f             	and    $0xffffff9f,%eax
f010bff4:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010bff9:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010bffe:	83 c8 80             	or     $0xffffff80,%eax
f010c001:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010c006:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c00b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c00e:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c013:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c018:	83 e0 ef             	and    $0xffffffef,%eax
f010c01b:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c020:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c025:	83 e0 df             	and    $0xffffffdf,%eax
f010c028:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c02d:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c032:	83 c8 40             	or     $0x40,%eax
f010c035:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c03a:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c03f:	83 e0 7f             	and    $0x7f,%eax
f010c042:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c047:	b8 a0 3a 25 f0       	mov    $0xf0253aa0,%eax
f010c04c:	c1 e8 18             	shr    $0x18,%eax
f010c04f:	a2 af c9 18 f0       	mov    %al,0xf018c9af
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c054:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010c059:	83 e0 ef             	and    $0xffffffef,%eax
f010c05c:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010c061:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c067:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c06b:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c06e:	0f 01 1d 70 ca 18 f0 	lidtl  0xf018ca70
}
f010c075:	90                   	nop
f010c076:	c9                   	leave  
f010c077:	c3                   	ret    

f010c078 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c078:	55                   	push   %ebp
f010c079:	89 e5                	mov    %esp,%ebp
f010c07b:	53                   	push   %ebx
f010c07c:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c07f:	83 ec 08             	sub    $0x8,%esp
f010c082:	ff 75 08             	pushl  0x8(%ebp)
f010c085:	68 db 2c 13 f0       	push   $0xf0132cdb
f010c08a:	e8 a2 4d ff ff       	call   f0100e31 <cprintf>
f010c08f:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c092:	8b 45 08             	mov    0x8(%ebp),%eax
f010c095:	83 ec 0c             	sub    $0xc,%esp
f010c098:	50                   	push   %eax
f010c099:	e8 fd 00 00 00       	call   f010c19b <print_regs>
f010c09e:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c0a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0a4:	8b 40 20             	mov    0x20(%eax),%eax
f010c0a7:	0f b7 c0             	movzwl %ax,%eax
f010c0aa:	83 ec 08             	sub    $0x8,%esp
f010c0ad:	50                   	push   %eax
f010c0ae:	68 ed 2c 13 f0       	push   $0xf0132ced
f010c0b3:	e8 79 4d ff ff       	call   f0100e31 <cprintf>
f010c0b8:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c0bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0be:	8b 40 24             	mov    0x24(%eax),%eax
f010c0c1:	0f b7 c0             	movzwl %ax,%eax
f010c0c4:	83 ec 08             	sub    $0x8,%esp
f010c0c7:	50                   	push   %eax
f010c0c8:	68 00 2d 13 f0       	push   $0xf0132d00
f010c0cd:	e8 5f 4d ff ff       	call   f0100e31 <cprintf>
f010c0d2:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c0d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0d8:	8b 58 28             	mov    0x28(%eax),%ebx
f010c0db:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0de:	8b 40 28             	mov    0x28(%eax),%eax
f010c0e1:	83 ec 0c             	sub    $0xc,%esp
f010c0e4:	50                   	push   %eax
f010c0e5:	e8 d0 ee ff ff       	call   f010afba <trapname>
f010c0ea:	83 c4 10             	add    $0x10,%esp
f010c0ed:	89 c2                	mov    %eax,%edx
f010c0ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f2:	8b 40 28             	mov    0x28(%eax),%eax
f010c0f5:	53                   	push   %ebx
f010c0f6:	52                   	push   %edx
f010c0f7:	50                   	push   %eax
f010c0f8:	68 13 2d 13 f0       	push   $0xf0132d13
f010c0fd:	e8 2f 4d ff ff       	call   f0100e31 <cprintf>
f010c102:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c105:	8b 45 08             	mov    0x8(%ebp),%eax
f010c108:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c10b:	83 ec 08             	sub    $0x8,%esp
f010c10e:	50                   	push   %eax
f010c10f:	68 2a 2d 13 f0       	push   $0xf0132d2a
f010c114:	e8 18 4d ff ff       	call   f0100e31 <cprintf>
f010c119:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c11c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c11f:	8b 40 30             	mov    0x30(%eax),%eax
f010c122:	83 ec 08             	sub    $0x8,%esp
f010c125:	50                   	push   %eax
f010c126:	68 39 2d 13 f0       	push   $0xf0132d39
f010c12b:	e8 01 4d ff ff       	call   f0100e31 <cprintf>
f010c130:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c133:	8b 45 08             	mov    0x8(%ebp),%eax
f010c136:	8b 40 34             	mov    0x34(%eax),%eax
f010c139:	0f b7 c0             	movzwl %ax,%eax
f010c13c:	83 ec 08             	sub    $0x8,%esp
f010c13f:	50                   	push   %eax
f010c140:	68 48 2d 13 f0       	push   $0xf0132d48
f010c145:	e8 e7 4c ff ff       	call   f0100e31 <cprintf>
f010c14a:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c14d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c150:	8b 40 38             	mov    0x38(%eax),%eax
f010c153:	83 ec 08             	sub    $0x8,%esp
f010c156:	50                   	push   %eax
f010c157:	68 5b 2d 13 f0       	push   $0xf0132d5b
f010c15c:	e8 d0 4c ff ff       	call   f0100e31 <cprintf>
f010c161:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c164:	8b 45 08             	mov    0x8(%ebp),%eax
f010c167:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c16a:	83 ec 08             	sub    $0x8,%esp
f010c16d:	50                   	push   %eax
f010c16e:	68 6a 2d 13 f0       	push   $0xf0132d6a
f010c173:	e8 b9 4c ff ff       	call   f0100e31 <cprintf>
f010c178:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c17b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c17e:	8b 40 40             	mov    0x40(%eax),%eax
f010c181:	0f b7 c0             	movzwl %ax,%eax
f010c184:	83 ec 08             	sub    $0x8,%esp
f010c187:	50                   	push   %eax
f010c188:	68 79 2d 13 f0       	push   $0xf0132d79
f010c18d:	e8 9f 4c ff ff       	call   f0100e31 <cprintf>
f010c192:	83 c4 10             	add    $0x10,%esp
}
f010c195:	90                   	nop
f010c196:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c199:	c9                   	leave  
f010c19a:	c3                   	ret    

f010c19b <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c19b:	55                   	push   %ebp
f010c19c:	89 e5                	mov    %esp,%ebp
f010c19e:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c1a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1a4:	8b 00                	mov    (%eax),%eax
f010c1a6:	83 ec 08             	sub    $0x8,%esp
f010c1a9:	50                   	push   %eax
f010c1aa:	68 8c 2d 13 f0       	push   $0xf0132d8c
f010c1af:	e8 7d 4c ff ff       	call   f0100e31 <cprintf>
f010c1b4:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c1b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ba:	8b 40 04             	mov    0x4(%eax),%eax
f010c1bd:	83 ec 08             	sub    $0x8,%esp
f010c1c0:	50                   	push   %eax
f010c1c1:	68 9b 2d 13 f0       	push   $0xf0132d9b
f010c1c6:	e8 66 4c ff ff       	call   f0100e31 <cprintf>
f010c1cb:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c1ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d1:	8b 40 08             	mov    0x8(%eax),%eax
f010c1d4:	83 ec 08             	sub    $0x8,%esp
f010c1d7:	50                   	push   %eax
f010c1d8:	68 aa 2d 13 f0       	push   $0xf0132daa
f010c1dd:	e8 4f 4c ff ff       	call   f0100e31 <cprintf>
f010c1e2:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c1e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1e8:	8b 40 0c             	mov    0xc(%eax),%eax
f010c1eb:	83 ec 08             	sub    $0x8,%esp
f010c1ee:	50                   	push   %eax
f010c1ef:	68 b9 2d 13 f0       	push   $0xf0132db9
f010c1f4:	e8 38 4c ff ff       	call   f0100e31 <cprintf>
f010c1f9:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c1fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ff:	8b 40 10             	mov    0x10(%eax),%eax
f010c202:	83 ec 08             	sub    $0x8,%esp
f010c205:	50                   	push   %eax
f010c206:	68 c8 2d 13 f0       	push   $0xf0132dc8
f010c20b:	e8 21 4c ff ff       	call   f0100e31 <cprintf>
f010c210:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c213:	8b 45 08             	mov    0x8(%ebp),%eax
f010c216:	8b 40 14             	mov    0x14(%eax),%eax
f010c219:	83 ec 08             	sub    $0x8,%esp
f010c21c:	50                   	push   %eax
f010c21d:	68 d7 2d 13 f0       	push   $0xf0132dd7
f010c222:	e8 0a 4c ff ff       	call   f0100e31 <cprintf>
f010c227:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c22a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c22d:	8b 40 18             	mov    0x18(%eax),%eax
f010c230:	83 ec 08             	sub    $0x8,%esp
f010c233:	50                   	push   %eax
f010c234:	68 e6 2d 13 f0       	push   $0xf0132de6
f010c239:	e8 f3 4b ff ff       	call   f0100e31 <cprintf>
f010c23e:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c241:	8b 45 08             	mov    0x8(%ebp),%eax
f010c244:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c247:	83 ec 08             	sub    $0x8,%esp
f010c24a:	50                   	push   %eax
f010c24b:	68 f5 2d 13 f0       	push   $0xf0132df5
f010c250:	e8 dc 4b ff ff       	call   f0100e31 <cprintf>
f010c255:	83 c4 10             	add    $0x10,%esp
}
f010c258:	90                   	nop
f010c259:	c9                   	leave  
f010c25a:	c3                   	ret    

f010c25b <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c25b:	55                   	push   %ebp
f010c25c:	89 e5                	mov    %esp,%ebp
f010c25e:	57                   	push   %edi
f010c25f:	56                   	push   %esi
f010c260:	53                   	push   %ebx
f010c261:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c264:	8b 45 08             	mov    0x8(%ebp),%eax
f010c267:	8b 40 28             	mov    0x28(%eax),%eax
f010c26a:	83 f8 0e             	cmp    $0xe,%eax
f010c26d:	75 29                	jne    f010c298 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c26f:	83 ec 0c             	sub    $0xc,%esp
f010c272:	6a 01                	push   $0x1
f010c274:	e8 b9 14 00 00       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f010c279:	83 c4 10             	add    $0x10,%esp
f010c27c:	85 c0                	test   %eax,%eax
f010c27e:	74 05                	je     f010c285 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c280:	e8 62 a1 ff ff       	call   f01063e7 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c285:	83 ec 0c             	sub    $0xc,%esp
f010c288:	ff 75 08             	pushl  0x8(%ebp)
f010c28b:	e8 51 02 00 00       	call   f010c4e1 <fault_handler>
f010c290:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c293:	e9 bb 00 00 00       	jmp    f010c353 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c298:	8b 45 08             	mov    0x8(%ebp),%eax
f010c29b:	8b 40 28             	mov    0x28(%eax),%eax
f010c29e:	83 f8 30             	cmp    $0x30,%eax
f010c2a1:	75 42                	jne    f010c2e5 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a6:	8b 78 04             	mov    0x4(%eax),%edi
f010c2a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ac:	8b 30                	mov    (%eax),%esi
f010c2ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b1:	8b 58 10             	mov    0x10(%eax),%ebx
f010c2b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b7:	8b 48 18             	mov    0x18(%eax),%ecx
f010c2ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2bd:	8b 50 14             	mov    0x14(%eax),%edx
f010c2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c3:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c2c6:	83 ec 08             	sub    $0x8,%esp
f010c2c9:	57                   	push   %edi
f010c2ca:	56                   	push   %esi
f010c2cb:	53                   	push   %ebx
f010c2cc:	51                   	push   %ecx
f010c2cd:	52                   	push   %edx
f010c2ce:	50                   	push   %eax
f010c2cf:	e8 a8 0b 00 00       	call   f010ce7c <syscall>
f010c2d4:	83 c4 20             	add    $0x20,%esp
f010c2d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2e0:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c2e3:	eb 6e                	jmp    f010c353 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c2e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e8:	8b 40 28             	mov    0x28(%eax),%eax
f010c2eb:	83 f8 08             	cmp    $0x8,%eax
f010c2ee:	75 17                	jne    f010c307 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c2f0:	83 ec 04             	sub    $0x4,%esp
f010c2f3:	68 04 2e 13 f0       	push   $0xf0132e04
f010c2f8:	68 e7 00 00 00       	push   $0xe7
f010c2fd:	68 13 2e 13 f0       	push   $0xf0132e13
f010c302:	e8 a9 3e ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c307:	8b 45 08             	mov    0x8(%ebp),%eax
f010c30a:	8b 40 28             	mov    0x28(%eax),%eax
f010c30d:	83 f8 20             	cmp    $0x20,%eax
f010c310:	75 07                	jne    f010c319 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c312:	e8 93 a0 ff ff       	call   f01063aa <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c317:	eb 3a                	jmp    f010c353 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c319:	8b 45 08             	mov    0x8(%ebp),%eax
f010c31c:	8b 40 34             	mov    0x34(%eax),%eax
f010c31f:	66 83 f8 08          	cmp    $0x8,%ax
f010c323:	75 17                	jne    f010c33c <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c325:	83 ec 04             	sub    $0x4,%esp
f010c328:	68 24 2e 13 f0       	push   $0xf0132e24
f010c32d:	68 f4 00 00 00       	push   $0xf4
f010c332:	68 13 2e 13 f0       	push   $0xf0132e13
f010c337:	e8 74 3e ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c33c:	83 ec 04             	sub    $0x4,%esp
f010c33f:	68 40 2e 13 f0       	push   $0xf0132e40
f010c344:	68 f8 00 00 00       	push   $0xf8
f010c349:	68 13 2e 13 f0       	push   $0xf0132e13
f010c34e:	e8 5d 3e ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c353:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c356:	5b                   	pop    %ebx
f010c357:	5e                   	pop    %esi
f010c358:	5f                   	pop    %edi
f010c359:	5d                   	pop    %ebp
f010c35a:	c3                   	ret    

f010c35b <trap>:

void trap(struct Trapframe *tf)
{
f010c35b:	55                   	push   %ebp
f010c35c:	89 e5                	mov    %esp,%ebp
f010c35e:	57                   	push   %edi
f010c35f:	56                   	push   %esi
f010c360:	53                   	push   %ebx
f010c361:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c364:	e8 45 87 ff ff       	call   f0104aae <kclock_stop>

	int userTrap = 0;
f010c369:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c370:	8b 45 08             	mov    0x8(%ebp),%eax
f010c373:	8b 40 34             	mov    0x34(%eax),%eax
f010c376:	0f b7 c0             	movzwl %ax,%eax
f010c379:	83 e0 03             	and    $0x3,%eax
f010c37c:	83 f8 03             	cmp    $0x3,%eax
f010c37f:	75 49                	jne    f010c3ca <trap+0x6f>
		assert(curenv);
f010c381:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c386:	85 c0                	test   %eax,%eax
f010c388:	75 19                	jne    f010c3a3 <trap+0x48>
f010c38a:	68 5f 2e 13 f0       	push   $0xf0132e5f
f010c38f:	68 66 2e 13 f0       	push   $0xf0132e66
f010c394:	68 06 01 00 00       	push   $0x106
f010c399:	68 13 2e 13 f0       	push   $0xf0132e13
f010c39e:	e8 0d 3e ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c3a3:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010c3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ac:	89 c3                	mov    %eax,%ebx
f010c3ae:	b8 11 00 00 00       	mov    $0x11,%eax
f010c3b3:	89 d7                	mov    %edx,%edi
f010c3b5:	89 de                	mov    %ebx,%esi
f010c3b7:	89 c1                	mov    %eax,%ecx
f010c3b9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c3bb:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c3c0:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c3c3:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3cd:	8b 40 28             	mov    0x28(%eax),%eax
f010c3d0:	83 f8 20             	cmp    $0x20,%eax
f010c3d3:	75 40                	jne    f010c415 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c3d5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3d9:	0f 84 a6 00 00 00    	je     f010c485 <trap+0x12a>
		{
			assert(curenv);
f010c3df:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c3e4:	85 c0                	test   %eax,%eax
f010c3e6:	75 19                	jne    f010c401 <trap+0xa6>
f010c3e8:	68 5f 2e 13 f0       	push   $0xf0132e5f
f010c3ed:	68 66 2e 13 f0       	push   $0xf0132e66
f010c3f2:	68 12 01 00 00       	push   $0x112
f010c3f7:	68 13 2e 13 f0       	push   $0xf0132e13
f010c3fc:	e8 af 3d ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c401:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c406:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c40c:	42                   	inc    %edx
f010c40d:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c413:	eb 70                	jmp    f010c485 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c415:	8b 45 08             	mov    0x8(%ebp),%eax
f010c418:	8b 40 28             	mov    0x28(%eax),%eax
f010c41b:	83 f8 0e             	cmp    $0xe,%eax
f010c41e:	75 65                	jne    f010c485 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c420:	a0 08 3b 25 f0       	mov    0xf0253b08,%al
f010c425:	84 c0                	test   %al,%al
f010c427:	74 5c                	je     f010c485 <trap+0x12a>
			if (userTrap){
f010c429:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c42d:	74 2c                	je     f010c45b <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c42f:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c434:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010c43a:	8b 52 30             	mov    0x30(%edx),%edx
f010c43d:	89 d1                	mov    %edx,%ecx
f010c43f:	8a 15 08 3b 25 f0    	mov    0xf0253b08,%dl
f010c445:	0f b6 d2             	movzbl %dl,%edx
f010c448:	01 ca                	add    %ecx,%edx
f010c44a:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c44d:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c452:	83 ec 0c             	sub    $0xc,%esp
f010c455:	50                   	push   %eax
f010c456:	e8 d3 d4 ff ff       	call   f010992e <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c45b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c45e:	8b 40 30             	mov    0x30(%eax),%eax
f010c461:	89 c2                	mov    %eax,%edx
f010c463:	a0 08 3b 25 f0       	mov    0xf0253b08,%al
f010c468:	0f b6 c0             	movzbl %al,%eax
f010c46b:	01 d0                	add    %edx,%eax
f010c46d:	89 c2                	mov    %eax,%edx
f010c46f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c472:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c475:	e8 5f 86 ff ff       	call   f0104ad9 <kclock_resume>
				env_pop_tf(tf);
f010c47a:	83 ec 0c             	sub    $0xc,%esp
f010c47d:	ff 75 08             	pushl  0x8(%ebp)
f010c480:	e8 fb d5 ff ff       	call   f0109a80 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c485:	83 ec 0c             	sub    $0xc,%esp
f010c488:	ff 75 08             	pushl  0x8(%ebp)
f010c48b:	e8 cb fd ff ff       	call   f010c25b <trap_dispatch>
f010c490:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c493:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c497:	74 3d                	je     f010c4d6 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c499:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c49e:	85 c0                	test   %eax,%eax
f010c4a0:	74 0d                	je     f010c4af <trap+0x154>
f010c4a2:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c4a7:	8b 40 54             	mov    0x54(%eax),%eax
f010c4aa:	83 f8 02             	cmp    $0x2,%eax
f010c4ad:	74 19                	je     f010c4c8 <trap+0x16d>
f010c4af:	68 7c 2e 13 f0       	push   $0xf0132e7c
f010c4b4:	68 66 2e 13 f0       	push   $0xf0132e66
f010c4b9:	68 27 01 00 00       	push   $0x127
f010c4be:	68 13 2e 13 f0       	push   $0xf0132e13
f010c4c3:	e8 e8 3c ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c4c8:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c4cd:	83 ec 0c             	sub    $0xc,%esp
f010c4d0:	50                   	push   %eax
f010c4d1:	e8 58 d4 ff ff       	call   f010992e <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c4d6:	83 ec 0c             	sub    $0xc,%esp
f010c4d9:	ff 75 08             	pushl  0x8(%ebp)
f010c4dc:	e8 9f d5 ff ff       	call   f0109a80 <env_pop_tf>

f010c4e1 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c4e1:	55                   	push   %ebp
f010c4e2:	89 e5                	mov    %esp,%ebp
f010c4e4:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c4e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c4ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4f1:	8b 40 34             	mov    0x34(%eax),%eax
f010c4f4:	0f b7 c0             	movzwl %ax,%eax
f010c4f7:	83 e0 03             	and    $0x3,%eax
f010c4fa:	83 f8 03             	cmp    $0x3,%eax
f010c4fd:	75 07                	jne    f010c506 <fault_handler+0x25>
		userTrap = 1;
f010c4ff:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c506:	0f 20 d0             	mov    %cr2,%eax
f010c509:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c50c:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c50f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c512:	a1 80 3a 25 f0       	mov    0xf0253a80,%eax
f010c517:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c51a:	75 2b                	jne    f010c547 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c51c:	a0 84 3a 25 f0       	mov    0xf0253a84,%al
f010c521:	40                   	inc    %eax
f010c522:	a2 84 3a 25 f0       	mov    %al,0xf0253a84
		if (num_repeated_fault == 3)
f010c527:	a0 84 3a 25 f0       	mov    0xf0253a84,%al
f010c52c:	3c 03                	cmp    $0x3,%al
f010c52e:	75 1e                	jne    f010c54e <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c530:	ff 75 ec             	pushl  -0x14(%ebp)
f010c533:	68 ac 2e 13 f0       	push   $0xf0132eac
f010c538:	68 4a 01 00 00       	push   $0x14a
f010c53d:	68 13 2e 13 f0       	push   $0xf0132e13
f010c542:	e8 69 3c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c547:	c6 05 84 3a 25 f0 00 	movb   $0x0,0xf0253a84
	}
	last_fault_va = fault_va ;
f010c54e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c551:	a3 80 3a 25 f0       	mov    %eax,0xf0253a80
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c556:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c55a:	75 29                	jne    f010c585 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c55c:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c563:	77 40                	ja     f010c5a5 <fault_handler+0xc4>
f010c565:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c56c:	76 37                	jbe    f010c5a5 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c56e:	83 ec 04             	sub    $0x4,%esp
f010c571:	68 f8 2e 13 f0       	push   $0xf0132ef8
f010c576:	68 56 01 00 00       	push   $0x156
f010c57b:	68 13 2e 13 f0       	push   $0xf0132e13
f010c580:	e8 2b 3c ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c585:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c58c:	76 17                	jbe    f010c5a5 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c58e:	83 ec 04             	sub    $0x4,%esp
f010c591:	68 1c 2f 13 f0       	push   $0xf0132f1c
f010c596:	68 5c 01 00 00       	push   $0x15c
f010c59b:	68 13 2e 13 f0       	push   $0xf0132e13
f010c5a0:	e8 0b 3c ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c5a5:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c5aa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c5ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5b0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c5b9:	c1 ea 16             	shr    $0x16,%edx
f010c5bc:	c1 e2 02             	shl    $0x2,%edx
f010c5bf:	01 d0                	add    %edx,%eax
f010c5c1:	8b 00                	mov    (%eax),%eax
f010c5c3:	83 e0 01             	and    $0x1,%eax
f010c5c6:	85 c0                	test   %eax,%eax
f010c5c8:	75 28                	jne    f010c5f2 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c5ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5cd:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c5d3:	8d 50 01             	lea    0x1(%eax),%edx
f010c5d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5d9:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c5df:	83 ec 08             	sub    $0x8,%esp
f010c5e2:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5e5:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5e8:	e8 2a 12 00 00       	call   f010d817 <table_fault_handler>
f010c5ed:	83 c4 10             	add    $0x10,%esp
f010c5f0:	eb 7e                	jmp    f010c670 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c5f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5f5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5fb:	83 ec 08             	sub    $0x8,%esp
f010c5fe:	ff 75 ec             	pushl  -0x14(%ebp)
f010c601:	50                   	push   %eax
f010c602:	e8 be ba ff ff       	call   f01080c5 <pt_get_page_permissions>
f010c607:	83 c4 10             	add    $0x10,%esp
f010c60a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c60d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c610:	83 e0 01             	and    $0x1,%eax
f010c613:	85 c0                	test   %eax,%eax
f010c615:	74 17                	je     f010c62e <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c617:	ff 75 ec             	pushl  -0x14(%ebp)
f010c61a:	68 40 2f 13 f0       	push   $0xf0132f40
f010c61f:	68 7b 01 00 00       	push   $0x17b
f010c624:	68 13 2e 13 f0       	push   $0xf0132e13
f010c629:	e8 82 3b ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c62e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c631:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c637:	8d 50 01             	lea    0x1(%eax),%edx
f010c63a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c63d:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c643:	e8 ad 11 00 00       	call   f010d7f5 <isBufferingEnabled>
f010c648:	84 c0                	test   %al,%al
f010c64a:	74 13                	je     f010c65f <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c64c:	83 ec 08             	sub    $0x8,%esp
f010c64f:	ff 75 ec             	pushl  -0x14(%ebp)
f010c652:	ff 75 e8             	pushl  -0x18(%ebp)
f010c655:	e8 60 12 00 00       	call   f010d8ba <__page_fault_handler_with_buffering>
f010c65a:	83 c4 10             	add    $0x10,%esp
f010c65d:	eb 11                	jmp    f010c670 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c65f:	83 ec 08             	sub    $0x8,%esp
f010c662:	ff 75 ec             	pushl  -0x14(%ebp)
f010c665:	ff 75 e8             	pushl  -0x18(%ebp)
f010c668:	e8 cf 11 00 00       	call   f010d83c <page_fault_handler>
f010c66d:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c670:	0f 20 d8             	mov    %cr3,%eax
f010c673:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c676:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c679:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c67c:	90                   	nop
f010c67d:	c9                   	leave  
f010c67e:	c3                   	ret    
f010c67f:	90                   	nop

f010c680 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c680:	6a 0e                	push   $0xe
f010c682:	e9 ed 00 00 00       	jmp    f010c774 <_alltraps>
f010c687:	90                   	nop

f010c688 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c688:	6a 00                	push   $0x0
f010c68a:	6a 30                	push   $0x30
f010c68c:	e9 e3 00 00 00       	jmp    f010c774 <_alltraps>
f010c691:	90                   	nop

f010c692 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c692:	6a 08                	push   $0x8
f010c694:	e9 db 00 00 00       	jmp    f010c774 <_alltraps>
f010c699:	90                   	nop

f010c69a <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c69a:	6a 00                	push   $0x0
f010c69c:	6a 00                	push   $0x0
f010c69e:	e9 d1 00 00 00       	jmp    f010c774 <_alltraps>
f010c6a3:	90                   	nop

f010c6a4 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c6a4:	6a 00                	push   $0x0
f010c6a6:	6a 01                	push   $0x1
f010c6a8:	e9 c7 00 00 00       	jmp    f010c774 <_alltraps>
f010c6ad:	90                   	nop

f010c6ae <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c6ae:	6a 00                	push   $0x0
f010c6b0:	6a 02                	push   $0x2
f010c6b2:	e9 bd 00 00 00       	jmp    f010c774 <_alltraps>
f010c6b7:	90                   	nop

f010c6b8 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c6b8:	6a 00                	push   $0x0
f010c6ba:	6a 03                	push   $0x3
f010c6bc:	e9 b3 00 00 00       	jmp    f010c774 <_alltraps>
f010c6c1:	90                   	nop

f010c6c2 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c6c2:	6a 00                	push   $0x0
f010c6c4:	6a 04                	push   $0x4
f010c6c6:	e9 a9 00 00 00       	jmp    f010c774 <_alltraps>
f010c6cb:	90                   	nop

f010c6cc <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c6cc:	6a 00                	push   $0x0
f010c6ce:	6a 05                	push   $0x5
f010c6d0:	e9 9f 00 00 00       	jmp    f010c774 <_alltraps>
f010c6d5:	90                   	nop

f010c6d6 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c6d6:	6a 00                	push   $0x0
f010c6d8:	6a 06                	push   $0x6
f010c6da:	e9 95 00 00 00       	jmp    f010c774 <_alltraps>
f010c6df:	90                   	nop

f010c6e0 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c6e0:	6a 00                	push   $0x0
f010c6e2:	6a 07                	push   $0x7
f010c6e4:	e9 8b 00 00 00       	jmp    f010c774 <_alltraps>
f010c6e9:	90                   	nop

f010c6ea <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c6ea:	6a 0a                	push   $0xa
f010c6ec:	e9 83 00 00 00       	jmp    f010c774 <_alltraps>
f010c6f1:	90                   	nop

f010c6f2 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c6f2:	6a 0b                	push   $0xb
f010c6f4:	eb 7e                	jmp    f010c774 <_alltraps>

f010c6f6 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c6f6:	6a 0c                	push   $0xc
f010c6f8:	eb 7a                	jmp    f010c774 <_alltraps>

f010c6fa <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c6fa:	6a 0d                	push   $0xd
f010c6fc:	eb 76                	jmp    f010c774 <_alltraps>

f010c6fe <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c6fe:	6a 00                	push   $0x0
f010c700:	6a 10                	push   $0x10
f010c702:	eb 70                	jmp    f010c774 <_alltraps>

f010c704 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c704:	6a 11                	push   $0x11
f010c706:	eb 6c                	jmp    f010c774 <_alltraps>

f010c708 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c708:	6a 00                	push   $0x0
f010c70a:	6a 12                	push   $0x12
f010c70c:	eb 66                	jmp    f010c774 <_alltraps>

f010c70e <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c70e:	6a 00                	push   $0x0
f010c710:	6a 13                	push   $0x13
f010c712:	eb 60                	jmp    f010c774 <_alltraps>

f010c714 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c714:	6a 00                	push   $0x0
f010c716:	6a 20                	push   $0x20
f010c718:	eb 5a                	jmp    f010c774 <_alltraps>

f010c71a <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c71a:	6a 00                	push   $0x0
f010c71c:	6a 21                	push   $0x21
f010c71e:	eb 54                	jmp    f010c774 <_alltraps>

f010c720 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c720:	6a 00                	push   $0x0
f010c722:	6a 22                	push   $0x22
f010c724:	eb 4e                	jmp    f010c774 <_alltraps>

f010c726 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c726:	6a 00                	push   $0x0
f010c728:	6a 23                	push   $0x23
f010c72a:	eb 48                	jmp    f010c774 <_alltraps>

f010c72c <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c72c:	6a 00                	push   $0x0
f010c72e:	6a 24                	push   $0x24
f010c730:	eb 42                	jmp    f010c774 <_alltraps>

f010c732 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c732:	6a 00                	push   $0x0
f010c734:	6a 25                	push   $0x25
f010c736:	eb 3c                	jmp    f010c774 <_alltraps>

f010c738 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c738:	6a 00                	push   $0x0
f010c73a:	6a 26                	push   $0x26
f010c73c:	eb 36                	jmp    f010c774 <_alltraps>

f010c73e <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c73e:	6a 00                	push   $0x0
f010c740:	6a 27                	push   $0x27
f010c742:	eb 30                	jmp    f010c774 <_alltraps>

f010c744 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c744:	6a 00                	push   $0x0
f010c746:	6a 28                	push   $0x28
f010c748:	eb 2a                	jmp    f010c774 <_alltraps>

f010c74a <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c74a:	6a 00                	push   $0x0
f010c74c:	6a 29                	push   $0x29
f010c74e:	eb 24                	jmp    f010c774 <_alltraps>

f010c750 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c750:	6a 00                	push   $0x0
f010c752:	6a 2a                	push   $0x2a
f010c754:	eb 1e                	jmp    f010c774 <_alltraps>

f010c756 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c756:	6a 00                	push   $0x0
f010c758:	6a 2b                	push   $0x2b
f010c75a:	eb 18                	jmp    f010c774 <_alltraps>

f010c75c <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c75c:	6a 00                	push   $0x0
f010c75e:	6a 2c                	push   $0x2c
f010c760:	eb 12                	jmp    f010c774 <_alltraps>

f010c762 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c762:	6a 00                	push   $0x0
f010c764:	6a 2d                	push   $0x2d
f010c766:	eb 0c                	jmp    f010c774 <_alltraps>

f010c768 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c768:	6a 00                	push   $0x0
f010c76a:	6a 2e                	push   $0x2e
f010c76c:	eb 06                	jmp    f010c774 <_alltraps>

f010c76e <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c76e:	6a 00                	push   $0x0
f010c770:	6a 2f                	push   $0x2f
f010c772:	eb 00                	jmp    f010c774 <_alltraps>

f010c774 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c774:	1e                   	push   %ds
push %es
f010c775:	06                   	push   %es
pushal
f010c776:	60                   	pusha  

mov $(GD_KD), %ax
f010c777:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c77b:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c77d:	8e c0                	mov    %eax,%es

push %esp
f010c77f:	54                   	push   %esp

call trap
f010c780:	e8 d6 fb ff ff       	call   f010c35b <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c785:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c786:	61                   	popa   
pop %es
f010c787:	07                   	pop    %es
pop %ds
f010c788:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c789:	83 c4 08             	add    $0x8,%esp

iret
f010c78c:	cf                   	iret   

f010c78d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c78d:	55                   	push   %ebp
f010c78e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c790:	8b 45 08             	mov    0x8(%ebp),%eax
f010c793:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f010c799:	29 d0                	sub    %edx,%eax
f010c79b:	c1 f8 02             	sar    $0x2,%eax
f010c79e:	89 c2                	mov    %eax,%edx
f010c7a0:	89 d0                	mov    %edx,%eax
f010c7a2:	c1 e0 03             	shl    $0x3,%eax
f010c7a5:	01 d0                	add    %edx,%eax
f010c7a7:	c1 e0 03             	shl    $0x3,%eax
f010c7aa:	01 d0                	add    %edx,%eax
f010c7ac:	c1 e0 03             	shl    $0x3,%eax
f010c7af:	01 d0                	add    %edx,%eax
f010c7b1:	c1 e0 03             	shl    $0x3,%eax
f010c7b4:	01 d0                	add    %edx,%eax
f010c7b6:	89 c1                	mov    %eax,%ecx
f010c7b8:	c1 e1 0f             	shl    $0xf,%ecx
f010c7bb:	01 c8                	add    %ecx,%eax
f010c7bd:	c1 e0 03             	shl    $0x3,%eax
f010c7c0:	01 d0                	add    %edx,%eax
f010c7c2:	f7 d8                	neg    %eax
}
f010c7c4:	5d                   	pop    %ebp
f010c7c5:	c3                   	ret    

f010c7c6 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c7c6:	55                   	push   %ebp
f010c7c7:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c7c9:	ff 75 08             	pushl  0x8(%ebp)
f010c7cc:	e8 bc ff ff ff       	call   f010c78d <to_frame_number>
f010c7d1:	83 c4 04             	add    $0x4,%esp
f010c7d4:	c1 e0 0c             	shl    $0xc,%eax
}
f010c7d7:	c9                   	leave  
f010c7d8:	c3                   	ret    

f010c7d9 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c7d9:	55                   	push   %ebp
f010c7da:	89 e5                	mov    %esp,%ebp
f010c7dc:	83 ec 18             	sub    $0x18,%esp
f010c7df:	8b 45 10             	mov    0x10(%ebp),%eax
f010c7e2:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c7e5:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c7e9:	74 23                	je     f010c80e <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c7eb:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c7f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7f3:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010c7f9:	83 c2 5c             	add    $0x5c,%edx
f010c7fc:	83 ec 04             	sub    $0x4,%esp
f010c7ff:	50                   	push   %eax
f010c800:	52                   	push   %edx
f010c801:	68 30 31 13 f0       	push   $0xf0133130
f010c806:	e8 26 46 ff ff       	call   f0100e31 <cprintf>
f010c80b:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c80e:	83 ec 04             	sub    $0x4,%esp
f010c811:	ff 75 08             	pushl  0x8(%ebp)
f010c814:	ff 75 0c             	pushl  0xc(%ebp)
f010c817:	68 39 31 13 f0       	push   $0xf0133139
f010c81c:	e8 10 46 ff ff       	call   f0100e31 <cprintf>
f010c821:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c824:	90                   	nop
f010c825:	c9                   	leave  
f010c826:	c3                   	ret    

f010c827 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c827:	55                   	push   %ebp
f010c828:	89 e5                	mov    %esp,%ebp
f010c82a:	83 ec 18             	sub    $0x18,%esp
f010c82d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c830:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c833:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c837:	83 ec 08             	sub    $0x8,%esp
f010c83a:	50                   	push   %eax
f010c83b:	68 3e 31 13 f0       	push   $0xf013313e
f010c840:	e8 ec 45 ff ff       	call   f0100e31 <cprintf>
f010c845:	83 c4 10             	add    $0x10,%esp
}
f010c848:	90                   	nop
f010c849:	c9                   	leave  
f010c84a:	c3                   	ret    

f010c84b <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c84b:	55                   	push   %ebp
f010c84c:	89 e5                	mov    %esp,%ebp
f010c84e:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c851:	e8 11 44 ff ff       	call   f0100c67 <cons_getc2>
f010c856:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c859:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c85c:	c9                   	leave  
f010c85d:	c3                   	ret    

f010c85e <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c85e:	55                   	push   %ebp
f010c85f:	89 e5                	mov    %esp,%ebp
f010c861:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c864:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c869:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c86c:	83 ec 0c             	sub    $0xc,%esp
f010c86f:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c872:	50                   	push   %eax
f010c873:	e8 8f aa ff ff       	call   f0107307 <allocate_frame>
f010c878:	83 c4 10             	add    $0x10,%esp
f010c87b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c87e:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c882:	75 08                	jne    f010c88c <__sys_allocate_page+0x2e>
		return r ;
f010c884:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c887:	e9 d3 00 00 00       	jmp    f010c95f <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c88c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c88f:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c894:	77 0c                	ja     f010c8a2 <__sys_allocate_page+0x44>
f010c896:	8b 45 08             	mov    0x8(%ebp),%eax
f010c899:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c89e:	85 c0                	test   %eax,%eax
f010c8a0:	74 0a                	je     f010c8ac <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c8a2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8a7:	e9 b3 00 00 00       	jmp    f010c95f <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c8ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8af:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c8b4:	83 f8 04             	cmp    $0x4,%eax
f010c8b7:	74 0a                	je     f010c8c3 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c8b9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8be:	e9 9c 00 00 00       	jmp    f010c95f <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c8c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c8c6:	83 ec 0c             	sub    $0xc,%esp
f010c8c9:	50                   	push   %eax
f010c8ca:	e8 f7 fe ff ff       	call   f010c7c6 <to_physical_address>
f010c8cf:	83 c4 10             	add    $0x10,%esp
f010c8d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c8d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c8db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8de:	c1 e8 0c             	shr    $0xc,%eax
f010c8e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c8e4:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010c8e9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c8ec:	72 17                	jb     f010c905 <__sys_allocate_page+0xa7>
f010c8ee:	ff 75 e8             	pushl  -0x18(%ebp)
f010c8f1:	68 44 31 13 f0       	push   $0xf0133144
f010c8f6:	68 8d 00 00 00       	push   $0x8d
f010c8fb:	68 73 31 13 f0       	push   $0xf0133173
f010c900:	e8 ab 38 ff ff       	call   f01001b0 <_panic>
f010c905:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c908:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c90d:	83 ec 04             	sub    $0x4,%esp
f010c910:	68 00 10 00 00       	push   $0x1000
f010c915:	6a 00                	push   $0x0
f010c917:	50                   	push   %eax
f010c918:	e8 c1 26 02 00       	call   f012efde <memset>
f010c91d:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c920:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c923:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c926:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c929:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c92f:	ff 75 0c             	pushl  0xc(%ebp)
f010c932:	51                   	push   %ecx
f010c933:	52                   	push   %edx
f010c934:	50                   	push   %eax
f010c935:	e8 68 ad ff ff       	call   f01076a2 <map_frame>
f010c93a:	83 c4 10             	add    $0x10,%esp
f010c93d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c940:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c944:	75 14                	jne    f010c95a <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c946:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c949:	83 ec 0c             	sub    $0xc,%esp
f010c94c:	50                   	push   %eax
f010c94d:	e8 47 ab ff ff       	call   f0107499 <decrement_references>
f010c952:	83 c4 10             	add    $0x10,%esp
		return r;
f010c955:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c958:	eb 05                	jmp    f010c95f <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c95a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c95f:	c9                   	leave  
f010c960:	c3                   	ret    

f010c961 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c961:	55                   	push   %ebp
f010c962:	89 e5                	mov    %esp,%ebp
f010c964:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c967:	83 ec 04             	sub    $0x4,%esp
f010c96a:	68 87 31 13 f0       	push   $0xf0133187
f010c96f:	68 b4 00 00 00       	push   $0xb4
f010c974:	68 73 31 13 f0       	push   $0xf0133173
f010c979:	e8 32 38 ff ff       	call   f01001b0 <_panic>

f010c97e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c97e:	55                   	push   %ebp
f010c97f:	89 e5                	mov    %esp,%ebp
f010c981:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c984:	83 ec 04             	sub    $0x4,%esp
f010c987:	68 a8 31 13 f0       	push   $0xf01331a8
f010c98c:	68 c5 00 00 00       	push   $0xc5
f010c991:	68 73 31 13 f0       	push   $0xf0133173
f010c996:	e8 15 38 ff ff       	call   f01001b0 <_panic>

f010c99b <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c99b:	55                   	push   %ebp
f010c99c:	89 e5                	mov    %esp,%ebp
f010c99e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c9a1:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c9a6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c9ac:	83 ec 04             	sub    $0x4,%esp
f010c9af:	ff 75 0c             	pushl  0xc(%ebp)
f010c9b2:	ff 75 08             	pushl  0x8(%ebp)
f010c9b5:	50                   	push   %eax
f010c9b6:	e8 36 c2 ff ff       	call   f0108bf1 <calculate_required_frames>
f010c9bb:	83 c4 10             	add    $0x10,%esp
}
f010c9be:	c9                   	leave  
f010c9bf:	c3                   	ret    

f010c9c0 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c9c0:	55                   	push   %ebp
f010c9c1:	89 e5                	mov    %esp,%ebp
f010c9c3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9c6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9c9:	83 ec 0c             	sub    $0xc,%esp
f010c9cc:	50                   	push   %eax
f010c9cd:	e8 40 af ff ff       	call   f0107912 <calculate_available_frames>
f010c9d2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c9d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9db:	01 d0                	add    %edx,%eax
}
f010c9dd:	c9                   	leave  
f010c9de:	c3                   	ret    

f010c9df <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c9df:	55                   	push   %ebp
f010c9e0:	89 e5                	mov    %esp,%ebp
f010c9e2:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9e5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9e8:	83 ec 0c             	sub    $0xc,%esp
f010c9eb:	50                   	push   %eax
f010c9ec:	e8 21 af ff ff       	call   f0107912 <calculate_available_frames>
f010c9f1:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c9f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c9f7:	c9                   	leave  
f010c9f8:	c3                   	ret    

f010c9f9 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c9f9:	55                   	push   %ebp
f010c9fa:	89 e5                	mov    %esp,%ebp
f010c9fc:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca02:	83 ec 0c             	sub    $0xc,%esp
f010ca05:	50                   	push   %eax
f010ca06:	e8 07 af ff ff       	call   f0107912 <calculate_available_frames>
f010ca0b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ca0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010ca11:	c9                   	leave  
f010ca12:	c3                   	ret    

f010ca13 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010ca13:	55                   	push   %ebp
f010ca14:	89 e5                	mov    %esp,%ebp
f010ca16:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010ca19:	83 ec 0c             	sub    $0xc,%esp
f010ca1c:	ff 75 08             	pushl  0x8(%ebp)
f010ca1f:	e8 f0 12 02 00       	call   f012dd14 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010ca24:	83 c4 10             	add    $0x10,%esp
}
f010ca27:	c9                   	leave  
f010ca28:	c3                   	ret    

f010ca29 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010ca29:	55                   	push   %ebp
f010ca2a:	89 e5                	mov    %esp,%ebp
f010ca2c:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010ca2f:	e8 38 12 02 00       	call   f012dc6c <scarce_memory>
}
f010ca34:	90                   	nop
f010ca35:	c9                   	leave  
f010ca36:	c3                   	ret    

f010ca37 <sys_clearFFL>:

void sys_clearFFL()
{
f010ca37:	55                   	push   %ebp
f010ca38:	89 e5                	mov    %esp,%ebp
f010ca3a:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ca3d:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f010ca42:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ca45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca4c:	eb 12                	jmp    f010ca60 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ca4e:	83 ec 0c             	sub    $0xc,%esp
f010ca51:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca54:	50                   	push   %eax
f010ca55:	e8 ad a8 ff ff       	call   f0107307 <allocate_frame>
f010ca5a:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca5d:	ff 45 f4             	incl   -0xc(%ebp)
f010ca60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca63:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ca66:	7c e6                	jl     f010ca4e <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ca68:	90                   	nop
f010ca69:	c9                   	leave  
f010ca6a:	c3                   	ret    

f010ca6b <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ca6b:	55                   	push   %ebp
f010ca6c:	89 e5                	mov    %esp,%ebp
f010ca6e:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ca71:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010ca76:	83 ec 0c             	sub    $0xc,%esp
f010ca79:	50                   	push   %eax
f010ca7a:	e8 10 7b ff ff       	call   f010458f <pf_calculate_allocated_pages>
f010ca7f:	83 c4 10             	add    $0x10,%esp
}
f010ca82:	c9                   	leave  
f010ca83:	c3                   	ret    

f010ca84 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010ca84:	55                   	push   %ebp
f010ca85:	89 e5                	mov    %esp,%ebp
f010ca87:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010ca8a:	e8 66 0d 00 00       	call   f010d7f5 <isBufferingEnabled>
f010ca8f:	84 c0                	test   %al,%al
f010ca91:	74 19                	je     f010caac <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ca93:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010ca98:	83 ec 04             	sub    $0x4,%esp
f010ca9b:	ff 75 0c             	pushl  0xc(%ebp)
f010ca9e:	ff 75 08             	pushl  0x8(%ebp)
f010caa1:	50                   	push   %eax
f010caa2:	e8 80 c1 ff ff       	call   f0108c27 <__free_user_mem_with_buffering>
f010caa7:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010caaa:	eb 18                	jmp    f010cac4 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010caac:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cab1:	83 ec 04             	sub    $0x4,%esp
f010cab4:	ff 75 0c             	pushl  0xc(%ebp)
f010cab7:	ff 75 08             	pushl  0x8(%ebp)
f010caba:	50                   	push   %eax
f010cabb:	e8 59 c1 ff ff       	call   f0108c19 <free_user_mem>
f010cac0:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cac3:	90                   	nop
}
f010cac4:	c9                   	leave  
f010cac5:	c3                   	ret    

f010cac6 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cac6:	55                   	push   %ebp
f010cac7:	89 e5                	mov    %esp,%ebp
f010cac9:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cacc:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cad1:	83 ec 04             	sub    $0x4,%esp
f010cad4:	ff 75 0c             	pushl  0xc(%ebp)
f010cad7:	ff 75 08             	pushl  0x8(%ebp)
f010cada:	50                   	push   %eax
f010cadb:	e8 2b c1 ff ff       	call   f0108c0b <allocate_user_mem>
f010cae0:	83 c4 10             	add    $0x10,%esp
	return;
f010cae3:	90                   	nop
}
f010cae4:	c9                   	leave  
f010cae5:	c3                   	ret    

f010cae6 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cae6:	55                   	push   %ebp
f010cae7:	89 e5                	mov    %esp,%ebp
f010cae9:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010caec:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010caf1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010caf7:	ff 75 10             	pushl  0x10(%ebp)
f010cafa:	ff 75 0c             	pushl  0xc(%ebp)
f010cafd:	ff 75 08             	pushl  0x8(%ebp)
f010cb00:	50                   	push   %eax
f010cb01:	e8 b7 c0 ff ff       	call   f0108bbd <allocate_chunk>
f010cb06:	83 c4 10             	add    $0x10,%esp
	return;
f010cb09:	90                   	nop
}
f010cb0a:	c9                   	leave  
f010cb0b:	c3                   	ret    

f010cb0c <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cb0c:	55                   	push   %ebp
f010cb0d:	89 e5                	mov    %esp,%ebp
f010cb0f:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cb12:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb17:	ff 75 10             	pushl  0x10(%ebp)
f010cb1a:	ff 75 0c             	pushl  0xc(%ebp)
f010cb1d:	ff 75 08             	pushl  0x8(%ebp)
f010cb20:	50                   	push   %eax
f010cb21:	e8 1e c1 ff ff       	call   f0108c44 <move_user_mem>
f010cb26:	83 c4 10             	add    $0x10,%esp
	return;
f010cb29:	90                   	nop
}
f010cb2a:	c9                   	leave  
f010cb2b:	c3                   	ret    

f010cb2c <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cb2c:	55                   	push   %ebp
f010cb2d:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cb2f:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
}
f010cb34:	5d                   	pop    %ebp
f010cb35:	c3                   	ret    

f010cb36 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cb36:	55                   	push   %ebp
f010cb37:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cb39:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb3c:	a3 cc be 2b f0       	mov    %eax,0xf02bbecc
}
f010cb41:	90                   	nop
f010cb42:	5d                   	pop    %ebp
f010cb43:	c3                   	ret    

f010cb44 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cb44:	55                   	push   %ebp
f010cb45:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cb47:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb4c:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010cb52:	8b 52 38             	mov    0x38(%edx),%edx
f010cb55:	80 e6 fd             	and    $0xfd,%dh
f010cb58:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb5b:	90                   	nop
f010cb5c:	5d                   	pop    %ebp
f010cb5d:	c3                   	ret    

f010cb5e <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cb5e:	55                   	push   %ebp
f010cb5f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cb61:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb66:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010cb6c:	8b 52 38             	mov    0x38(%edx),%edx
f010cb6f:	80 ce 02             	or     $0x2,%dh
f010cb72:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb75:	90                   	nop
f010cb76:	5d                   	pop    %ebp
f010cb77:	c3                   	ret    

f010cb78 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cb78:	55                   	push   %ebp
f010cb79:	89 e5                	mov    %esp,%ebp
f010cb7b:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cb7e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb83:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb86:	83 ec 04             	sub    $0x4,%esp
f010cb89:	ff 75 0c             	pushl  0xc(%ebp)
f010cb8c:	ff 75 08             	pushl  0x8(%ebp)
f010cb8f:	50                   	push   %eax
f010cb90:	e8 f8 0f 00 00       	call   f010db8d <createSemaphore>
f010cb95:	83 c4 10             	add    $0x10,%esp
}
f010cb98:	c9                   	leave  
f010cb99:	c3                   	ret    

f010cb9a <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cb9a:	55                   	push   %ebp
f010cb9b:	89 e5                	mov    %esp,%ebp
f010cb9d:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cba0:	83 ec 08             	sub    $0x8,%esp
f010cba3:	ff 75 0c             	pushl  0xc(%ebp)
f010cba6:	ff 75 08             	pushl  0x8(%ebp)
f010cba9:	e8 fc 0f 00 00       	call   f010dbaa <waitSemaphore>
f010cbae:	83 c4 10             	add    $0x10,%esp
}
f010cbb1:	90                   	nop
f010cbb2:	c9                   	leave  
f010cbb3:	c3                   	ret    

f010cbb4 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cbb4:	55                   	push   %ebp
f010cbb5:	89 e5                	mov    %esp,%ebp
f010cbb7:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cbba:	83 ec 08             	sub    $0x8,%esp
f010cbbd:	ff 75 0c             	pushl  0xc(%ebp)
f010cbc0:	ff 75 08             	pushl  0x8(%ebp)
f010cbc3:	e8 ff 0f 00 00       	call   f010dbc7 <signalSemaphore>
f010cbc8:	83 c4 10             	add    $0x10,%esp
}
f010cbcb:	90                   	nop
f010cbcc:	c9                   	leave  
f010cbcd:	c3                   	ret    

f010cbce <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cbce:	55                   	push   %ebp
f010cbcf:	89 e5                	mov    %esp,%ebp
f010cbd1:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cbd4:	83 ec 08             	sub    $0x8,%esp
f010cbd7:	ff 75 0c             	pushl  0xc(%ebp)
f010cbda:	ff 75 08             	pushl  0x8(%ebp)
f010cbdd:	e8 51 0e 00 00       	call   f010da33 <get_semaphore_object_ID>
f010cbe2:	83 c4 10             	add    $0x10,%esp
f010cbe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cbe8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbec:	78 06                	js     f010cbf4 <sys_getSemaphoreValue+0x26>
f010cbee:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cbf2:	7e 19                	jle    f010cc0d <sys_getSemaphoreValue+0x3f>
f010cbf4:	68 c8 31 13 f0       	push   $0xf01331c8
f010cbf9:	68 ed 31 13 f0       	push   $0xf01331ed
f010cbfe:	68 4d 01 00 00       	push   $0x14d
f010cc03:	68 73 31 13 f0       	push   $0xf0133173
f010cc08:	e8 a3 35 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010cc0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cc10:	89 d0                	mov    %edx,%eax
f010cc12:	c1 e0 02             	shl    $0x2,%eax
f010cc15:	01 d0                	add    %edx,%eax
f010cc17:	01 c0                	add    %eax,%eax
f010cc19:	01 d0                	add    %edx,%eax
f010cc1b:	01 c0                	add    %eax,%eax
f010cc1d:	01 d0                	add    %edx,%eax
f010cc1f:	c1 e0 02             	shl    $0x2,%eax
f010cc22:	05 14 9b 2b f0       	add    $0xf02b9b14,%eax
f010cc27:	8b 00                	mov    (%eax),%eax
}
f010cc29:	c9                   	leave  
f010cc2a:	c3                   	ret    

f010cc2b <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cc2b:	55                   	push   %ebp
f010cc2c:	89 e5                	mov    %esp,%ebp
f010cc2e:	83 ec 18             	sub    $0x18,%esp
f010cc31:	8b 45 10             	mov    0x10(%ebp),%eax
f010cc34:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cc37:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cc3b:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cc40:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc43:	83 ec 0c             	sub    $0xc,%esp
f010cc46:	ff 75 14             	pushl  0x14(%ebp)
f010cc49:	52                   	push   %edx
f010cc4a:	ff 75 0c             	pushl  0xc(%ebp)
f010cc4d:	ff 75 08             	pushl  0x8(%ebp)
f010cc50:	50                   	push   %eax
f010cc51:	e8 4d b2 ff ff       	call   f0107ea3 <createSharedObject>
f010cc56:	83 c4 20             	add    $0x20,%esp
}
f010cc59:	c9                   	leave  
f010cc5a:	c3                   	ret    

f010cc5b <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cc5b:	55                   	push   %ebp
f010cc5c:	89 e5                	mov    %esp,%ebp
f010cc5e:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cc61:	83 ec 08             	sub    $0x8,%esp
f010cc64:	ff 75 0c             	pushl  0xc(%ebp)
f010cc67:	ff 75 08             	pushl  0x8(%ebp)
f010cc6a:	e8 57 b2 ff ff       	call   f0107ec6 <getSizeOfSharedObject>
f010cc6f:	83 c4 10             	add    $0x10,%esp
}
f010cc72:	c9                   	leave  
f010cc73:	c3                   	ret    

f010cc74 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc74:	55                   	push   %ebp
f010cc75:	89 e5                	mov    %esp,%ebp
f010cc77:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cc7a:	83 ec 04             	sub    $0x4,%esp
f010cc7d:	ff 75 10             	pushl  0x10(%ebp)
f010cc80:	ff 75 0c             	pushl  0xc(%ebp)
f010cc83:	ff 75 08             	pushl  0x8(%ebp)
f010cc86:	e8 58 b2 ff ff       	call   f0107ee3 <getSharedObject>
f010cc8b:	83 c4 10             	add    $0x10,%esp
}
f010cc8e:	c9                   	leave  
f010cc8f:	c3                   	ret    

f010cc90 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cc90:	55                   	push   %ebp
f010cc91:	89 e5                	mov    %esp,%ebp
f010cc93:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cc96:	83 ec 08             	sub    $0x8,%esp
f010cc99:	ff 75 0c             	pushl  0xc(%ebp)
f010cc9c:	ff 75 08             	pushl  0x8(%ebp)
f010cc9f:	e8 5c b2 ff ff       	call   f0107f00 <freeSharedObject>
f010cca4:	83 c4 10             	add    $0x10,%esp
}
f010cca7:	c9                   	leave  
f010cca8:	c3                   	ret    

f010cca9 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cca9:	55                   	push   %ebp
f010ccaa:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ccac:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010ccb1:	5d                   	pop    %ebp
f010ccb2:	c3                   	ret    

f010ccb3 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ccb3:	55                   	push   %ebp
f010ccb4:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ccb6:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010ccbb:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ccbe:	5d                   	pop    %ebp
f010ccbf:	c3                   	ret    

f010ccc0 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010ccc0:	55                   	push   %ebp
f010ccc1:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010ccc3:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010ccc8:	89 c2                	mov    %eax,%edx
f010ccca:	a1 50 32 25 f0       	mov    0xf0253250,%eax
f010cccf:	29 c2                	sub    %eax,%edx
f010ccd1:	89 d0                	mov    %edx,%eax
f010ccd3:	c1 f8 05             	sar    $0x5,%eax
f010ccd6:	89 c2                	mov    %eax,%edx
f010ccd8:	89 d0                	mov    %edx,%eax
f010ccda:	c1 e0 03             	shl    $0x3,%eax
f010ccdd:	01 d0                	add    %edx,%eax
f010ccdf:	01 c0                	add    %eax,%eax
f010cce1:	01 d0                	add    %edx,%eax
f010cce3:	c1 e0 06             	shl    $0x6,%eax
f010cce6:	01 d0                	add    %edx,%eax
f010cce8:	89 c1                	mov    %eax,%ecx
f010ccea:	c1 e1 04             	shl    $0x4,%ecx
f010cced:	01 c8                	add    %ecx,%eax
f010ccef:	c1 e0 03             	shl    $0x3,%eax
f010ccf2:	01 d0                	add    %edx,%eax
f010ccf4:	01 c0                	add    %eax,%eax
f010ccf6:	01 d0                	add    %edx,%eax
f010ccf8:	89 c1                	mov    %eax,%ecx
f010ccfa:	c1 e1 04             	shl    $0x4,%ecx
f010ccfd:	01 c8                	add    %ecx,%eax
f010ccff:	c1 e0 03             	shl    $0x3,%eax
f010cd02:	01 d0                	add    %edx,%eax
f010cd04:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cd0b:	01 d0                	add    %edx,%eax
}
f010cd0d:	5d                   	pop    %ebp
f010cd0e:	c3                   	ret    

f010cd0f <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cd0f:	55                   	push   %ebp
f010cd10:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cd12:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd17:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cd1a:	5d                   	pop    %ebp
f010cd1b:	c3                   	ret    

f010cd1c <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cd1c:	55                   	push   %ebp
f010cd1d:	89 e5                	mov    %esp,%ebp
f010cd1f:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cd22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cd26:	75 0a                	jne    f010cd32 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cd28:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cd30:	eb 22                	jmp    f010cd54 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cd32:	83 ec 04             	sub    $0x4,%esp
f010cd35:	6a 00                	push   $0x0
f010cd37:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cd3a:	50                   	push   %eax
f010cd3b:	ff 75 08             	pushl  0x8(%ebp)
f010cd3e:	e8 6d cc ff ff       	call   f01099b0 <envid2env>
f010cd43:	83 c4 10             	add    $0x10,%esp
f010cd46:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cd49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd4d:	79 05                	jns    f010cd54 <sys_destroy_env+0x38>
	{
		return r;
f010cd4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd52:	eb 5e                	jmp    f010cdb2 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cd54:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cd57:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd5c:	39 c2                	cmp    %eax,%edx
f010cd5e:	75 1b                	jne    f010cd7b <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cd60:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd65:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd68:	83 ec 08             	sub    $0x8,%esp
f010cd6b:	50                   	push   %eax
f010cd6c:	68 02 32 13 f0       	push   $0xf0133202
f010cd71:	e8 bb 40 ff ff       	call   f0100e31 <cprintf>
f010cd76:	83 c4 10             	add    $0x10,%esp
f010cd79:	eb 20                	jmp    f010cd9b <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cd7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd7e:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cd81:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd86:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd89:	83 ec 04             	sub    $0x4,%esp
f010cd8c:	52                   	push   %edx
f010cd8d:	50                   	push   %eax
f010cd8e:	68 1d 32 13 f0       	push   $0xf013321d
f010cd93:	e8 99 40 ff ff       	call   f0100e31 <cprintf>
f010cd98:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cd9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd9e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cda1:	83 ec 0c             	sub    $0xc,%esp
f010cda4:	50                   	push   %eax
f010cda5:	e8 49 88 ff ff       	call   f01055f3 <sched_kill_env>
f010cdaa:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cdad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cdb2:	c9                   	leave  
f010cdb3:	c3                   	ret    

f010cdb4 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cdb4:	55                   	push   %ebp
f010cdb5:	89 e5                	mov    %esp,%ebp
f010cdb7:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cdba:	e8 d2 cb ff ff       	call   f0109991 <env_exit>
	//env_run_cmd_prmpt();
}
f010cdbf:	90                   	nop
f010cdc0:	c9                   	leave  
f010cdc1:	c3                   	ret    

f010cdc2 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cdc2:	55                   	push   %ebp
f010cdc3:	89 e5                	mov    %esp,%ebp
f010cdc5:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cdc8:	ff 75 14             	pushl  0x14(%ebp)
f010cdcb:	ff 75 10             	pushl  0x10(%ebp)
f010cdce:	ff 75 0c             	pushl  0xc(%ebp)
f010cdd1:	ff 75 08             	pushl  0x8(%ebp)
f010cdd4:	e8 d4 be ff ff       	call   f0108cad <env_create>
f010cdd9:	83 c4 10             	add    $0x10,%esp
f010cddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cddf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cde3:	75 07                	jne    f010cdec <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cde5:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cdea:	eb 14                	jmp    f010ce00 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cdec:	83 ec 0c             	sub    $0xc,%esp
f010cdef:	ff 75 f4             	pushl  -0xc(%ebp)
f010cdf2:	e8 1e 85 ff ff       	call   f0105315 <sched_new_env>
f010cdf7:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cdfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdfd:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ce00:	c9                   	leave  
f010ce01:	c3                   	ret    

f010ce02 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ce02:	55                   	push   %ebp
f010ce03:	89 e5                	mov    %esp,%ebp
f010ce05:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ce08:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce0b:	83 ec 0c             	sub    $0xc,%esp
f010ce0e:	50                   	push   %eax
f010ce0f:	e8 1e 85 ff ff       	call   f0105332 <sched_run_env>
f010ce14:	83 c4 10             	add    $0x10,%esp
}
f010ce17:	90                   	nop
f010ce18:	c9                   	leave  
f010ce19:	c3                   	ret    

f010ce1a <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ce1a:	55                   	push   %ebp
f010ce1b:	89 e5                	mov    %esp,%ebp
f010ce1d:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ce20:	0f 31                	rdtsc  
f010ce22:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ce25:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ce28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce2e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ce31:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ce34:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ce37:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce3a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ce3d:	89 01                	mov    %eax,(%ecx)
f010ce3f:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ce42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce45:	c9                   	leave  
f010ce46:	c2 04 00             	ret    $0x4

f010ce49 <sys_rcr2>:

uint32 sys_rcr2()
{
f010ce49:	55                   	push   %ebp
f010ce4a:	89 e5                	mov    %esp,%ebp
f010ce4c:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ce4f:	0f 20 d0             	mov    %cr2,%eax
f010ce52:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ce55:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ce58:	90                   	nop
}
f010ce59:	c9                   	leave  
f010ce5a:	c3                   	ret    

f010ce5b <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ce5b:	55                   	push   %ebp
f010ce5c:	89 e5                	mov    %esp,%ebp
f010ce5e:	83 ec 04             	sub    $0x4,%esp
f010ce61:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce64:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ce67:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ce6a:	a2 08 3b 25 f0       	mov    %al,0xf0253b08
}
f010ce6f:	90                   	nop
f010ce70:	c9                   	leave  
f010ce71:	c3                   	ret    

f010ce72 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010ce72:	55                   	push   %ebp
f010ce73:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010ce75:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010ce7a:	5d                   	pop    %ebp
f010ce7b:	c3                   	ret    

f010ce7c <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ce7c:	55                   	push   %ebp
f010ce7d:	89 e5                	mov    %esp,%ebp
f010ce7f:	56                   	push   %esi
f010ce80:	53                   	push   %ebx
f010ce81:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010ce84:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
f010ce88:	0f 87 0f 04 00 00    	ja     f010d29d <syscall+0x421>
f010ce8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce91:	c1 e0 02             	shl    $0x2,%eax
f010ce94:	05 38 32 13 f0       	add    $0xf0133238,%eax
f010ce99:	8b 00                	mov    (%eax),%eax
f010ce9b:	ff e0                	jmp    *%eax
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here

	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010ce9d:	8b 45 14             	mov    0x14(%ebp),%eax
f010cea0:	0f b6 d0             	movzbl %al,%edx
f010cea3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cea6:	83 ec 04             	sub    $0x4,%esp
f010cea9:	52                   	push   %edx
f010ceaa:	ff 75 10             	pushl  0x10(%ebp)
f010cead:	50                   	push   %eax
f010ceae:	e8 26 f9 ff ff       	call   f010c7d9 <sys_cputs>
f010ceb3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ceb6:	b8 00 00 00 00       	mov    $0x0,%eax
f010cebb:	e9 e2 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cec0:	e8 86 f9 ff ff       	call   f010c84b <sys_cgetc>
f010cec5:	e9 d8 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010ceca:	83 ec 08             	sub    $0x8,%esp
f010cecd:	ff 75 10             	pushl  0x10(%ebp)
f010ced0:	ff 75 0c             	pushl  0xc(%ebp)
f010ced3:	e8 c3 fa ff ff       	call   f010c99b <sys_calculate_required_frames>
f010ced8:	83 c4 10             	add    $0x10,%esp
f010cedb:	e9 c2 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cee0:	e8 db fa ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f010cee5:	e9 b8 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010ceea:	e8 f0 fa ff ff       	call   f010c9df <sys_calculate_modified_frames>
f010ceef:	e9 ae 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cef4:	e8 00 fb ff ff       	call   f010c9f9 <sys_calculate_notmod_frames>
f010cef9:	e9 a4 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cefe:	e8 68 fb ff ff       	call   f010ca6b <sys_pf_calculate_allocated_pages>
f010cf03:	e9 9a 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cf08:	83 ec 0c             	sub    $0xc,%esp
f010cf0b:	ff 75 0c             	pushl  0xc(%ebp)
f010cf0e:	e8 00 fb ff ff       	call   f010ca13 <sys_calculate_pages_tobe_removed_ready_exit>
f010cf13:	83 c4 10             	add    $0x10,%esp
f010cf16:	e9 87 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cf1b:	e8 09 fb ff ff       	call   f010ca29 <sys_scarce_memory>
		return 0;
f010cf20:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf25:	e9 78 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cf2a:	83 ec 04             	sub    $0x4,%esp
f010cf2d:	ff 75 14             	pushl  0x14(%ebp)
f010cf30:	ff 75 10             	pushl  0x10(%ebp)
f010cf33:	ff 75 0c             	pushl  0xc(%ebp)
f010cf36:	e8 ab fb ff ff       	call   f010cae6 <sys_allocate_chunk>
f010cf3b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf3e:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf43:	e9 5a 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cf48:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf4e:	83 ec 08             	sub    $0x8,%esp
f010cf51:	52                   	push   %edx
f010cf52:	50                   	push   %eax
f010cf53:	e8 06 f9 ff ff       	call   f010c85e <__sys_allocate_page>
f010cf58:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf5b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf60:	e9 3d 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cf65:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cf68:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cf6b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cf6e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf71:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf74:	83 ec 0c             	sub    $0xc,%esp
f010cf77:	56                   	push   %esi
f010cf78:	53                   	push   %ebx
f010cf79:	51                   	push   %ecx
f010cf7a:	52                   	push   %edx
f010cf7b:	50                   	push   %eax
f010cf7c:	e8 e0 f9 ff ff       	call   f010c961 <__sys_map_frame>
f010cf81:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cf84:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf89:	e9 14 03 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cf8e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf91:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf94:	83 ec 08             	sub    $0x8,%esp
f010cf97:	52                   	push   %edx
f010cf98:	50                   	push   %eax
f010cf99:	e8 e0 f9 ff ff       	call   f010c97e <__sys_unmap_frame>
f010cf9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfa1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfa6:	e9 f7 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010cfab:	e8 94 fb ff ff       	call   f010cb44 <sys_disable_interrupt>
		return 0;
f010cfb0:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfb5:	e9 e8 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cfba:	e8 9f fb ff ff       	call   f010cb5e <sys_enable_interrupt>
		return 0;
f010cfbf:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfc4:	e9 d9 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cfc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfcc:	0f be c0             	movsbl %al,%eax
f010cfcf:	83 ec 0c             	sub    $0xc,%esp
f010cfd2:	50                   	push   %eax
f010cfd3:	e8 4f f8 ff ff       	call   f010c827 <sys_cputc>
f010cfd8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfdb:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfe0:	e9 bd 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cfe5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfe8:	0f be c0             	movsbl %al,%eax
f010cfeb:	83 ec 0c             	sub    $0xc,%esp
f010cfee:	50                   	push   %eax
f010cfef:	e8 43 fa ff ff       	call   f010ca37 <sys_clearFFL>
f010cff4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cff7:	b8 00 00 00 00       	mov    $0x0,%eax
f010cffc:	e9 a1 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d001:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d004:	83 ec 08             	sub    $0x8,%esp
f010d007:	ff 75 10             	pushl  0x10(%ebp)
f010d00a:	50                   	push   %eax
f010d00b:	e8 68 fb ff ff       	call   f010cb78 <sys_createSemaphore>
f010d010:	83 c4 10             	add    $0x10,%esp
f010d013:	e9 8a 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d018:	8b 55 10             	mov    0x10(%ebp),%edx
f010d01b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d01e:	83 ec 08             	sub    $0x8,%esp
f010d021:	52                   	push   %edx
f010d022:	50                   	push   %eax
f010d023:	e8 72 fb ff ff       	call   f010cb9a <sys_waitSemaphore>
f010d028:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d02b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d030:	e9 6d 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d035:	8b 55 10             	mov    0x10(%ebp),%edx
f010d038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d03b:	83 ec 08             	sub    $0x8,%esp
f010d03e:	52                   	push   %edx
f010d03f:	50                   	push   %eax
f010d040:	e8 6f fb ff ff       	call   f010cbb4 <sys_signalSemaphore>
f010d045:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d048:	b8 00 00 00 00       	mov    $0x0,%eax
f010d04d:	e9 50 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d052:	8b 55 10             	mov    0x10(%ebp),%edx
f010d055:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d058:	83 ec 08             	sub    $0x8,%esp
f010d05b:	52                   	push   %edx
f010d05c:	50                   	push   %eax
f010d05d:	e8 6c fb ff ff       	call   f010cbce <sys_getSemaphoreValue>
f010d062:	83 c4 10             	add    $0x10,%esp
f010d065:	e9 38 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d06a:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d06d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d070:	0f b6 d0             	movzbl %al,%edx
f010d073:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d076:	51                   	push   %ecx
f010d077:	52                   	push   %edx
f010d078:	ff 75 10             	pushl  0x10(%ebp)
f010d07b:	50                   	push   %eax
f010d07c:	e8 aa fb ff ff       	call   f010cc2b <sys_createSharedObject>
f010d081:	83 c4 10             	add    $0x10,%esp
f010d084:	e9 19 02 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d089:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d08c:	8b 55 10             	mov    0x10(%ebp),%edx
f010d08f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d092:	83 ec 04             	sub    $0x4,%esp
f010d095:	51                   	push   %ecx
f010d096:	52                   	push   %edx
f010d097:	50                   	push   %eax
f010d098:	e8 d7 fb ff ff       	call   f010cc74 <sys_getSharedObject>
f010d09d:	83 c4 10             	add    $0x10,%esp
f010d0a0:	e9 fd 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d0a5:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0ab:	83 ec 08             	sub    $0x8,%esp
f010d0ae:	52                   	push   %edx
f010d0af:	50                   	push   %eax
f010d0b0:	e8 db fb ff ff       	call   f010cc90 <sys_freeSharedObject>
f010d0b5:	83 c4 10             	add    $0x10,%esp
f010d0b8:	e9 e5 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d0bd:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0c3:	83 ec 08             	sub    $0x8,%esp
f010d0c6:	52                   	push   %edx
f010d0c7:	50                   	push   %eax
f010d0c8:	e8 8e fb ff ff       	call   f010cc5b <sys_getSizeOfSharedObject>
f010d0cd:	83 c4 10             	add    $0x10,%esp
f010d0d0:	e9 cd 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d0d5:	e8 cf fb ff ff       	call   f010cca9 <sys_getMaxShares>
f010d0da:	e9 c3 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d0df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0e2:	ff 75 18             	pushl  0x18(%ebp)
f010d0e5:	ff 75 14             	pushl  0x14(%ebp)
f010d0e8:	ff 75 10             	pushl  0x10(%ebp)
f010d0eb:	50                   	push   %eax
f010d0ec:	e8 d1 fc ff ff       	call   f010cdc2 <sys_create_env>
f010d0f1:	83 c4 10             	add    $0x10,%esp
f010d0f4:	e9 a9 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d0f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0fc:	83 ec 0c             	sub    $0xc,%esp
f010d0ff:	50                   	push   %eax
f010d100:	e8 fd fc ff ff       	call   f010ce02 <sys_run_env>
f010d105:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d108:	b8 00 00 00 00       	mov    $0x0,%eax
f010d10d:	e9 90 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d112:	e8 a9 fb ff ff       	call   f010ccc0 <sys_getenvindex>
f010d117:	e9 86 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d11c:	e8 92 fb ff ff       	call   f010ccb3 <sys_getenvid>
f010d121:	e9 7c 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d126:	e8 e4 fb ff ff       	call   f010cd0f <sys_getparentenvid>
f010d12b:	e9 72 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d130:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d133:	83 ec 0c             	sub    $0xc,%esp
f010d136:	50                   	push   %eax
f010d137:	e8 e0 fb ff ff       	call   f010cd1c <sys_destroy_env>
f010d13c:	83 c4 10             	add    $0x10,%esp
f010d13f:	e9 5e 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d144:	e8 6b fc ff ff       	call   f010cdb4 <sys_exit_env>
		return 0;
f010d149:	b8 00 00 00 00       	mov    $0x0,%eax
f010d14e:	e9 4f 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d153:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d156:	83 ec 0c             	sub    $0xc,%esp
f010d159:	50                   	push   %eax
f010d15a:	e8 bb fc ff ff       	call   f010ce1a <sys_get_virtual_time>
f010d15f:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d162:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d165:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d168:	8b 45 10             	mov    0x10(%ebp),%eax
f010d16b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d16e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d171:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d174:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d176:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d179:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d17c:	89 10                	mov    %edx,(%eax)
		return 0;
f010d17e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d183:	e9 1a 01 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d188:	83 ec 04             	sub    $0x4,%esp
f010d18b:	ff 75 14             	pushl  0x14(%ebp)
f010d18e:	ff 75 10             	pushl  0x10(%ebp)
f010d191:	ff 75 0c             	pushl  0xc(%ebp)
f010d194:	e8 73 f9 ff ff       	call   f010cb0c <sys_move_user_mem>
f010d199:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d19c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1a1:	e9 fc 00 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d1a6:	e8 9e fc ff ff       	call   f010ce49 <sys_rcr2>
f010d1ab:	e9 f2 00 00 00       	jmp    f010d2a2 <syscall+0x426>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d1b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1b3:	0f b6 c0             	movzbl %al,%eax
f010d1b6:	83 ec 0c             	sub    $0xc,%esp
f010d1b9:	50                   	push   %eax
f010d1ba:	e8 9c fc ff ff       	call   f010ce5b <sys_bypassPageFault>
f010d1bf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1c2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1c7:	e9 d6 00 00 00       	jmp    f010d2a2 <syscall+0x426>

	case SYS_rsttst:
		rsttst();
f010d1cc:	e8 63 08 02 00       	call   f012da34 <rsttst>
		return 0;
f010d1d1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1d6:	e9 c7 00 00 00       	jmp    f010d2a2 <syscall+0x426>
	case SYS_inctst:
		inctst();
f010d1db:	e8 64 08 02 00       	call   f012da44 <inctst>
		return 0;
f010d1e0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1e5:	e9 b8 00 00 00       	jmp    f010d2a2 <syscall+0x426>
	case SYS_chktst:
		chktst(a1);
f010d1ea:	83 ec 0c             	sub    $0xc,%esp
f010d1ed:	ff 75 0c             	pushl  0xc(%ebp)
f010d1f0:	e8 4e 09 02 00       	call   f012db43 <chktst>
f010d1f5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1f8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1fd:	e9 a0 00 00 00       	jmp    f010d2a2 <syscall+0x426>
	case SYS_gettst:
		return gettst();
f010d202:	e8 4e 08 02 00       	call   f012da55 <gettst>
f010d207:	e9 96 00 00 00       	jmp    f010d2a2 <syscall+0x426>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d20c:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d20f:	8b 45 18             	mov    0x18(%ebp),%eax
f010d212:	0f be c0             	movsbl %al,%eax
f010d215:	83 ec 0c             	sub    $0xc,%esp
f010d218:	52                   	push   %edx
f010d219:	50                   	push   %eax
f010d21a:	ff 75 14             	pushl  0x14(%ebp)
f010d21d:	ff 75 10             	pushl  0x10(%ebp)
f010d220:	ff 75 0c             	pushl  0xc(%ebp)
f010d223:	e8 37 08 02 00       	call   f012da5f <tst>
f010d228:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d22b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d230:	eb 70                	jmp    f010d2a2 <syscall+0x426>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d232:	e8 f5 f8 ff ff       	call   f010cb2c <sys_get_heap_strategy>
f010d237:	eb 69                	jmp    f010d2a2 <syscall+0x426>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d239:	83 ec 0c             	sub    $0xc,%esp
f010d23c:	ff 75 0c             	pushl  0xc(%ebp)
f010d23f:	e8 f2 f8 ff ff       	call   f010cb36 <sys_set_uheap_strategy>
f010d244:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d247:	b8 00 00 00 00       	mov    $0x0,%eax
f010d24c:	eb 54                	jmp    f010d2a2 <syscall+0x426>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d24e:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d251:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d254:	8b 55 10             	mov    0x10(%ebp),%edx
f010d257:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d25a:	53                   	push   %ebx
f010d25b:	51                   	push   %ecx
f010d25c:	52                   	push   %edx
f010d25d:	50                   	push   %eax
f010d25e:	e8 a3 46 00 00       	call   f0111906 <sys_check_LRU_lists>
f010d263:	83 c4 10             	add    $0x10,%esp
f010d266:	eb 3a                	jmp    f010d2a2 <syscall+0x426>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d268:	8b 55 10             	mov    0x10(%ebp),%edx
f010d26b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d26e:	83 ec 08             	sub    $0x8,%esp
f010d271:	52                   	push   %edx
f010d272:	50                   	push   %eax
f010d273:	e8 10 48 00 00       	call   f0111a88 <sys_check_LRU_lists_free>
f010d278:	83 c4 10             	add    $0x10,%esp
f010d27b:	eb 25                	jmp    f010d2a2 <syscall+0x426>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d27d:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d280:	8b 55 10             	mov    0x10(%ebp),%edx
f010d283:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d286:	51                   	push   %ecx
f010d287:	ff 75 14             	pushl  0x14(%ebp)
f010d28a:	52                   	push   %edx
f010d28b:	50                   	push   %eax
f010d28c:	e8 62 49 00 00       	call   f0111bf3 <sys_check_WS_list>
f010d291:	83 c4 10             	add    $0x10,%esp
f010d294:	eb 0c                	jmp    f010d2a2 <syscall+0x426>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d296:	b8 03 00 00 00       	mov    $0x3,%eax
f010d29b:	eb 05                	jmp    f010d2a2 <syscall+0x426>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d29d:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d2a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d2a5:	5b                   	pop    %ebx
f010d2a6:	5e                   	pop    %esi
f010d2a7:	5d                   	pop    %ebp
f010d2a8:	c3                   	ret    

f010d2a9 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d2a9:	55                   	push   %ebp
f010d2aa:	89 e5                	mov    %esp,%ebp
f010d2ac:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d2af:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2b2:	8b 00                	mov    (%eax),%eax
f010d2b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d2b7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d2ba:	8b 00                	mov    (%eax),%eax
f010d2bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d2bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d2c6:	e9 ca 00 00 00       	jmp    f010d395 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d2cb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d2ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d2d1:	01 d0                	add    %edx,%eax
f010d2d3:	89 c2                	mov    %eax,%edx
f010d2d5:	c1 ea 1f             	shr    $0x1f,%edx
f010d2d8:	01 d0                	add    %edx,%eax
f010d2da:	d1 f8                	sar    %eax
f010d2dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d2df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2e2:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d2e5:	eb 03                	jmp    f010d2ea <stab_binsearch+0x41>
			m--;
f010d2e7:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d2ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2ed:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d2f0:	7c 1e                	jl     f010d310 <stab_binsearch+0x67>
f010d2f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2f5:	89 d0                	mov    %edx,%eax
f010d2f7:	01 c0                	add    %eax,%eax
f010d2f9:	01 d0                	add    %edx,%eax
f010d2fb:	c1 e0 02             	shl    $0x2,%eax
f010d2fe:	89 c2                	mov    %eax,%edx
f010d300:	8b 45 08             	mov    0x8(%ebp),%eax
f010d303:	01 d0                	add    %edx,%eax
f010d305:	8a 40 04             	mov    0x4(%eax),%al
f010d308:	0f b6 c0             	movzbl %al,%eax
f010d30b:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d30e:	75 d7                	jne    f010d2e7 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d310:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d313:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d316:	7d 09                	jge    f010d321 <stab_binsearch+0x78>
			l = true_m + 1;
f010d318:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d31b:	40                   	inc    %eax
f010d31c:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d31f:	eb 74                	jmp    f010d395 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d321:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d32b:	89 d0                	mov    %edx,%eax
f010d32d:	01 c0                	add    %eax,%eax
f010d32f:	01 d0                	add    %edx,%eax
f010d331:	c1 e0 02             	shl    $0x2,%eax
f010d334:	89 c2                	mov    %eax,%edx
f010d336:	8b 45 08             	mov    0x8(%ebp),%eax
f010d339:	01 d0                	add    %edx,%eax
f010d33b:	8b 40 08             	mov    0x8(%eax),%eax
f010d33e:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d341:	73 11                	jae    f010d354 <stab_binsearch+0xab>
			*region_left = m;
f010d343:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d346:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d349:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d34b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d34e:	40                   	inc    %eax
f010d34f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d352:	eb 41                	jmp    f010d395 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d354:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d357:	89 d0                	mov    %edx,%eax
f010d359:	01 c0                	add    %eax,%eax
f010d35b:	01 d0                	add    %edx,%eax
f010d35d:	c1 e0 02             	shl    $0x2,%eax
f010d360:	89 c2                	mov    %eax,%edx
f010d362:	8b 45 08             	mov    0x8(%ebp),%eax
f010d365:	01 d0                	add    %edx,%eax
f010d367:	8b 40 08             	mov    0x8(%eax),%eax
f010d36a:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d36d:	76 14                	jbe    f010d383 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d36f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d372:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d375:	8b 45 10             	mov    0x10(%ebp),%eax
f010d378:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d37a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d37d:	48                   	dec    %eax
f010d37e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d381:	eb 12                	jmp    f010d395 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d383:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d386:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d389:	89 10                	mov    %edx,(%eax)
			l = m;
f010d38b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d38e:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d391:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d395:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d398:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d39b:	0f 8e 2a ff ff ff    	jle    f010d2cb <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d3a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3a5:	75 0f                	jne    f010d3b6 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d3a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3aa:	8b 00                	mov    (%eax),%eax
f010d3ac:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d3af:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3b2:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d3b4:	eb 3d                	jmp    f010d3f3 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d3b6:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3b9:	8b 00                	mov    (%eax),%eax
f010d3bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d3be:	eb 03                	jmp    f010d3c3 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d3c0:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d3c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3c6:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d3c8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d3cb:	7d 1e                	jge    f010d3eb <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d3cd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d3d0:	89 d0                	mov    %edx,%eax
f010d3d2:	01 c0                	add    %eax,%eax
f010d3d4:	01 d0                	add    %edx,%eax
f010d3d6:	c1 e0 02             	shl    $0x2,%eax
f010d3d9:	89 c2                	mov    %eax,%edx
f010d3db:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3de:	01 d0                	add    %edx,%eax
f010d3e0:	8a 40 04             	mov    0x4(%eax),%al
f010d3e3:	0f b6 c0             	movzbl %al,%eax
f010d3e6:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d3e9:	75 d5                	jne    f010d3c0 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d3eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3ee:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d3f1:	89 10                	mov    %edx,(%eax)
	}
}
f010d3f3:	90                   	nop
f010d3f4:	c9                   	leave  
f010d3f5:	c3                   	ret    

f010d3f6 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d3f6:	55                   	push   %ebp
f010d3f7:	89 e5                	mov    %esp,%ebp
f010d3f9:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d3fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3ff:	c7 00 f8 32 13 f0    	movl   $0xf01332f8,(%eax)
	info->eip_line = 0;
f010d405:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d408:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d40f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d412:	c7 40 08 f8 32 13 f0 	movl   $0xf01332f8,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d419:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d41c:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d423:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d426:	8b 55 08             	mov    0x8(%ebp),%edx
f010d429:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d42c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d42f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d436:	8b 45 08             	mov    0x8(%ebp),%eax
f010d439:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d43e:	76 1e                	jbe    f010d45e <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d440:	c7 45 f4 64 b3 13 f0 	movl   $0xf013b364,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d447:	c7 45 f0 e4 6e 17 f0 	movl   $0xf0176ee4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d44e:	c7 45 ec e5 6e 17 f0 	movl   $0xf0176ee5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d455:	c7 45 e8 3b 3c 18 f0 	movl   $0xf0183c3b,-0x18(%ebp)
f010d45c:	eb 2a                	jmp    f010d488 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d45e:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d465:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d468:	8b 00                	mov    (%eax),%eax
f010d46a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d46d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d470:	8b 40 04             	mov    0x4(%eax),%eax
f010d473:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d476:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d479:	8b 40 08             	mov    0x8(%eax),%eax
f010d47c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d47f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d482:	8b 40 0c             	mov    0xc(%eax),%eax
f010d485:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d488:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d48b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d48e:	76 0a                	jbe    f010d49a <debuginfo_eip+0xa4>
f010d490:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d493:	48                   	dec    %eax
f010d494:	8a 00                	mov    (%eax),%al
f010d496:	84 c0                	test   %al,%al
f010d498:	74 0a                	je     f010d4a4 <debuginfo_eip+0xae>
		return -1;
f010d49a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d49f:	e9 01 02 00 00       	jmp    f010d6a5 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d4a4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d4ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d4ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4b1:	29 c2                	sub    %eax,%edx
f010d4b3:	89 d0                	mov    %edx,%eax
f010d4b5:	c1 f8 02             	sar    $0x2,%eax
f010d4b8:	89 c2                	mov    %eax,%edx
f010d4ba:	89 d0                	mov    %edx,%eax
f010d4bc:	c1 e0 02             	shl    $0x2,%eax
f010d4bf:	01 d0                	add    %edx,%eax
f010d4c1:	c1 e0 02             	shl    $0x2,%eax
f010d4c4:	01 d0                	add    %edx,%eax
f010d4c6:	c1 e0 02             	shl    $0x2,%eax
f010d4c9:	01 d0                	add    %edx,%eax
f010d4cb:	89 c1                	mov    %eax,%ecx
f010d4cd:	c1 e1 08             	shl    $0x8,%ecx
f010d4d0:	01 c8                	add    %ecx,%eax
f010d4d2:	89 c1                	mov    %eax,%ecx
f010d4d4:	c1 e1 10             	shl    $0x10,%ecx
f010d4d7:	01 c8                	add    %ecx,%eax
f010d4d9:	01 c0                	add    %eax,%eax
f010d4db:	01 d0                	add    %edx,%eax
f010d4dd:	48                   	dec    %eax
f010d4de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d4e1:	ff 75 08             	pushl  0x8(%ebp)
f010d4e4:	6a 64                	push   $0x64
f010d4e6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d4e9:	50                   	push   %eax
f010d4ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d4ed:	50                   	push   %eax
f010d4ee:	ff 75 f4             	pushl  -0xc(%ebp)
f010d4f1:	e8 b3 fd ff ff       	call   f010d2a9 <stab_binsearch>
f010d4f6:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d4f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d4fc:	85 c0                	test   %eax,%eax
f010d4fe:	75 0a                	jne    f010d50a <debuginfo_eip+0x114>
		return -1;
f010d500:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d505:	e9 9b 01 00 00       	jmp    f010d6a5 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d50a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d50d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d510:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d513:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d516:	ff 75 08             	pushl  0x8(%ebp)
f010d519:	6a 24                	push   $0x24
f010d51b:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d51e:	50                   	push   %eax
f010d51f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d522:	50                   	push   %eax
f010d523:	ff 75 f4             	pushl  -0xc(%ebp)
f010d526:	e8 7e fd ff ff       	call   f010d2a9 <stab_binsearch>
f010d52b:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d52e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d531:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d534:	39 c2                	cmp    %eax,%edx
f010d536:	0f 8f 86 00 00 00    	jg     f010d5c2 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d53c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d53f:	89 c2                	mov    %eax,%edx
f010d541:	89 d0                	mov    %edx,%eax
f010d543:	01 c0                	add    %eax,%eax
f010d545:	01 d0                	add    %edx,%eax
f010d547:	c1 e0 02             	shl    $0x2,%eax
f010d54a:	89 c2                	mov    %eax,%edx
f010d54c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d54f:	01 d0                	add    %edx,%eax
f010d551:	8b 00                	mov    (%eax),%eax
f010d553:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d556:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d559:	29 d1                	sub    %edx,%ecx
f010d55b:	89 ca                	mov    %ecx,%edx
f010d55d:	39 d0                	cmp    %edx,%eax
f010d55f:	73 22                	jae    f010d583 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d561:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d564:	89 c2                	mov    %eax,%edx
f010d566:	89 d0                	mov    %edx,%eax
f010d568:	01 c0                	add    %eax,%eax
f010d56a:	01 d0                	add    %edx,%eax
f010d56c:	c1 e0 02             	shl    $0x2,%eax
f010d56f:	89 c2                	mov    %eax,%edx
f010d571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d574:	01 d0                	add    %edx,%eax
f010d576:	8b 10                	mov    (%eax),%edx
f010d578:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d57b:	01 c2                	add    %eax,%edx
f010d57d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d580:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d583:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d586:	89 c2                	mov    %eax,%edx
f010d588:	89 d0                	mov    %edx,%eax
f010d58a:	01 c0                	add    %eax,%eax
f010d58c:	01 d0                	add    %edx,%eax
f010d58e:	c1 e0 02             	shl    $0x2,%eax
f010d591:	89 c2                	mov    %eax,%edx
f010d593:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d596:	01 d0                	add    %edx,%eax
f010d598:	8b 50 08             	mov    0x8(%eax),%edx
f010d59b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d59e:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d5a1:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a7:	8b 40 10             	mov    0x10(%eax),%eax
f010d5aa:	29 c2                	sub    %eax,%edx
f010d5ac:	89 d0                	mov    %edx,%eax
f010d5ae:	c1 f8 02             	sar    $0x2,%eax
f010d5b1:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d5b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d5b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d5ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d5bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d5c0:	eb 15                	jmp    f010d5d7 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d5c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5c5:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5c8:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d5cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d5ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d5d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d5d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d5d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5da:	8b 40 08             	mov    0x8(%eax),%eax
f010d5dd:	83 ec 08             	sub    $0x8,%esp
f010d5e0:	6a 3a                	push   $0x3a
f010d5e2:	50                   	push   %eax
f010d5e3:	e8 ca 19 02 00       	call   f012efb2 <strfind>
f010d5e8:	83 c4 10             	add    $0x10,%esp
f010d5eb:	89 c2                	mov    %eax,%edx
f010d5ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f0:	8b 40 08             	mov    0x8(%eax),%eax
f010d5f3:	29 c2                	sub    %eax,%edx
f010d5f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f8:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d5fb:	eb 03                	jmp    f010d600 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d5fd:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d600:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d603:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d606:	7c 4e                	jl     f010d656 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d608:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d60b:	89 d0                	mov    %edx,%eax
f010d60d:	01 c0                	add    %eax,%eax
f010d60f:	01 d0                	add    %edx,%eax
f010d611:	c1 e0 02             	shl    $0x2,%eax
f010d614:	89 c2                	mov    %eax,%edx
f010d616:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d619:	01 d0                	add    %edx,%eax
f010d61b:	8a 40 04             	mov    0x4(%eax),%al
f010d61e:	3c 84                	cmp    $0x84,%al
f010d620:	74 34                	je     f010d656 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d622:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d625:	89 d0                	mov    %edx,%eax
f010d627:	01 c0                	add    %eax,%eax
f010d629:	01 d0                	add    %edx,%eax
f010d62b:	c1 e0 02             	shl    $0x2,%eax
f010d62e:	89 c2                	mov    %eax,%edx
f010d630:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d633:	01 d0                	add    %edx,%eax
f010d635:	8a 40 04             	mov    0x4(%eax),%al
f010d638:	3c 64                	cmp    $0x64,%al
f010d63a:	75 c1                	jne    f010d5fd <debuginfo_eip+0x207>
f010d63c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d63f:	89 d0                	mov    %edx,%eax
f010d641:	01 c0                	add    %eax,%eax
f010d643:	01 d0                	add    %edx,%eax
f010d645:	c1 e0 02             	shl    $0x2,%eax
f010d648:	89 c2                	mov    %eax,%edx
f010d64a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d64d:	01 d0                	add    %edx,%eax
f010d64f:	8b 40 08             	mov    0x8(%eax),%eax
f010d652:	85 c0                	test   %eax,%eax
f010d654:	74 a7                	je     f010d5fd <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d656:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d659:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d65c:	7c 42                	jl     f010d6a0 <debuginfo_eip+0x2aa>
f010d65e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d661:	89 d0                	mov    %edx,%eax
f010d663:	01 c0                	add    %eax,%eax
f010d665:	01 d0                	add    %edx,%eax
f010d667:	c1 e0 02             	shl    $0x2,%eax
f010d66a:	89 c2                	mov    %eax,%edx
f010d66c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d66f:	01 d0                	add    %edx,%eax
f010d671:	8b 00                	mov    (%eax),%eax
f010d673:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d676:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d679:	29 d1                	sub    %edx,%ecx
f010d67b:	89 ca                	mov    %ecx,%edx
f010d67d:	39 d0                	cmp    %edx,%eax
f010d67f:	73 1f                	jae    f010d6a0 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d681:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d684:	89 d0                	mov    %edx,%eax
f010d686:	01 c0                	add    %eax,%eax
f010d688:	01 d0                	add    %edx,%eax
f010d68a:	c1 e0 02             	shl    $0x2,%eax
f010d68d:	89 c2                	mov    %eax,%edx
f010d68f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d692:	01 d0                	add    %edx,%eax
f010d694:	8b 10                	mov    (%eax),%edx
f010d696:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d699:	01 c2                	add    %eax,%edx
f010d69b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d69e:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d6a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d6a5:	c9                   	leave  
f010d6a6:	c3                   	ret    

f010d6a7 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d6a7:	55                   	push   %ebp
f010d6a8:	89 e5                	mov    %esp,%ebp
f010d6aa:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d6ad:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d6b1:	74 1c                	je     f010d6cf <setPageReplacmentAlgorithmLRU+0x28>
f010d6b3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d6b7:	74 16                	je     f010d6cf <setPageReplacmentAlgorithmLRU+0x28>
f010d6b9:	68 04 33 13 f0       	push   $0xf0133304
f010d6be:	68 4e 33 13 f0       	push   $0xf013334e
f010d6c3:	6a 18                	push   $0x18
f010d6c5:	68 63 33 13 f0       	push   $0xf0133363
f010d6ca:	e8 e1 2a ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d6cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6d2:	a3 1c bf 2b f0       	mov    %eax,0xf02bbf1c
}
f010d6d7:	90                   	nop
f010d6d8:	c9                   	leave  
f010d6d9:	c3                   	ret    

f010d6da <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d6da:	55                   	push   %ebp
f010d6db:	89 e5                	mov    %esp,%ebp
f010d6dd:	c7 05 1c bf 2b f0 03 	movl   $0x3,0xf02bbf1c
f010d6e4:	00 00 00 
f010d6e7:	90                   	nop
f010d6e8:	5d                   	pop    %ebp
f010d6e9:	c3                   	ret    

f010d6ea <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d6ea:	55                   	push   %ebp
f010d6eb:	89 e5                	mov    %esp,%ebp
f010d6ed:	c7 05 1c bf 2b f0 04 	movl   $0x4,0xf02bbf1c
f010d6f4:	00 00 00 
f010d6f7:	90                   	nop
f010d6f8:	5d                   	pop    %ebp
f010d6f9:	c3                   	ret    

f010d6fa <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d6fa:	55                   	push   %ebp
f010d6fb:	89 e5                	mov    %esp,%ebp
f010d6fd:	c7 05 1c bf 2b f0 05 	movl   $0x5,0xf02bbf1c
f010d704:	00 00 00 
f010d707:	90                   	nop
f010d708:	5d                   	pop    %ebp
f010d709:	c3                   	ret    

f010d70a <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d70a:	55                   	push   %ebp
f010d70b:	89 e5                	mov    %esp,%ebp
f010d70d:	c7 05 1c bf 2b f0 07 	movl   $0x7,0xf02bbf1c
f010d714:	00 00 00 
f010d717:	90                   	nop
f010d718:	5d                   	pop    %ebp
f010d719:	c3                   	ret    

f010d71a <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d71a:	55                   	push   %ebp
f010d71b:	89 e5                	mov    %esp,%ebp
f010d71d:	c7 05 1c bf 2b f0 06 	movl   $0x6,0xf02bbf1c
f010d724:	00 00 00 
f010d727:	8b 45 08             	mov    0x8(%ebp),%eax
f010d72a:	a3 3c 3b 25 f0       	mov    %eax,0xf0253b3c
f010d72f:	90                   	nop
f010d730:	5d                   	pop    %ebp
f010d731:	c3                   	ret    

f010d732 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d732:	55                   	push   %ebp
f010d733:	89 e5                	mov    %esp,%ebp
f010d735:	8b 15 1c bf 2b f0    	mov    0xf02bbf1c,%edx
f010d73b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d73e:	39 c2                	cmp    %eax,%edx
f010d740:	0f 94 c0             	sete   %al
f010d743:	0f b6 c0             	movzbl %al,%eax
f010d746:	5d                   	pop    %ebp
f010d747:	c3                   	ret    

f010d748 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d748:	55                   	push   %ebp
f010d749:	89 e5                	mov    %esp,%ebp
f010d74b:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d750:	83 f8 03             	cmp    $0x3,%eax
f010d753:	75 07                	jne    f010d75c <isPageReplacmentAlgorithmCLOCK+0x14>
f010d755:	b8 01 00 00 00       	mov    $0x1,%eax
f010d75a:	eb 05                	jmp    f010d761 <isPageReplacmentAlgorithmCLOCK+0x19>
f010d75c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d761:	5d                   	pop    %ebp
f010d762:	c3                   	ret    

f010d763 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d763:	55                   	push   %ebp
f010d764:	89 e5                	mov    %esp,%ebp
f010d766:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d76b:	83 f8 04             	cmp    $0x4,%eax
f010d76e:	75 07                	jne    f010d777 <isPageReplacmentAlgorithmFIFO+0x14>
f010d770:	b8 01 00 00 00       	mov    $0x1,%eax
f010d775:	eb 05                	jmp    f010d77c <isPageReplacmentAlgorithmFIFO+0x19>
f010d777:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77c:	5d                   	pop    %ebp
f010d77d:	c3                   	ret    

f010d77e <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d77e:	55                   	push   %ebp
f010d77f:	89 e5                	mov    %esp,%ebp
f010d781:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d786:	83 f8 05             	cmp    $0x5,%eax
f010d789:	75 07                	jne    f010d792 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d78b:	b8 01 00 00 00       	mov    $0x1,%eax
f010d790:	eb 05                	jmp    f010d797 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d792:	b8 00 00 00 00       	mov    $0x0,%eax
f010d797:	5d                   	pop    %ebp
f010d798:	c3                   	ret    

f010d799 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d799:	55                   	push   %ebp
f010d79a:	89 e5                	mov    %esp,%ebp
f010d79c:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d7a1:	83 f8 07             	cmp    $0x7,%eax
f010d7a4:	75 07                	jne    f010d7ad <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d7a6:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7ab:	eb 05                	jmp    f010d7b2 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d7ad:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b2:	5d                   	pop    %ebp
f010d7b3:	c3                   	ret    

f010d7b4 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d7b4:	55                   	push   %ebp
f010d7b5:	89 e5                	mov    %esp,%ebp
f010d7b7:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d7bc:	83 f8 06             	cmp    $0x6,%eax
f010d7bf:	75 07                	jne    f010d7c8 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d7c1:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7c6:	eb 05                	jmp    f010d7cd <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d7c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7cd:	5d                   	pop    %ebp
f010d7ce:	c3                   	ret    

f010d7cf <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d7cf:	55                   	push   %ebp
f010d7d0:	89 e5                	mov    %esp,%ebp
f010d7d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7d5:	a3 ec be 2b f0       	mov    %eax,0xf02bbeec
f010d7da:	90                   	nop
f010d7db:	5d                   	pop    %ebp
f010d7dc:	c3                   	ret    

f010d7dd <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d7dd:	55                   	push   %ebp
f010d7de:	89 e5                	mov    %esp,%ebp
f010d7e0:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f010d7e5:	5d                   	pop    %ebp
f010d7e6:	c3                   	ret    

f010d7e7 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d7e7:	55                   	push   %ebp
f010d7e8:	89 e5                	mov    %esp,%ebp
f010d7ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7ed:	a3 34 bf 2b f0       	mov    %eax,0xf02bbf34
f010d7f2:	90                   	nop
f010d7f3:	5d                   	pop    %ebp
f010d7f4:	c3                   	ret    

f010d7f5 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d7f5:	55                   	push   %ebp
f010d7f6:	89 e5                	mov    %esp,%ebp
f010d7f8:	a1 34 bf 2b f0       	mov    0xf02bbf34,%eax
f010d7fd:	5d                   	pop    %ebp
f010d7fe:	c3                   	ret    

f010d7ff <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d7ff:	55                   	push   %ebp
f010d800:	89 e5                	mov    %esp,%ebp
f010d802:	8b 45 08             	mov    0x8(%ebp),%eax
f010d805:	a3 44 bf 2b f0       	mov    %eax,0xf02bbf44
f010d80a:	90                   	nop
f010d80b:	5d                   	pop    %ebp
f010d80c:	c3                   	ret    

f010d80d <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d80d:	55                   	push   %ebp
f010d80e:	89 e5                	mov    %esp,%ebp
f010d810:	a1 44 bf 2b f0       	mov    0xf02bbf44,%eax
f010d815:	5d                   	pop    %ebp
f010d816:	c3                   	ret    

f010d817 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d817:	55                   	push   %ebp
f010d818:	89 e5                	mov    %esp,%ebp
f010d81a:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d81d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d820:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d826:	83 ec 04             	sub    $0x4,%esp
f010d829:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d82c:	52                   	push   %edx
f010d82d:	ff 75 0c             	pushl  0xc(%ebp)
f010d830:	50                   	push   %eax
f010d831:	e8 b9 9d ff ff       	call   f01075ef <__static_cpt>
f010d836:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d839:	90                   	nop
f010d83a:	c9                   	leave  
f010d83b:	c3                   	ret    

f010d83c <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d83c:	55                   	push   %ebp
f010d83d:	89 e5                	mov    %esp,%ebp
f010d83f:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d842:	83 ec 0c             	sub    $0xc,%esp
f010d845:	ff 75 08             	pushl  0x8(%ebp)
f010d848:	e8 ea a9 ff ff       	call   f0108237 <env_page_ws_get_size>
f010d84d:	83 c4 10             	add    $0x10,%esp
f010d850:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d853:	8b 45 08             	mov    0x8(%ebp),%eax
f010d856:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d85c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d85f:	76 14                	jbe    f010d875 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d861:	83 ec 04             	sub    $0x4,%esp
f010d864:	68 80 33 13 f0       	push   $0xf0133380
f010d869:	6a 55                	push   $0x55
f010d86b:	68 63 33 13 f0       	push   $0xf0133363
f010d870:	e8 3b 29 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d875:	e8 e9 fe ff ff       	call   f010d763 <isPageReplacmentAlgorithmFIFO>
f010d87a:	85 c0                	test   %eax,%eax
f010d87c:	74 14                	je     f010d892 <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d87e:	83 ec 04             	sub    $0x4,%esp
f010d881:	68 bc 33 13 f0       	push   $0xf01333bc
f010d886:	6a 61                	push   $0x61
f010d888:	68 63 33 13 f0       	push   $0xf0133363
f010d88d:	e8 1e 29 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d892:	83 ec 0c             	sub    $0xc,%esp
f010d895:	6a 02                	push   $0x2
f010d897:	e8 96 fe ff ff       	call   f010d732 <isPageReplacmentAlgorithmLRU>
f010d89c:	83 c4 10             	add    $0x10,%esp
f010d89f:	85 c0                	test   %eax,%eax
f010d8a1:	74 14                	je     f010d8b7 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d8a3:	83 ec 04             	sub    $0x4,%esp
f010d8a6:	68 00 34 13 f0       	push   $0xf0133400
f010d8ab:	6a 67                	push   $0x67
f010d8ad:	68 63 33 13 f0       	push   $0xf0133363
f010d8b2:	e8 f9 28 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d8b7:	90                   	nop
f010d8b8:	c9                   	leave  
f010d8b9:	c3                   	ret    

f010d8ba <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d8ba:	55                   	push   %ebp
f010d8bb:	89 e5                	mov    %esp,%ebp
f010d8bd:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d8c0:	83 ec 04             	sub    $0x4,%esp
f010d8c3:	68 44 34 13 f0       	push   $0xf0133444
f010d8c8:	6a 70                	push   $0x70
f010d8ca:	68 63 33 13 f0       	push   $0xf0133363
f010d8cf:	e8 dc 28 ff ff       	call   f01001b0 <_panic>

f010d8d4 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d8d4:	55                   	push   %ebp
f010d8d5:	89 e5                	mov    %esp,%ebp
f010d8d7:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d8da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d8e1:	e9 aa 00 00 00       	jmp    f010d990 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d8e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d8e9:	89 d0                	mov    %edx,%eax
f010d8eb:	c1 e0 02             	shl    $0x2,%eax
f010d8ee:	01 d0                	add    %edx,%eax
f010d8f0:	01 c0                	add    %eax,%eax
f010d8f2:	01 d0                	add    %edx,%eax
f010d8f4:	01 c0                	add    %eax,%eax
f010d8f6:	01 d0                	add    %edx,%eax
f010d8f8:	c1 e0 02             	shl    $0x2,%eax
f010d8fb:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010d900:	83 ec 04             	sub    $0x4,%esp
f010d903:	6a 5c                	push   $0x5c
f010d905:	6a 00                	push   $0x0
f010d907:	50                   	push   %eax
f010d908:	e8 d1 16 02 00       	call   f012efde <memset>
f010d90d:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d910:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d913:	89 d0                	mov    %edx,%eax
f010d915:	c1 e0 02             	shl    $0x2,%eax
f010d918:	01 d0                	add    %edx,%eax
f010d91a:	01 c0                	add    %eax,%eax
f010d91c:	01 d0                	add    %edx,%eax
f010d91e:	01 c0                	add    %eax,%eax
f010d920:	01 d0                	add    %edx,%eax
f010d922:	c1 e0 02             	shl    $0x2,%eax
f010d925:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010d92a:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d92d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d930:	89 d0                	mov    %edx,%eax
f010d932:	c1 e0 02             	shl    $0x2,%eax
f010d935:	01 d0                	add    %edx,%eax
f010d937:	01 c0                	add    %eax,%eax
f010d939:	01 d0                	add    %edx,%eax
f010d93b:	01 c0                	add    %eax,%eax
f010d93d:	01 d0                	add    %edx,%eax
f010d93f:	c1 e0 02             	shl    $0x2,%eax
f010d942:	05 04 9b 2b f0       	add    $0xf02b9b04,%eax
f010d947:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d94d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d950:	89 d0                	mov    %edx,%eax
f010d952:	c1 e0 02             	shl    $0x2,%eax
f010d955:	01 d0                	add    %edx,%eax
f010d957:	01 c0                	add    %eax,%eax
f010d959:	01 d0                	add    %edx,%eax
f010d95b:	01 c0                	add    %eax,%eax
f010d95d:	01 d0                	add    %edx,%eax
f010d95f:	c1 e0 02             	shl    $0x2,%eax
f010d962:	05 08 9b 2b f0       	add    $0xf02b9b08,%eax
f010d967:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d96d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d970:	89 d0                	mov    %edx,%eax
f010d972:	c1 e0 02             	shl    $0x2,%eax
f010d975:	01 d0                	add    %edx,%eax
f010d977:	01 c0                	add    %eax,%eax
f010d979:	01 d0                	add    %edx,%eax
f010d97b:	01 c0                	add    %eax,%eax
f010d97d:	01 d0                	add    %edx,%eax
f010d97f:	c1 e0 02             	shl    $0x2,%eax
f010d982:	05 10 9b 2b f0       	add    $0xf02b9b10,%eax
f010d987:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d98d:	ff 45 f4             	incl   -0xc(%ebp)
f010d990:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d994:	0f 8e 4c ff ff ff    	jle    f010d8e6 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d99a:	90                   	nop
f010d99b:	c9                   	leave  
f010d99c:	c3                   	ret    

f010d99d <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d99d:	55                   	push   %ebp
f010d99e:	89 e5                	mov    %esp,%ebp
f010d9a0:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010d9a3:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010d9b1:	eb 2b                	jmp    f010d9de <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d9b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010d9b6:	89 d0                	mov    %edx,%eax
f010d9b8:	c1 e0 02             	shl    $0x2,%eax
f010d9bb:	01 d0                	add    %edx,%eax
f010d9bd:	01 c0                	add    %eax,%eax
f010d9bf:	01 d0                	add    %edx,%eax
f010d9c1:	01 c0                	add    %eax,%eax
f010d9c3:	01 d0                	add    %edx,%eax
f010d9c5:	c1 e0 02             	shl    $0x2,%eax
f010d9c8:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010d9cd:	8a 00                	mov    (%eax),%al
f010d9cf:	84 c0                	test   %al,%al
f010d9d1:	74 08                	je     f010d9db <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d9d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d9d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010d9d9:	eb 09                	jmp    f010d9e4 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9db:	ff 45 f8             	incl   -0x8(%ebp)
f010d9de:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010d9e2:	7e cf                	jle    f010d9b3 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d9e4:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010d9e8:	75 07                	jne    f010d9f1 <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010d9ea:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010d9ef:	eb 40                	jmp    f010da31 <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d9f1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9f4:	89 d0                	mov    %edx,%eax
f010d9f6:	c1 e0 02             	shl    $0x2,%eax
f010d9f9:	01 d0                	add    %edx,%eax
f010d9fb:	01 c0                	add    %eax,%eax
f010d9fd:	01 d0                	add    %edx,%eax
f010d9ff:	01 c0                	add    %eax,%eax
f010da01:	01 d0                	add    %edx,%eax
f010da03:	c1 e0 02             	shl    $0x2,%eax
f010da06:	8d 90 c0 9a 2b f0    	lea    -0xfd46540(%eax),%edx
f010da0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010da0f:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010da11:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da14:	89 d0                	mov    %edx,%eax
f010da16:	c1 e0 02             	shl    $0x2,%eax
f010da19:	01 d0                	add    %edx,%eax
f010da1b:	01 c0                	add    %eax,%eax
f010da1d:	01 d0                	add    %edx,%eax
f010da1f:	01 c0                	add    %eax,%eax
f010da21:	01 d0                	add    %edx,%eax
f010da23:	c1 e0 02             	shl    $0x2,%eax
f010da26:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010da2b:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010da2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010da31:	c9                   	leave  
f010da32:	c3                   	ret    

f010da33 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010da33:	55                   	push   %ebp
f010da34:	89 e5                	mov    %esp,%ebp
f010da36:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010da39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010da40:	eb 7a                	jmp    f010dabc <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010da42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da45:	89 d0                	mov    %edx,%eax
f010da47:	c1 e0 02             	shl    $0x2,%eax
f010da4a:	01 d0                	add    %edx,%eax
f010da4c:	01 c0                	add    %eax,%eax
f010da4e:	01 d0                	add    %edx,%eax
f010da50:	01 c0                	add    %eax,%eax
f010da52:	01 d0                	add    %edx,%eax
f010da54:	c1 e0 02             	shl    $0x2,%eax
f010da57:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010da5c:	8a 00                	mov    (%eax),%al
f010da5e:	84 c0                	test   %al,%al
f010da60:	75 56                	jne    f010dab8 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010da62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da65:	89 d0                	mov    %edx,%eax
f010da67:	c1 e0 02             	shl    $0x2,%eax
f010da6a:	01 d0                	add    %edx,%eax
f010da6c:	01 c0                	add    %eax,%eax
f010da6e:	01 d0                	add    %edx,%eax
f010da70:	01 c0                	add    %eax,%eax
f010da72:	01 d0                	add    %edx,%eax
f010da74:	c1 e0 02             	shl    $0x2,%eax
f010da77:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010da7c:	8b 00                	mov    (%eax),%eax
f010da7e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010da81:	75 36                	jne    f010dab9 <get_semaphore_object_ID+0x86>
f010da83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da86:	89 d0                	mov    %edx,%eax
f010da88:	c1 e0 02             	shl    $0x2,%eax
f010da8b:	01 d0                	add    %edx,%eax
f010da8d:	01 c0                	add    %eax,%eax
f010da8f:	01 d0                	add    %edx,%eax
f010da91:	01 c0                	add    %eax,%eax
f010da93:	01 d0                	add    %edx,%eax
f010da95:	c1 e0 02             	shl    $0x2,%eax
f010da98:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010da9d:	83 c0 04             	add    $0x4,%eax
f010daa0:	83 ec 08             	sub    $0x8,%esp
f010daa3:	50                   	push   %eax
f010daa4:	ff 75 0c             	pushl  0xc(%ebp)
f010daa7:	e8 50 14 02 00       	call   f012eefc <strcmp>
f010daac:	83 c4 10             	add    $0x10,%esp
f010daaf:	85 c0                	test   %eax,%eax
f010dab1:	75 06                	jne    f010dab9 <get_semaphore_object_ID+0x86>
		{
			return i;
f010dab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dab6:	eb 0f                	jmp    f010dac7 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010dab8:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010dab9:	ff 45 f4             	incl   -0xc(%ebp)
f010dabc:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010dac0:	7e 80                	jle    f010da42 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010dac2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010dac7:	c9                   	leave  
f010dac8:	c3                   	ret    

f010dac9 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010dac9:	55                   	push   %ebp
f010daca:	89 e5                	mov    %esp,%ebp
f010dacc:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010dacf:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010dad3:	76 0a                	jbe    f010dadf <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010dad5:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010dada:	e9 ac 00 00 00       	jmp    f010db8b <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010dadf:	8b 55 08             	mov    0x8(%ebp),%edx
f010dae2:	89 d0                	mov    %edx,%eax
f010dae4:	c1 e0 02             	shl    $0x2,%eax
f010dae7:	01 d0                	add    %edx,%eax
f010dae9:	01 c0                	add    %eax,%eax
f010daeb:	01 d0                	add    %edx,%eax
f010daed:	01 c0                	add    %eax,%eax
f010daef:	01 d0                	add    %edx,%eax
f010daf1:	c1 e0 02             	shl    $0x2,%eax
f010daf4:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010daf9:	83 ec 04             	sub    $0x4,%esp
f010dafc:	6a 5c                	push   $0x5c
f010dafe:	6a 00                	push   $0x0
f010db00:	50                   	push   %eax
f010db01:	e8 d8 14 02 00       	call   f012efde <memset>
f010db06:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010db09:	8b 55 08             	mov    0x8(%ebp),%edx
f010db0c:	89 d0                	mov    %edx,%eax
f010db0e:	c1 e0 02             	shl    $0x2,%eax
f010db11:	01 d0                	add    %edx,%eax
f010db13:	01 c0                	add    %eax,%eax
f010db15:	01 d0                	add    %edx,%eax
f010db17:	01 c0                	add    %eax,%eax
f010db19:	01 d0                	add    %edx,%eax
f010db1b:	c1 e0 02             	shl    $0x2,%eax
f010db1e:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010db23:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010db26:	8b 55 08             	mov    0x8(%ebp),%edx
f010db29:	89 d0                	mov    %edx,%eax
f010db2b:	c1 e0 02             	shl    $0x2,%eax
f010db2e:	01 d0                	add    %edx,%eax
f010db30:	01 c0                	add    %eax,%eax
f010db32:	01 d0                	add    %edx,%eax
f010db34:	01 c0                	add    %eax,%eax
f010db36:	01 d0                	add    %edx,%eax
f010db38:	c1 e0 02             	shl    $0x2,%eax
f010db3b:	05 04 9b 2b f0       	add    $0xf02b9b04,%eax
f010db40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db46:	8b 55 08             	mov    0x8(%ebp),%edx
f010db49:	89 d0                	mov    %edx,%eax
f010db4b:	c1 e0 02             	shl    $0x2,%eax
f010db4e:	01 d0                	add    %edx,%eax
f010db50:	01 c0                	add    %eax,%eax
f010db52:	01 d0                	add    %edx,%eax
f010db54:	01 c0                	add    %eax,%eax
f010db56:	01 d0                	add    %edx,%eax
f010db58:	c1 e0 02             	shl    $0x2,%eax
f010db5b:	05 08 9b 2b f0       	add    $0xf02b9b08,%eax
f010db60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db66:	8b 55 08             	mov    0x8(%ebp),%edx
f010db69:	89 d0                	mov    %edx,%eax
f010db6b:	c1 e0 02             	shl    $0x2,%eax
f010db6e:	01 d0                	add    %edx,%eax
f010db70:	01 c0                	add    %eax,%eax
f010db72:	01 d0                	add    %edx,%eax
f010db74:	01 c0                	add    %eax,%eax
f010db76:	01 d0                	add    %edx,%eax
f010db78:	c1 e0 02             	shl    $0x2,%eax
f010db7b:	05 10 9b 2b f0       	add    $0xf02b9b10,%eax
f010db80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010db86:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010db8b:	c9                   	leave  
f010db8c:	c3                   	ret    

f010db8d <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010db8d:	55                   	push   %ebp
f010db8e:	89 e5                	mov    %esp,%ebp
f010db90:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010db93:	83 ec 04             	sub    $0x4,%esp
f010db96:	68 68 34 13 f0       	push   $0xf0133468
f010db9b:	68 95 00 00 00       	push   $0x95
f010dba0:	68 96 34 13 f0       	push   $0xf0133496
f010dba5:	e8 06 26 ff ff       	call   f01001b0 <_panic>

f010dbaa <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dbaa:	55                   	push   %ebp
f010dbab:	89 e5                	mov    %esp,%ebp
f010dbad:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010dbb0:	83 ec 04             	sub    $0x4,%esp
f010dbb3:	68 b4 34 13 f0       	push   $0xf01334b4
f010dbb8:	68 9e 00 00 00       	push   $0x9e
f010dbbd:	68 96 34 13 f0       	push   $0xf0133496
f010dbc2:	e8 e9 25 ff ff       	call   f01001b0 <_panic>

f010dbc7 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010dbc7:	55                   	push   %ebp
f010dbc8:	89 e5                	mov    %esp,%ebp
f010dbca:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010dbcd:	83 ec 04             	sub    $0x4,%esp
f010dbd0:	68 e0 34 13 f0       	push   $0xf01334e0
f010dbd5:	68 a6 00 00 00       	push   $0xa6
f010dbda:	68 96 34 13 f0       	push   $0xf0133496
f010dbdf:	e8 cc 25 ff ff       	call   f01001b0 <_panic>

f010dbe4 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010dbe4:	55                   	push   %ebp
f010dbe5:	89 e5                	mov    %esp,%ebp
f010dbe7:	c7 05 f8 be 2b f0 01 	movl   $0x1,0xf02bbef8
f010dbee:	00 00 00 
f010dbf1:	90                   	nop
f010dbf2:	5d                   	pop    %ebp
f010dbf3:	c3                   	ret    

f010dbf4 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010dbf4:	55                   	push   %ebp
f010dbf5:	89 e5                	mov    %esp,%ebp
f010dbf7:	c7 05 f8 be 2b f0 02 	movl   $0x2,0xf02bbef8
f010dbfe:	00 00 00 
f010dc01:	90                   	nop
f010dc02:	5d                   	pop    %ebp
f010dc03:	c3                   	ret    

f010dc04 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010dc04:	55                   	push   %ebp
f010dc05:	89 e5                	mov    %esp,%ebp
f010dc07:	c7 05 f8 be 2b f0 03 	movl   $0x3,0xf02bbef8
f010dc0e:	00 00 00 
f010dc11:	90                   	nop
f010dc12:	5d                   	pop    %ebp
f010dc13:	c3                   	ret    

f010dc14 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010dc14:	55                   	push   %ebp
f010dc15:	89 e5                	mov    %esp,%ebp
f010dc17:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010dc1c:	83 f8 01             	cmp    $0x1,%eax
f010dc1f:	75 04                	jne    f010dc25 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010dc21:	b0 01                	mov    $0x1,%al
f010dc23:	eb 02                	jmp    f010dc27 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010dc25:	b0 00                	mov    $0x0,%al
f010dc27:	5d                   	pop    %ebp
f010dc28:	c3                   	ret    

f010dc29 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010dc29:	55                   	push   %ebp
f010dc2a:	89 e5                	mov    %esp,%ebp
f010dc2c:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010dc31:	83 f8 02             	cmp    $0x2,%eax
f010dc34:	75 04                	jne    f010dc3a <isKHeapPlacementStrategyBESTFIT+0x11>
f010dc36:	b0 01                	mov    $0x1,%al
f010dc38:	eb 02                	jmp    f010dc3c <isKHeapPlacementStrategyBESTFIT+0x13>
f010dc3a:	b0 00                	mov    $0x0,%al
f010dc3c:	5d                   	pop    %ebp
f010dc3d:	c3                   	ret    

f010dc3e <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010dc3e:	55                   	push   %ebp
f010dc3f:	89 e5                	mov    %esp,%ebp
f010dc41:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010dc46:	83 f8 03             	cmp    $0x3,%eax
f010dc49:	75 04                	jne    f010dc4f <isKHeapPlacementStrategyNEXTFIT+0x11>
f010dc4b:	b0 01                	mov    $0x1,%al
f010dc4d:	eb 02                	jmp    f010dc51 <isKHeapPlacementStrategyNEXTFIT+0x13>
f010dc4f:	b0 00                	mov    $0x0,%al
f010dc51:	5d                   	pop    %ebp
f010dc52:	c3                   	ret    

f010dc53 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010dc53:	55                   	push   %ebp
f010dc54:	89 e5                	mov    %esp,%ebp
f010dc56:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dc59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dc60:	eb 26                	jmp    f010dc88 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010dc62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dc6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc6f:	01 c2                	add    %eax,%edx
f010dc71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc74:	40                   	inc    %eax
f010dc75:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010dc7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc7f:	01 c8                	add    %ecx,%eax
f010dc81:	8b 00                	mov    (%eax),%eax
f010dc83:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dc85:	ff 45 f4             	incl   -0xc(%ebp)
f010dc88:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc8b:	48                   	dec    %eax
f010dc8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dc8f:	7f d1                	jg     f010dc62 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010dc91:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010dc94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dc9b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010dca2:	eb 35                	jmp    f010dcd9 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010dca4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dca7:	89 d0                	mov    %edx,%eax
f010dca9:	01 c0                	add    %eax,%eax
f010dcab:	01 d0                	add    %edx,%eax
f010dcad:	c1 e0 02             	shl    $0x2,%eax
f010dcb0:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f010dcb5:	8b 10                	mov    (%eax),%edx
f010dcb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcba:	8b 00                	mov    (%eax),%eax
f010dcbc:	83 ec 08             	sub    $0x8,%esp
f010dcbf:	52                   	push   %edx
f010dcc0:	50                   	push   %eax
f010dcc1:	e8 36 12 02 00       	call   f012eefc <strcmp>
f010dcc6:	83 c4 10             	add    $0x10,%esp
f010dcc9:	85 c0                	test   %eax,%eax
f010dccb:	75 09                	jne    f010dcd6 <tst_handler+0x83>
		{
			test_found = 1;
f010dccd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010dcd4:	eb 0f                	jmp    f010dce5 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dcd6:	ff 45 ec             	incl   -0x14(%ebp)
f010dcd9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcdc:	a1 1c cb 18 f0       	mov    0xf018cb1c,%eax
f010dce1:	39 c2                	cmp    %eax,%edx
f010dce3:	72 bf                	jb     f010dca4 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010dce5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dce9:	74 29                	je     f010dd14 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010dceb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcee:	89 d0                	mov    %edx,%eax
f010dcf0:	01 c0                	add    %eax,%eax
f010dcf2:	01 d0                	add    %edx,%eax
f010dcf4:	c1 e0 02             	shl    $0x2,%eax
f010dcf7:	05 88 ca 18 f0       	add    $0xf018ca88,%eax
f010dcfc:	8b 00                	mov    (%eax),%eax
f010dcfe:	83 ec 08             	sub    $0x8,%esp
f010dd01:	ff 75 0c             	pushl  0xc(%ebp)
f010dd04:	ff 75 08             	pushl  0x8(%ebp)
f010dd07:	ff d0                	call   *%eax
f010dd09:	83 c4 10             	add    $0x10,%esp
f010dd0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010dd0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dd12:	eb 1b                	jmp    f010dd2f <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010dd14:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd17:	8b 00                	mov    (%eax),%eax
f010dd19:	83 ec 08             	sub    $0x8,%esp
f010dd1c:	50                   	push   %eax
f010dd1d:	68 94 37 13 f0       	push   $0xf0133794
f010dd22:	e8 0a 31 ff ff       	call   f0100e31 <cprintf>
f010dd27:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd2a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010dd2f:	c9                   	leave  
f010dd30:	c3                   	ret    

f010dd31 <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010dd31:	55                   	push   %ebp
f010dd32:	89 e5                	mov    %esp,%ebp
f010dd34:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010dd37:	e8 3d 70 01 00       	call   f0124d79 <test_three_creation_functions>
	return 0;
f010dd3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd41:	c9                   	leave  
f010dd42:	c3                   	ret    

f010dd43 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010dd43:	55                   	push   %ebp
f010dd44:	89 e5                	mov    %esp,%ebp
f010dd46:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010dd49:	e8 ff 91 00 00       	call   f0116f4d <test_priority_normal_and_higher>
	return 0;
f010dd4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd53:	c9                   	leave  
f010dd54:	c3                   	ret    

f010dd55 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010dd55:	55                   	push   %ebp
f010dd56:	89 e5                	mov    %esp,%ebp
f010dd58:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010dd5b:	e8 57 9c 00 00       	call   f01179b7 <test_priority_normal_and_lower>
	return 0;
f010dd60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd65:	c9                   	leave  
f010dd66:	c3                   	ret    

f010dd67 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010dd67:	55                   	push   %ebp
f010dd68:	89 e5                	mov    %esp,%ebp
f010dd6a:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010dd6d:	e8 1b 72 01 00       	call   f0124f8d <test_kfreeall>
	return 0;
f010dd72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd77:	c9                   	leave  
f010dd78:	c3                   	ret    

f010dd79 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010dd79:	55                   	push   %ebp
f010dd7a:	89 e5                	mov    %esp,%ebp
f010dd7c:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010dd7f:	e8 a3 86 01 00       	call   f0126427 <test_kexpand>
	return 0;
f010dd84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd89:	c9                   	leave  
f010dd8a:	c3                   	ret    

f010dd8b <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010dd8b:	55                   	push   %ebp
f010dd8c:	89 e5                	mov    %esp,%ebp
f010dd8e:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010dd91:	e8 62 92 01 00       	call   f0126ff8 <test_kshrink>
	return 0;
f010dd96:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd9b:	c9                   	leave  
f010dd9c:	c3                   	ret    

f010dd9d <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010dd9d:	55                   	push   %ebp
f010dd9e:	89 e5                	mov    %esp,%ebp
f010dda0:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010dda3:	e8 57 9f 01 00       	call   f0127cff <test_kfreelast>
	return 0;
f010dda8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddad:	c9                   	leave  
f010ddae:	c3                   	ret    

f010ddaf <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010ddaf:	55                   	push   %ebp
f010ddb0:	89 e5                	mov    %esp,%ebp
f010ddb2:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010ddb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddb8:	83 c0 04             	add    $0x4,%eax
f010ddbb:	8b 00                	mov    (%eax),%eax
f010ddbd:	83 ec 04             	sub    $0x4,%esp
f010ddc0:	6a 0a                	push   $0xa
f010ddc2:	6a 00                	push   $0x0
f010ddc4:	50                   	push   %eax
f010ddc5:	e8 86 13 02 00       	call   f012f150 <strtol>
f010ddca:	83 c4 10             	add    $0x10,%esp
f010ddcd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010ddd0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010ddd7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010ddde:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f010dde3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dde6:	eb 3b                	jmp    f010de23 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010dde8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddeb:	83 c0 5c             	add    $0x5c,%eax
f010ddee:	83 ec 08             	sub    $0x8,%esp
f010ddf1:	68 a7 37 13 f0       	push   $0xf01337a7
f010ddf6:	50                   	push   %eax
f010ddf7:	e8 00 11 02 00       	call   f012eefc <strcmp>
f010ddfc:	83 c4 10             	add    $0x10,%esp
f010ddff:	85 c0                	test   %eax,%eax
f010de01:	75 12                	jne    f010de15 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010de03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de07:	74 07                	je     f010de10 <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010de09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010de10:	ff 45 f4             	incl   -0xc(%ebp)
f010de13:	eb 06                	jmp    f010de1b <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010de15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de19:	74 31                	je     f010de4c <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010de1b:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f010de20:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010de23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de27:	74 08                	je     f010de31 <tst_sc_MLFQ+0x82>
f010de29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de2c:	8b 40 44             	mov    0x44(%eax),%eax
f010de2f:	eb 05                	jmp    f010de36 <tst_sc_MLFQ+0x87>
f010de31:	b8 00 00 00 00       	mov    $0x0,%eax
f010de36:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f010de3b:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f010de40:	85 c0                	test   %eax,%eax
f010de42:	75 a4                	jne    f010dde8 <tst_sc_MLFQ+0x39>
f010de44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de48:	75 9e                	jne    f010dde8 <tst_sc_MLFQ+0x39>
f010de4a:	eb 01                	jmp    f010de4d <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010de4c:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010de4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de50:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010de53:	75 12                	jne    f010de67 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010de55:	83 ec 0c             	sub    $0xc,%esp
f010de58:	68 b0 37 13 f0       	push   $0xf01337b0
f010de5d:	e8 cf 2f ff ff       	call   f0100e31 <cprintf>
f010de62:	83 c4 10             	add    $0x10,%esp
f010de65:	eb 17                	jmp    f010de7e <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010de67:	83 ec 04             	sub    $0x4,%esp
f010de6a:	68 e9 37 13 f0       	push   $0xf01337e9
f010de6f:	68 94 00 00 00       	push   $0x94
f010de74:	68 ff 37 13 f0       	push   $0xf01337ff
f010de79:	e8 32 23 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010de7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de83:	c9                   	leave  
f010de84:	c3                   	ret    

f010de85 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010de85:	55                   	push   %ebp
f010de86:	89 e5                	mov    %esp,%ebp
f010de88:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010de8b:	e8 80 3d 00 00       	call   f0111c10 <TestAutoCompleteCommand>
f010de90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010de93:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de98:	c9                   	leave  
f010de99:	c3                   	ret    

f010de9a <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010de9a:	55                   	push   %ebp
f010de9b:	89 e5                	mov    %esp,%ebp
f010de9d:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dea0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dea4:	74 1a                	je     f010dec0 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010dea6:	83 ec 0c             	sub    $0xc,%esp
f010dea9:	68 18 38 13 f0       	push   $0xf0133818
f010deae:	e8 7e 2f ff ff       	call   f0100e31 <cprintf>
f010deb3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010deb6:	b8 00 00 00 00       	mov    $0x0,%eax
f010debb:	e9 2f 01 00 00       	jmp    f010dfef <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010dec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dec3:	83 c0 04             	add    $0x4,%eax
f010dec6:	8b 00                	mov    (%eax),%eax
f010dec8:	83 ec 08             	sub    $0x8,%esp
f010decb:	68 55 38 13 f0       	push   $0xf0133855
f010ded0:	50                   	push   %eax
f010ded1:	e8 26 10 02 00       	call   f012eefc <strcmp>
f010ded6:	83 c4 10             	add    $0x10,%esp
f010ded9:	85 c0                	test   %eax,%eax
f010dedb:	75 0a                	jne    f010dee7 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010dedd:	e8 80 06 00 00       	call   f010e562 <test_initialize_dynamic_allocator>
f010dee2:	e9 03 01 00 00       	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010dee7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010deea:	83 c0 04             	add    $0x4,%eax
f010deed:	8b 00                	mov    (%eax),%eax
f010deef:	83 ec 08             	sub    $0x8,%esp
f010def2:	68 5a 38 13 f0       	push   $0xf013385a
f010def7:	50                   	push   %eax
f010def8:	e8 ff 0f 02 00       	call   f012eefc <strcmp>
f010defd:	83 c4 10             	add    $0x10,%esp
f010df00:	85 c0                	test   %eax,%eax
f010df02:	75 0a                	jne    f010df0e <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010df04:	e8 a1 0a 00 00       	call   f010e9aa <test_alloc_block_FF>
f010df09:	e9 dc 00 00 00       	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010df0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df11:	83 c0 04             	add    $0x4,%eax
f010df14:	8b 00                	mov    (%eax),%eax
f010df16:	83 ec 08             	sub    $0x8,%esp
f010df19:	68 62 38 13 f0       	push   $0xf0133862
f010df1e:	50                   	push   %eax
f010df1f:	e8 d8 0f 02 00       	call   f012eefc <strcmp>
f010df24:	83 c4 10             	add    $0x10,%esp
f010df27:	85 c0                	test   %eax,%eax
f010df29:	75 0a                	jne    f010df35 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010df2b:	e8 84 0e 00 00       	call   f010edb4 <test_alloc_block_BF>
f010df30:	e9 b5 00 00 00       	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010df35:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df38:	83 c0 04             	add    $0x4,%eax
f010df3b:	8b 00                	mov    (%eax),%eax
f010df3d:	83 ec 08             	sub    $0x8,%esp
f010df40:	68 6a 38 13 f0       	push   $0xf013386a
f010df45:	50                   	push   %eax
f010df46:	e8 b1 0f 02 00       	call   f012eefc <strcmp>
f010df4b:	83 c4 10             	add    $0x10,%esp
f010df4e:	85 c0                	test   %eax,%eax
f010df50:	75 0a                	jne    f010df5c <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010df52:	e8 b3 12 00 00       	call   f010f20a <test_alloc_block_NF>
f010df57:	e9 8e 00 00 00       	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010df5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df5f:	83 c0 04             	add    $0x4,%eax
f010df62:	8b 00                	mov    (%eax),%eax
f010df64:	83 ec 08             	sub    $0x8,%esp
f010df67:	68 72 38 13 f0       	push   $0xf0133872
f010df6c:	50                   	push   %eax
f010df6d:	e8 8a 0f 02 00       	call   f012eefc <strcmp>
f010df72:	83 c4 10             	add    $0x10,%esp
f010df75:	85 c0                	test   %eax,%eax
f010df77:	75 07                	jne    f010df80 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010df79:	e8 92 12 00 00       	call   f010f210 <test_free_block_FF>
f010df7e:	eb 6a                	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010df80:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df83:	83 c0 04             	add    $0x4,%eax
f010df86:	8b 00                	mov    (%eax),%eax
f010df88:	83 ec 08             	sub    $0x8,%esp
f010df8b:	68 79 38 13 f0       	push   $0xf0133879
f010df90:	50                   	push   %eax
f010df91:	e8 66 0f 02 00       	call   f012eefc <strcmp>
f010df96:	83 c4 10             	add    $0x10,%esp
f010df99:	85 c0                	test   %eax,%eax
f010df9b:	75 07                	jne    f010dfa4 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010df9d:	e8 d3 20 00 00       	call   f0110075 <test_free_block_BF>
f010dfa2:	eb 46                	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010dfa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa7:	83 c0 04             	add    $0x4,%eax
f010dfaa:	8b 00                	mov    (%eax),%eax
f010dfac:	83 ec 08             	sub    $0x8,%esp
f010dfaf:	68 80 38 13 f0       	push   $0xf0133880
f010dfb4:	50                   	push   %eax
f010dfb5:	e8 42 0f 02 00       	call   f012eefc <strcmp>
f010dfba:	83 c4 10             	add    $0x10,%esp
f010dfbd:	85 c0                	test   %eax,%eax
f010dfbf:	75 07                	jne    f010dfc8 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010dfc1:	e8 c1 2e 00 00       	call   f0110e87 <test_free_block_NF>
f010dfc6:	eb 22                	jmp    f010dfea <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010dfc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfcb:	83 c0 04             	add    $0x4,%eax
f010dfce:	8b 00                	mov    (%eax),%eax
f010dfd0:	83 ec 08             	sub    $0x8,%esp
f010dfd3:	68 87 38 13 f0       	push   $0xf0133887
f010dfd8:	50                   	push   %eax
f010dfd9:	e8 1e 0f 02 00       	call   f012eefc <strcmp>
f010dfde:	83 c4 10             	add    $0x10,%esp
f010dfe1:	85 c0                	test   %eax,%eax
f010dfe3:	75 05                	jne    f010dfea <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010dfe5:	e8 ba 2e 00 00       	call   f0110ea4 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010dfea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfef:	c9                   	leave  
f010dff0:	c3                   	ret    

f010dff1 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010dff1:	55                   	push   %ebp
f010dff2:	89 e5                	mov    %esp,%ebp
f010dff4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dff7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dffb:	74 1a                	je     f010e017 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010dffd:	83 ec 0c             	sub    $0xc,%esp
f010e000:	68 94 38 13 f0       	push   $0xf0133894
f010e005:	e8 27 2e ff ff       	call   f0100e31 <cprintf>
f010e00a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e00d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e012:	e9 e1 00 00 00       	jmp    f010e0f8 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010e017:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e01a:	83 c0 04             	add    $0x4,%eax
f010e01d:	8b 00                	mov    (%eax),%eax
f010e01f:	83 ec 08             	sub    $0x8,%esp
f010e022:	68 cd 38 13 f0       	push   $0xf01338cd
f010e027:	50                   	push   %eax
f010e028:	e8 cf 0e 02 00       	call   f012eefc <strcmp>
f010e02d:	83 c4 10             	add    $0x10,%esp
f010e030:	85 c0                	test   %eax,%eax
f010e032:	75 0a                	jne    f010e03e <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010e034:	e8 dd 42 00 00       	call   f0112316 <test_cut_paste_pages>
f010e039:	e9 b5 00 00 00       	jmp    f010e0f3 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010e03e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e041:	83 c0 04             	add    $0x4,%eax
f010e044:	8b 00                	mov    (%eax),%eax
f010e046:	83 ec 08             	sub    $0x8,%esp
f010e049:	68 d6 38 13 f0       	push   $0xf01338d6
f010e04e:	50                   	push   %eax
f010e04f:	e8 a8 0e 02 00       	call   f012eefc <strcmp>
f010e054:	83 c4 10             	add    $0x10,%esp
f010e057:	85 c0                	test   %eax,%eax
f010e059:	75 0a                	jne    f010e065 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e05b:	e8 07 4d 00 00       	call   f0112d67 <test_copy_paste_chunk>
f010e060:	e9 8e 00 00 00       	jmp    f010e0f3 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e065:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e068:	83 c0 04             	add    $0x4,%eax
f010e06b:	8b 00                	mov    (%eax),%eax
f010e06d:	83 ec 08             	sub    $0x8,%esp
f010e070:	68 e0 38 13 f0       	push   $0xf01338e0
f010e075:	50                   	push   %eax
f010e076:	e8 81 0e 02 00       	call   f012eefc <strcmp>
f010e07b:	83 c4 10             	add    $0x10,%esp
f010e07e:	85 c0                	test   %eax,%eax
f010e080:	75 07                	jne    f010e089 <tst_chunks+0x98>
	{
		test_share_chunk();
f010e082:	e8 e4 5d 00 00       	call   f0113e6b <test_share_chunk>
f010e087:	eb 6a                	jmp    f010e0f3 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e089:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e08c:	83 c0 04             	add    $0x4,%eax
f010e08f:	8b 00                	mov    (%eax),%eax
f010e091:	83 ec 08             	sub    $0x8,%esp
f010e094:	68 e6 38 13 f0       	push   $0xf01338e6
f010e099:	50                   	push   %eax
f010e09a:	e8 5d 0e 02 00       	call   f012eefc <strcmp>
f010e09f:	83 c4 10             	add    $0x10,%esp
f010e0a2:	85 c0                	test   %eax,%eax
f010e0a4:	75 07                	jne    f010e0ad <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e0a6:	e8 ee 67 00 00       	call   f0114899 <test_allocate_chunk>
f010e0ab:	eb 46                	jmp    f010e0f3 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e0ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0b0:	83 c0 04             	add    $0x4,%eax
f010e0b3:	8b 00                	mov    (%eax),%eax
f010e0b5:	83 ec 08             	sub    $0x8,%esp
f010e0b8:	68 ef 38 13 f0       	push   $0xf01338ef
f010e0bd:	50                   	push   %eax
f010e0be:	e8 39 0e 02 00       	call   f012eefc <strcmp>
f010e0c3:	83 c4 10             	add    $0x10,%esp
f010e0c6:	85 c0                	test   %eax,%eax
f010e0c8:	75 07                	jne    f010e0d1 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e0ca:	e8 d7 70 00 00       	call   f01151a6 <test_calculate_required_frames>
f010e0cf:	eb 22                	jmp    f010e0f3 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e0d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0d4:	83 c0 04             	add    $0x4,%eax
f010e0d7:	8b 00                	mov    (%eax),%eax
f010e0d9:	83 ec 08             	sub    $0x8,%esp
f010e0dc:	68 fe 38 13 f0       	push   $0xf01338fe
f010e0e1:	50                   	push   %eax
f010e0e2:	e8 15 0e 02 00       	call   f012eefc <strcmp>
f010e0e7:	83 c4 10             	add    $0x10,%esp
f010e0ea:	85 c0                	test   %eax,%eax
f010e0ec:	75 05                	jne    f010e0f3 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e0ee:	e8 2d 79 00 00       	call   f0115a20 <test_calculate_allocated_space>
	}
	return 0;
f010e0f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e0f8:	c9                   	leave  
f010e0f9:	c3                   	ret    

f010e0fa <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e0fa:	55                   	push   %ebp
f010e0fb:	89 e5                	mov    %esp,%ebp
f010e0fd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e100:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e104:	74 1a                	je     f010e120 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e106:	83 ec 0c             	sub    $0xc,%esp
f010e109:	68 10 39 13 f0       	push   $0xf0133910
f010e10e:	e8 1e 2d ff ff       	call   f0100e31 <cprintf>
f010e113:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e116:	b8 00 00 00 00       	mov    $0x0,%eax
f010e11b:	e9 ba 00 00 00       	jmp    f010e1da <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e120:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e123:	83 c0 04             	add    $0x4,%eax
f010e126:	8b 00                	mov    (%eax),%eax
f010e128:	83 ec 08             	sub    $0x8,%esp
f010e12b:	68 46 39 13 f0       	push   $0xf0133946
f010e130:	50                   	push   %eax
f010e131:	e8 c6 0d 02 00       	call   f012eefc <strcmp>
f010e136:	83 c4 10             	add    $0x10,%esp
f010e139:	85 c0                	test   %eax,%eax
f010e13b:	75 0a                	jne    f010e147 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e13d:	e8 53 3c 00 00       	call   f0111d95 <test_pt_set_page_permissions>
f010e142:	e9 8e 00 00 00       	jmp    f010e1d5 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e147:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e14a:	83 c0 04             	add    $0x4,%eax
f010e14d:	8b 00                	mov    (%eax),%eax
f010e14f:	83 ec 08             	sub    $0x8,%esp
f010e152:	68 4e 39 13 f0       	push   $0xf013394e
f010e157:	50                   	push   %eax
f010e158:	e8 9f 0d 02 00       	call   f012eefc <strcmp>
f010e15d:	83 c4 10             	add    $0x10,%esp
f010e160:	85 c0                	test   %eax,%eax
f010e162:	75 07                	jne    f010e16b <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e164:	e8 8f 3e 00 00       	call   f0111ff8 <test_pt_set_page_permissions_invalid_va>
f010e169:	eb 6a                	jmp    f010e1d5 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e16b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e16e:	83 c0 04             	add    $0x4,%eax
f010e171:	8b 00                	mov    (%eax),%eax
f010e173:	83 ec 08             	sub    $0x8,%esp
f010e176:	68 56 39 13 f0       	push   $0xf0133956
f010e17b:	50                   	push   %eax
f010e17c:	e8 7b 0d 02 00       	call   f012eefc <strcmp>
f010e181:	83 c4 10             	add    $0x10,%esp
f010e184:	85 c0                	test   %eax,%eax
f010e186:	75 07                	jne    f010e18f <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e188:	e8 b4 3e 00 00       	call   f0112041 <test_pt_get_page_permissions>
f010e18d:	eb 46                	jmp    f010e1d5 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e18f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e192:	83 c0 04             	add    $0x4,%eax
f010e195:	8b 00                	mov    (%eax),%eax
f010e197:	83 ec 08             	sub    $0x8,%esp
f010e19a:	68 5e 39 13 f0       	push   $0xf013395e
f010e19f:	50                   	push   %eax
f010e1a0:	e8 57 0d 02 00       	call   f012eefc <strcmp>
f010e1a5:	83 c4 10             	add    $0x10,%esp
f010e1a8:	85 c0                	test   %eax,%eax
f010e1aa:	75 07                	jne    f010e1b3 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e1ac:	e8 d4 3f 00 00       	call   f0112185 <test_pt_clear_page_table_entry>
f010e1b1:	eb 22                	jmp    f010e1d5 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e1b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1b6:	83 c0 04             	add    $0x4,%eax
f010e1b9:	8b 00                	mov    (%eax),%eax
f010e1bb:	83 ec 08             	sub    $0x8,%esp
f010e1be:	68 65 39 13 f0       	push   $0xf0133965
f010e1c3:	50                   	push   %eax
f010e1c4:	e8 33 0d 02 00       	call   f012eefc <strcmp>
f010e1c9:	83 c4 10             	add    $0x10,%esp
f010e1cc:	85 c0                	test   %eax,%eax
f010e1ce:	75 05                	jne    f010e1d5 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e1d0:	e8 09 41 00 00       	call   f01122de <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e1d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e1da:	c9                   	leave  
f010e1db:	c3                   	ret    

f010e1dc <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e1dc:	55                   	push   %ebp
f010e1dd:	89 e5                	mov    %esp,%ebp
f010e1df:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e1e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e5:	83 c0 08             	add    $0x8,%eax
f010e1e8:	8b 00                	mov    (%eax),%eax
f010e1ea:	83 ec 08             	sub    $0x8,%esp
f010e1ed:	68 6c 39 13 f0       	push   $0xf013396c
f010e1f2:	50                   	push   %eax
f010e1f3:	e8 04 0d 02 00       	call   f012eefc <strcmp>
f010e1f8:	83 c4 10             	add    $0x10,%esp
f010e1fb:	85 c0                	test   %eax,%eax
f010e1fd:	75 20                	jne    f010e21f <tst_kheap+0x43>
f010e1ff:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e203:	74 1a                	je     f010e21f <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e205:	83 ec 0c             	sub    $0xc,%esp
f010e208:	68 74 39 13 f0       	push   $0xf0133974
f010e20d:	e8 1f 2c ff ff       	call   f0100e31 <cprintf>
f010e212:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e215:	b8 00 00 00 00       	mov    $0x0,%eax
f010e21a:	e9 41 03 00 00       	jmp    f010e560 <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e21f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e222:	83 c0 08             	add    $0x8,%eax
f010e225:	8b 00                	mov    (%eax),%eax
f010e227:	83 ec 08             	sub    $0x8,%esp
f010e22a:	68 6c 39 13 f0       	push   $0xf013396c
f010e22f:	50                   	push   %eax
f010e230:	e8 c7 0c 02 00       	call   f012eefc <strcmp>
f010e235:	83 c4 10             	add    $0x10,%esp
f010e238:	85 c0                	test   %eax,%eax
f010e23a:	74 20                	je     f010e25c <tst_kheap+0x80>
f010e23c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e240:	74 1a                	je     f010e25c <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e242:	83 ec 0c             	sub    $0xc,%esp
f010e245:	68 c4 39 13 f0       	push   $0xf01339c4
f010e24a:	e8 e2 2b ff ff       	call   f0100e31 <cprintf>
f010e24f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e252:	b8 00 00 00 00       	mov    $0x0,%eax
f010e257:	e9 04 03 00 00       	jmp    f010e560 <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e25c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e25f:	83 c0 04             	add    $0x4,%eax
f010e262:	8b 00                	mov    (%eax),%eax
f010e264:	83 ec 08             	sub    $0x8,%esp
f010e267:	68 09 3a 13 f0       	push   $0xf0133a09
f010e26c:	50                   	push   %eax
f010e26d:	e8 8a 0c 02 00       	call   f012eefc <strcmp>
f010e272:	83 c4 10             	add    $0x10,%esp
f010e275:	85 c0                	test   %eax,%eax
f010e277:	74 1d                	je     f010e296 <tst_kheap+0xba>
f010e279:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e27c:	83 c0 04             	add    $0x4,%eax
f010e27f:	8b 00                	mov    (%eax),%eax
f010e281:	83 ec 08             	sub    $0x8,%esp
f010e284:	68 0c 3a 13 f0       	push   $0xf0133a0c
f010e289:	50                   	push   %eax
f010e28a:	e8 6d 0c 02 00       	call   f012eefc <strcmp>
f010e28f:	83 c4 10             	add    $0x10,%esp
f010e292:	85 c0                	test   %eax,%eax
f010e294:	75 1a                	jne    f010e2b0 <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e296:	e8 49 f9 ff ff       	call   f010dbe4 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e29b:	83 ec 0c             	sub    $0xc,%esp
f010e29e:	68 10 3a 13 f0       	push   $0xf0133a10
f010e2a3:	e8 89 2b ff ff       	call   f0100e31 <cprintf>
f010e2a8:	83 c4 10             	add    $0x10,%esp
f010e2ab:	e9 a0 00 00 00       	jmp    f010e350 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e2b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2b3:	83 c0 04             	add    $0x4,%eax
f010e2b6:	8b 00                	mov    (%eax),%eax
f010e2b8:	83 ec 08             	sub    $0x8,%esp
f010e2bb:	68 3d 3a 13 f0       	push   $0xf0133a3d
f010e2c0:	50                   	push   %eax
f010e2c1:	e8 36 0c 02 00       	call   f012eefc <strcmp>
f010e2c6:	83 c4 10             	add    $0x10,%esp
f010e2c9:	85 c0                	test   %eax,%eax
f010e2cb:	74 1d                	je     f010e2ea <tst_kheap+0x10e>
f010e2cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2d0:	83 c0 04             	add    $0x4,%eax
f010e2d3:	8b 00                	mov    (%eax),%eax
f010e2d5:	83 ec 08             	sub    $0x8,%esp
f010e2d8:	68 40 3a 13 f0       	push   $0xf0133a40
f010e2dd:	50                   	push   %eax
f010e2de:	e8 19 0c 02 00       	call   f012eefc <strcmp>
f010e2e3:	83 c4 10             	add    $0x10,%esp
f010e2e6:	85 c0                	test   %eax,%eax
f010e2e8:	75 17                	jne    f010e301 <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e2ea:	e8 05 f9 ff ff       	call   f010dbf4 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e2ef:	83 ec 0c             	sub    $0xc,%esp
f010e2f2:	68 44 3a 13 f0       	push   $0xf0133a44
f010e2f7:	e8 35 2b ff ff       	call   f0100e31 <cprintf>
f010e2fc:	83 c4 10             	add    $0x10,%esp
f010e2ff:	eb 4f                	jmp    f010e350 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e301:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e304:	83 c0 04             	add    $0x4,%eax
f010e307:	8b 00                	mov    (%eax),%eax
f010e309:	83 ec 08             	sub    $0x8,%esp
f010e30c:	68 70 3a 13 f0       	push   $0xf0133a70
f010e311:	50                   	push   %eax
f010e312:	e8 e5 0b 02 00       	call   f012eefc <strcmp>
f010e317:	83 c4 10             	add    $0x10,%esp
f010e31a:	85 c0                	test   %eax,%eax
f010e31c:	74 1d                	je     f010e33b <tst_kheap+0x15f>
f010e31e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e321:	83 c0 04             	add    $0x4,%eax
f010e324:	8b 00                	mov    (%eax),%eax
f010e326:	83 ec 08             	sub    $0x8,%esp
f010e329:	68 73 3a 13 f0       	push   $0xf0133a73
f010e32e:	50                   	push   %eax
f010e32f:	e8 c8 0b 02 00       	call   f012eefc <strcmp>
f010e334:	83 c4 10             	add    $0x10,%esp
f010e337:	85 c0                	test   %eax,%eax
f010e339:	75 15                	jne    f010e350 <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e33b:	e8 c4 f8 ff ff       	call   f010dc04 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e340:	83 ec 0c             	sub    $0xc,%esp
f010e343:	68 78 3a 13 f0       	push   $0xf0133a78
f010e348:	e8 e4 2a ff ff       	call   f0100e31 <cprintf>
f010e34d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e350:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e353:	83 c0 08             	add    $0x8,%eax
f010e356:	8b 00                	mov    (%eax),%eax
f010e358:	83 ec 08             	sub    $0x8,%esp
f010e35b:	68 6c 39 13 f0       	push   $0xf013396c
f010e360:	50                   	push   %eax
f010e361:	e8 96 0b 02 00       	call   f012eefc <strcmp>
f010e366:	83 c4 10             	add    $0x10,%esp
f010e369:	85 c0                	test   %eax,%eax
f010e36b:	0f 85 13 01 00 00    	jne    f010e484 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e371:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e374:	83 c0 0c             	add    $0xc,%eax
f010e377:	8b 00                	mov    (%eax),%eax
f010e379:	83 ec 04             	sub    $0x4,%esp
f010e37c:	6a 0a                	push   $0xa
f010e37e:	6a 00                	push   $0x0
f010e380:	50                   	push   %eax
f010e381:	e8 ca 0d 02 00       	call   f012f150 <strtol>
f010e386:	83 c4 10             	add    $0x10,%esp
f010e389:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e38c:	e8 83 f8 ff ff       	call   f010dc14 <isKHeapPlacementStrategyFIRSTFIT>
f010e391:	84 c0                	test   %al,%al
f010e393:	74 54                	je     f010e3e9 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e395:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e399:	75 1a                	jne    f010e3b5 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e39b:	83 ec 0c             	sub    $0xc,%esp
f010e39e:	68 a4 3a 13 f0       	push   $0xf0133aa4
f010e3a3:	e8 89 2a ff ff       	call   f0100e31 <cprintf>
f010e3a8:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e3ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3b0:	e9 ab 01 00 00       	jmp    f010e560 <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e3b5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e3b9:	75 0a                	jne    f010e3c5 <tst_kheap+0x1e9>
				test_kmalloc();
f010e3bb:	e8 59 a0 00 00       	call   f0118419 <test_kmalloc>
f010e3c0:	e9 b5 00 00 00       	jmp    f010e47a <tst_kheap+0x29e>
			else if (testNum == 2)
f010e3c5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e3c9:	75 0a                	jne    f010e3d5 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e3cb:	e8 96 e2 00 00       	call   f011c666 <test_kmalloc_firstfit1>
f010e3d0:	e9 a5 00 00 00       	jmp    f010e47a <tst_kheap+0x29e>
			else if (testNum == 3)
f010e3d5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e3d9:	0f 85 9b 00 00 00    	jne    f010e47a <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e3df:	e8 30 f3 00 00       	call   f011d714 <test_kmalloc_firstfit2>
f010e3e4:	e9 91 00 00 00       	jmp    f010e47a <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e3e9:	e8 3b f8 ff ff       	call   f010dc29 <isKHeapPlacementStrategyBESTFIT>
f010e3ee:	84 c0                	test   %al,%al
f010e3f0:	74 47                	je     f010e439 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e3f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e3f6:	75 1a                	jne    f010e412 <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e3f8:	83 ec 0c             	sub    $0xc,%esp
f010e3fb:	68 f4 3a 13 f0       	push   $0xf0133af4
f010e400:	e8 2c 2a ff ff       	call   f0100e31 <cprintf>
f010e405:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e408:	b8 00 00 00 00       	mov    $0x0,%eax
f010e40d:	e9 4e 01 00 00       	jmp    f010e560 <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e412:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e416:	75 07                	jne    f010e41f <tst_kheap+0x243>
				test_kmalloc();
f010e418:	e8 fc 9f 00 00       	call   f0118419 <test_kmalloc>
f010e41d:	eb 5b                	jmp    f010e47a <tst_kheap+0x29e>
			else if (testNum == 2)
f010e41f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e423:	75 07                	jne    f010e42c <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e425:	e8 b8 c2 00 00       	call   f011a6e2 <test_kmalloc_bestfit1>
f010e42a:	eb 4e                	jmp    f010e47a <tst_kheap+0x29e>
			else if (testNum == 3)
f010e42c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e430:	75 48                	jne    f010e47a <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e432:	e8 43 d2 00 00       	call   f011b67a <test_kmalloc_bestfit2>
f010e437:	eb 41                	jmp    f010e47a <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e439:	e8 00 f8 ff ff       	call   f010dc3e <isKHeapPlacementStrategyNEXTFIT>
f010e43e:	84 c0                	test   %al,%al
f010e440:	74 38                	je     f010e47a <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e442:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e446:	75 1a                	jne    f010e462 <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e448:	83 ec 0c             	sub    $0xc,%esp
f010e44b:	68 44 3b 13 f0       	push   $0xf0133b44
f010e450:	e8 dc 29 ff ff       	call   f0100e31 <cprintf>
f010e455:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e458:	b8 00 00 00 00       	mov    $0x0,%eax
f010e45d:	e9 fe 00 00 00       	jmp    f010e560 <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e462:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e466:	75 07                	jne    f010e46f <tst_kheap+0x293>
				test_kmalloc();
f010e468:	e8 ac 9f 00 00       	call   f0118419 <test_kmalloc>
f010e46d:	eb 0b                	jmp    f010e47a <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e46f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e473:	75 05                	jne    f010e47a <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e475:	e8 ab af 00 00       	call   f0119425 <test_kmalloc_nextfit>
		}
		return 0;
f010e47a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e47f:	e9 dc 00 00 00       	jmp    f010e560 <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e484:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e487:	83 c0 08             	add    $0x8,%eax
f010e48a:	8b 00                	mov    (%eax),%eax
f010e48c:	83 ec 08             	sub    $0x8,%esp
f010e48f:	68 92 3b 13 f0       	push   $0xf0133b92
f010e494:	50                   	push   %eax
f010e495:	e8 62 0a 02 00       	call   f012eefc <strcmp>
f010e49a:	83 c4 10             	add    $0x10,%esp
f010e49d:	85 c0                	test   %eax,%eax
f010e49f:	75 28                	jne    f010e4c9 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e4a1:	e8 83 f7 ff ff       	call   f010dc29 <isKHeapPlacementStrategyBESTFIT>
f010e4a6:	84 c0                	test   %al,%al
f010e4a8:	75 09                	jne    f010e4b3 <tst_kheap+0x2d7>
f010e4aa:	e8 65 f7 ff ff       	call   f010dc14 <isKHeapPlacementStrategyFIRSTFIT>
f010e4af:	84 c0                	test   %al,%al
f010e4b1:	74 07                	je     f010e4ba <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e4b3:	e8 15 2f 01 00       	call   f01213cd <test_kfree_bestfirstfit>
f010e4b8:	eb 05                	jmp    f010e4bf <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e4ba:	e8 1c 11 01 00       	call   f011f5db <test_kfree>
		}
		return 0;
f010e4bf:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4c4:	e9 97 00 00 00       	jmp    f010e560 <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e4c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4cc:	83 c0 08             	add    $0x8,%eax
f010e4cf:	8b 00                	mov    (%eax),%eax
f010e4d1:	83 ec 08             	sub    $0x8,%esp
f010e4d4:	68 98 3b 13 f0       	push   $0xf0133b98
f010e4d9:	50                   	push   %eax
f010e4da:	e8 1d 0a 02 00       	call   f012eefc <strcmp>
f010e4df:	83 c4 10             	add    $0x10,%esp
f010e4e2:	85 c0                	test   %eax,%eax
f010e4e4:	75 0c                	jne    f010e4f2 <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e4e6:	e8 8c 46 01 00       	call   f0122b77 <test_kheap_phys_addr>
		return 0;
f010e4eb:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4f0:	eb 6e                	jmp    f010e560 <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e4f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4f5:	83 c0 08             	add    $0x8,%eax
f010e4f8:	8b 00                	mov    (%eax),%eax
f010e4fa:	83 ec 08             	sub    $0x8,%esp
f010e4fd:	68 a2 3b 13 f0       	push   $0xf0133ba2
f010e502:	50                   	push   %eax
f010e503:	e8 f4 09 02 00       	call   f012eefc <strcmp>
f010e508:	83 c4 10             	add    $0x10,%esp
f010e50b:	85 c0                	test   %eax,%eax
f010e50d:	75 0c                	jne    f010e51b <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e50f:	e8 a1 57 01 00       	call   f0123cb5 <test_kheap_virt_addr>
		return 0;
f010e514:	b8 00 00 00 00       	mov    $0x0,%eax
f010e519:	eb 45                	jmp    f010e560 <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e51b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e51e:	83 c0 08             	add    $0x8,%eax
f010e521:	8b 00                	mov    (%eax),%eax
f010e523:	83 ec 08             	sub    $0x8,%esp
f010e526:	68 ac 3b 13 f0       	push   $0xf0133bac
f010e52b:	50                   	push   %eax
f010e52c:	e8 cb 09 02 00       	call   f012eefc <strcmp>
f010e531:	83 c4 10             	add    $0x10,%esp
f010e534:	85 c0                	test   %eax,%eax
f010e536:	75 23                	jne    f010e55b <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e538:	e8 01 f7 ff ff       	call   f010dc3e <isKHeapPlacementStrategyNEXTFIT>
f010e53d:	84 c0                	test   %al,%al
f010e53f:	74 05                	je     f010e546 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e541:	e8 12 b9 01 00       	call   f0129e58 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e546:	e8 de f6 ff ff       	call   f010dc29 <isKHeapPlacementStrategyBESTFIT>
f010e54b:	84 c0                	test   %al,%al
f010e54d:	74 05                	je     f010e554 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e54f:	e8 98 d6 01 00       	call   f012bbec <test_krealloc_BF>
		}
		return 0;
f010e554:	b8 00 00 00 00       	mov    $0x0,%eax
f010e559:	eb 05                	jmp    f010e560 <tst_kheap+0x384>
	}
	return 0;
f010e55b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e560:	c9                   	leave  
f010e561:	c3                   	ret    

f010e562 <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e562:	55                   	push   %ebp
f010e563:	89 e5                	mov    %esp,%ebp
f010e565:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e568:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e56f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e572:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e578:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e57b:	83 c0 04             	add    $0x4,%eax
f010e57e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e584:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e58b:	83 ec 08             	sub    $0x8,%esp
f010e58e:	ff 75 f0             	pushl  -0x10(%ebp)
f010e591:	68 00 00 00 f6       	push   $0xf6000000
f010e596:	e8 d6 13 02 00       	call   f012f971 <initialize_dynamic_allocator>
f010e59b:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e59e:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e5a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e5a8:	8a 40 04             	mov    0x4(%eax),%al
f010e5ab:	3c 01                	cmp    $0x1,%al
f010e5ad:	75 0a                	jne    f010e5b9 <test_initialize_dynamic_allocator+0x57>
f010e5af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e5b2:	8b 00                	mov    (%eax),%eax
f010e5b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5b7:	74 14                	je     f010e5cd <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e5b9:	83 ec 04             	sub    $0x4,%esp
f010e5bc:	68 b8 3b 13 f0       	push   $0xf0133bb8
f010e5c1:	6a 29                	push   $0x29
f010e5c3:	68 e4 3b 13 f0       	push   $0xf0133be4
f010e5c8:	e8 e3 1b ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e5cd:	83 ec 0c             	sub    $0xc,%esp
f010e5d0:	68 08 3c 13 f0       	push   $0xf0133c08
f010e5d5:	e8 57 28 ff ff       	call   f0100e31 <cprintf>
f010e5da:	83 c4 10             	add    $0x10,%esp
}
f010e5dd:	90                   	nop
f010e5de:	c9                   	leave  
f010e5df:	c3                   	ret    

f010e5e0 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e5e0:	55                   	push   %ebp
f010e5e1:	89 e5                	mov    %esp,%ebp
f010e5e3:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e5e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e5ed:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e5f4:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e5fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e5fe:	83 ec 08             	sub    $0x8,%esp
f010e601:	50                   	push   %eax
f010e602:	68 00 00 00 f6       	push   $0xf6000000
f010e607:	e8 65 13 02 00       	call   f012f971 <initialize_dynamic_allocator>
f010e60c:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e60f:	83 ec 0c             	sub    $0xc,%esp
f010e612:	68 58 3c 13 f0       	push   $0xf0133c58
f010e617:	e8 15 28 ff ff       	call   f0100e31 <cprintf>
f010e61c:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e61f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e626:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e629:	89 c2                	mov    %eax,%edx
f010e62b:	01 d2                	add    %edx,%edx
f010e62d:	01 d0                	add    %edx,%eax
f010e62f:	83 ec 08             	sub    $0x8,%esp
f010e632:	ff 75 08             	pushl  0x8(%ebp)
f010e635:	50                   	push   %eax
f010e636:	e8 1d 12 02 00       	call   f012f858 <alloc_block>
f010e63b:	83 c4 10             	add    $0x10,%esp
f010e63e:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e641:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e645:	74 17                	je     f010e65e <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e647:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e64e:	83 ec 0c             	sub    $0xc,%esp
f010e651:	68 94 3c 13 f0       	push   $0xf0133c94
f010e656:	e8 d6 27 ff ff       	call   f0100e31 <cprintf>
f010e65b:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e65e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e661:	83 ec 08             	sub    $0x8,%esp
f010e664:	ff 75 08             	pushl  0x8(%ebp)
f010e667:	50                   	push   %eax
f010e668:	e8 eb 11 02 00       	call   f012f858 <alloc_block>
f010e66d:	83 c4 10             	add    $0x10,%esp
f010e670:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e673:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e677:	74 17                	je     f010e690 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e679:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e680:	83 ec 0c             	sub    $0xc,%esp
f010e683:	68 ec 3c 13 f0       	push   $0xf0133cec
f010e688:	e8 a4 27 ff ff       	call   f0100e31 <cprintf>
f010e68d:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e694:	74 04                	je     f010e69a <test_initial_alloc+0xba>
	{
		eval += 5;
f010e696:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e69a:	83 ec 0c             	sub    $0xc,%esp
f010e69d:	68 44 3d 13 f0       	push   $0xf0133d44
f010e6a2:	e8 8a 27 ff ff       	call   f0100e31 <cprintf>
f010e6a7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e6aa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e6b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e6b8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e6bf:	eb 2a                	jmp    f010e6eb <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e6c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e6c4:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f010e6cb:	89 d0                	mov    %edx,%eax
f010e6cd:	c1 e0 02             	shl    $0x2,%eax
f010e6d0:	01 d0                	add    %edx,%eax
f010e6d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e6d9:	01 d0                	add    %edx,%eax
f010e6db:	c1 e0 03             	shl    $0x3,%eax
f010e6de:	89 c2                	mov    %eax,%edx
f010e6e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6e3:	01 d0                	add    %edx,%eax
f010e6e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e6e8:	ff 45 e8             	incl   -0x18(%ebp)
f010e6eb:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e6ef:	7e d0                	jle    f010e6c1 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e6f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e6f4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e6f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e6fa:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e6fe:	7f 17                	jg     f010e717 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e700:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e707:	83 ec 0c             	sub    $0xc,%esp
f010e70a:	68 90 3d 13 f0       	push   $0xf0133d90
f010e70f:	e8 1d 27 ff ff       	call   f0100e31 <cprintf>
f010e714:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e717:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e71e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e725:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e72c:	e9 fc 00 00 00       	jmp    f010e82d <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e731:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e738:	e9 e0 00 00 00       	jmp    f010e81d <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e73d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e740:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010e747:	83 e8 10             	sub    $0x10,%eax
f010e74a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e74d:	83 ec 08             	sub    $0x8,%esp
f010e750:	ff 75 08             	pushl  0x8(%ebp)
f010e753:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e756:	e8 fd 10 02 00       	call   f012f858 <alloc_block>
f010e75b:	83 c4 10             	add    $0x10,%esp
f010e75e:	89 c2                	mov    %eax,%edx
f010e760:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e763:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010e76a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e76d:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010e774:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e777:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e77a:	d1 e8                	shr    %eax
f010e77c:	89 c2                	mov    %eax,%edx
f010e77e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e781:	01 c2                	add    %eax,%edx
f010e783:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e786:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e78d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e790:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e793:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e796:	01 c2                	add    %eax,%edx
f010e798:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e79b:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e7a2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e7a6:	74 0b                	je     f010e7b3 <test_initial_alloc+0x1d3>
f010e7a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e7ab:	83 c0 10             	add    $0x10,%eax
f010e7ae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e7b1:	74 27                	je     f010e7da <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e7b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e7b7:	74 21                	je     f010e7da <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e7b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e7c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e7c3:	83 c0 10             	add    $0x10,%eax
f010e7c6:	ff 75 cc             	pushl  -0x34(%ebp)
f010e7c9:	50                   	push   %eax
f010e7ca:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e7cd:	68 0c 3e 13 f0       	push   $0xf0133e0c
f010e7d2:	e8 5a 26 ff ff       	call   f0100e31 <cprintf>
f010e7d7:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e7da:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7dd:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010e7e4:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e7e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7ea:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010e7f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7f4:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e7f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7fa:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010e801:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e804:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e807:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e80a:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010e811:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e814:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e817:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e81a:	ff 45 d8             	incl   -0x28(%ebp)
f010e81d:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e824:	0f 8e 13 ff ff ff    	jle    f010e73d <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e82a:	ff 45 dc             	incl   -0x24(%ebp)
f010e82d:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e831:	0f 8e fa fe ff ff    	jle    f010e731 <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e837:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e83b:	74 04                	je     f010e841 <test_initial_alloc+0x261>
	{
		eval += 20;
f010e83d:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e841:	83 ec 0c             	sub    $0xc,%esp
f010e844:	68 70 3e 13 f0       	push   $0xf0133e70
f010e849:	e8 e3 25 ff ff       	call   f0100e31 <cprintf>
f010e84e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e851:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e858:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e85b:	83 e8 10             	sub    $0x10,%eax
f010e85e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e861:	83 ec 08             	sub    $0x8,%esp
f010e864:	ff 75 08             	pushl  0x8(%ebp)
f010e867:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e86a:	e8 e9 0f 02 00       	call   f012f858 <alloc_block>
f010e86f:	83 c4 10             	add    $0x10,%esp
f010e872:	89 c2                	mov    %eax,%edx
f010e874:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e877:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010e87e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e881:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010e888:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e88b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e88e:	d1 e8                	shr    %eax
f010e890:	89 c2                	mov    %eax,%edx
f010e892:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e895:	01 c2                	add    %eax,%edx
f010e897:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e89a:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e8a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8a4:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e8a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8aa:	01 c2                	add    %eax,%edx
f010e8ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8af:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e8b6:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e8ba:	74 0b                	je     f010e8c7 <test_initial_alloc+0x2e7>
f010e8bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8bf:	83 c0 10             	add    $0x10,%eax
f010e8c2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e8c5:	74 17                	je     f010e8de <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e8c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e8ce:	83 ec 0c             	sub    $0xc,%esp
f010e8d1:	68 bc 3e 13 f0       	push   $0xf0133ebc
f010e8d6:	e8 56 25 ff ff       	call   f0100e31 <cprintf>
f010e8db:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e8de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8e1:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010e8e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8eb:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e8ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8f1:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010e8f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8fb:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010e8fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e901:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010e908:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e90b:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010e90e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e912:	74 04                	je     f010e918 <test_initial_alloc+0x338>
	{
		eval += 5;
f010e914:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e918:	83 ec 0c             	sub    $0xc,%esp
f010e91b:	68 04 3f 13 f0       	push   $0xf0133f04
f010e920:	e8 0c 25 ff ff       	call   f0100e31 <cprintf>
f010e925:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e928:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010e92f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e936:	eb 5b                	jmp    f010e993 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010e938:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e93b:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010e942:	66 8b 00             	mov    (%eax),%ax
f010e945:	98                   	cwtl   
f010e946:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e949:	75 26                	jne    f010e971 <test_initial_alloc+0x391>
f010e94b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e94e:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f010e955:	66 8b 00             	mov    (%eax),%ax
f010e958:	98                   	cwtl   
f010e959:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e95c:	75 13                	jne    f010e971 <test_initial_alloc+0x391>
f010e95e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e961:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f010e968:	66 8b 00             	mov    (%eax),%ax
f010e96b:	98                   	cwtl   
f010e96c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e96f:	74 1f                	je     f010e990 <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010e971:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010e978:	83 ec 04             	sub    $0x4,%esp
f010e97b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e97e:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e981:	68 38 3f 13 f0       	push   $0xf0133f38
f010e986:	e8 a6 24 ff ff       	call   f0100e31 <cprintf>
f010e98b:	83 c4 10             	add    $0x10,%esp
			break;
f010e98e:	eb 0b                	jmp    f010e99b <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010e990:	ff 45 d4             	incl   -0x2c(%ebp)
f010e993:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e996:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e999:	7c 9d                	jl     f010e938 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010e99b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e99f:	74 04                	je     f010e9a5 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010e9a1:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010e9a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e9a8:	c9                   	leave  
f010e9a9:	c3                   	ret    

f010e9aa <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e9aa:	55                   	push   %ebp
f010e9ab:	89 e5                	mov    %esp,%ebp
f010e9ad:	57                   	push   %edi
f010e9ae:	56                   	push   %esi
f010e9af:	53                   	push   %ebx
f010e9b0:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010e9b6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010e9bd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010e9c4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010e9cb:	83 ec 0c             	sub    $0xc,%esp
f010e9ce:	68 88 3f 13 f0       	push   $0xf0133f88
f010e9d3:	e8 59 24 ff ff       	call   f0100e31 <cprintf>
f010e9d8:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010e9db:	83 ec 0c             	sub    $0xc,%esp
f010e9de:	68 c4 3f 13 f0       	push   $0xf0133fc4
f010e9e3:	e8 49 24 ff ff       	call   f0100e31 <cprintf>
f010e9e8:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010e9eb:	83 ec 0c             	sub    $0xc,%esp
f010e9ee:	68 88 3f 13 f0       	push   $0xf0133f88
f010e9f3:	e8 39 24 ff ff       	call   f0100e31 <cprintf>
f010e9f8:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010e9fb:	83 ec 0c             	sub    $0xc,%esp
f010e9fe:	6a 01                	push   $0x1
f010ea00:	e8 db fb ff ff       	call   f010e5e0 <test_initial_alloc>
f010ea05:	83 c4 10             	add    $0x10,%esp
f010ea08:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010ea0b:	83 ec 0c             	sub    $0xc,%esp
f010ea0e:	68 00 40 13 f0       	push   $0xf0134000
f010ea13:	e8 19 24 ff ff       	call   f0100e31 <cprintf>
f010ea18:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010ea1b:	83 ec 0c             	sub    $0xc,%esp
f010ea1e:	68 38 40 13 f0       	push   $0xf0134038
f010ea23:	e8 09 24 ff ff       	call   f0100e31 <cprintf>
f010ea28:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010ea2b:	83 ec 0c             	sub    $0xc,%esp
f010ea2e:	68 00 40 13 f0       	push   $0xf0134000
f010ea33:	e8 f9 23 ff ff       	call   f0100e31 <cprintf>
f010ea38:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ea42:	eb 2c                	jmp    f010ea70 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ea44:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ea47:	89 d0                	mov    %edx,%eax
f010ea49:	c1 e0 02             	shl    $0x2,%eax
f010ea4c:	01 d0                	add    %edx,%eax
f010ea4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ea55:	01 d0                	add    %edx,%eax
f010ea57:	c1 e0 03             	shl    $0x3,%eax
f010ea5a:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010ea61:	83 ec 0c             	sub    $0xc,%esp
f010ea64:	50                   	push   %eax
f010ea65:	e8 ba 0f 02 00       	call   f012fa24 <free_block>
f010ea6a:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea6d:	ff 45 dc             	incl   -0x24(%ebp)
f010ea70:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ea74:	7e ce                	jle    f010ea44 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ea76:	83 ec 0c             	sub    $0xc,%esp
f010ea79:	68 58 3c 13 f0       	push   $0xf0133c58
f010ea7e:	e8 ae 23 ff ff       	call   f0100e31 <cprintf>
f010ea83:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ea86:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010ea8d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea94:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ea9b:	eb 1f                	jmp    f010eabc <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010ea9d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eaa0:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eaa7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eaaa:	76 0d                	jbe    f010eab9 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010eaac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eaaf:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eab6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010eab9:	ff 45 d4             	incl   -0x2c(%ebp)
f010eabc:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eac0:	7e db                	jle    f010ea9d <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010eac2:	83 ec 08             	sub    $0x8,%esp
f010eac5:	6a 01                	push   $0x1
f010eac7:	ff 75 d8             	pushl  -0x28(%ebp)
f010eaca:	e8 89 0d 02 00       	call   f012f858 <alloc_block>
f010eacf:	83 c4 10             	add    $0x10,%esp
f010ead2:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010ead5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ead9:	74 17                	je     f010eaf2 <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010eadb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010eae2:	83 ec 0c             	sub    $0xc,%esp
f010eae5:	68 70 40 13 f0       	push   $0xf0134070
f010eaea:	e8 42 23 ff ff       	call   f0100e31 <cprintf>
f010eaef:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010eaf2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eaf6:	74 04                	je     f010eafc <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010eaf8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eafc:	83 ec 0c             	sub    $0xc,%esp
f010eaff:	68 e8 40 13 f0       	push   $0xf01340e8
f010eb04:	e8 28 23 ff ff       	call   f0100e31 <cprintf>
f010eb09:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eb0c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010eb13:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010eb16:	bb a8 42 13 f0       	mov    $0xf01342a8,%ebx
f010eb1b:	ba 03 00 00 00       	mov    $0x3,%edx
f010eb20:	89 c7                	mov    %eax,%edi
f010eb22:	89 de                	mov    %ebx,%esi
f010eb24:	89 d1                	mov    %edx,%ecx
f010eb26:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010eb28:	a1 20 b7 2d f0       	mov    0xf02db720,%eax
f010eb2d:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010eb30:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010eb37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb3a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010eb3d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010eb40:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010eb45:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010eb48:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010eb4f:	e9 c6 00 00 00       	jmp    f010ec1a <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010eb54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb57:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010eb5b:	83 e8 10             	sub    $0x10,%eax
f010eb5e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010eb61:	83 ec 08             	sub    $0x8,%esp
f010eb64:	6a 01                	push   $0x1
f010eb66:	ff 75 c4             	pushl  -0x3c(%ebp)
f010eb69:	e8 ea 0c 02 00       	call   f012f858 <alloc_block>
f010eb6e:	83 c4 10             	add    $0x10,%esp
f010eb71:	89 c2                	mov    %eax,%edx
f010eb73:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb76:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010eb7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb7d:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eb81:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010eb84:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eb87:	d1 e8                	shr    %eax
f010eb89:	89 c2                	mov    %eax,%edx
f010eb8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb8e:	01 c2                	add    %eax,%edx
f010eb90:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb93:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010eb97:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eb9a:	8d 50 fe             	lea    -0x2(%eax),%edx
f010eb9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eba0:	01 c2                	add    %eax,%edx
f010eba2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eba5:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ebac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebaf:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ebb3:	85 c0                	test   %eax,%eax
f010ebb5:	74 12                	je     f010ebc9 <test_alloc_block_FF+0x21f>
f010ebb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebba:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ebbe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebc1:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ebc5:	39 c2                	cmp    %eax,%edx
f010ebc7:	74 27                	je     f010ebf0 <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010ebc9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010ebd0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebd3:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ebd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebda:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ebde:	52                   	push   %edx
f010ebdf:	50                   	push   %eax
f010ebe0:	ff 75 d0             	pushl  -0x30(%ebp)
f010ebe3:	68 44 41 13 f0       	push   $0xf0134144
f010ebe8:	e8 44 22 ff ff       	call   f0100e31 <cprintf>
f010ebed:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ebf0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebf3:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ebf7:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ebfc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebff:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ec03:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ec08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec0b:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec12:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ec17:	ff 45 d0             	incl   -0x30(%ebp)
f010ec1a:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010ec1e:	0f 8e 30 ff ff ff    	jle    f010eb54 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010ec24:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ec28:	74 04                	je     f010ec2e <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010ec2a:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010ec2e:	83 ec 0c             	sub    $0xc,%esp
f010ec31:	68 70 3e 13 f0       	push   $0xf0133e70
f010ec36:	e8 f6 21 ff ff       	call   f0100e31 <cprintf>
f010ec3b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ec3e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010ec45:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010ec4c:	83 ec 08             	sub    $0x8,%esp
f010ec4f:	6a 01                	push   $0x1
f010ec51:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ec54:	e8 ff 0b 02 00       	call   f012f858 <alloc_block>
f010ec59:	83 c4 10             	add    $0x10,%esp
f010ec5c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010ec5f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ec62:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010ec65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec68:	d1 e8                	shr    %eax
f010ec6a:	89 c2                	mov    %eax,%edx
f010ec6c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec6f:	01 d0                	add    %edx,%eax
f010ec71:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010ec74:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec77:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ec7a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec7d:	01 d0                	add    %edx,%eax
f010ec7f:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010ec82:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010ec85:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ec88:	01 d0                	add    %edx,%eax
f010ec8a:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ec8f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010ec92:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ec96:	74 08                	je     f010eca0 <test_alloc_block_FF+0x2f6>
f010ec98:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec9b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010ec9e:	74 1d                	je     f010ecbd <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010eca0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010eca7:	83 ec 04             	sub    $0x4,%esp
f010ecaa:	ff 75 c8             	pushl  -0x38(%ebp)
f010ecad:	ff 75 bc             	pushl  -0x44(%ebp)
f010ecb0:	68 a8 41 13 f0       	push   $0xf01341a8
f010ecb5:	e8 77 21 ff ff       	call   f0100e31 <cprintf>
f010ecba:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010ecbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ecc0:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010ecc5:	8b 45 90             	mov    -0x70(%ebp),%eax
f010ecc8:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010eccd:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ecd0:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ecd5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ecd9:	74 04                	je     f010ecdf <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010ecdb:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ecdf:	83 ec 0c             	sub    $0xc,%esp
f010ece2:	68 04 3f 13 f0       	push   $0xf0133f04
f010ece7:	e8 45 21 ff ff       	call   f0100e31 <cprintf>
f010ecec:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ecef:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010ecf6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ecfd:	e9 82 00 00 00       	jmp    f010ed84 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010ed02:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed05:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed09:	66 8b 00             	mov    (%eax),%ax
f010ed0c:	66 3d 61 01          	cmp    $0x161,%ax
f010ed10:	75 23                	jne    f010ed35 <test_alloc_block_FF+0x38b>
f010ed12:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed15:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed19:	66 8b 00             	mov    (%eax),%ax
f010ed1c:	66 3d 61 01          	cmp    $0x161,%ax
f010ed20:	75 13                	jne    f010ed35 <test_alloc_block_FF+0x38b>
f010ed22:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed25:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed2c:	66 8b 00             	mov    (%eax),%ax
f010ed2f:	66 3d 61 01          	cmp    $0x161,%ax
f010ed33:	74 4c                	je     f010ed81 <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010ed35:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010ed3c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed3f:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed46:	66 8b 00             	mov    (%eax),%ax
f010ed49:	0f bf c8             	movswl %ax,%ecx
f010ed4c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed4f:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed53:	66 8b 00             	mov    (%eax),%ax
f010ed56:	0f bf d0             	movswl %ax,%edx
f010ed59:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed5c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed60:	66 8b 00             	mov    (%eax),%ax
f010ed63:	98                   	cwtl   
f010ed64:	83 ec 08             	sub    $0x8,%esp
f010ed67:	51                   	push   %ecx
f010ed68:	52                   	push   %edx
f010ed69:	50                   	push   %eax
f010ed6a:	68 61 01 00 00       	push   $0x161
f010ed6f:	ff 75 cc             	pushl  -0x34(%ebp)
f010ed72:	68 08 42 13 f0       	push   $0xf0134208
f010ed77:	e8 b5 20 ff ff       	call   f0100e31 <cprintf>
f010ed7c:	83 c4 20             	add    $0x20,%esp
			break;
f010ed7f:	eb 0d                	jmp    f010ed8e <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010ed81:	ff 45 cc             	incl   -0x34(%ebp)
f010ed84:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010ed88:	0f 8e 74 ff ff ff    	jle    f010ed02 <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ed8e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ed92:	74 04                	je     f010ed98 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010ed94:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010ed98:	83 ec 08             	sub    $0x8,%esp
f010ed9b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ed9e:	68 74 42 13 f0       	push   $0xf0134274
f010eda3:	e8 89 20 ff ff       	call   f0100e31 <cprintf>
f010eda8:	83 c4 10             	add    $0x10,%esp
}
f010edab:	90                   	nop
f010edac:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010edaf:	5b                   	pop    %ebx
f010edb0:	5e                   	pop    %esi
f010edb1:	5f                   	pop    %edi
f010edb2:	5d                   	pop    %ebp
f010edb3:	c3                   	ret    

f010edb4 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010edb4:	55                   	push   %ebp
f010edb5:	89 e5                	mov    %esp,%ebp
f010edb7:	57                   	push   %edi
f010edb8:	56                   	push   %esi
f010edb9:	53                   	push   %ebx
f010edba:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010edc0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010edc7:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010edce:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010edd5:	83 ec 0c             	sub    $0xc,%esp
f010edd8:	68 b4 42 13 f0       	push   $0xf01342b4
f010eddd:	e8 4f 20 ff ff       	call   f0100e31 <cprintf>
f010ede2:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010ede5:	83 ec 0c             	sub    $0xc,%esp
f010ede8:	68 e8 42 13 f0       	push   $0xf01342e8
f010eded:	e8 3f 20 ff ff       	call   f0100e31 <cprintf>
f010edf2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010edf5:	83 ec 0c             	sub    $0xc,%esp
f010edf8:	68 b4 42 13 f0       	push   $0xf01342b4
f010edfd:	e8 2f 20 ff ff       	call   f0100e31 <cprintf>
f010ee02:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010ee05:	83 ec 0c             	sub    $0xc,%esp
f010ee08:	6a 03                	push   $0x3
f010ee0a:	e8 d1 f7 ff ff       	call   f010e5e0 <test_initial_alloc>
f010ee0f:	83 c4 10             	add    $0x10,%esp
f010ee12:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010ee15:	83 ec 0c             	sub    $0xc,%esp
f010ee18:	68 b4 42 13 f0       	push   $0xf01342b4
f010ee1d:	e8 0f 20 ff ff       	call   f0100e31 <cprintf>
f010ee22:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010ee25:	83 ec 0c             	sub    $0xc,%esp
f010ee28:	68 1c 43 13 f0       	push   $0xf013431c
f010ee2d:	e8 ff 1f ff ff       	call   f0100e31 <cprintf>
f010ee32:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ee35:	83 ec 0c             	sub    $0xc,%esp
f010ee38:	68 b4 42 13 f0       	push   $0xf01342b4
f010ee3d:	e8 ef 1f ff ff       	call   f0100e31 <cprintf>
f010ee42:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee45:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ee4c:	eb 2c                	jmp    f010ee7a <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ee4e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ee51:	89 d0                	mov    %edx,%eax
f010ee53:	c1 e0 02             	shl    $0x2,%eax
f010ee56:	01 d0                	add    %edx,%eax
f010ee58:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ee5f:	01 d0                	add    %edx,%eax
f010ee61:	c1 e0 03             	shl    $0x3,%eax
f010ee64:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010ee6b:	83 ec 0c             	sub    $0xc,%esp
f010ee6e:	50                   	push   %eax
f010ee6f:	e8 b0 0b 02 00       	call   f012fa24 <free_block>
f010ee74:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee77:	ff 45 dc             	incl   -0x24(%ebp)
f010ee7a:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ee7e:	7e ce                	jle    f010ee4e <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ee80:	83 ec 0c             	sub    $0xc,%esp
f010ee83:	68 58 3c 13 f0       	push   $0xf0133c58
f010ee88:	e8 a4 1f ff ff       	call   f0100e31 <cprintf>
f010ee8d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ee90:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010ee97:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee9e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eea5:	eb 1f                	jmp    f010eec6 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eea7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eeaa:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eeb1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eeb4:	76 0d                	jbe    f010eec3 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010eeb6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eeb9:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eec0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010eec3:	ff 45 d4             	incl   -0x2c(%ebp)
f010eec6:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eeca:	7e db                	jle    f010eea7 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010eecc:	83 ec 08             	sub    $0x8,%esp
f010eecf:	6a 03                	push   $0x3
f010eed1:	ff 75 d8             	pushl  -0x28(%ebp)
f010eed4:	e8 7f 09 02 00       	call   f012f858 <alloc_block>
f010eed9:	83 c4 10             	add    $0x10,%esp
f010eedc:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eedf:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eee3:	74 17                	je     f010eefc <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010eee5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010eeec:	83 ec 0c             	sub    $0xc,%esp
f010eeef:	68 50 43 13 f0       	push   $0xf0134350
f010eef4:	e8 38 1f ff ff       	call   f0100e31 <cprintf>
f010eef9:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010eefc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ef00:	74 04                	je     f010ef06 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010ef02:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010ef06:	83 ec 0c             	sub    $0xc,%esp
f010ef09:	68 e8 40 13 f0       	push   $0xf01340e8
f010ef0e:	e8 1e 1f ff ff       	call   f0100e31 <cprintf>
f010ef13:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ef16:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010ef1d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ef20:	bb 74 45 13 f0       	mov    $0xf0134574,%ebx
f010ef25:	ba 05 00 00 00       	mov    $0x5,%edx
f010ef2a:	89 c7                	mov    %eax,%edi
f010ef2c:	89 de                	mov    %ebx,%esi
f010ef2e:	89 d1                	mov    %edx,%ecx
f010ef30:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010ef32:	a1 c0 ad 2d f0       	mov    0xf02dadc0,%eax
f010ef37:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010ef3a:	a1 e0 b0 2d f0       	mov    0xf02db0e0,%eax
f010ef3f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ef42:	a1 20 b7 2d f0       	mov    0xf02db720,%eax
f010ef47:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010ef4a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ef4d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010ef50:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ef53:	89 45 90             	mov    %eax,-0x70(%ebp)
f010ef56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ef59:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010ef5c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ef5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ef62:	01 d0                	add    %edx,%eax
f010ef64:	89 45 98             	mov    %eax,-0x68(%ebp)
f010ef67:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010ef6e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ef75:	e9 de 00 00 00       	jmp    f010f058 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ef7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef7d:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010ef81:	83 e8 10             	sub    $0x10,%eax
f010ef84:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010ef87:	83 ec 08             	sub    $0x8,%esp
f010ef8a:	6a 03                	push   $0x3
f010ef8c:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ef8f:	e8 c4 08 02 00       	call   f012f858 <alloc_block>
f010ef94:	83 c4 10             	add    $0x10,%esp
f010ef97:	89 c2                	mov    %eax,%edx
f010ef99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef9c:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010efa3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efa6:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010efad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010efb0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010efb3:	d1 e8                	shr    %eax
f010efb5:	89 c2                	mov    %eax,%edx
f010efb7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010efba:	01 c2                	add    %eax,%edx
f010efbc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efbf:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010efc6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010efc9:	8d 50 fe             	lea    -0x2(%eax),%edx
f010efcc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010efcf:	01 c2                	add    %eax,%edx
f010efd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efd4:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010efdb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efde:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010efe5:	85 c0                	test   %eax,%eax
f010efe7:	74 15                	je     f010effe <test_alloc_block_BF+0x24a>
f010efe9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efec:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010eff3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eff6:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010effa:	39 c2                	cmp    %eax,%edx
f010effc:	74 2a                	je     f010f028 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010effe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f005:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f008:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f00f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f012:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f016:	52                   	push   %edx
f010f017:	50                   	push   %eax
f010f018:	ff 75 d0             	pushl  -0x30(%ebp)
f010f01b:	68 c8 43 13 f0       	push   $0xf01343c8
f010f020:	e8 0c 1e ff ff       	call   f0100e31 <cprintf>
f010f025:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f028:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f02b:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f032:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f037:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f03a:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f041:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f046:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f049:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f050:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f055:	ff 45 d0             	incl   -0x30(%ebp)
f010f058:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f05c:	0f 8e 18 ff ff ff    	jle    f010ef7a <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f062:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f066:	74 04                	je     f010f06c <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f068:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f06c:	83 ec 0c             	sub    $0xc,%esp
f010f06f:	68 2c 44 13 f0       	push   $0xf013442c
f010f074:	e8 b8 1d ff ff       	call   f0100e31 <cprintf>
f010f079:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f07c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f083:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f08a:	83 ec 08             	sub    $0x8,%esp
f010f08d:	6a 03                	push   $0x3
f010f08f:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f092:	e8 c1 07 02 00       	call   f012f858 <alloc_block>
f010f097:	83 c4 10             	add    $0x10,%esp
f010f09a:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f09d:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f0a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f0a3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0a6:	d1 e8                	shr    %eax
f010f0a8:	89 c2                	mov    %eax,%edx
f010f0aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0ad:	01 d0                	add    %edx,%eax
f010f0af:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f0b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0b8:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f0bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0be:	01 d0                	add    %edx,%eax
f010f0c0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f0c6:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f0c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f0cc:	01 c2                	add    %eax,%edx
f010f0ce:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f0d1:	01 d0                	add    %edx,%eax
f010f0d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f0d6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f0da:	74 08                	je     f010f0e4 <test_alloc_block_BF+0x330>
f010f0dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0df:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f0e2:	74 1d                	je     f010f101 <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f0e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f0eb:	83 ec 04             	sub    $0x4,%esp
f010f0ee:	ff 75 c8             	pushl  -0x38(%ebp)
f010f0f1:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f0f4:	68 70 44 13 f0       	push   $0xf0134470
f010f0f9:	e8 33 1d ff ff       	call   f0100e31 <cprintf>
f010f0fe:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f101:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f104:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f109:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f10f:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f114:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f11a:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f11f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f123:	74 04                	je     f010f129 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f125:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f129:	83 ec 0c             	sub    $0xc,%esp
f010f12c:	68 04 3f 13 f0       	push   $0xf0133f04
f010f131:	e8 fb 1c ff ff       	call   f0100e31 <cprintf>
f010f136:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f139:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f140:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f147:	e9 8e 00 00 00       	jmp    f010f1da <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f14c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f14f:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f156:	66 8b 00             	mov    (%eax),%ax
f010f159:	66 3d 61 01          	cmp    $0x161,%ax
f010f15d:	75 26                	jne    f010f185 <test_alloc_block_BF+0x3d1>
f010f15f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f162:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f169:	66 8b 00             	mov    (%eax),%ax
f010f16c:	66 3d 61 01          	cmp    $0x161,%ax
f010f170:	75 13                	jne    f010f185 <test_alloc_block_BF+0x3d1>
f010f172:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f175:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f17c:	66 8b 00             	mov    (%eax),%ax
f010f17f:	66 3d 61 01          	cmp    $0x161,%ax
f010f183:	74 52                	je     f010f1d7 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f185:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f18c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f18f:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f196:	66 8b 00             	mov    (%eax),%ax
f010f199:	0f bf c8             	movswl %ax,%ecx
f010f19c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f19f:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f1a6:	66 8b 00             	mov    (%eax),%ax
f010f1a9:	0f bf d0             	movswl %ax,%edx
f010f1ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1af:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f1b6:	66 8b 00             	mov    (%eax),%ax
f010f1b9:	98                   	cwtl   
f010f1ba:	83 ec 08             	sub    $0x8,%esp
f010f1bd:	51                   	push   %ecx
f010f1be:	52                   	push   %edx
f010f1bf:	50                   	push   %eax
f010f1c0:	68 61 01 00 00       	push   $0x161
f010f1c5:	ff 75 cc             	pushl  -0x34(%ebp)
f010f1c8:	68 d4 44 13 f0       	push   $0xf01344d4
f010f1cd:	e8 5f 1c ff ff       	call   f0100e31 <cprintf>
f010f1d2:	83 c4 20             	add    $0x20,%esp
			break;
f010f1d5:	eb 0d                	jmp    f010f1e4 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f1d7:	ff 45 cc             	incl   -0x34(%ebp)
f010f1da:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f1de:	0f 8e 68 ff ff ff    	jle    f010f14c <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f1e4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f1e8:	74 04                	je     f010f1ee <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f1ea:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f1ee:	83 ec 08             	sub    $0x8,%esp
f010f1f1:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f1f4:	68 40 45 13 f0       	push   $0xf0134540
f010f1f9:	e8 33 1c ff ff       	call   f0100e31 <cprintf>
f010f1fe:	83 c4 10             	add    $0x10,%esp
}
f010f201:	90                   	nop
f010f202:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f205:	5b                   	pop    %ebx
f010f206:	5e                   	pop    %esi
f010f207:	5f                   	pop    %edi
f010f208:	5d                   	pop    %ebp
f010f209:	c3                   	ret    

f010f20a <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f20a:	55                   	push   %ebp
f010f20b:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f20d:	90                   	nop
f010f20e:	5d                   	pop    %ebp
f010f20f:	c3                   	ret    

f010f210 <test_free_block_FF>:

void test_free_block_FF()
{
f010f210:	55                   	push   %ebp
f010f211:	89 e5                	mov    %esp,%ebp
f010f213:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f216:	83 ec 0c             	sub    $0xc,%esp
f010f219:	68 88 45 13 f0       	push   $0xf0134588
f010f21e:	e8 0e 1c ff ff       	call   f0100e31 <cprintf>
f010f223:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f226:	83 ec 0c             	sub    $0xc,%esp
f010f229:	68 c8 45 13 f0       	push   $0xf01345c8
f010f22e:	e8 fe 1b ff ff       	call   f0100e31 <cprintf>
f010f233:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f236:	83 ec 0c             	sub    $0xc,%esp
f010f239:	68 88 45 13 f0       	push   $0xf0134588
f010f23e:	e8 ee 1b ff ff       	call   f0100e31 <cprintf>
f010f243:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f246:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f24d:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f254:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f257:	83 ec 08             	sub    $0x8,%esp
f010f25a:	50                   	push   %eax
f010f25b:	68 00 00 00 f6       	push   $0xf6000000
f010f260:	e8 0c 07 02 00       	call   f012f971 <initialize_dynamic_allocator>
f010f265:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f268:	83 ec 0c             	sub    $0xc,%esp
f010f26b:	68 08 46 13 f0       	push   $0xf0134608
f010f270:	e8 bc 1b ff ff       	call   f0100e31 <cprintf>
f010f275:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f278:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f27f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f286:	eb 2a                	jmp    f010f2b2 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f288:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f28b:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f010f292:	89 d0                	mov    %edx,%eax
f010f294:	c1 e0 02             	shl    $0x2,%eax
f010f297:	01 d0                	add    %edx,%eax
f010f299:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f2a0:	01 d0                	add    %edx,%eax
f010f2a2:	c1 e0 03             	shl    $0x3,%eax
f010f2a5:	89 c2                	mov    %eax,%edx
f010f2a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2aa:	01 d0                	add    %edx,%eax
f010f2ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f2af:	ff 45 e8             	incl   -0x18(%ebp)
f010f2b2:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f2b6:	7e d0                	jle    f010f288 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f2b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2bb:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f2be:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f2c1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f2c5:	7f 17                	jg     f010f2de <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f2c7:	83 ec 04             	sub    $0x4,%esp
f010f2ca:	68 60 46 13 f0       	push   $0xf0134660
f010f2cf:	68 fe 01 00 00       	push   $0x1fe
f010f2d4:	68 e4 3b 13 f0       	push   $0xf0133be4
f010f2d9:	e8 d2 0e ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f2de:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f2e5:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f2ec:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f2f3:	e9 f8 00 00 00       	jmp    f010f3f0 <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f2f8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f2ff:	e9 dc 00 00 00       	jmp    f010f3e0 <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f304:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f307:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f30e:	83 e8 10             	sub    $0x10,%eax
f010f311:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f314:	83 ec 08             	sub    $0x8,%esp
f010f317:	6a 01                	push   $0x1
f010f319:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f31c:	e8 37 05 02 00       	call   f012f858 <alloc_block>
f010f321:	83 c4 10             	add    $0x10,%esp
f010f324:	89 c2                	mov    %eax,%edx
f010f326:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f329:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010f330:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f333:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f33a:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f33d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f340:	d1 e8                	shr    %eax
f010f342:	89 c2                	mov    %eax,%edx
f010f344:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f347:	01 c2                	add    %eax,%edx
f010f349:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f34c:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f353:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f356:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f359:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f35c:	01 c2                	add    %eax,%edx
f010f35e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f361:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f368:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f36c:	74 0b                	je     f010f379 <test_free_block_FF+0x169>
f010f36e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f371:	83 c0 10             	add    $0x10,%eax
f010f374:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f377:	74 24                	je     f010f39d <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f379:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f37c:	83 c0 10             	add    $0x10,%eax
f010f37f:	83 ec 08             	sub    $0x8,%esp
f010f382:	ff 75 c0             	pushl  -0x40(%ebp)
f010f385:	50                   	push   %eax
f010f386:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f389:	68 d8 46 13 f0       	push   $0xf01346d8
f010f38e:	68 0d 02 00 00       	push   $0x20d
f010f393:	68 e4 3b 13 f0       	push   $0xf0133be4
f010f398:	e8 13 0e ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f39d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3a0:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f3a7:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f3aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3ad:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010f3b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3b7:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f3ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3bd:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010f3c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3c7:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f3ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3cd:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010f3d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3d7:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f3da:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f3dd:	ff 45 d8             	incl   -0x28(%ebp)
f010f3e0:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f3e7:	0f 8e 17 ff ff ff    	jle    f010f304 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f3ed:	ff 45 dc             	incl   -0x24(%ebp)
f010f3f0:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f3f4:	0f 8e fe fe ff ff    	jle    f010f2f8 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f3fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f3fd:	83 e8 10             	sub    $0x10,%eax
f010f400:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f403:	83 ec 08             	sub    $0x8,%esp
f010f406:	6a 01                	push   $0x1
f010f408:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f40b:	e8 48 04 02 00       	call   f012f858 <alloc_block>
f010f410:	83 c4 10             	add    $0x10,%esp
f010f413:	89 c2                	mov    %eax,%edx
f010f415:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f418:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010f41f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f422:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f429:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f42c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f42f:	d1 e8                	shr    %eax
f010f431:	89 c2                	mov    %eax,%edx
f010f433:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f436:	01 c2                	add    %eax,%edx
f010f438:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f43b:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f442:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f445:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f448:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f44b:	01 c2                	add    %eax,%edx
f010f44d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f450:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f457:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f45b:	74 0b                	je     f010f468 <test_free_block_FF+0x258>
f010f45d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f460:	83 c0 10             	add    $0x10,%eax
f010f463:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f466:	74 17                	je     f010f47f <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f468:	83 ec 04             	sub    $0x4,%esp
f010f46b:	68 3c 47 13 f0       	push   $0xf013473c
f010f470:	68 1e 02 00 00       	push   $0x21e
f010f475:	68 e4 3b 13 f0       	push   $0xf0133be4
f010f47a:	e8 31 0d ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f47f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f482:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010f489:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f48c:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f48f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f492:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010f499:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f49c:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f49f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4a2:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010f4a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ac:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f4af:	83 ec 0c             	sub    $0xc,%esp
f010f4b2:	68 84 47 13 f0       	push   $0xf0134784
f010f4b7:	e8 75 19 ff ff       	call   f0100e31 <cprintf>
f010f4bc:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f4bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f4c6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f4cd:	eb 5b                	jmp    f010f52a <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f4cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4d2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f4d9:	66 8b 00             	mov    (%eax),%ax
f010f4dc:	98                   	cwtl   
f010f4dd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f4e0:	75 26                	jne    f010f508 <test_free_block_FF+0x2f8>
f010f4e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4e5:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f010f4ec:	66 8b 00             	mov    (%eax),%ax
f010f4ef:	98                   	cwtl   
f010f4f0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f4f3:	75 13                	jne    f010f508 <test_free_block_FF+0x2f8>
f010f4f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4f8:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f010f4ff:	66 8b 00             	mov    (%eax),%ax
f010f502:	98                   	cwtl   
f010f503:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f506:	74 1f                	je     f010f527 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f508:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f50f:	83 ec 04             	sub    $0x4,%esp
f010f512:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f515:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f518:	68 b8 47 13 f0       	push   $0xf01347b8
f010f51d:	e8 0f 19 ff ff       	call   f0100e31 <cprintf>
f010f522:	83 c4 10             	add    $0x10,%esp
			break;
f010f525:	eb 0b                	jmp    f010f532 <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f527:	ff 45 d4             	incl   -0x2c(%ebp)
f010f52a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f52d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f530:	7c 9d                	jl     f010f4cf <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f532:	83 ec 0c             	sub    $0xc,%esp
f010f535:	68 08 48 13 f0       	push   $0xf0134808
f010f53a:	e8 f2 18 ff ff       	call   f0100e31 <cprintf>
f010f53f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f542:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f549:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f550:	e9 e4 00 00 00       	jmp    f010f639 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f555:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f558:	89 d0                	mov    %edx,%eax
f010f55a:	c1 e0 02             	shl    $0x2,%eax
f010f55d:	01 d0                	add    %edx,%eax
f010f55f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f566:	01 d0                	add    %edx,%eax
f010f568:	c1 e0 03             	shl    $0x3,%eax
f010f56b:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f572:	83 ec 0c             	sub    $0xc,%esp
f010f575:	50                   	push   %eax
f010f576:	e8 a9 04 02 00       	call   f012fa24 <free_block>
f010f57b:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f57e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f581:	89 d0                	mov    %edx,%eax
f010f583:	c1 e0 02             	shl    $0x2,%eax
f010f586:	01 d0                	add    %edx,%eax
f010f588:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f58f:	01 d0                	add    %edx,%eax
f010f591:	c1 e0 03             	shl    $0x3,%eax
f010f594:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f59b:	83 ec 0c             	sub    $0xc,%esp
f010f59e:	50                   	push   %eax
f010f59f:	e8 87 02 02 00       	call   f012f82b <get_block_size>
f010f5a4:	83 c4 10             	add    $0x10,%esp
f010f5a7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f5aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5ad:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f5b4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f5b7:	74 2b                	je     f010f5e4 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f5b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f5bd:	74 25                	je     f010f5e4 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f5bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f5c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5c9:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f5d0:	ff 75 bc             	pushl  -0x44(%ebp)
f010f5d3:	50                   	push   %eax
f010f5d4:	ff 75 d0             	pushl  -0x30(%ebp)
f010f5d7:	68 38 48 13 f0       	push   $0xf0134838
f010f5dc:	e8 50 18 ff ff       	call   f0100e31 <cprintf>
f010f5e1:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f5e4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f5e7:	89 d0                	mov    %edx,%eax
f010f5e9:	c1 e0 02             	shl    $0x2,%eax
f010f5ec:	01 d0                	add    %edx,%eax
f010f5ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f5f5:	01 d0                	add    %edx,%eax
f010f5f7:	c1 e0 03             	shl    $0x3,%eax
f010f5fa:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f601:	83 ec 0c             	sub    $0xc,%esp
f010f604:	50                   	push   %eax
f010f605:	e8 37 02 02 00       	call   f012f841 <is_free_block>
f010f60a:	83 c4 10             	add    $0x10,%esp
f010f60d:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f610:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f614:	74 20                	je     f010f636 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f616:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f61a:	74 1a                	je     f010f636 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f61c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f623:	83 ec 08             	sub    $0x8,%esp
f010f626:	ff 75 d0             	pushl  -0x30(%ebp)
f010f629:	68 9c 48 13 f0       	push   $0xf013489c
f010f62e:	e8 fe 17 ff ff       	call   f0100e31 <cprintf>
f010f633:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f636:	ff 45 d0             	incl   -0x30(%ebp)
f010f639:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f63d:	0f 8e 12 ff ff ff    	jle    f010f555 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f643:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f647:	74 04                	je     f010f64d <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f649:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f64d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f654:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f010f659:	83 ec 0c             	sub    $0xc,%esp
f010f65c:	50                   	push   %eax
f010f65d:	e8 c2 03 02 00       	call   f012fa24 <free_block>
f010f662:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f665:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f010f66a:	83 ec 0c             	sub    $0xc,%esp
f010f66d:	50                   	push   %eax
f010f66e:	e8 b8 01 02 00       	call   f012f82b <get_block_size>
f010f673:	83 c4 10             	add    $0x10,%esp
f010f676:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f679:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f67c:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f67f:	74 1d                	je     f010f69e <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f681:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f688:	83 ec 04             	sub    $0x4,%esp
f010f68b:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f68e:	ff 75 c8             	pushl  -0x38(%ebp)
f010f691:	68 f4 48 13 f0       	push   $0xf01348f4
f010f696:	e8 96 17 ff ff       	call   f0100e31 <cprintf>
f010f69b:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f69e:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f010f6a3:	83 ec 0c             	sub    $0xc,%esp
f010f6a6:	50                   	push   %eax
f010f6a7:	e8 95 01 02 00       	call   f012f841 <is_free_block>
f010f6ac:	83 c4 10             	add    $0x10,%esp
f010f6af:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f6b2:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f6b6:	74 17                	je     f010f6cf <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f6b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f6bf:	83 ec 0c             	sub    $0xc,%esp
f010f6c2:	68 54 49 13 f0       	push   $0xf0134954
f010f6c7:	e8 65 17 ff ff       	call   f0100e31 <cprintf>
f010f6cc:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f6cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f6d2:	83 e8 10             	sub    $0x10,%eax
f010f6d5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f6d8:	83 ec 08             	sub    $0x8,%esp
f010f6db:	6a 01                	push   $0x1
f010f6dd:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f6e0:	e8 73 01 02 00       	call   f012f858 <alloc_block>
f010f6e5:	83 c4 10             	add    $0x10,%esp
f010f6e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f6eb:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f6ef:	74 0b                	je     f010f6fc <test_free_block_FF+0x4ec>
f010f6f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f6f4:	83 c0 10             	add    $0x10,%eax
f010f6f7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f6fa:	74 17                	je     f010f713 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f6fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f703:	83 ec 0c             	sub    $0xc,%esp
f010f706:	68 ac 49 13 f0       	push   $0xf01349ac
f010f70b:	e8 21 17 ff ff       	call   f0100e31 <cprintf>
f010f710:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f713:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f010f718:	83 ec 0c             	sub    $0xc,%esp
f010f71b:	50                   	push   %eax
f010f71c:	e8 03 03 02 00       	call   f012fa24 <free_block>
f010f721:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f724:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f010f729:	83 ec 0c             	sub    $0xc,%esp
f010f72c:	50                   	push   %eax
f010f72d:	e8 f9 00 02 00       	call   f012f82b <get_block_size>
f010f732:	83 c4 10             	add    $0x10,%esp
f010f735:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f738:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f010f73d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f740:	74 20                	je     f010f762 <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f742:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f749:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f010f74e:	83 ec 04             	sub    $0x4,%esp
f010f751:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f754:	50                   	push   %eax
f010f755:	68 f8 49 13 f0       	push   $0xf01349f8
f010f75a:	e8 d2 16 ff ff       	call   f0100e31 <cprintf>
f010f75f:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f762:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f010f767:	83 ec 0c             	sub    $0xc,%esp
f010f76a:	50                   	push   %eax
f010f76b:	e8 d1 00 02 00       	call   f012f841 <is_free_block>
f010f770:	83 c4 10             	add    $0x10,%esp
f010f773:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f776:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f77a:	74 17                	je     f010f793 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f77c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f783:	83 ec 0c             	sub    $0xc,%esp
f010f786:	68 58 4a 13 f0       	push   $0xf0134a58
f010f78b:	e8 a1 16 ff ff       	call   f0100e31 <cprintf>
f010f790:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f793:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010f798:	83 e8 10             	sub    $0x10,%eax
f010f79b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f79e:	83 ec 08             	sub    $0x8,%esp
f010f7a1:	6a 01                	push   $0x1
f010f7a3:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f7a6:	e8 ad 00 02 00       	call   f012f858 <alloc_block>
f010f7ab:	83 c4 10             	add    $0x10,%esp
f010f7ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f7b1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f7b5:	74 09                	je     f010f7c0 <test_free_block_FF+0x5b0>
f010f7b7:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f7be:	74 17                	je     f010f7d7 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f7c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f7c7:	83 ec 0c             	sub    $0xc,%esp
f010f7ca:	68 b0 4a 13 f0       	push   $0xf0134ab0
f010f7cf:	e8 5d 16 ff ff       	call   f0100e31 <cprintf>
f010f7d4:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f7d7:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f010f7dc:	83 ec 0c             	sub    $0xc,%esp
f010f7df:	50                   	push   %eax
f010f7e0:	e8 3f 02 02 00       	call   f012fa24 <free_block>
f010f7e5:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f7e8:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f010f7ed:	83 ec 0c             	sub    $0xc,%esp
f010f7f0:	50                   	push   %eax
f010f7f1:	e8 35 00 02 00       	call   f012f82b <get_block_size>
f010f7f6:	83 c4 10             	add    $0x10,%esp
f010f7f9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f7fc:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010f801:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f804:	74 20                	je     f010f826 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f806:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f80d:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010f812:	83 ec 04             	sub    $0x4,%esp
f010f815:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f818:	50                   	push   %eax
f010f819:	68 fc 4a 13 f0       	push   $0xf0134afc
f010f81e:	e8 0e 16 ff ff       	call   f0100e31 <cprintf>
f010f823:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f826:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f010f82b:	83 ec 0c             	sub    $0xc,%esp
f010f82e:	50                   	push   %eax
f010f82f:	e8 0d 00 02 00       	call   f012f841 <is_free_block>
f010f834:	83 c4 10             	add    $0x10,%esp
f010f837:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f83a:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f83e:	74 17                	je     f010f857 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f840:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f847:	83 ec 0c             	sub    $0xc,%esp
f010f84a:	68 5c 4b 13 f0       	push   $0xf0134b5c
f010f84f:	e8 dd 15 ff ff       	call   f0100e31 <cprintf>
f010f854:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f857:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f85b:	74 04                	je     f010f861 <test_free_block_FF+0x651>
	{
		eval += 10;
f010f85d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f861:	83 ec 0c             	sub    $0xc,%esp
f010f864:	68 b4 4b 13 f0       	push   $0xf0134bb4
f010f869:	e8 c3 15 ff ff       	call   f0100e31 <cprintf>
f010f86e:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f871:	83 ec 0c             	sub    $0xc,%esp
f010f874:	68 f0 4b 13 f0       	push   $0xf0134bf0
f010f879:	e8 b3 15 ff ff       	call   f0100e31 <cprintf>
f010f87e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f881:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f888:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f88f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f892:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f899:	83 ec 0c             	sub    $0xc,%esp
f010f89c:	50                   	push   %eax
f010f89d:	e8 82 01 02 00       	call   f012fa24 <free_block>
f010f8a2:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f8a5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8a8:	48                   	dec    %eax
f010f8a9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f8b0:	83 ec 0c             	sub    $0xc,%esp
f010f8b3:	50                   	push   %eax
f010f8b4:	e8 72 ff 01 00       	call   f012f82b <get_block_size>
f010f8b9:	83 c4 10             	add    $0x10,%esp
f010f8bc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f8bf:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f010f8c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f8c8:	01 d0                	add    %edx,%eax
f010f8ca:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f8cd:	74 26                	je     f010f8f5 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f8cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f8d6:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f010f8dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f8df:	01 d0                	add    %edx,%eax
f010f8e1:	83 ec 04             	sub    $0x4,%esp
f010f8e4:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f8e7:	50                   	push   %eax
f010f8e8:	68 08 4c 13 f0       	push   $0xf0134c08
f010f8ed:	e8 3f 15 ff ff       	call   f0100e31 <cprintf>
f010f8f2:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f8f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8f8:	48                   	dec    %eax
f010f8f9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f900:	83 ec 0c             	sub    $0xc,%esp
f010f903:	50                   	push   %eax
f010f904:	e8 38 ff 01 00       	call   f012f841 <is_free_block>
f010f909:	83 c4 10             	add    $0x10,%esp
f010f90c:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f90f:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f913:	74 17                	je     f010f92c <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010f915:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f91c:	83 ec 0c             	sub    $0xc,%esp
f010f91f:	68 68 4c 13 f0       	push   $0xf0134c68
f010f924:	e8 08 15 ff ff       	call   f0100e31 <cprintf>
f010f929:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f92c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f92f:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f936:	83 ec 0c             	sub    $0xc,%esp
f010f939:	50                   	push   %eax
f010f93a:	e8 ec fe 01 00       	call   f012f82b <get_block_size>
f010f93f:	83 c4 10             	add    $0x10,%esp
f010f942:	85 c0                	test   %eax,%eax
f010f944:	75 1a                	jne    f010f960 <test_free_block_FF+0x750>
f010f946:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f949:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f950:	83 ec 0c             	sub    $0xc,%esp
f010f953:	50                   	push   %eax
f010f954:	e8 e8 fe 01 00       	call   f012f841 <is_free_block>
f010f959:	83 c4 10             	add    $0x10,%esp
f010f95c:	84 c0                	test   %al,%al
f010f95e:	74 17                	je     f010f977 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010f960:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f967:	83 ec 0c             	sub    $0xc,%esp
f010f96a:	68 c0 4c 13 f0       	push   $0xf0134cc0
f010f96f:	e8 bd 14 ff ff       	call   f0100e31 <cprintf>
f010f974:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010f977:	83 ec 0c             	sub    $0xc,%esp
f010f97a:	68 2a 4d 13 f0       	push   $0xf0134d2a
f010f97f:	e8 ad 14 ff ff       	call   f0100e31 <cprintf>
f010f984:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010f987:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f98e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f991:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f998:	83 ec 0c             	sub    $0xc,%esp
f010f99b:	50                   	push   %eax
f010f99c:	e8 83 00 02 00       	call   f012fa24 <free_block>
f010f9a1:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f9a4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9a7:	48                   	dec    %eax
f010f9a8:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f9af:	83 ec 0c             	sub    $0xc,%esp
f010f9b2:	50                   	push   %eax
f010f9b3:	e8 73 fe 01 00       	call   f012f82b <get_block_size>
f010f9b8:	83 c4 10             	add    $0x10,%esp
f010f9bb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010f9be:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f010f9c4:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f010f9c9:	01 d0                	add    %edx,%eax
f010f9cb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f9ce:	74 28                	je     f010f9f8 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010f9d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010f9d7:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f010f9dd:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f010f9e2:	01 d0                	add    %edx,%eax
f010f9e4:	83 ec 04             	sub    $0x4,%esp
f010f9e7:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f9ea:	50                   	push   %eax
f010f9eb:	68 44 4d 13 f0       	push   $0xf0134d44
f010f9f0:	e8 3c 14 ff ff       	call   f0100e31 <cprintf>
f010f9f5:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f9f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9fb:	48                   	dec    %eax
f010f9fc:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fa03:	83 ec 0c             	sub    $0xc,%esp
f010fa06:	50                   	push   %eax
f010fa07:	e8 35 fe 01 00       	call   f012f841 <is_free_block>
f010fa0c:	83 c4 10             	add    $0x10,%esp
f010fa0f:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fa12:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fa16:	74 17                	je     f010fa2f <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010fa18:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fa1f:	83 ec 0c             	sub    $0xc,%esp
f010fa22:	68 a4 4d 13 f0       	push   $0xf0134da4
f010fa27:	e8 05 14 ff ff       	call   f0100e31 <cprintf>
f010fa2c:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fa2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa32:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fa39:	83 ec 0c             	sub    $0xc,%esp
f010fa3c:	50                   	push   %eax
f010fa3d:	e8 e9 fd 01 00       	call   f012f82b <get_block_size>
f010fa42:	83 c4 10             	add    $0x10,%esp
f010fa45:	85 c0                	test   %eax,%eax
f010fa47:	75 1a                	jne    f010fa63 <test_free_block_FF+0x853>
f010fa49:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa4c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fa53:	83 ec 0c             	sub    $0xc,%esp
f010fa56:	50                   	push   %eax
f010fa57:	e8 e5 fd 01 00       	call   f012f841 <is_free_block>
f010fa5c:	83 c4 10             	add    $0x10,%esp
f010fa5f:	84 c0                	test   %al,%al
f010fa61:	74 17                	je     f010fa7a <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010fa63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fa6a:	83 ec 0c             	sub    $0xc,%esp
f010fa6d:	68 fc 4d 13 f0       	push   $0xf0134dfc
f010fa72:	e8 ba 13 ff ff       	call   f0100e31 <cprintf>
f010fa77:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fa7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fa7e:	74 04                	je     f010fa84 <test_free_block_FF+0x874>
	{
		eval += 15;
f010fa80:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010fa84:	83 ec 0c             	sub    $0xc,%esp
f010fa87:	68 68 4e 13 f0       	push   $0xf0134e68
f010fa8c:	e8 a0 13 ff ff       	call   f0100e31 <cprintf>
f010fa91:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010fa94:	83 ec 0c             	sub    $0xc,%esp
f010fa97:	68 a0 4e 13 f0       	push   $0xf0134ea0
f010fa9c:	e8 90 13 ff ff       	call   f0100e31 <cprintf>
f010faa1:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010faa4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010faab:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fab2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fab5:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fabc:	83 ec 0c             	sub    $0xc,%esp
f010fabf:	50                   	push   %eax
f010fac0:	e8 5f ff 01 00       	call   f012fa24 <free_block>
f010fac5:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fac8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010facb:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fad2:	83 ec 0c             	sub    $0xc,%esp
f010fad5:	50                   	push   %eax
f010fad6:	e8 50 fd 01 00       	call   f012f82b <get_block_size>
f010fadb:	83 c4 10             	add    $0x10,%esp
f010fade:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010fae1:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fae7:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010faec:	01 d0                	add    %edx,%eax
f010faee:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010faf1:	74 28                	je     f010fb1b <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010faf3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010fafa:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fb00:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010fb05:	01 d0                	add    %edx,%eax
f010fb07:	83 ec 04             	sub    $0x4,%esp
f010fb0a:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fb0d:	50                   	push   %eax
f010fb0e:	68 44 4d 13 f0       	push   $0xf0134d44
f010fb13:	e8 19 13 ff ff       	call   f0100e31 <cprintf>
f010fb18:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fb1b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb1e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fb25:	83 ec 0c             	sub    $0xc,%esp
f010fb28:	50                   	push   %eax
f010fb29:	e8 13 fd 01 00       	call   f012f841 <is_free_block>
f010fb2e:	83 c4 10             	add    $0x10,%esp
f010fb31:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fb34:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fb38:	74 17                	je     f010fb51 <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010fb3a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fb41:	83 ec 0c             	sub    $0xc,%esp
f010fb44:	68 a4 4d 13 f0       	push   $0xf0134da4
f010fb49:	e8 e3 12 ff ff       	call   f0100e31 <cprintf>
f010fb4e:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fb51:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb54:	40                   	inc    %eax
f010fb55:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fb5c:	83 ec 0c             	sub    $0xc,%esp
f010fb5f:	50                   	push   %eax
f010fb60:	e8 c6 fc 01 00       	call   f012f82b <get_block_size>
f010fb65:	83 c4 10             	add    $0x10,%esp
f010fb68:	85 c0                	test   %eax,%eax
f010fb6a:	75 1b                	jne    f010fb87 <test_free_block_FF+0x977>
f010fb6c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb6f:	40                   	inc    %eax
f010fb70:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fb77:	83 ec 0c             	sub    $0xc,%esp
f010fb7a:	50                   	push   %eax
f010fb7b:	e8 c1 fc 01 00       	call   f012f841 <is_free_block>
f010fb80:	83 c4 10             	add    $0x10,%esp
f010fb83:	84 c0                	test   %al,%al
f010fb85:	74 17                	je     f010fb9e <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010fb87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fb8e:	83 ec 0c             	sub    $0xc,%esp
f010fb91:	68 fc 4d 13 f0       	push   $0xf0134dfc
f010fb96:	e8 96 12 ff ff       	call   f0100e31 <cprintf>
f010fb9b:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010fb9e:	83 ec 0c             	sub    $0xc,%esp
f010fba1:	68 b5 4e 13 f0       	push   $0xf0134eb5
f010fba6:	e8 86 12 ff ff       	call   f0100e31 <cprintf>
f010fbab:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010fbae:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fbb5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbb8:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fbbf:	83 ec 0c             	sub    $0xc,%esp
f010fbc2:	50                   	push   %eax
f010fbc3:	e8 5c fe 01 00       	call   f012fa24 <free_block>
f010fbc8:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fbcb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbce:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fbd5:	83 ec 0c             	sub    $0xc,%esp
f010fbd8:	50                   	push   %eax
f010fbd9:	e8 4d fc 01 00       	call   f012f82b <get_block_size>
f010fbde:	83 c4 10             	add    $0x10,%esp
f010fbe1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010fbe4:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fbea:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f010fbef:	01 d0                	add    %edx,%eax
f010fbf1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fbf4:	74 28                	je     f010fc1e <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010fbf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010fbfd:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fc03:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f010fc08:	01 d0                	add    %edx,%eax
f010fc0a:	83 ec 04             	sub    $0x4,%esp
f010fc0d:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fc10:	50                   	push   %eax
f010fc11:	68 d0 4e 13 f0       	push   $0xf0134ed0
f010fc16:	e8 16 12 ff ff       	call   f0100e31 <cprintf>
f010fc1b:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fc1e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc21:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fc28:	83 ec 0c             	sub    $0xc,%esp
f010fc2b:	50                   	push   %eax
f010fc2c:	e8 10 fc 01 00       	call   f012f841 <is_free_block>
f010fc31:	83 c4 10             	add    $0x10,%esp
f010fc34:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fc37:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fc3b:	74 17                	je     f010fc54 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010fc3d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fc44:	83 ec 0c             	sub    $0xc,%esp
f010fc47:	68 34 4f 13 f0       	push   $0xf0134f34
f010fc4c:	e8 e0 11 ff ff       	call   f0100e31 <cprintf>
f010fc51:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fc54:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc57:	40                   	inc    %eax
f010fc58:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fc5f:	83 ec 0c             	sub    $0xc,%esp
f010fc62:	50                   	push   %eax
f010fc63:	e8 c3 fb 01 00       	call   f012f82b <get_block_size>
f010fc68:	83 c4 10             	add    $0x10,%esp
f010fc6b:	85 c0                	test   %eax,%eax
f010fc6d:	75 1b                	jne    f010fc8a <test_free_block_FF+0xa7a>
f010fc6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc72:	40                   	inc    %eax
f010fc73:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fc7a:	83 ec 0c             	sub    $0xc,%esp
f010fc7d:	50                   	push   %eax
f010fc7e:	e8 be fb 01 00       	call   f012f841 <is_free_block>
f010fc83:	83 c4 10             	add    $0x10,%esp
f010fc86:	84 c0                	test   %al,%al
f010fc88:	74 17                	je     f010fca1 <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010fc8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fc91:	83 ec 0c             	sub    $0xc,%esp
f010fc94:	68 8c 4f 13 f0       	push   $0xf0134f8c
f010fc99:	e8 93 11 ff ff       	call   f0100e31 <cprintf>
f010fc9e:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fca1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fca5:	74 04                	je     f010fcab <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010fca7:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010fcab:	83 ec 0c             	sub    $0xc,%esp
f010fcae:	68 f8 4f 13 f0       	push   $0xf0134ff8
f010fcb3:	e8 79 11 ff ff       	call   f0100e31 <cprintf>
f010fcb8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fcbb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010fcc2:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fcc9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fccc:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fcd3:	83 ec 0c             	sub    $0xc,%esp
f010fcd6:	50                   	push   %eax
f010fcd7:	e8 48 fd 01 00       	call   f012fa24 <free_block>
f010fcdc:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010fcdf:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fce6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fce9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fcf0:	83 ec 0c             	sub    $0xc,%esp
f010fcf3:	50                   	push   %eax
f010fcf4:	e8 2b fd 01 00       	call   f012fa24 <free_block>
f010fcf9:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fcfc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcff:	48                   	dec    %eax
f010fd00:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fd07:	83 ec 0c             	sub    $0xc,%esp
f010fd0a:	50                   	push   %eax
f010fd0b:	e8 1b fb 01 00       	call   f012f82b <get_block_size>
f010fd10:	83 c4 10             	add    $0x10,%esp
f010fd13:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010fd16:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f010fd1c:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f010fd21:	01 c2                	add    %eax,%edx
f010fd23:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f010fd28:	01 d0                	add    %edx,%eax
f010fd2a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fd2d:	74 2f                	je     f010fd5e <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010fd2f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010fd36:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f010fd3c:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f010fd41:	01 c2                	add    %eax,%edx
f010fd43:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f010fd48:	01 d0                	add    %edx,%eax
f010fd4a:	83 ec 04             	sub    $0x4,%esp
f010fd4d:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fd50:	50                   	push   %eax
f010fd51:	68 38 50 13 f0       	push   $0xf0135038
f010fd56:	e8 d6 10 ff ff       	call   f0100e31 <cprintf>
f010fd5b:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fd5e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd61:	48                   	dec    %eax
f010fd62:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fd69:	83 ec 0c             	sub    $0xc,%esp
f010fd6c:	50                   	push   %eax
f010fd6d:	e8 cf fa 01 00       	call   f012f841 <is_free_block>
f010fd72:	83 c4 10             	add    $0x10,%esp
f010fd75:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fd78:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fd7c:	74 17                	je     f010fd95 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010fd7e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fd85:	83 ec 0c             	sub    $0xc,%esp
f010fd88:	68 9c 50 13 f0       	push   $0xf013509c
f010fd8d:	e8 9f 10 ff ff       	call   f0100e31 <cprintf>
f010fd92:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fd95:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd98:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fd9f:	83 ec 0c             	sub    $0xc,%esp
f010fda2:	50                   	push   %eax
f010fda3:	e8 83 fa 01 00       	call   f012f82b <get_block_size>
f010fda8:	83 c4 10             	add    $0x10,%esp
f010fdab:	85 c0                	test   %eax,%eax
f010fdad:	75 50                	jne    f010fdff <test_free_block_FF+0xbef>
f010fdaf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdb2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fdb9:	83 ec 0c             	sub    $0xc,%esp
f010fdbc:	50                   	push   %eax
f010fdbd:	e8 7f fa 01 00       	call   f012f841 <is_free_block>
f010fdc2:	83 c4 10             	add    $0x10,%esp
f010fdc5:	84 c0                	test   %al,%al
f010fdc7:	75 36                	jne    f010fdff <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fdc9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdcc:	40                   	inc    %eax
f010fdcd:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fdd4:	83 ec 0c             	sub    $0xc,%esp
f010fdd7:	50                   	push   %eax
f010fdd8:	e8 4e fa 01 00       	call   f012f82b <get_block_size>
f010fddd:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fde0:	85 c0                	test   %eax,%eax
f010fde2:	75 1b                	jne    f010fdff <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fde4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fde7:	40                   	inc    %eax
f010fde8:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fdef:	83 ec 0c             	sub    $0xc,%esp
f010fdf2:	50                   	push   %eax
f010fdf3:	e8 49 fa 01 00       	call   f012f841 <is_free_block>
f010fdf8:	83 c4 10             	add    $0x10,%esp
f010fdfb:	84 c0                	test   %al,%al
f010fdfd:	74 17                	je     f010fe16 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010fdff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fe06:	83 ec 0c             	sub    $0xc,%esp
f010fe09:	68 f4 50 13 f0       	push   $0xf01350f4
f010fe0e:	e8 1e 10 ff ff       	call   f0100e31 <cprintf>
f010fe13:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fe16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe1a:	74 04                	je     f010fe20 <test_free_block_FF+0xc10>
	{
		eval += 20;
f010fe1c:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010fe20:	83 ec 0c             	sub    $0xc,%esp
f010fe23:	68 60 51 13 f0       	push   $0xf0135160
f010fe28:	e8 04 10 ff ff       	call   f0100e31 <cprintf>
f010fe2d:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010fe30:	83 ec 0c             	sub    $0xc,%esp
f010fe33:	68 a4 51 13 f0       	push   $0xf01351a4
f010fe38:	e8 f4 0f ff ff       	call   f0100e31 <cprintf>
f010fe3d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe40:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fe47:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fe4e:	83 ec 08             	sub    $0x8,%esp
f010fe51:	6a 01                	push   $0x1
f010fe53:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe56:	e8 fd f9 01 00       	call   f012f858 <alloc_block>
f010fe5b:	83 c4 10             	add    $0x10,%esp
f010fe5e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010fe61:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fe68:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fe6c:	74 08                	je     f010fe76 <test_free_block_FF+0xc66>
f010fe6e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fe71:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fe74:	74 1d                	je     f010fe93 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010fe76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fe7d:	83 ec 04             	sub    $0x4,%esp
f010fe80:	ff 75 c0             	pushl  -0x40(%ebp)
f010fe83:	ff 75 a8             	pushl  -0x58(%ebp)
f010fe86:	68 cc 51 13 f0       	push   $0xf01351cc
f010fe8b:	e8 a1 0f ff ff       	call   f0100e31 <cprintf>
f010fe90:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010fe93:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fe9a:	83 ec 08             	sub    $0x8,%esp
f010fe9d:	6a 01                	push   $0x1
f010fe9f:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fea2:	e8 b1 f9 01 00       	call   f012f858 <alloc_block>
f010fea7:	83 c4 10             	add    $0x10,%esp
f010feaa:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010fead:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010feb4:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010feb8:	74 08                	je     f010fec2 <test_free_block_FF+0xcb2>
f010feba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010febd:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fec0:	74 1d                	je     f010fedf <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010fec2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fec9:	83 ec 04             	sub    $0x4,%esp
f010fecc:	ff 75 c0             	pushl  -0x40(%ebp)
f010fecf:	ff 75 a8             	pushl  -0x58(%ebp)
f010fed2:	68 30 52 13 f0       	push   $0xf0135230
f010fed7:	e8 55 0f ff ff       	call   f0100e31 <cprintf>
f010fedc:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010fedf:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fee6:	83 ec 08             	sub    $0x8,%esp
f010fee9:	6a 01                	push   $0x1
f010feeb:	ff 75 c4             	pushl  -0x3c(%ebp)
f010feee:	e8 65 f9 01 00       	call   f012f858 <alloc_block>
f010fef3:	83 c4 10             	add    $0x10,%esp
f010fef6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f010fef9:	a1 7c a7 2d f0       	mov    0xf02da77c,%eax
f010fefe:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff01:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff05:	74 08                	je     f010ff0f <test_free_block_FF+0xcff>
f010ff07:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff0a:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff0d:	74 1d                	je     f010ff2c <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f010ff0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff16:	83 ec 04             	sub    $0x4,%esp
f010ff19:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff1c:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff1f:	68 94 52 13 f0       	push   $0xf0135294
f010ff24:	e8 08 0f ff ff       	call   f0100e31 <cprintf>
f010ff29:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff30:	74 04                	je     f010ff36 <test_free_block_FF+0xd26>
	{
		eval += 10;
f010ff32:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f010ff36:	83 ec 0c             	sub    $0xc,%esp
f010ff39:	68 f8 52 13 f0       	push   $0xf01352f8
f010ff3e:	e8 ee 0e ff ff       	call   f0100e31 <cprintf>
f010ff43:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff46:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f010ff4d:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff54:	83 ec 08             	sub    $0x8,%esp
f010ff57:	6a 01                	push   $0x1
f010ff59:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff5c:	e8 f7 f8 01 00       	call   f012f858 <alloc_block>
f010ff61:	83 c4 10             	add    $0x10,%esp
f010ff64:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f010ff67:	a1 d8 b0 2d f0       	mov    0xf02db0d8,%eax
f010ff6c:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff6f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff73:	74 08                	je     f010ff7d <test_free_block_FF+0xd6d>
f010ff75:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff78:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff7b:	74 1d                	je     f010ff9a <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f010ff7d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff84:	83 ec 04             	sub    $0x4,%esp
f010ff87:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff8a:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff8d:	68 28 53 13 f0       	push   $0xf0135328
f010ff92:	e8 9a 0e ff ff       	call   f0100e31 <cprintf>
f010ff97:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff9e:	74 04                	je     f010ffa4 <test_free_block_FF+0xd94>
	{
		eval += 10;
f010ffa0:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f010ffa4:	83 ec 0c             	sub    $0xc,%esp
f010ffa7:	68 8c 53 13 f0       	push   $0xf013538c
f010ffac:	e8 80 0e ff ff       	call   f0100e31 <cprintf>
f010ffb1:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ffb4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f010ffbb:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ffc2:	83 ec 08             	sub    $0x8,%esp
f010ffc5:	6a 01                	push   $0x1
f010ffc7:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ffca:	e8 89 f8 01 00       	call   f012f858 <alloc_block>
f010ffcf:	83 c4 10             	add    $0x10,%esp
f010ffd2:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f010ffd5:	a1 a0 aa 2d f0       	mov    0xf02daaa0,%eax
f010ffda:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ffdd:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ffe1:	74 08                	je     f010ffeb <test_free_block_FF+0xddb>
f010ffe3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ffe6:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ffe9:	74 1d                	je     f0110008 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f010ffeb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fff2:	83 ec 04             	sub    $0x4,%esp
f010fff5:	ff 75 c0             	pushl  -0x40(%ebp)
f010fff8:	ff 75 a8             	pushl  -0x58(%ebp)
f010fffb:	68 28 53 13 f0       	push   $0xf0135328
f0110000:	e8 2c 0e ff ff       	call   f0100e31 <cprintf>
f0110005:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f0110008:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011000f:	83 ec 08             	sub    $0x8,%esp
f0110012:	6a 01                	push   $0x1
f0110014:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110017:	e8 3c f8 01 00       	call   f012f858 <alloc_block>
f011001c:	83 c4 10             	add    $0x10,%esp
f011001f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110022:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110027:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011002a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011002e:	74 08                	je     f0110038 <test_free_block_FF+0xe28>
f0110030:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110033:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110036:	74 1d                	je     f0110055 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f0110038:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011003f:	83 ec 04             	sub    $0x4,%esp
f0110042:	ff 75 c0             	pushl  -0x40(%ebp)
f0110045:	ff 75 a8             	pushl  -0x58(%ebp)
f0110048:	68 b4 53 13 f0       	push   $0xf01353b4
f011004d:	e8 df 0d ff ff       	call   f0100e31 <cprintf>
f0110052:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110055:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110059:	74 04                	je     f011005f <test_free_block_FF+0xe4f>
	{
		eval += 10;
f011005b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f011005f:	83 ec 08             	sub    $0x8,%esp
f0110062:	ff 75 f4             	pushl  -0xc(%ebp)
f0110065:	68 18 54 13 f0       	push   $0xf0135418
f011006a:	e8 c2 0d ff ff       	call   f0100e31 <cprintf>
f011006f:	83 c4 10             	add    $0x10,%esp

}
f0110072:	90                   	nop
f0110073:	c9                   	leave  
f0110074:	c3                   	ret    

f0110075 <test_free_block_BF>:

void test_free_block_BF()
{
f0110075:	55                   	push   %ebp
f0110076:	89 e5                	mov    %esp,%ebp
f0110078:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f011007b:	83 ec 0c             	sub    $0xc,%esp
f011007e:	68 88 45 13 f0       	push   $0xf0134588
f0110083:	e8 a9 0d ff ff       	call   f0100e31 <cprintf>
f0110088:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f011008b:	83 ec 0c             	sub    $0xc,%esp
f011008e:	68 c8 45 13 f0       	push   $0xf01345c8
f0110093:	e8 99 0d ff ff       	call   f0100e31 <cprintf>
f0110098:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f011009b:	83 ec 0c             	sub    $0xc,%esp
f011009e:	68 88 45 13 f0       	push   $0xf0134588
f01100a3:	e8 89 0d ff ff       	call   f0100e31 <cprintf>
f01100a8:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f01100ab:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01100b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01100b5:	83 ec 08             	sub    $0x8,%esp
f01100b8:	50                   	push   %eax
f01100b9:	68 00 00 00 f6       	push   $0xf6000000
f01100be:	e8 ae f8 01 00       	call   f012f971 <initialize_dynamic_allocator>
f01100c3:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f01100c6:	83 ec 0c             	sub    $0xc,%esp
f01100c9:	68 08 46 13 f0       	push   $0xf0134608
f01100ce:	e8 5e 0d ff ff       	call   f0100e31 <cprintf>
f01100d3:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f01100d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01100dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01100e4:	eb 2a                	jmp    f0110110 <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01100e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01100e9:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f01100f0:	89 d0                	mov    %edx,%eax
f01100f2:	c1 e0 02             	shl    $0x2,%eax
f01100f5:	01 d0                	add    %edx,%eax
f01100f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01100fe:	01 d0                	add    %edx,%eax
f0110100:	c1 e0 03             	shl    $0x3,%eax
f0110103:	89 c2                	mov    %eax,%edx
f0110105:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110108:	01 d0                	add    %edx,%eax
f011010a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f011010d:	ff 45 f0             	incl   -0x10(%ebp)
f0110110:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f0110114:	7e d0                	jle    f01100e6 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110116:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110119:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011011c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f011011f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0110123:	7f 17                	jg     f011013c <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110125:	83 ec 04             	sub    $0x4,%esp
f0110128:	68 60 46 13 f0       	push   $0xf0134660
f011012d:	68 90 03 00 00       	push   $0x390
f0110132:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110137:	e8 74 00 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f011013c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110143:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011014a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0110151:	e9 f8 00 00 00       	jmp    f011024e <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110156:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011015d:	e9 dc 00 00 00       	jmp    f011023e <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110162:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110165:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f011016c:	83 e8 10             	sub    $0x10,%eax
f011016f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110172:	83 ec 08             	sub    $0x8,%esp
f0110175:	6a 03                	push   $0x3
f0110177:	ff 75 cc             	pushl  -0x34(%ebp)
f011017a:	e8 d9 f6 01 00       	call   f012f858 <alloc_block>
f011017f:	83 c4 10             	add    $0x10,%esp
f0110182:	89 c2                	mov    %eax,%edx
f0110184:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110187:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f011018e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110191:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110198:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f011019b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011019e:	d1 e8                	shr    %eax
f01101a0:	89 c2                	mov    %eax,%edx
f01101a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101a5:	01 c2                	add    %eax,%edx
f01101a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101aa:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01101b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01101b4:	8d 50 fe             	lea    -0x2(%eax),%edx
f01101b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101ba:	01 c2                	add    %eax,%edx
f01101bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101bf:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01101c6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01101ca:	74 0b                	je     f01101d7 <test_free_block_BF+0x162>
f01101cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01101cf:	83 c0 10             	add    $0x10,%eax
f01101d2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01101d5:	74 24                	je     f01101fb <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f01101d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01101da:	83 c0 10             	add    $0x10,%eax
f01101dd:	83 ec 08             	sub    $0x8,%esp
f01101e0:	ff 75 c8             	pushl  -0x38(%ebp)
f01101e3:	50                   	push   %eax
f01101e4:	ff 75 ec             	pushl  -0x14(%ebp)
f01101e7:	68 54 54 13 f0       	push   $0xf0135454
f01101ec:	68 9f 03 00 00       	push   $0x39f
f01101f1:	68 e4 3b 13 f0       	push   $0xf0133be4
f01101f6:	e8 b5 ff fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f01101fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01101fe:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110205:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0110208:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011020b:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f0110212:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110215:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110218:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011021b:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f0110222:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110225:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110228:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011022b:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f0110232:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110235:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110238:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011023b:	ff 45 e0             	incl   -0x20(%ebp)
f011023e:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0110245:	0f 8e 17 ff ff ff    	jle    f0110162 <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011024b:	ff 45 e4             	incl   -0x1c(%ebp)
f011024e:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f0110252:	0f 8e fe fe ff ff    	jle    f0110156 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110258:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011025b:	83 e8 10             	sub    $0x10,%eax
f011025e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110261:	83 ec 08             	sub    $0x8,%esp
f0110264:	6a 03                	push   $0x3
f0110266:	ff 75 cc             	pushl  -0x34(%ebp)
f0110269:	e8 ea f5 01 00       	call   f012f858 <alloc_block>
f011026e:	83 c4 10             	add    $0x10,%esp
f0110271:	89 c2                	mov    %eax,%edx
f0110273:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110276:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f011027d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110280:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110287:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f011028a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011028d:	d1 e8                	shr    %eax
f011028f:	89 c2                	mov    %eax,%edx
f0110291:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110294:	01 c2                	add    %eax,%edx
f0110296:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110299:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01102a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102a3:	8d 50 fe             	lea    -0x2(%eax),%edx
f01102a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102a9:	01 c2                	add    %eax,%edx
f01102ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ae:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01102b5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01102b9:	74 0b                	je     f01102c6 <test_free_block_BF+0x251>
f01102bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01102be:	83 c0 10             	add    $0x10,%eax
f01102c1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01102c4:	74 17                	je     f01102dd <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f01102c6:	83 ec 04             	sub    $0x4,%esp
f01102c9:	68 b8 54 13 f0       	push   $0xf01354b8
f01102ce:	68 b0 03 00 00       	push   $0x3b0
f01102d3:	68 e4 3b 13 f0       	push   $0xf0133be4
f01102d8:	e8 d3 fe fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f01102dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102e0:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f01102e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ea:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01102ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102f0:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f01102f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102fa:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01102fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110300:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f0110307:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011030a:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f011030d:	83 ec 0c             	sub    $0xc,%esp
f0110310:	68 84 47 13 f0       	push   $0xf0134784
f0110315:	e8 17 0b ff ff       	call   f0100e31 <cprintf>
f011031a:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f011031d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110324:	eb 59                	jmp    f011037f <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110326:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110329:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110330:	66 8b 00             	mov    (%eax),%ax
f0110333:	98                   	cwtl   
f0110334:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0110337:	75 26                	jne    f011035f <test_free_block_BF+0x2ea>
f0110339:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011033c:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0110343:	66 8b 00             	mov    (%eax),%ax
f0110346:	98                   	cwtl   
f0110347:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011034a:	75 13                	jne    f011035f <test_free_block_BF+0x2ea>
f011034c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011034f:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f0110356:	66 8b 00             	mov    (%eax),%ax
f0110359:	98                   	cwtl   
f011035a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011035d:	74 1d                	je     f011037c <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011035f:	83 ec 0c             	sub    $0xc,%esp
f0110362:	ff 75 dc             	pushl  -0x24(%ebp)
f0110365:	ff 75 dc             	pushl  -0x24(%ebp)
f0110368:	68 00 55 13 f0       	push   $0xf0135500
f011036d:	68 bc 03 00 00       	push   $0x3bc
f0110372:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110377:	e8 34 fe fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f011037c:	ff 45 dc             	incl   -0x24(%ebp)
f011037f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110382:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110385:	7c 9f                	jl     f0110326 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110387:	83 ec 0c             	sub    $0xc,%esp
f011038a:	68 08 48 13 f0       	push   $0xf0134808
f011038f:	e8 9d 0a ff ff       	call   f0100e31 <cprintf>
f0110394:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110397:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011039e:	e9 d8 00 00 00       	jmp    f011047b <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f01103a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01103a6:	89 d0                	mov    %edx,%eax
f01103a8:	c1 e0 02             	shl    $0x2,%eax
f01103ab:	01 d0                	add    %edx,%eax
f01103ad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01103b4:	01 d0                	add    %edx,%eax
f01103b6:	c1 e0 03             	shl    $0x3,%eax
f01103b9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01103c0:	83 ec 0c             	sub    $0xc,%esp
f01103c3:	50                   	push   %eax
f01103c4:	e8 5b f6 01 00       	call   f012fa24 <free_block>
f01103c9:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01103cc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01103cf:	89 d0                	mov    %edx,%eax
f01103d1:	c1 e0 02             	shl    $0x2,%eax
f01103d4:	01 d0                	add    %edx,%eax
f01103d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01103dd:	01 d0                	add    %edx,%eax
f01103df:	c1 e0 03             	shl    $0x3,%eax
f01103e2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01103e9:	83 ec 0c             	sub    $0xc,%esp
f01103ec:	50                   	push   %eax
f01103ed:	e8 39 f4 01 00       	call   f012f82b <get_block_size>
f01103f2:	83 c4 10             	add    $0x10,%esp
f01103f5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f01103f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01103fb:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110402:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0110405:	74 28                	je     f011042f <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110407:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011040a:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110411:	83 ec 08             	sub    $0x8,%esp
f0110414:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110417:	50                   	push   %eax
f0110418:	ff 75 d8             	pushl  -0x28(%ebp)
f011041b:	68 50 55 13 f0       	push   $0xf0135550
f0110420:	68 c9 03 00 00       	push   $0x3c9
f0110425:	68 e4 3b 13 f0       	push   $0xf0133be4
f011042a:	e8 81 fd fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f011042f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110432:	89 d0                	mov    %edx,%eax
f0110434:	c1 e0 02             	shl    $0x2,%eax
f0110437:	01 d0                	add    %edx,%eax
f0110439:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110440:	01 d0                	add    %edx,%eax
f0110442:	c1 e0 03             	shl    $0x3,%eax
f0110445:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011044c:	83 ec 0c             	sub    $0xc,%esp
f011044f:	50                   	push   %eax
f0110450:	e8 ec f3 01 00       	call   f012f841 <is_free_block>
f0110455:	83 c4 10             	add    $0x10,%esp
f0110458:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f011045b:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f011045f:	74 17                	je     f0110478 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0110461:	ff 75 d8             	pushl  -0x28(%ebp)
f0110464:	68 b0 55 13 f0       	push   $0xf01355b0
f0110469:	68 cc 03 00 00       	push   $0x3cc
f011046e:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110473:	e8 38 fd fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110478:	ff 45 d8             	incl   -0x28(%ebp)
f011047b:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f011047f:	0f 8e 1e ff ff ff    	jle    f01103a3 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110485:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f011048a:	83 ec 0c             	sub    $0xc,%esp
f011048d:	50                   	push   %eax
f011048e:	e8 91 f5 01 00       	call   f012fa24 <free_block>
f0110493:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110496:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f011049b:	83 ec 0c             	sub    $0xc,%esp
f011049e:	50                   	push   %eax
f011049f:	e8 87 f3 01 00       	call   f012f82b <get_block_size>
f01104a4:	83 c4 10             	add    $0x10,%esp
f01104a7:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f01104aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01104ad:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f01104b0:	74 1d                	je     f01104cf <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f01104b2:	83 ec 0c             	sub    $0xc,%esp
f01104b5:	ff 75 bc             	pushl  -0x44(%ebp)
f01104b8:	ff 75 d0             	pushl  -0x30(%ebp)
f01104bb:	68 08 56 13 f0       	push   $0xf0135608
f01104c0:	68 d3 03 00 00       	push   $0x3d3
f01104c5:	68 e4 3b 13 f0       	push   $0xf0133be4
f01104ca:	e8 e1 fc fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f01104cf:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f01104d4:	83 ec 0c             	sub    $0xc,%esp
f01104d7:	50                   	push   %eax
f01104d8:	e8 64 f3 01 00       	call   f012f841 <is_free_block>
f01104dd:	83 c4 10             	add    $0x10,%esp
f01104e0:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01104e3:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01104e7:	74 17                	je     f0110500 <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01104e9:	83 ec 04             	sub    $0x4,%esp
f01104ec:	68 68 56 13 f0       	push   $0xf0135668
f01104f1:	68 d6 03 00 00       	push   $0x3d6
f01104f6:	68 e4 3b 13 f0       	push   $0xf0133be4
f01104fb:	e8 b0 fc fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f0110500:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110503:	83 e8 10             	sub    $0x10,%eax
f0110506:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110509:	83 ec 08             	sub    $0x8,%esp
f011050c:	6a 03                	push   $0x3
f011050e:	ff 75 cc             	pushl  -0x34(%ebp)
f0110511:	e8 42 f3 01 00       	call   f012f858 <alloc_block>
f0110516:	83 c4 10             	add    $0x10,%esp
f0110519:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011051c:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110520:	74 0b                	je     f011052d <test_free_block_BF+0x4b8>
f0110522:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110525:	83 c0 10             	add    $0x10,%eax
f0110528:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011052b:	74 17                	je     f0110544 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f011052d:	83 ec 04             	sub    $0x4,%esp
f0110530:	68 bc 56 13 f0       	push   $0xf01356bc
f0110535:	68 dd 03 00 00       	push   $0x3dd
f011053a:	68 e4 3b 13 f0       	push   $0xf0133be4
f011053f:	e8 6c fc fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110544:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110549:	83 ec 0c             	sub    $0xc,%esp
f011054c:	50                   	push   %eax
f011054d:	e8 d2 f4 01 00       	call   f012fa24 <free_block>
f0110552:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f0110555:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f011055a:	83 ec 0c             	sub    $0xc,%esp
f011055d:	50                   	push   %eax
f011055e:	e8 c8 f2 01 00       	call   f012f82b <get_block_size>
f0110563:	83 c4 10             	add    $0x10,%esp
f0110566:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f0110569:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f011056e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110571:	74 20                	je     f0110593 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110573:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f0110578:	83 ec 0c             	sub    $0xc,%esp
f011057b:	ff 75 bc             	pushl  -0x44(%ebp)
f011057e:	50                   	push   %eax
f011057f:	68 08 57 13 f0       	push   $0xf0135708
f0110584:	68 e3 03 00 00       	push   $0x3e3
f0110589:	68 e4 3b 13 f0       	push   $0xf0133be4
f011058e:	e8 1d fc fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f0110593:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110598:	83 ec 0c             	sub    $0xc,%esp
f011059b:	50                   	push   %eax
f011059c:	e8 a0 f2 01 00       	call   f012f841 <is_free_block>
f01105a1:	83 c4 10             	add    $0x10,%esp
f01105a4:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01105a7:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01105ab:	74 17                	je     f01105c4 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01105ad:	83 ec 04             	sub    $0x4,%esp
f01105b0:	68 68 57 13 f0       	push   $0xf0135768
f01105b5:	68 e6 03 00 00       	push   $0x3e6
f01105ba:	68 e4 3b 13 f0       	push   $0xf0133be4
f01105bf:	e8 ec fb fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f01105c4:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f01105c9:	83 e8 10             	sub    $0x10,%eax
f01105cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01105cf:	83 ec 08             	sub    $0x8,%esp
f01105d2:	6a 03                	push   $0x3
f01105d4:	ff 75 cc             	pushl  -0x34(%ebp)
f01105d7:	e8 7c f2 01 00       	call   f012f858 <alloc_block>
f01105dc:	83 c4 10             	add    $0x10,%esp
f01105df:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f01105e2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01105e6:	74 09                	je     f01105f1 <test_free_block_BF+0x57c>
f01105e8:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f01105ef:	74 17                	je     f0110608 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f01105f1:	83 ec 04             	sub    $0x4,%esp
f01105f4:	68 bc 57 13 f0       	push   $0xf01357bc
f01105f9:	68 ed 03 00 00       	push   $0x3ed
f01105fe:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110603:	e8 a8 fb fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0110608:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f011060d:	83 ec 0c             	sub    $0xc,%esp
f0110610:	50                   	push   %eax
f0110611:	e8 0e f4 01 00       	call   f012fa24 <free_block>
f0110616:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f0110619:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f011061e:	83 ec 0c             	sub    $0xc,%esp
f0110621:	50                   	push   %eax
f0110622:	e8 04 f2 01 00       	call   f012f82b <get_block_size>
f0110627:	83 c4 10             	add    $0x10,%esp
f011062a:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f011062d:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f0110632:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110635:	74 20                	je     f0110657 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f0110637:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f011063c:	83 ec 0c             	sub    $0xc,%esp
f011063f:	ff 75 bc             	pushl  -0x44(%ebp)
f0110642:	50                   	push   %eax
f0110643:	68 08 58 13 f0       	push   $0xf0135808
f0110648:	68 f3 03 00 00       	push   $0x3f3
f011064d:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110652:	e8 59 fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f0110657:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f011065c:	83 ec 0c             	sub    $0xc,%esp
f011065f:	50                   	push   %eax
f0110660:	e8 dc f1 01 00       	call   f012f841 <is_free_block>
f0110665:	83 c4 10             	add    $0x10,%esp
f0110668:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011066b:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011066f:	74 17                	je     f0110688 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110671:	83 ec 04             	sub    $0x4,%esp
f0110674:	68 68 58 13 f0       	push   $0xf0135868
f0110679:	68 f6 03 00 00       	push   $0x3f6
f011067e:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110683:	e8 28 fb fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110688:	83 ec 0c             	sub    $0xc,%esp
f011068b:	68 b4 4b 13 f0       	push   $0xf0134bb4
f0110690:	e8 9c 07 ff ff       	call   f0100e31 <cprintf>
f0110695:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110698:	83 ec 0c             	sub    $0xc,%esp
f011069b:	68 f0 4b 13 f0       	push   $0xf0134bf0
f01106a0:	e8 8c 07 ff ff       	call   f0100e31 <cprintf>
f01106a5:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f01106a8:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01106af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106b2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01106b9:	83 ec 0c             	sub    $0xc,%esp
f01106bc:	50                   	push   %eax
f01106bd:	e8 62 f3 01 00       	call   f012fa24 <free_block>
f01106c2:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01106c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106c8:	48                   	dec    %eax
f01106c9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01106d0:	83 ec 0c             	sub    $0xc,%esp
f01106d3:	50                   	push   %eax
f01106d4:	e8 52 f1 01 00       	call   f012f82b <get_block_size>
f01106d9:	83 c4 10             	add    $0x10,%esp
f01106dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f01106df:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f01106e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106e8:	01 d0                	add    %edx,%eax
f01106ea:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01106ed:	74 26                	je     f0110715 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f01106ef:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f01106f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106f8:	01 d0                	add    %edx,%eax
f01106fa:	83 ec 0c             	sub    $0xc,%esp
f01106fd:	ff 75 bc             	pushl  -0x44(%ebp)
f0110700:	50                   	push   %eax
f0110701:	68 bc 58 13 f0       	push   $0xf01358bc
f0110706:	68 01 04 00 00       	push   $0x401
f011070b:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110710:	e8 9b fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110715:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110718:	48                   	dec    %eax
f0110719:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110720:	83 ec 0c             	sub    $0xc,%esp
f0110723:	50                   	push   %eax
f0110724:	e8 18 f1 01 00       	call   f012f841 <is_free_block>
f0110729:	83 c4 10             	add    $0x10,%esp
f011072c:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011072f:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110733:	74 17                	je     f011074c <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110735:	83 ec 04             	sub    $0x4,%esp
f0110738:	68 1c 59 13 f0       	push   $0xf013591c
f011073d:	68 04 04 00 00       	push   $0x404
f0110742:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110747:	e8 64 fa fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011074c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011074f:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110756:	83 ec 0c             	sub    $0xc,%esp
f0110759:	50                   	push   %eax
f011075a:	e8 cc f0 01 00       	call   f012f82b <get_block_size>
f011075f:	83 c4 10             	add    $0x10,%esp
f0110762:	85 c0                	test   %eax,%eax
f0110764:	75 1a                	jne    f0110780 <test_free_block_BF+0x70b>
f0110766:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110769:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110770:	83 ec 0c             	sub    $0xc,%esp
f0110773:	50                   	push   %eax
f0110774:	e8 c8 f0 01 00       	call   f012f841 <is_free_block>
f0110779:	83 c4 10             	add    $0x10,%esp
f011077c:	84 c0                	test   %al,%al
f011077e:	74 17                	je     f0110797 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110780:	83 ec 04             	sub    $0x4,%esp
f0110783:	68 70 59 13 f0       	push   $0xf0135970
f0110788:	68 07 04 00 00       	push   $0x407
f011078d:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110792:	e8 19 fa fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110797:	83 ec 0c             	sub    $0xc,%esp
f011079a:	68 2a 4d 13 f0       	push   $0xf0134d2a
f011079f:	e8 8d 06 ff ff       	call   f0100e31 <cprintf>
f01107a4:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f01107a7:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01107ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107b1:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01107b8:	83 ec 0c             	sub    $0xc,%esp
f01107bb:	50                   	push   %eax
f01107bc:	e8 63 f2 01 00       	call   f012fa24 <free_block>
f01107c1:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01107c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107c7:	48                   	dec    %eax
f01107c8:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01107cf:	83 ec 0c             	sub    $0xc,%esp
f01107d2:	50                   	push   %eax
f01107d3:	e8 53 f0 01 00       	call   f012f82b <get_block_size>
f01107d8:	83 c4 10             	add    $0x10,%esp
f01107db:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f01107de:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f01107e4:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f01107e9:	01 d0                	add    %edx,%eax
f01107eb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01107ee:	74 28                	je     f0110818 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f01107f0:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f01107f6:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f01107fb:	01 d0                	add    %edx,%eax
f01107fd:	83 ec 0c             	sub    $0xc,%esp
f0110800:	ff 75 bc             	pushl  -0x44(%ebp)
f0110803:	50                   	push   %eax
f0110804:	68 dc 59 13 f0       	push   $0xf01359dc
f0110809:	68 10 04 00 00       	push   $0x410
f011080e:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110813:	e8 98 f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110818:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011081b:	48                   	dec    %eax
f011081c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110823:	83 ec 0c             	sub    $0xc,%esp
f0110826:	50                   	push   %eax
f0110827:	e8 15 f0 01 00       	call   f012f841 <is_free_block>
f011082c:	83 c4 10             	add    $0x10,%esp
f011082f:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110832:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110836:	74 17                	je     f011084f <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110838:	83 ec 04             	sub    $0x4,%esp
f011083b:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0110840:	68 13 04 00 00       	push   $0x413
f0110845:	68 e4 3b 13 f0       	push   $0xf0133be4
f011084a:	e8 61 f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011084f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110852:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110859:	83 ec 0c             	sub    $0xc,%esp
f011085c:	50                   	push   %eax
f011085d:	e8 c9 ef 01 00       	call   f012f82b <get_block_size>
f0110862:	83 c4 10             	add    $0x10,%esp
f0110865:	85 c0                	test   %eax,%eax
f0110867:	75 1a                	jne    f0110883 <test_free_block_BF+0x80e>
f0110869:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011086c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110873:	83 ec 0c             	sub    $0xc,%esp
f0110876:	50                   	push   %eax
f0110877:	e8 c5 ef 01 00       	call   f012f841 <is_free_block>
f011087c:	83 c4 10             	add    $0x10,%esp
f011087f:	84 c0                	test   %al,%al
f0110881:	74 17                	je     f011089a <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110883:	83 ec 04             	sub    $0x4,%esp
f0110886:	68 90 5a 13 f0       	push   $0xf0135a90
f011088b:	68 16 04 00 00       	push   $0x416
f0110890:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110895:	e8 16 f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f011089a:	83 ec 0c             	sub    $0xc,%esp
f011089d:	68 68 4e 13 f0       	push   $0xf0134e68
f01108a2:	e8 8a 05 ff ff       	call   f0100e31 <cprintf>
f01108a7:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01108aa:	83 ec 0c             	sub    $0xc,%esp
f01108ad:	68 a0 4e 13 f0       	push   $0xf0134ea0
f01108b2:	e8 7a 05 ff ff       	call   f0100e31 <cprintf>
f01108b7:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f01108ba:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01108c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108c4:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01108cb:	83 ec 0c             	sub    $0xc,%esp
f01108ce:	50                   	push   %eax
f01108cf:	e8 50 f1 01 00       	call   f012fa24 <free_block>
f01108d4:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f01108d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108da:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01108e1:	83 ec 0c             	sub    $0xc,%esp
f01108e4:	50                   	push   %eax
f01108e5:	e8 41 ef 01 00       	call   f012f82b <get_block_size>
f01108ea:	83 c4 10             	add    $0x10,%esp
f01108ed:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f01108f0:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f01108f6:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f01108fb:	01 d0                	add    %edx,%eax
f01108fd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110900:	74 28                	je     f011092a <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f0110902:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f0110908:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f011090d:	01 d0                	add    %edx,%eax
f011090f:	83 ec 0c             	sub    $0xc,%esp
f0110912:	ff 75 bc             	pushl  -0x44(%ebp)
f0110915:	50                   	push   %eax
f0110916:	68 dc 59 13 f0       	push   $0xf01359dc
f011091b:	68 20 04 00 00       	push   $0x420
f0110920:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110925:	e8 86 f8 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f011092a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011092d:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110934:	83 ec 0c             	sub    $0xc,%esp
f0110937:	50                   	push   %eax
f0110938:	e8 04 ef 01 00       	call   f012f841 <is_free_block>
f011093d:	83 c4 10             	add    $0x10,%esp
f0110940:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110943:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110947:	74 17                	je     f0110960 <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110949:	83 ec 04             	sub    $0x4,%esp
f011094c:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0110951:	68 23 04 00 00       	push   $0x423
f0110956:	68 e4 3b 13 f0       	push   $0xf0133be4
f011095b:	e8 50 f8 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110960:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110963:	40                   	inc    %eax
f0110964:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011096b:	83 ec 0c             	sub    $0xc,%esp
f011096e:	50                   	push   %eax
f011096f:	e8 b7 ee 01 00       	call   f012f82b <get_block_size>
f0110974:	83 c4 10             	add    $0x10,%esp
f0110977:	85 c0                	test   %eax,%eax
f0110979:	75 1b                	jne    f0110996 <test_free_block_BF+0x921>
f011097b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011097e:	40                   	inc    %eax
f011097f:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110986:	83 ec 0c             	sub    $0xc,%esp
f0110989:	50                   	push   %eax
f011098a:	e8 b2 ee 01 00       	call   f012f841 <is_free_block>
f011098f:	83 c4 10             	add    $0x10,%esp
f0110992:	84 c0                	test   %al,%al
f0110994:	74 17                	je     f01109ad <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110996:	83 ec 04             	sub    $0x4,%esp
f0110999:	68 90 5a 13 f0       	push   $0xf0135a90
f011099e:	68 26 04 00 00       	push   $0x426
f01109a3:	68 e4 3b 13 f0       	push   $0xf0133be4
f01109a8:	e8 03 f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f01109ad:	83 ec 0c             	sub    $0xc,%esp
f01109b0:	68 b5 4e 13 f0       	push   $0xf0134eb5
f01109b5:	e8 77 04 ff ff       	call   f0100e31 <cprintf>
f01109ba:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f01109bd:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01109c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109c7:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01109ce:	83 ec 0c             	sub    $0xc,%esp
f01109d1:	50                   	push   %eax
f01109d2:	e8 4d f0 01 00       	call   f012fa24 <free_block>
f01109d7:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f01109da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109dd:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01109e4:	83 ec 0c             	sub    $0xc,%esp
f01109e7:	50                   	push   %eax
f01109e8:	e8 3e ee 01 00       	call   f012f82b <get_block_size>
f01109ed:	83 c4 10             	add    $0x10,%esp
f01109f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f01109f3:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f01109f9:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f01109fe:	01 d0                	add    %edx,%eax
f0110a00:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110a03:	74 28                	je     f0110a2d <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110a05:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f0110a0b:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f0110a10:	01 d0                	add    %edx,%eax
f0110a12:	83 ec 0c             	sub    $0xc,%esp
f0110a15:	ff 75 bc             	pushl  -0x44(%ebp)
f0110a18:	50                   	push   %eax
f0110a19:	68 fc 5a 13 f0       	push   $0xf0135afc
f0110a1e:	68 2f 04 00 00       	push   $0x42f
f0110a23:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110a28:	e8 83 f7 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110a2d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a30:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110a37:	83 ec 0c             	sub    $0xc,%esp
f0110a3a:	50                   	push   %eax
f0110a3b:	e8 01 ee 01 00       	call   f012f841 <is_free_block>
f0110a40:	83 c4 10             	add    $0x10,%esp
f0110a43:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110a46:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110a4a:	74 17                	je     f0110a63 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110a4c:	83 ec 04             	sub    $0x4,%esp
f0110a4f:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0110a54:	68 32 04 00 00       	push   $0x432
f0110a59:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110a5e:	e8 4d f7 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110a63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a66:	40                   	inc    %eax
f0110a67:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110a6e:	83 ec 0c             	sub    $0xc,%esp
f0110a71:	50                   	push   %eax
f0110a72:	e8 b4 ed 01 00       	call   f012f82b <get_block_size>
f0110a77:	83 c4 10             	add    $0x10,%esp
f0110a7a:	85 c0                	test   %eax,%eax
f0110a7c:	75 1b                	jne    f0110a99 <test_free_block_BF+0xa24>
f0110a7e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a81:	40                   	inc    %eax
f0110a82:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110a89:	83 ec 0c             	sub    $0xc,%esp
f0110a8c:	50                   	push   %eax
f0110a8d:	e8 af ed 01 00       	call   f012f841 <is_free_block>
f0110a92:	83 c4 10             	add    $0x10,%esp
f0110a95:	84 c0                	test   %al,%al
f0110a97:	74 17                	je     f0110ab0 <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110a99:	83 ec 04             	sub    $0x4,%esp
f0110a9c:	68 b4 5b 13 f0       	push   $0xf0135bb4
f0110aa1:	68 35 04 00 00       	push   $0x435
f0110aa6:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110aab:	e8 00 f7 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110ab0:	83 ec 0c             	sub    $0xc,%esp
f0110ab3:	68 f8 4f 13 f0       	push   $0xf0134ff8
f0110ab8:	e8 74 03 ff ff       	call   f0100e31 <cprintf>
f0110abd:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110ac0:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110ac7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110aca:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110ad1:	83 ec 0c             	sub    $0xc,%esp
f0110ad4:	50                   	push   %eax
f0110ad5:	e8 4a ef 01 00       	call   f012fa24 <free_block>
f0110ada:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110add:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110ae4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ae7:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110aee:	83 ec 0c             	sub    $0xc,%esp
f0110af1:	50                   	push   %eax
f0110af2:	e8 2d ef 01 00       	call   f012fa24 <free_block>
f0110af7:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110afa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110afd:	48                   	dec    %eax
f0110afe:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110b05:	83 ec 0c             	sub    $0xc,%esp
f0110b08:	50                   	push   %eax
f0110b09:	e8 1d ed 01 00       	call   f012f82b <get_block_size>
f0110b0e:	83 c4 10             	add    $0x10,%esp
f0110b11:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110b14:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f0110b1a:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f0110b1f:	01 c2                	add    %eax,%edx
f0110b21:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f0110b26:	01 d0                	add    %edx,%eax
f0110b28:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110b2b:	74 2f                	je     f0110b5c <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110b2d:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f0110b33:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f0110b38:	01 c2                	add    %eax,%edx
f0110b3a:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f0110b3f:	01 d0                	add    %edx,%eax
f0110b41:	83 ec 0c             	sub    $0xc,%esp
f0110b44:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b47:	50                   	push   %eax
f0110b48:	68 20 5c 13 f0       	push   $0xf0135c20
f0110b4d:	68 41 04 00 00       	push   $0x441
f0110b52:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110b57:	e8 54 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110b5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b5f:	48                   	dec    %eax
f0110b60:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110b67:	83 ec 0c             	sub    $0xc,%esp
f0110b6a:	50                   	push   %eax
f0110b6b:	e8 d1 ec 01 00       	call   f012f841 <is_free_block>
f0110b70:	83 c4 10             	add    $0x10,%esp
f0110b73:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110b76:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110b7a:	74 17                	je     f0110b93 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110b7c:	83 ec 04             	sub    $0x4,%esp
f0110b7f:	68 80 5c 13 f0       	push   $0xf0135c80
f0110b84:	68 44 04 00 00       	push   $0x444
f0110b89:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110b8e:	e8 1d f6 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110b93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b96:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110b9d:	83 ec 0c             	sub    $0xc,%esp
f0110ba0:	50                   	push   %eax
f0110ba1:	e8 85 ec 01 00       	call   f012f82b <get_block_size>
f0110ba6:	83 c4 10             	add    $0x10,%esp
f0110ba9:	85 c0                	test   %eax,%eax
f0110bab:	75 50                	jne    f0110bfd <test_free_block_BF+0xb88>
f0110bad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bb0:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110bb7:	83 ec 0c             	sub    $0xc,%esp
f0110bba:	50                   	push   %eax
f0110bbb:	e8 81 ec 01 00       	call   f012f841 <is_free_block>
f0110bc0:	83 c4 10             	add    $0x10,%esp
f0110bc3:	84 c0                	test   %al,%al
f0110bc5:	75 36                	jne    f0110bfd <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110bc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bca:	40                   	inc    %eax
f0110bcb:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110bd2:	83 ec 0c             	sub    $0xc,%esp
f0110bd5:	50                   	push   %eax
f0110bd6:	e8 50 ec 01 00       	call   f012f82b <get_block_size>
f0110bdb:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110bde:	85 c0                	test   %eax,%eax
f0110be0:	75 1b                	jne    f0110bfd <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110be2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110be5:	40                   	inc    %eax
f0110be6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110bed:	83 ec 0c             	sub    $0xc,%esp
f0110bf0:	50                   	push   %eax
f0110bf1:	e8 4b ec 01 00       	call   f012f841 <is_free_block>
f0110bf6:	83 c4 10             	add    $0x10,%esp
f0110bf9:	84 c0                	test   %al,%al
f0110bfb:	74 17                	je     f0110c14 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110bfd:	83 ec 04             	sub    $0x4,%esp
f0110c00:	68 d8 5c 13 f0       	push   $0xf0135cd8
f0110c05:	68 48 04 00 00       	push   $0x448
f0110c0a:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110c0f:	e8 9c f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110c14:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f0110c1b:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110c22:	83 ec 08             	sub    $0x8,%esp
f0110c25:	6a 03                	push   $0x3
f0110c27:	ff 75 cc             	pushl  -0x34(%ebp)
f0110c2a:	e8 29 ec 01 00       	call   f012f858 <alloc_block>
f0110c2f:	83 c4 10             	add    $0x10,%esp
f0110c32:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110c35:	a1 20 b7 2d f0       	mov    0xf02db720,%eax
f0110c3a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f0110c3d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110c41:	74 08                	je     f0110c4b <test_free_block_BF+0xbd6>
f0110c43:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c46:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110c49:	74 1d                	je     f0110c68 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110c4b:	83 ec 0c             	sub    $0xc,%esp
f0110c4e:	ff 75 c8             	pushl  -0x38(%ebp)
f0110c51:	ff 75 b0             	pushl  -0x50(%ebp)
f0110c54:	68 44 5d 13 f0       	push   $0xf0135d44
f0110c59:	68 55 04 00 00       	push   $0x455
f0110c5e:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110c63:	e8 48 f5 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110c68:	83 ec 0c             	sub    $0xc,%esp
f0110c6b:	68 60 51 13 f0       	push   $0xf0135160
f0110c70:	e8 bc 01 ff ff       	call   f0100e31 <cprintf>
f0110c75:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110c78:	83 ec 0c             	sub    $0xc,%esp
f0110c7b:	68 a8 5d 13 f0       	push   $0xf0135da8
f0110c80:	e8 ac 01 ff ff       	call   f0100e31 <cprintf>
f0110c85:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110c88:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110c8f:	83 ec 08             	sub    $0x8,%esp
f0110c92:	6a 03                	push   $0x3
f0110c94:	ff 75 cc             	pushl  -0x34(%ebp)
f0110c97:	e8 bc eb 01 00       	call   f012f858 <alloc_block>
f0110c9c:	83 c4 10             	add    $0x10,%esp
f0110c9f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110ca2:	a1 a0 aa 2d f0       	mov    0xf02daaa0,%eax
f0110ca7:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110caa:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110cae:	74 08                	je     f0110cb8 <test_free_block_BF+0xc43>
f0110cb0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110cb3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110cb6:	74 1d                	je     f0110cd5 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110cb8:	83 ec 0c             	sub    $0xc,%esp
f0110cbb:	ff 75 c8             	pushl  -0x38(%ebp)
f0110cbe:	ff 75 b0             	pushl  -0x50(%ebp)
f0110cc1:	68 d0 5d 13 f0       	push   $0xf0135dd0
f0110cc6:	68 60 04 00 00       	push   $0x460
f0110ccb:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110cd0:	e8 db f4 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110cd5:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110cdc:	83 ec 08             	sub    $0x8,%esp
f0110cdf:	6a 03                	push   $0x3
f0110ce1:	ff 75 cc             	pushl  -0x34(%ebp)
f0110ce4:	e8 6f eb 01 00       	call   f012f858 <alloc_block>
f0110ce9:	83 c4 10             	add    $0x10,%esp
f0110cec:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110cef:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110cf4:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110cf7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110cfb:	74 08                	je     f0110d05 <test_free_block_BF+0xc90>
f0110cfd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d00:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d03:	74 1d                	je     f0110d22 <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d05:	83 ec 0c             	sub    $0xc,%esp
f0110d08:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d0b:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d0e:	68 34 5e 13 f0       	push   $0xf0135e34
f0110d13:	68 67 04 00 00       	push   $0x467
f0110d18:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110d1d:	e8 8e f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110d22:	83 ec 0c             	sub    $0xc,%esp
f0110d25:	68 f8 52 13 f0       	push   $0xf01352f8
f0110d2a:	e8 02 01 ff ff       	call   f0100e31 <cprintf>
f0110d2f:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110d32:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110d39:	83 ec 08             	sub    $0x8,%esp
f0110d3c:	6a 03                	push   $0x3
f0110d3e:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d41:	e8 12 eb 01 00       	call   f012f858 <alloc_block>
f0110d46:	83 c4 10             	add    $0x10,%esp
f0110d49:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110d4c:	a1 d8 b0 2d f0       	mov    0xf02db0d8,%eax
f0110d51:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110d54:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d58:	74 08                	je     f0110d62 <test_free_block_BF+0xced>
f0110d5a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d5d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d60:	74 1d                	je     f0110d7f <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d62:	83 ec 0c             	sub    $0xc,%esp
f0110d65:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d68:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d6b:	68 98 5e 13 f0       	push   $0xf0135e98
f0110d70:	68 6f 04 00 00       	push   $0x46f
f0110d75:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110d7a:	e8 31 f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110d7f:	83 ec 0c             	sub    $0xc,%esp
f0110d82:	68 fc 5e 13 f0       	push   $0xf0135efc
f0110d87:	e8 a5 00 ff ff       	call   f0100e31 <cprintf>
f0110d8c:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110d8f:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110d96:	83 ec 08             	sub    $0x8,%esp
f0110d99:	6a 03                	push   $0x3
f0110d9b:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d9e:	e8 b5 ea 01 00       	call   f012f858 <alloc_block>
f0110da3:	83 c4 10             	add    $0x10,%esp
f0110da6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110da9:	a1 7c a7 2d f0       	mov    0xf02da77c,%eax
f0110dae:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110db1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110db5:	74 08                	je     f0110dbf <test_free_block_BF+0xd4a>
f0110db7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110dba:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110dbd:	74 1d                	je     f0110ddc <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110dbf:	83 ec 0c             	sub    $0xc,%esp
f0110dc2:	ff 75 c8             	pushl  -0x38(%ebp)
f0110dc5:	ff 75 b0             	pushl  -0x50(%ebp)
f0110dc8:	68 24 5f 13 f0       	push   $0xf0135f24
f0110dcd:	68 77 04 00 00       	push   $0x477
f0110dd2:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110dd7:	e8 d4 f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110ddc:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110de3:	83 ec 08             	sub    $0x8,%esp
f0110de6:	6a 03                	push   $0x3
f0110de8:	ff 75 cc             	pushl  -0x34(%ebp)
f0110deb:	e8 68 ea 01 00       	call   f012f858 <alloc_block>
f0110df0:	83 c4 10             	add    $0x10,%esp
f0110df3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110df6:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110dfd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e01:	74 08                	je     f0110e0b <test_free_block_BF+0xd96>
f0110e03:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e06:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e09:	74 1d                	je     f0110e28 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e0b:	83 ec 0c             	sub    $0xc,%esp
f0110e0e:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e11:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e14:	68 88 5f 13 f0       	push   $0xf0135f88
f0110e19:	68 7e 04 00 00       	push   $0x47e
f0110e1e:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110e23:	e8 88 f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110e28:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e2f:	83 ec 08             	sub    $0x8,%esp
f0110e32:	6a 03                	push   $0x3
f0110e34:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e37:	e8 1c ea 01 00       	call   f012f858 <alloc_block>
f0110e3c:	83 c4 10             	add    $0x10,%esp
f0110e3f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110e42:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e49:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e4d:	74 08                	je     f0110e57 <test_free_block_BF+0xde2>
f0110e4f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e52:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e55:	74 1d                	je     f0110e74 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e57:	83 ec 0c             	sub    $0xc,%esp
f0110e5a:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e5d:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e60:	68 ec 5f 13 f0       	push   $0xf0135fec
f0110e65:	68 85 04 00 00       	push   $0x485
f0110e6a:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110e6f:	e8 3c f3 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110e74:	83 ec 0c             	sub    $0xc,%esp
f0110e77:	68 50 60 13 f0       	push   $0xf0136050
f0110e7c:	e8 b0 ff fe ff       	call   f0100e31 <cprintf>
f0110e81:	83 c4 10             	add    $0x10,%esp

}
f0110e84:	90                   	nop
f0110e85:	c9                   	leave  
f0110e86:	c3                   	ret    

f0110e87 <test_free_block_NF>:

void test_free_block_NF()
{
f0110e87:	55                   	push   %ebp
f0110e88:	89 e5                	mov    %esp,%ebp
f0110e8a:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110e8d:	83 ec 04             	sub    $0x4,%esp
f0110e90:	68 99 60 13 f0       	push   $0xf0136099
f0110e95:	68 8e 04 00 00       	push   $0x48e
f0110e9a:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110e9f:	e8 0c f3 fe ff       	call   f01001b0 <_panic>

f0110ea4 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0110ea4:	55                   	push   %ebp
f0110ea5:	89 e5                	mov    %esp,%ebp
f0110ea7:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0110eaa:	83 ec 0c             	sub    $0xc,%esp
f0110ead:	68 ac 60 13 f0       	push   $0xf01360ac
f0110eb2:	e8 7a ff fe ff       	call   f0100e31 <cprintf>
f0110eb7:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0110eba:	83 ec 0c             	sub    $0xc,%esp
f0110ebd:	68 e4 60 13 f0       	push   $0xf01360e4
f0110ec2:	e8 6a ff fe ff       	call   f0100e31 <cprintf>
f0110ec7:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0110eca:	83 ec 0c             	sub    $0xc,%esp
f0110ecd:	68 1c 61 13 f0       	push   $0xf013611c
f0110ed2:	e8 5a ff fe ff       	call   f0100e31 <cprintf>
f0110ed7:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0110eda:	83 ec 0c             	sub    $0xc,%esp
f0110edd:	68 ac 60 13 f0       	push   $0xf01360ac
f0110ee2:	e8 4a ff fe ff       	call   f0100e31 <cprintf>
f0110ee7:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0110eea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0110ef1:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110ef8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110efb:	83 ec 08             	sub    $0x8,%esp
f0110efe:	50                   	push   %eax
f0110eff:	68 00 00 00 f6       	push   $0xf6000000
f0110f04:	e8 68 ea 01 00       	call   f012f971 <initialize_dynamic_allocator>
f0110f09:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0110f0c:	83 ec 0c             	sub    $0xc,%esp
f0110f0f:	68 54 61 13 f0       	push   $0xf0136154
f0110f14:	e8 18 ff fe ff       	call   f0100e31 <cprintf>
f0110f19:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110f1c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0110f23:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110f2a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110f31:	eb 2a                	jmp    f0110f5d <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110f33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110f36:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f0110f3d:	89 d0                	mov    %edx,%eax
f0110f3f:	c1 e0 02             	shl    $0x2,%eax
f0110f42:	01 d0                	add    %edx,%eax
f0110f44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110f4b:	01 d0                	add    %edx,%eax
f0110f4d:	c1 e0 03             	shl    $0x3,%eax
f0110f50:	89 c2                	mov    %eax,%edx
f0110f52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f55:	01 d0                	add    %edx,%eax
f0110f57:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110f5a:	ff 45 e8             	incl   -0x18(%ebp)
f0110f5d:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110f61:	7e d0                	jle    f0110f33 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110f63:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f66:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110f69:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0110f6c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0110f70:	7f 17                	jg     f0110f89 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110f72:	83 ec 04             	sub    $0x4,%esp
f0110f75:	68 84 61 13 f0       	push   $0xf0136184
f0110f7a:	68 b5 04 00 00       	push   $0x4b5
f0110f7f:	68 e4 3b 13 f0       	push   $0xf0133be4
f0110f84:	e8 27 f2 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110f89:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110f90:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110f97:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110f9e:	e9 f8 00 00 00       	jmp    f011109b <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110fa3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110faa:	e9 dc 00 00 00       	jmp    f011108b <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110faf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110fb2:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110fb9:	83 e8 10             	sub    $0x10,%eax
f0110fbc:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110fbf:	83 ec 08             	sub    $0x8,%esp
f0110fc2:	ff 75 c0             	pushl  -0x40(%ebp)
f0110fc5:	6a 00                	push   $0x0
f0110fc7:	e8 8c eb 01 00       	call   f012fb58 <realloc_block_FF>
f0110fcc:	83 c4 10             	add    $0x10,%esp
f0110fcf:	89 c2                	mov    %eax,%edx
f0110fd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110fd4:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f0110fdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110fde:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110fe5:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110fe8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110feb:	d1 e8                	shr    %eax
f0110fed:	89 c2                	mov    %eax,%edx
f0110fef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110ff2:	01 c2                	add    %eax,%edx
f0110ff4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ff7:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110ffe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111001:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111004:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111007:	01 c2                	add    %eax,%edx
f0111009:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011100c:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111013:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111017:	74 0b                	je     f0111024 <test_realloc_block_FF+0x180>
f0111019:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011101c:	83 c0 10             	add    $0x10,%eax
f011101f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111022:	74 24                	je     f0111048 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0111024:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111027:	83 c0 10             	add    $0x10,%eax
f011102a:	83 ec 08             	sub    $0x8,%esp
f011102d:	ff 75 bc             	pushl  -0x44(%ebp)
f0111030:	50                   	push   %eax
f0111031:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111034:	68 04 62 13 f0       	push   $0xf0136204
f0111039:	68 c4 04 00 00       	push   $0x4c4
f011103e:	68 e4 3b 13 f0       	push   $0xf0133be4
f0111043:	e8 68 f1 fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0111048:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011104b:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0111052:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0111055:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111058:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f011105f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111062:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0111065:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111068:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f011106f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111072:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111075:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111078:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f011107f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111082:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0111085:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111088:	ff 45 d8             	incl   -0x28(%ebp)
f011108b:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0111092:	0f 8e 17 ff ff ff    	jle    f0110faf <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0111098:	ff 45 dc             	incl   -0x24(%ebp)
f011109b:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f011109f:	0f 8e fe fe ff ff    	jle    f0110fa3 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f01110a5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01110a8:	83 e8 10             	sub    $0x10,%eax
f01110ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f01110ae:	83 ec 08             	sub    $0x8,%esp
f01110b1:	ff 75 c0             	pushl  -0x40(%ebp)
f01110b4:	6a 00                	push   $0x0
f01110b6:	e8 9d ea 01 00       	call   f012fb58 <realloc_block_FF>
f01110bb:	83 c4 10             	add    $0x10,%esp
f01110be:	89 c2                	mov    %eax,%edx
f01110c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110c3:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f01110ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110cd:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01110d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01110d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01110da:	d1 e8                	shr    %eax
f01110dc:	89 c2                	mov    %eax,%edx
f01110de:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01110e1:	01 c2                	add    %eax,%edx
f01110e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110e6:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01110ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01110f0:	8d 50 fe             	lea    -0x2(%eax),%edx
f01110f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01110f6:	01 c2                	add    %eax,%edx
f01110f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110fb:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111102:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111106:	74 0b                	je     f0111113 <test_realloc_block_FF+0x26f>
f0111108:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011110b:	83 c0 10             	add    $0x10,%eax
f011110e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111111:	74 17                	je     f011112a <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0111113:	83 ec 04             	sub    $0x4,%esp
f0111116:	68 60 62 13 f0       	push   $0xf0136260
f011111b:	68 d5 04 00 00       	push   $0x4d5
f0111120:	68 e4 3b 13 f0       	push   $0xf0133be4
f0111125:	e8 86 f0 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f011112a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011112d:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f0111134:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111137:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f011113a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011113d:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f0111144:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111147:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f011114a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011114d:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f0111154:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111157:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f011115a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0111161:	eb 59                	jmp    f01111bc <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0111163:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111166:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011116d:	66 8b 00             	mov    (%eax),%ax
f0111170:	98                   	cwtl   
f0111171:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111174:	75 26                	jne    f011119c <test_realloc_block_FF+0x2f8>
f0111176:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111179:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0111180:	66 8b 00             	mov    (%eax),%ax
f0111183:	98                   	cwtl   
f0111184:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111187:	75 13                	jne    f011119c <test_realloc_block_FF+0x2f8>
f0111189:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011118c:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f0111193:	66 8b 00             	mov    (%eax),%ax
f0111196:	98                   	cwtl   
f0111197:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011119a:	74 1d                	je     f01111b9 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011119c:	83 ec 0c             	sub    $0xc,%esp
f011119f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111a2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111a5:	68 a4 62 13 f0       	push   $0xf01362a4
f01111aa:	68 df 04 00 00       	push   $0x4df
f01111af:	68 e4 3b 13 f0       	push   $0xf0133be4
f01111b4:	e8 f7 ef fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01111b9:	ff 45 d4             	incl   -0x2c(%ebp)
f01111bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111bf:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01111c2:	7c 9f                	jl     f0111163 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01111c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01111c8:	74 04                	je     f01111ce <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f01111ca:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f01111ce:	83 ec 0c             	sub    $0xc,%esp
f01111d1:	68 fc 62 13 f0       	push   $0xf01362fc
f01111d6:	e8 56 fc fe ff       	call   f0100e31 <cprintf>
f01111db:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111de:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01111e5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01111ec:	e9 fa 00 00 00       	jmp    f01112eb <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f01111f1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01111f4:	89 d0                	mov    %edx,%eax
f01111f6:	c1 e0 02             	shl    $0x2,%eax
f01111f9:	01 d0                	add    %edx,%eax
f01111fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111202:	01 d0                	add    %edx,%eax
f0111204:	c1 e0 03             	shl    $0x3,%eax
f0111207:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011120e:	83 ec 08             	sub    $0x8,%esp
f0111211:	6a 00                	push   $0x0
f0111213:	50                   	push   %eax
f0111214:	e8 3f e9 01 00       	call   f012fb58 <realloc_block_FF>
f0111219:	83 c4 10             	add    $0x10,%esp
f011121c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011121f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111222:	89 d0                	mov    %edx,%eax
f0111224:	c1 e0 02             	shl    $0x2,%eax
f0111227:	01 d0                	add    %edx,%eax
f0111229:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111230:	01 d0                	add    %edx,%eax
f0111232:	c1 e0 03             	shl    $0x3,%eax
f0111235:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011123c:	83 ec 0c             	sub    $0xc,%esp
f011123f:	50                   	push   %eax
f0111240:	e8 e6 e5 01 00       	call   f012f82b <get_block_size>
f0111245:	83 c4 10             	add    $0x10,%esp
f0111248:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f011124b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011124e:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0111255:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0111258:	74 28                	je     f0111282 <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f011125a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011125d:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0111264:	83 ec 08             	sub    $0x8,%esp
f0111267:	ff 75 b8             	pushl  -0x48(%ebp)
f011126a:	50                   	push   %eax
f011126b:	ff 75 d0             	pushl  -0x30(%ebp)
f011126e:	68 2c 63 13 f0       	push   $0xf013632c
f0111273:	68 f3 04 00 00       	push   $0x4f3
f0111278:	68 e4 3b 13 f0       	push   $0xf0133be4
f011127d:	e8 2e ef fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f0111282:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111285:	89 d0                	mov    %edx,%eax
f0111287:	c1 e0 02             	shl    $0x2,%eax
f011128a:	01 d0                	add    %edx,%eax
f011128c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111293:	01 d0                	add    %edx,%eax
f0111295:	c1 e0 03             	shl    $0x3,%eax
f0111298:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011129f:	83 ec 0c             	sub    $0xc,%esp
f01112a2:	50                   	push   %eax
f01112a3:	e8 99 e5 01 00       	call   f012f841 <is_free_block>
f01112a8:	83 c4 10             	add    $0x10,%esp
f01112ab:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f01112ae:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f01112b2:	74 17                	je     f01112cb <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01112b4:	ff 75 d0             	pushl  -0x30(%ebp)
f01112b7:	68 94 63 13 f0       	push   $0xf0136394
f01112bc:	68 f6 04 00 00       	push   $0x4f6
f01112c1:	68 e4 3b 13 f0       	push   $0xf0133be4
f01112c6:	e8 e5 ee fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f01112cb:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01112cf:	74 17                	je     f01112e8 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f01112d1:	ff 75 d0             	pushl  -0x30(%ebp)
f01112d4:	68 f0 63 13 f0       	push   $0xf01363f0
f01112d9:	68 f8 04 00 00       	push   $0x4f8
f01112de:	68 e4 3b 13 f0       	push   $0xf0133be4
f01112e3:	e8 c8 ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01112e8:	ff 45 d0             	incl   -0x30(%ebp)
f01112eb:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f01112ef:	0f 8e fc fe ff ff    	jle    f01111f1 <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f01112f5:	83 ec 08             	sub    $0x8,%esp
f01112f8:	6a 00                	push   $0x0
f01112fa:	6a 00                	push   $0x0
f01112fc:	e8 57 e8 01 00       	call   f012fb58 <realloc_block_FF>
f0111301:	83 c4 10             	add    $0x10,%esp
f0111304:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f0111307:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011130b:	74 17                	je     f0111324 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f011130d:	83 ec 04             	sub    $0x4,%esp
f0111310:	68 24 64 13 f0       	push   $0xf0136424
f0111315:	68 fe 04 00 00       	push   $0x4fe
f011131a:	68 e4 3b 13 f0       	push   $0xf0133be4
f011131f:	e8 8c ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111324:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011132b:	eb 6b                	jmp    f0111398 <test_realloc_block_FF+0x4f4>
	{
		if (i % allocCntPerSize == 0)
f011132d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111330:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0111335:	99                   	cltd   
f0111336:	f7 f9                	idiv   %ecx
f0111338:	89 d0                	mov    %edx,%eax
f011133a:	85 c0                	test   %eax,%eax
f011133c:	74 56                	je     f0111394 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011133e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111341:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111348:	66 8b 00             	mov    (%eax),%ax
f011134b:	98                   	cwtl   
f011134c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011134f:	75 26                	jne    f0111377 <test_realloc_block_FF+0x4d3>
f0111351:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111354:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f011135b:	66 8b 00             	mov    (%eax),%ax
f011135e:	98                   	cwtl   
f011135f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111362:	75 13                	jne    f0111377 <test_realloc_block_FF+0x4d3>
f0111364:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111367:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f011136e:	66 8b 00             	mov    (%eax),%ax
f0111371:	98                   	cwtl   
f0111372:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111375:	74 1e                	je     f0111395 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111377:	83 ec 0c             	sub    $0xc,%esp
f011137a:	ff 75 cc             	pushl  -0x34(%ebp)
f011137d:	ff 75 cc             	pushl  -0x34(%ebp)
f0111380:	68 58 64 13 f0       	push   $0xf0136458
f0111385:	68 06 05 00 00       	push   $0x506
f011138a:	68 e4 3b 13 f0       	push   $0xf0133be4
f011138f:	e8 1c ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f0111394:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111395:	ff 45 cc             	incl   -0x34(%ebp)
f0111398:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011139b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011139e:	7c 8d                	jl     f011132d <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01113a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113a4:	74 04                	je     f01113aa <test_realloc_block_FF+0x506>
	{
		eval += 10;
f01113a6:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f01113aa:	83 ec 0c             	sub    $0xc,%esp
f01113ad:	68 b0 64 13 f0       	push   $0xf01364b0
f01113b2:	e8 7a fa fe ff       	call   f0100e31 <cprintf>
f01113b7:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f01113ba:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f01113c1:	83 ec 0c             	sub    $0xc,%esp
f01113c4:	68 e8 64 13 f0       	push   $0xf01364e8
f01113c9:	e8 63 fa fe ff       	call   f0100e31 <cprintf>
f01113ce:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01113d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01113d8:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f01113df:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f01113e4:	8b 15 30 cb 18 f0    	mov    0xf018cb30,%edx
f01113ea:	d1 ea                	shr    %edx
f01113ec:	01 d0                	add    %edx,%eax
f01113ee:	83 e8 10             	sub    $0x10,%eax
f01113f1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01113f4:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01113f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113fa:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111401:	83 ec 08             	sub    $0x8,%esp
f0111404:	52                   	push   %edx
f0111405:	50                   	push   %eax
f0111406:	e8 4d e7 01 00       	call   f012fb58 <realloc_block_FF>
f011140b:	83 c4 10             	add    $0x10,%esp
f011140e:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111411:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111415:	74 0f                	je     f0111426 <test_realloc_block_FF+0x582>
f0111417:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011141a:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111421:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111424:	74 25                	je     f011144b <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f0111426:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011142d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111430:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111437:	83 ec 04             	sub    $0x4,%esp
f011143a:	ff 75 bc             	pushl  -0x44(%ebp)
f011143d:	50                   	push   %eax
f011143e:	68 20 65 13 f0       	push   $0xf0136520
f0111443:	e8 e9 f9 fe ff       	call   f0100e31 <cprintf>
f0111448:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011144b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011144e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111455:	83 ec 0c             	sub    $0xc,%esp
f0111458:	50                   	push   %eax
f0111459:	e8 cd e3 01 00       	call   f012f82b <get_block_size>
f011145e:	83 c4 10             	add    $0x10,%esp
f0111461:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111464:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111467:	8d 50 10             	lea    0x10(%eax),%edx
f011146a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011146d:	39 c2                	cmp    %eax,%edx
f011146f:	74 21                	je     f0111492 <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f0111471:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111478:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011147b:	83 c0 10             	add    $0x10,%eax
f011147e:	83 ec 04             	sub    $0x4,%esp
f0111481:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111484:	50                   	push   %eax
f0111485:	68 80 65 13 f0       	push   $0xf0136580
f011148a:	e8 a2 f9 fe ff       	call   f0100e31 <cprintf>
f011148f:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111492:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111495:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011149c:	83 ec 0c             	sub    $0xc,%esp
f011149f:	50                   	push   %eax
f01114a0:	e8 9c e3 01 00       	call   f012f841 <is_free_block>
f01114a5:	83 c4 10             	add    $0x10,%esp
f01114a8:	0f be c0             	movsbl %al,%eax
f01114ab:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01114ae:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01114b2:	74 17                	je     f01114cb <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f01114b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01114bb:	83 ec 0c             	sub    $0xc,%esp
f01114be:	68 ec 65 13 f0       	push   $0xf01365ec
f01114c3:	e8 69 f9 fe ff       	call   f0100e31 <cprintf>
f01114c8:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01114cb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114ce:	40                   	inc    %eax
f01114cf:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01114d6:	83 ec 0c             	sub    $0xc,%esp
f01114d9:	50                   	push   %eax
f01114da:	e8 4c e3 01 00       	call   f012f82b <get_block_size>
f01114df:	83 c4 10             	add    $0x10,%esp
f01114e2:	85 c0                	test   %eax,%eax
f01114e4:	75 1b                	jne    f0111501 <test_realloc_block_FF+0x65d>
f01114e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114e9:	40                   	inc    %eax
f01114ea:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01114f1:	83 ec 0c             	sub    $0xc,%esp
f01114f4:	50                   	push   %eax
f01114f5:	e8 47 e3 01 00       	call   f012f841 <is_free_block>
f01114fa:	83 c4 10             	add    $0x10,%esp
f01114fd:	84 c0                	test   %al,%al
f01114ff:	74 17                	je     f0111518 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f0111501:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111508:	83 ec 0c             	sub    $0xc,%esp
f011150b:	68 4c 66 13 f0       	push   $0xf013664c
f0111510:	e8 1c f9 fe ff       	call   f0100e31 <cprintf>
f0111515:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111518:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011151b:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111522:	66 8b 00             	mov    (%eax),%ax
f0111525:	98                   	cwtl   
f0111526:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111529:	75 26                	jne    f0111551 <test_realloc_block_FF+0x6ad>
f011152b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011152e:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0111535:	66 8b 00             	mov    (%eax),%ax
f0111538:	98                   	cwtl   
f0111539:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011153c:	75 13                	jne    f0111551 <test_realloc_block_FF+0x6ad>
f011153e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111541:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f0111548:	66 8b 00             	mov    (%eax),%ax
f011154b:	98                   	cwtl   
f011154c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011154f:	74 1a                	je     f011156b <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f0111551:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111558:	83 ec 08             	sub    $0x8,%esp
f011155b:	ff 75 ac             	pushl  -0x54(%ebp)
f011155e:	68 c0 66 13 f0       	push   $0xf01366c0
f0111563:	e8 c9 f8 fe ff       	call   f0100e31 <cprintf>
f0111568:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011156b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011156f:	74 04                	je     f0111575 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f0111571:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0111575:	83 ec 0c             	sub    $0xc,%esp
f0111578:	68 20 67 13 f0       	push   $0xf0136720
f011157d:	e8 af f8 fe ff       	call   f0100e31 <cprintf>
f0111582:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111585:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f011158c:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111593:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f0111598:	8b 15 30 cb 18 f0    	mov    0xf018cb30,%edx
f011159e:	d1 ea                	shr    %edx
f01115a0:	01 d0                	add    %edx,%eax
f01115a2:	83 e8 10             	sub    $0x10,%eax
f01115a5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01115a8:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01115ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115ae:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01115b5:	83 ec 08             	sub    $0x8,%esp
f01115b8:	52                   	push   %edx
f01115b9:	50                   	push   %eax
f01115ba:	e8 99 e5 01 00       	call   f012fb58 <realloc_block_FF>
f01115bf:	83 c4 10             	add    $0x10,%esp
f01115c2:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01115c5:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01115c9:	74 0f                	je     f01115da <test_realloc_block_FF+0x736>
f01115cb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115ce:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01115d5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01115d8:	74 25                	je     f01115ff <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f01115da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01115e1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115e4:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01115eb:	83 ec 04             	sub    $0x4,%esp
f01115ee:	ff 75 bc             	pushl  -0x44(%ebp)
f01115f1:	50                   	push   %eax
f01115f2:	68 5c 67 13 f0       	push   $0xf013675c
f01115f7:	e8 35 f8 fe ff       	call   f0100e31 <cprintf>
f01115fc:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01115ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111602:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111609:	83 ec 0c             	sub    $0xc,%esp
f011160c:	50                   	push   %eax
f011160d:	e8 19 e2 01 00       	call   f012f82b <get_block_size>
f0111612:	83 c4 10             	add    $0x10,%esp
f0111615:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111618:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011161b:	8d 50 10             	lea    0x10(%eax),%edx
f011161e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111621:	39 c2                	cmp    %eax,%edx
f0111623:	74 21                	je     f0111646 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f0111625:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f011162c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011162f:	83 c0 10             	add    $0x10,%eax
f0111632:	83 ec 04             	sub    $0x4,%esp
f0111635:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111638:	50                   	push   %eax
f0111639:	68 bc 67 13 f0       	push   $0xf01367bc
f011163e:	e8 ee f7 fe ff       	call   f0100e31 <cprintf>
f0111643:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111646:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111649:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111650:	83 ec 0c             	sub    $0xc,%esp
f0111653:	50                   	push   %eax
f0111654:	e8 e8 e1 01 00       	call   f012f841 <is_free_block>
f0111659:	83 c4 10             	add    $0x10,%esp
f011165c:	0f be c0             	movsbl %al,%eax
f011165f:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111662:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111666:	74 17                	je     f011167f <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111668:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011166f:	83 ec 0c             	sub    $0xc,%esp
f0111672:	68 2c 68 13 f0       	push   $0xf013682c
f0111677:	e8 b5 f7 fe ff       	call   f0100e31 <cprintf>
f011167c:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011167f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111682:	40                   	inc    %eax
f0111683:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011168a:	83 ec 0c             	sub    $0xc,%esp
f011168d:	50                   	push   %eax
f011168e:	e8 98 e1 01 00       	call   f012f82b <get_block_size>
f0111693:	83 c4 10             	add    $0x10,%esp
f0111696:	85 c0                	test   %eax,%eax
f0111698:	75 1b                	jne    f01116b5 <test_realloc_block_FF+0x811>
f011169a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011169d:	40                   	inc    %eax
f011169e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01116a5:	83 ec 0c             	sub    $0xc,%esp
f01116a8:	50                   	push   %eax
f01116a9:	e8 93 e1 01 00       	call   f012f841 <is_free_block>
f01116ae:	83 c4 10             	add    $0x10,%esp
f01116b1:	84 c0                	test   %al,%al
f01116b3:	74 17                	je     f01116cc <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f01116b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f01116bc:	83 ec 0c             	sub    $0xc,%esp
f01116bf:	68 8c 68 13 f0       	push   $0xf013688c
f01116c4:	e8 68 f7 fe ff       	call   f0100e31 <cprintf>
f01116c9:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f01116cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116cf:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01116d6:	66 8b 00             	mov    (%eax),%ax
f01116d9:	98                   	cwtl   
f01116da:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01116dd:	75 26                	jne    f0111705 <test_realloc_block_FF+0x861>
f01116df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116e2:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f01116e9:	66 8b 00             	mov    (%eax),%ax
f01116ec:	98                   	cwtl   
f01116ed:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01116f0:	75 13                	jne    f0111705 <test_realloc_block_FF+0x861>
f01116f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116f5:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f01116fc:	66 8b 00             	mov    (%eax),%ax
f01116ff:	98                   	cwtl   
f0111700:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111703:	74 1a                	je     f011171f <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f0111705:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f011170c:	83 ec 08             	sub    $0x8,%esp
f011170f:	ff 75 ac             	pushl  -0x54(%ebp)
f0111712:	68 00 69 13 f0       	push   $0xf0136900
f0111717:	e8 15 f7 fe ff       	call   f0100e31 <cprintf>
f011171c:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011171f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111723:	74 04                	je     f0111729 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f0111725:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0111729:	83 ec 0c             	sub    $0xc,%esp
f011172c:	68 60 69 13 f0       	push   $0xf0136960
f0111731:	e8 fb f6 fe ff       	call   f0100e31 <cprintf>
f0111736:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0111739:	83 ec 0c             	sub    $0xc,%esp
f011173c:	68 98 69 13 f0       	push   $0xf0136998
f0111741:	e8 eb f6 fe ff       	call   f0100e31 <cprintf>
f0111746:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111749:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f0111750:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f0111757:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f011175c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f011175f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111762:	2d 10 04 00 00       	sub    $0x410,%eax
f0111767:	89 45 a8             	mov    %eax,-0x58(%ebp)
		//cprintf("REALLOCATE to size %d\n",new_size ) ;
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f011176a:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011176d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111770:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111777:	83 ec 08             	sub    $0x8,%esp
f011177a:	52                   	push   %edx
f011177b:	50                   	push   %eax
f011177c:	e8 d7 e3 01 00       	call   f012fb58 <realloc_block_FF>
f0111781:	83 c4 10             	add    $0x10,%esp
f0111784:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111787:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011178b:	74 0f                	je     f011179c <test_realloc_block_FF+0x8f8>
f011178d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111790:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111797:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011179a:	74 25                	je     f01117c1 <test_realloc_block_FF+0x91d>
		{
			is_correct = 0;
f011179c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01117a3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117a6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01117ad:	83 ec 04             	sub    $0x4,%esp
f01117b0:	ff 75 bc             	pushl  -0x44(%ebp)
f01117b3:	50                   	push   %eax
f01117b4:	68 c4 69 13 f0       	push   $0xf01369c4
f01117b9:	e8 73 f6 fe ff       	call   f0100e31 <cprintf>
f01117be:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01117c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117c4:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01117cb:	83 ec 0c             	sub    $0xc,%esp
f01117ce:	50                   	push   %eax
f01117cf:	e8 57 e0 01 00       	call   f012f82b <get_block_size>
f01117d4:	83 c4 10             	add    $0x10,%esp
f01117d7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01117da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117dd:	8d 50 10             	lea    0x10(%eax),%edx
f01117e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01117e3:	39 c2                	cmp    %eax,%edx
f01117e5:	74 21                	je     f0111808 <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f01117e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01117ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117f1:	83 c0 10             	add    $0x10,%eax
f01117f4:	83 ec 04             	sub    $0x4,%esp
f01117f7:	ff 75 a4             	pushl  -0x5c(%ebp)
f01117fa:	50                   	push   %eax
f01117fb:	68 24 6a 13 f0       	push   $0xf0136a24
f0111800:	e8 2c f6 fe ff       	call   f0100e31 <cprintf>
f0111805:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111808:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011180b:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111812:	83 ec 0c             	sub    $0xc,%esp
f0111815:	50                   	push   %eax
f0111816:	e8 26 e0 01 00       	call   f012f841 <is_free_block>
f011181b:	83 c4 10             	add    $0x10,%esp
f011181e:	0f be c0             	movsbl %al,%eax
f0111821:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111824:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111828:	74 17                	je     f0111841 <test_realloc_block_FF+0x99d>
		{
			is_correct = 0;
f011182a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111831:	83 ec 0c             	sub    $0xc,%esp
f0111834:	68 94 6a 13 f0       	push   $0xf0136a94
f0111839:	e8 f3 f5 fe ff       	call   f0100e31 <cprintf>
f011183e:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f0111841:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111844:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111847:	01 d0                	add    %edx,%eax
f0111849:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f011184c:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f0111853:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111856:	8b 10                	mov    (%eax),%edx
f0111858:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011185b:	39 c2                	cmp    %eax,%edx
f011185d:	75 0a                	jne    f0111869 <test_realloc_block_FF+0x9c5>
f011185f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111862:	8a 40 04             	mov    0x4(%eax),%al
f0111865:	3c 01                	cmp    $0x1,%al
f0111867:	74 20                	je     f0111889 <test_realloc_block_FF+0x9e5>
		{
			is_correct = 0;
f0111869:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f0111870:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111873:	8b 00                	mov    (%eax),%eax
f0111875:	83 ec 04             	sub    $0x4,%esp
f0111878:	50                   	push   %eax
f0111879:	ff 75 94             	pushl  -0x6c(%ebp)
f011187c:	68 f4 6a 13 f0       	push   $0xf0136af4
f0111881:	e8 ab f5 fe ff       	call   f0100e31 <cprintf>
f0111886:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0111889:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011188c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111893:	66 8b 00             	mov    (%eax),%ax
f0111896:	98                   	cwtl   
f0111897:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011189a:	75 13                	jne    f01118af <test_realloc_block_FF+0xa0b>
f011189c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011189f:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f01118a6:	66 8b 00             	mov    (%eax),%ax
f01118a9:	98                   	cwtl   
f01118aa:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118ad:	74 1a                	je     f01118c9 <test_realloc_block_FF+0xa25>
		{
			is_correct = 0;
f01118af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01118b6:	83 ec 08             	sub    $0x8,%esp
f01118b9:	ff 75 ac             	pushl  -0x54(%ebp)
f01118bc:	68 6c 6b 13 f0       	push   $0xf0136b6c
f01118c1:	e8 6b f5 fe ff       	call   f0100e31 <cprintf>
f01118c6:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01118c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01118cd:	74 04                	je     f01118d3 <test_realloc_block_FF+0xa2f>
	{
		eval += 30;
f01118cf:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
	}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f01118d3:	83 ec 08             	sub    $0x8,%esp
f01118d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01118d9:	68 cc 6b 13 f0       	push   $0xf0136bcc
f01118de:	e8 4e f5 fe ff       	call   f0100e31 <cprintf>
f01118e3:	83 c4 10             	add    $0x10,%esp

}
f01118e6:	90                   	nop
f01118e7:	c9                   	leave  
f01118e8:	c3                   	ret    

f01118e9 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f01118e9:	55                   	push   %ebp
f01118ea:	89 e5                	mov    %esp,%ebp
f01118ec:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f01118ef:	83 ec 04             	sub    $0x4,%esp
f01118f2:	68 0b 6c 13 f0       	push   $0xf0136c0b
f01118f7:	68 ae 05 00 00       	push   $0x5ae
f01118fc:	68 e4 3b 13 f0       	push   $0xf0133be4
f0111901:	e8 aa e8 fe ff       	call   f01001b0 <_panic>

f0111906 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111906:	55                   	push   %ebp
f0111907:	89 e5                	mov    %esp,%ebp
f0111909:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f011190c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0111911:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111914:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f011191b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0111922:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111926:	0f 84 a5 00 00 00    	je     f01119d1 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f011192c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111933:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111936:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f011193c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011193f:	eb 4a                	jmp    f011198b <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0111941:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111944:	8b 00                	mov    (%eax),%eax
f0111946:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111949:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011194c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111951:	89 c2                	mov    %eax,%edx
f0111953:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111956:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011195d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111960:	01 c8                	add    %ecx,%eax
f0111962:	8b 00                	mov    (%eax),%eax
f0111964:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111967:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011196a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011196f:	39 c2                	cmp    %eax,%edx
f0111971:	74 09                	je     f011197c <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111973:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f011197a:	eb 3e                	jmp    f01119ba <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f011197c:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011197f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111982:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111988:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011198b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011198f:	74 08                	je     f0111999 <sys_check_LRU_lists+0x93>
f0111991:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111994:	8b 40 10             	mov    0x10(%eax),%eax
f0111997:	eb 05                	jmp    f011199e <sys_check_LRU_lists+0x98>
f0111999:	b8 00 00 00 00       	mov    $0x0,%eax
f011199e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01119a1:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01119a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119aa:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01119b0:	85 c0                	test   %eax,%eax
f01119b2:	75 8d                	jne    f0111941 <sys_check_LRU_lists+0x3b>
f01119b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01119b8:	75 87                	jne    f0111941 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f01119ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119bd:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01119c3:	8b 45 10             	mov    0x10(%ebp),%eax
f01119c6:	39 c2                	cmp    %eax,%edx
f01119c8:	74 07                	je     f01119d1 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f01119ca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f01119d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01119d5:	0f 84 a5 00 00 00    	je     f0111a80 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f01119db:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01119e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119e5:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01119eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01119ee:	eb 4a                	jmp    f0111a3a <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f01119f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01119f3:	8b 00                	mov    (%eax),%eax
f01119f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01119f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01119fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a00:	89 c2                	mov    %eax,%edx
f0111a02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a05:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111a0f:	01 c8                	add    %ecx,%eax
f0111a11:	8b 00                	mov    (%eax),%eax
f0111a13:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111a16:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a1e:	39 c2                	cmp    %eax,%edx
f0111a20:	74 09                	je     f0111a2b <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f0111a22:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f0111a29:	eb 3e                	jmp    f0111a69 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f0111a2b:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111a2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a31:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111a37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111a3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a3e:	74 08                	je     f0111a48 <sys_check_LRU_lists+0x142>
f0111a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a43:	8b 40 10             	mov    0x10(%eax),%eax
f0111a46:	eb 05                	jmp    f0111a4d <sys_check_LRU_lists+0x147>
f0111a48:	b8 00 00 00 00       	mov    $0x0,%eax
f0111a4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111a50:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111a56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a59:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111a5f:	85 c0                	test   %eax,%eax
f0111a61:	75 8d                	jne    f01119f0 <sys_check_LRU_lists+0xea>
f0111a63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a67:	75 87                	jne    f01119f0 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111a69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a6c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111a72:	8b 45 14             	mov    0x14(%ebp),%eax
f0111a75:	39 c2                	cmp    %eax,%edx
f0111a77:	74 07                	je     f0111a80 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111a79:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0111a80:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111a83:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111a86:	c9                   	leave  
f0111a87:	c3                   	ret    

f0111a88 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111a88:	55                   	push   %ebp
f0111a89:	89 e5                	mov    %esp,%ebp
f0111a8b:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111a8e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0111a93:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111a96:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111a9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111aa0:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111aa6:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111aa9:	eb 65                	jmp    f0111b10 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111ab2:	eb 3a                	jmp    f0111aee <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111ab4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111ab7:	8b 00                	mov    (%eax),%eax
f0111ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111abc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111abf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111ac4:	89 c2                	mov    %eax,%edx
f0111ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111ac9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111ad0:	8b 45 08             	mov    0x8(%ebp),%eax
f0111ad3:	01 c8                	add    %ecx,%eax
f0111ad5:	8b 00                	mov    (%eax),%eax
f0111ad7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111ada:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111add:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111ae2:	39 c2                	cmp    %eax,%edx
f0111ae4:	75 05                	jne    f0111aeb <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111ae6:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111ae9:	eb 0b                	jmp    f0111af6 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111aeb:	ff 45 f4             	incl   -0xc(%ebp)
f0111aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111af1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111af4:	7c be                	jl     f0111ab4 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111af6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111afa:	7e 08                	jle    f0111b04 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0111afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111aff:	e9 ed 00 00 00       	jmp    f0111bf1 <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b07:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b0d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b10:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b14:	74 08                	je     f0111b1e <sys_check_LRU_lists_free+0x96>
f0111b16:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b19:	8b 40 10             	mov    0x10(%eax),%eax
f0111b1c:	eb 05                	jmp    f0111b23 <sys_check_LRU_lists_free+0x9b>
f0111b1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0111b23:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111b26:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111b2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b2f:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b35:	85 c0                	test   %eax,%eax
f0111b37:	0f 85 6e ff ff ff    	jne    f0111aab <sys_check_LRU_lists_free+0x23>
f0111b3d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b41:	0f 85 64 ff ff ff    	jne    f0111aab <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111b47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b4a:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111b50:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b53:	eb 62                	jmp    f0111bb7 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f0111b55:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0111b5c:	eb 3a                	jmp    f0111b98 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111b5e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b61:	8b 00                	mov    (%eax),%eax
f0111b63:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111b66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111b69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b6e:	89 c2                	mov    %eax,%edx
f0111b70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111b73:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111b7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0111b7d:	01 c8                	add    %ecx,%eax
f0111b7f:	8b 00                	mov    (%eax),%eax
f0111b81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111b84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111b87:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b8c:	39 c2                	cmp    %eax,%edx
f0111b8e:	75 05                	jne    f0111b95 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0111b90:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111b93:	eb 0b                	jmp    f0111ba0 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111b95:	ff 45 f0             	incl   -0x10(%ebp)
f0111b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111b9b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111b9e:	7c be                	jl     f0111b5e <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111ba0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111ba4:	7e 05                	jle    f0111bab <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111ba6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111ba9:	eb 46                	jmp    f0111bf1 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111bab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111bae:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111bb4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111bb7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111bbb:	74 08                	je     f0111bc5 <sys_check_LRU_lists_free+0x13d>
f0111bbd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111bc0:	8b 40 10             	mov    0x10(%eax),%eax
f0111bc3:	eb 05                	jmp    f0111bca <sys_check_LRU_lists_free+0x142>
f0111bc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0111bca:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111bcd:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111bd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111bd6:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111bdc:	85 c0                	test   %eax,%eax
f0111bde:	0f 85 71 ff ff ff    	jne    f0111b55 <sys_check_LRU_lists_free+0xcd>
f0111be4:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111be8:	0f 85 67 ff ff ff    	jne    f0111b55 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111bee:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111bf1:	c9                   	leave  
f0111bf2:	c3                   	ret    

f0111bf3 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111bf3:	55                   	push   %ebp
f0111bf4:	89 e5                	mov    %esp,%ebp
f0111bf6:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111bf9:	83 ec 04             	sub    $0x4,%esp
f0111bfc:	68 20 6c 13 f0       	push   $0xf0136c20
f0111c01:	68 9c 00 00 00       	push   $0x9c
f0111c06:	68 6b 6c 13 f0       	push   $0xf0136c6b
f0111c0b:	e8 a0 e5 fe ff       	call   f01001b0 <_panic>

f0111c10 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111c10:	55                   	push   %ebp
f0111c11:	89 e5                	mov    %esp,%ebp
f0111c13:	57                   	push   %edi
f0111c14:	56                   	push   %esi
f0111c15:	53                   	push   %ebx
f0111c16:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111c1c:	83 ec 0c             	sub    $0xc,%esp
f0111c1f:	68 8c 6c 13 f0       	push   $0xf0136c8c
f0111c24:	e8 08 f2 fe ff       	call   f0100e31 <cprintf>
f0111c29:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111c2c:	83 ec 0c             	sub    $0xc,%esp
f0111c2f:	68 b0 6c 13 f0       	push   $0xf0136cb0
f0111c34:	e8 f8 f1 fe ff       	call   f0100e31 <cprintf>
f0111c39:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111c3c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111c43:	83 ec 0c             	sub    $0xc,%esp
f0111c46:	68 cc 6c 13 f0       	push   $0xf0136ccc
f0111c4b:	e8 e1 f1 fe ff       	call   f0100e31 <cprintf>
f0111c50:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111c53:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111c56:	bb 86 6d 13 f0       	mov    $0xf0136d86,%ebx
f0111c5b:	ba 03 00 00 00       	mov    $0x3,%edx
f0111c60:	89 c7                	mov    %eax,%edi
f0111c62:	89 de                	mov    %ebx,%esi
f0111c64:	89 d1                	mov    %edx,%ecx
f0111c66:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111c68:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111c6b:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111c70:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c75:	89 d7                	mov    %edx,%edi
f0111c77:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111c79:	83 ec 0c             	sub    $0xc,%esp
f0111c7c:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111c7f:	50                   	push   %eax
f0111c80:	e8 3e ff fe ff       	call   f0101bc3 <execute_command>
f0111c85:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111c88:	83 ec 0c             	sub    $0xc,%esp
f0111c8b:	68 fa 6c 13 f0       	push   $0xf0136cfa
f0111c90:	e8 9c f1 fe ff       	call   f0100e31 <cprintf>
f0111c95:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111c98:	83 ec 0c             	sub    $0xc,%esp
f0111c9b:	68 10 6d 13 f0       	push   $0xf0136d10
f0111ca0:	e8 8c f1 fe ff       	call   f0100e31 <cprintf>
f0111ca5:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111ca8:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111caf:	65 00 00 
f0111cb2:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111cb8:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111cbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0111cc2:	89 d7                	mov    %edx,%edi
f0111cc4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111cc6:	83 ec 0c             	sub    $0xc,%esp
f0111cc9:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111ccf:	50                   	push   %eax
f0111cd0:	e8 ee fe fe ff       	call   f0101bc3 <execute_command>
f0111cd5:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111cd8:	83 ec 0c             	sub    $0xc,%esp
f0111cdb:	68 fa 6c 13 f0       	push   $0xf0136cfa
f0111ce0:	e8 4c f1 fe ff       	call   f0100e31 <cprintf>
f0111ce5:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111ce8:	83 ec 0c             	sub    $0xc,%esp
f0111ceb:	68 38 6d 13 f0       	push   $0xf0136d38
f0111cf0:	e8 3c f1 fe ff       	call   f0100e31 <cprintf>
f0111cf5:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111cf8:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111cff:	75 00 00 
f0111d02:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111d08:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d12:	89 d7                	mov    %edx,%edi
f0111d14:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111d16:	83 ec 0c             	sub    $0xc,%esp
f0111d19:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111d1f:	50                   	push   %eax
f0111d20:	e8 9e fe fe ff       	call   f0101bc3 <execute_command>
f0111d25:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d28:	83 ec 0c             	sub    $0xc,%esp
f0111d2b:	68 fa 6c 13 f0       	push   $0xf0136cfa
f0111d30:	e8 fc f0 fe ff       	call   f0100e31 <cprintf>
f0111d35:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111d38:	83 ec 0c             	sub    $0xc,%esp
f0111d3b:	68 60 6d 13 f0       	push   $0xf0136d60
f0111d40:	e8 ec f0 fe ff       	call   f0100e31 <cprintf>
f0111d45:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111d48:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111d4f:	6d 6d 00 
f0111d52:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111d58:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d62:	89 d7                	mov    %edx,%edi
f0111d64:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111d66:	83 ec 0c             	sub    $0xc,%esp
f0111d69:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111d6f:	50                   	push   %eax
f0111d70:	e8 4e fe fe ff       	call   f0101bc3 <execute_command>
f0111d75:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d78:	83 ec 0c             	sub    $0xc,%esp
f0111d7b:	68 fa 6c 13 f0       	push   $0xf0136cfa
f0111d80:	e8 ac f0 fe ff       	call   f0100e31 <cprintf>
f0111d85:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111d8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111d90:	5b                   	pop    %ebx
f0111d91:	5e                   	pop    %esi
f0111d92:	5f                   	pop    %edi
f0111d93:	5d                   	pop    %ebp
f0111d94:	c3                   	ret    

f0111d95 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111d95:	55                   	push   %ebp
f0111d96:	89 e5                	mov    %esp,%ebp
f0111d98:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111d9b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111da2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111db0:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111db5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111db8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111dbb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111dbe:	50                   	push   %eax
f0111dbf:	e8 3d 62 ff ff       	call   f0108001 <pt_set_page_permissions>
f0111dc4:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111dc7:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111dcc:	ff 75 ec             	pushl  -0x14(%ebp)
f0111dcf:	ff 75 f0             	pushl  -0x10(%ebp)
f0111dd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111dd5:	50                   	push   %eax
f0111dd6:	e8 b8 4d 00 00       	call   f0116b93 <CP>
f0111ddb:	83 c4 10             	add    $0x10,%esp
f0111dde:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111de1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111de5:	74 14                	je     f0111dfb <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111de7:	83 ec 04             	sub    $0x4,%esp
f0111dea:	68 ec 6d 13 f0       	push   $0xf0136dec
f0111def:	6a 5a                	push   $0x5a
f0111df1:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0111df6:	e8 b5 e3 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111dfb:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111e02:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111e09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e10:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e15:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e18:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e1b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e1e:	50                   	push   %eax
f0111e1f:	e8 dd 61 ff ff       	call   f0108001 <pt_set_page_permissions>
f0111e24:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e27:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e2c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e32:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e35:	50                   	push   %eax
f0111e36:	e8 58 4d 00 00       	call   f0116b93 <CP>
f0111e3b:	83 c4 10             	add    $0x10,%esp
f0111e3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111e41:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e45:	74 14                	je     f0111e5b <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111e47:	83 ec 04             	sub    $0x4,%esp
f0111e4a:	68 2c 6e 13 f0       	push   $0xf0136e2c
f0111e4f:	6a 66                	push   $0x66
f0111e51:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0111e56:	e8 55 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111e5b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111e62:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111e69:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e70:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e75:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e78:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e7b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e7e:	50                   	push   %eax
f0111e7f:	e8 7d 61 ff ff       	call   f0108001 <pt_set_page_permissions>
f0111e84:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e87:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e8c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e8f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e92:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e95:	50                   	push   %eax
f0111e96:	e8 f8 4c 00 00       	call   f0116b93 <CP>
f0111e9b:	83 c4 10             	add    $0x10,%esp
f0111e9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ea1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ea5:	74 14                	je     f0111ebb <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111ea7:	83 ec 04             	sub    $0x4,%esp
f0111eaa:	68 50 6e 13 f0       	push   $0xf0136e50
f0111eaf:	6a 71                	push   $0x71
f0111eb1:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0111eb6:	e8 f5 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111ebb:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111ec2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111ec9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ed0:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111ed5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ed8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111edb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ede:	50                   	push   %eax
f0111edf:	e8 1d 61 ff ff       	call   f0108001 <pt_set_page_permissions>
f0111ee4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ee7:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111eec:	ff 75 ec             	pushl  -0x14(%ebp)
f0111eef:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ef2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ef5:	50                   	push   %eax
f0111ef6:	e8 98 4c 00 00       	call   f0116b93 <CP>
f0111efb:	83 c4 10             	add    $0x10,%esp
f0111efe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f01:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f05:	74 14                	je     f0111f1b <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111f07:	83 ec 04             	sub    $0x4,%esp
f0111f0a:	68 74 6e 13 f0       	push   $0xf0136e74
f0111f0f:	6a 7d                	push   $0x7d
f0111f11:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0111f16:	e8 95 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111f1b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111f22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111f29:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f30:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111f35:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f38:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f3b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f3e:	50                   	push   %eax
f0111f3f:	e8 bd 60 ff ff       	call   f0108001 <pt_set_page_permissions>
f0111f44:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f47:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111f4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f4f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f52:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f55:	50                   	push   %eax
f0111f56:	e8 38 4c 00 00       	call   f0116b93 <CP>
f0111f5b:	83 c4 10             	add    $0x10,%esp
f0111f5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f61:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f65:	74 17                	je     f0111f7e <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111f67:	83 ec 04             	sub    $0x4,%esp
f0111f6a:	68 98 6e 13 f0       	push   $0xf0136e98
f0111f6f:	68 89 00 00 00       	push   $0x89
f0111f74:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0111f79:	e8 32 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111f7e:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111f85:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111f8c:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f93:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111f98:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f9e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fa1:	50                   	push   %eax
f0111fa2:	e8 5a 60 ff ff       	call   f0108001 <pt_set_page_permissions>
f0111fa7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111faa:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111faf:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fb2:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fb5:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fb8:	50                   	push   %eax
f0111fb9:	e8 d5 4b 00 00       	call   f0116b93 <CP>
f0111fbe:	83 c4 10             	add    $0x10,%esp
f0111fc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111fc4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111fc8:	74 17                	je     f0111fe1 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111fca:	83 ec 04             	sub    $0x4,%esp
f0111fcd:	68 bc 6e 13 f0       	push   $0xf0136ebc
f0111fd2:	68 95 00 00 00       	push   $0x95
f0111fd7:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0111fdc:	e8 cf e1 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111fe1:	83 ec 0c             	sub    $0xc,%esp
f0111fe4:	68 e8 6e 13 f0       	push   $0xf0136ee8
f0111fe9:	e8 43 ee fe ff       	call   f0100e31 <cprintf>
f0111fee:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111ff1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ff6:	c9                   	leave  
f0111ff7:	c3                   	ret    

f0111ff8 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111ff8:	55                   	push   %ebp
f0111ff9:	89 e5                	mov    %esp,%ebp
f0111ffb:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111ffe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0112005:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011200c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112013:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112018:	ff 75 ec             	pushl  -0x14(%ebp)
f011201b:	ff 75 f0             	pushl  -0x10(%ebp)
f011201e:	ff 75 f4             	pushl  -0xc(%ebp)
f0112021:	50                   	push   %eax
f0112022:	e8 da 5f ff ff       	call   f0108001 <pt_set_page_permissions>
f0112027:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f011202a:	83 ec 04             	sub    $0x4,%esp
f011202d:	68 38 6f 13 f0       	push   $0xf0136f38
f0112032:	68 a2 00 00 00       	push   $0xa2
f0112037:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011203c:	e8 6f e1 fe ff       	call   f01001b0 <_panic>

f0112041 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0112041:	55                   	push   %ebp
f0112042:	89 e5                	mov    %esp,%ebp
f0112044:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0112047:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011204e:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112053:	83 ec 08             	sub    $0x8,%esp
f0112056:	ff 75 f4             	pushl  -0xc(%ebp)
f0112059:	50                   	push   %eax
f011205a:	e8 66 60 ff ff       	call   f01080c5 <pt_get_page_permissions>
f011205f:	83 c4 10             	add    $0x10,%esp
f0112062:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0112065:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0112069:	74 17                	je     f0112082 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f011206b:	83 ec 04             	sub    $0x4,%esp
f011206e:	68 d4 6f 13 f0       	push   $0xf0136fd4
f0112073:	68 b0 00 00 00       	push   $0xb0
f0112078:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011207d:	e8 2e e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0112082:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112089:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f011208e:	83 ec 08             	sub    $0x8,%esp
f0112091:	ff 75 f4             	pushl  -0xc(%ebp)
f0112094:	50                   	push   %eax
f0112095:	e8 2b 60 ff ff       	call   f01080c5 <pt_get_page_permissions>
f011209a:	83 c4 10             	add    $0x10,%esp
f011209d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01120a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01120a4:	74 17                	je     f01120bd <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01120a6:	83 ec 04             	sub    $0x4,%esp
f01120a9:	68 f8 6f 13 f0       	push   $0xf0136ff8
f01120ae:	68 b8 00 00 00       	push   $0xb8
f01120b3:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01120b8:	e8 f3 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01120bd:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120c4:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01120c9:	83 ec 08             	sub    $0x8,%esp
f01120cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01120cf:	50                   	push   %eax
f01120d0:	e8 f0 5f ff ff       	call   f01080c5 <pt_get_page_permissions>
f01120d5:	83 c4 10             	add    $0x10,%esp
f01120d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01120db:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01120df:	74 17                	je     f01120f8 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01120e1:	83 ec 04             	sub    $0x4,%esp
f01120e4:	68 1c 70 13 f0       	push   $0xf013701c
f01120e9:	68 c0 00 00 00       	push   $0xc0
f01120ee:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01120f3:	e8 b8 e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f01120f8:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120ff:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112104:	83 ec 08             	sub    $0x8,%esp
f0112107:	ff 75 f4             	pushl  -0xc(%ebp)
f011210a:	50                   	push   %eax
f011210b:	e8 b5 5f ff ff       	call   f01080c5 <pt_get_page_permissions>
f0112110:	83 c4 10             	add    $0x10,%esp
f0112113:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112116:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011211a:	74 17                	je     f0112133 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f011211c:	83 ec 04             	sub    $0x4,%esp
f011211f:	68 40 70 13 f0       	push   $0xf0137040
f0112124:	68 c7 00 00 00       	push   $0xc7
f0112129:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011212e:	e8 7d e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112133:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011213a:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f011213f:	83 ec 08             	sub    $0x8,%esp
f0112142:	ff 75 f4             	pushl  -0xc(%ebp)
f0112145:	50                   	push   %eax
f0112146:	e8 7a 5f ff ff       	call   f01080c5 <pt_get_page_permissions>
f011214b:	83 c4 10             	add    $0x10,%esp
f011214e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0112151:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0112155:	74 17                	je     f011216e <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0112157:	83 ec 04             	sub    $0x4,%esp
f011215a:	68 64 70 13 f0       	push   $0xf0137064
f011215f:	68 ce 00 00 00       	push   $0xce
f0112164:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112169:	e8 42 e0 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011216e:	83 ec 0c             	sub    $0xc,%esp
f0112171:	68 88 70 13 f0       	push   $0xf0137088
f0112176:	e8 b6 ec fe ff       	call   f0100e31 <cprintf>
f011217b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011217e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112183:	c9                   	leave  
f0112184:	c3                   	ret    

f0112185 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0112185:	55                   	push   %ebp
f0112186:	89 e5                	mov    %esp,%ebp
f0112188:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011218b:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112192:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112197:	83 ec 08             	sub    $0x8,%esp
f011219a:	ff 75 f4             	pushl  -0xc(%ebp)
f011219d:	50                   	push   %eax
f011219e:	e8 6b 5f ff ff       	call   f010810e <pt_clear_page_table_entry>
f01121a3:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01121a6:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01121ab:	83 ec 08             	sub    $0x8,%esp
f01121ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01121b1:	50                   	push   %eax
f01121b2:	e8 38 49 00 00       	call   f0116aef <CE>
f01121b7:	83 c4 10             	add    $0x10,%esp
f01121ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01121bd:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01121c1:	74 17                	je     f01121da <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01121c3:	83 ec 04             	sub    $0x4,%esp
f01121c6:	68 d0 70 13 f0       	push   $0xf01370d0
f01121cb:	68 de 00 00 00       	push   $0xde
f01121d0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01121d5:	e8 d6 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f01121da:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01121e1:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01121e6:	83 ec 08             	sub    $0x8,%esp
f01121e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01121ec:	50                   	push   %eax
f01121ed:	e8 1c 5f ff ff       	call   f010810e <pt_clear_page_table_entry>
f01121f2:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01121f5:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01121fa:	83 ec 08             	sub    $0x8,%esp
f01121fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0112200:	50                   	push   %eax
f0112201:	e8 e9 48 00 00       	call   f0116aef <CE>
f0112206:	83 c4 10             	add    $0x10,%esp
f0112209:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011220c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112210:	74 17                	je     f0112229 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0112212:	83 ec 04             	sub    $0x4,%esp
f0112215:	68 fc 70 13 f0       	push   $0xf01370fc
f011221a:	68 e6 00 00 00       	push   $0xe6
f011221f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112224:	e8 87 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0112229:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112230:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112235:	83 ec 08             	sub    $0x8,%esp
f0112238:	ff 75 f4             	pushl  -0xc(%ebp)
f011223b:	50                   	push   %eax
f011223c:	e8 cd 5e ff ff       	call   f010810e <pt_clear_page_table_entry>
f0112241:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112244:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112249:	83 ec 08             	sub    $0x8,%esp
f011224c:	ff 75 f4             	pushl  -0xc(%ebp)
f011224f:	50                   	push   %eax
f0112250:	e8 9a 48 00 00       	call   f0116aef <CE>
f0112255:	83 c4 10             	add    $0x10,%esp
f0112258:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011225b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011225f:	74 17                	je     f0112278 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0112261:	83 ec 04             	sub    $0x4,%esp
f0112264:	68 28 71 13 f0       	push   $0xf0137128
f0112269:	68 ee 00 00 00       	push   $0xee
f011226e:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112273:	e8 38 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0112278:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011227f:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112284:	83 ec 08             	sub    $0x8,%esp
f0112287:	ff 75 f4             	pushl  -0xc(%ebp)
f011228a:	50                   	push   %eax
f011228b:	e8 7e 5e ff ff       	call   f010810e <pt_clear_page_table_entry>
f0112290:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112293:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112298:	83 ec 08             	sub    $0x8,%esp
f011229b:	ff 75 f4             	pushl  -0xc(%ebp)
f011229e:	50                   	push   %eax
f011229f:	e8 4b 48 00 00       	call   f0116aef <CE>
f01122a4:	83 c4 10             	add    $0x10,%esp
f01122a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01122aa:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01122ae:	74 17                	je     f01122c7 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01122b0:	83 ec 04             	sub    $0x4,%esp
f01122b3:	68 54 71 13 f0       	push   $0xf0137154
f01122b8:	68 f6 00 00 00       	push   $0xf6
f01122bd:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01122c2:	e8 e9 de fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01122c7:	83 ec 0c             	sub    $0xc,%esp
f01122ca:	68 80 71 13 f0       	push   $0xf0137180
f01122cf:	e8 5d eb fe ff       	call   f0100e31 <cprintf>
f01122d4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01122d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01122dc:	c9                   	leave  
f01122dd:	c3                   	ret    

f01122de <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01122de:	55                   	push   %ebp
f01122df:	89 e5                	mov    %esp,%ebp
f01122e1:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01122e4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01122eb:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01122f0:	83 ec 08             	sub    $0x8,%esp
f01122f3:	ff 75 f4             	pushl  -0xc(%ebp)
f01122f6:	50                   	push   %eax
f01122f7:	e8 12 5e ff ff       	call   f010810e <pt_clear_page_table_entry>
f01122fc:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01122ff:	83 ec 04             	sub    $0x4,%esp
f0112302:	68 cc 71 13 f0       	push   $0xf01371cc
f0112307:	68 01 01 00 00       	push   $0x101
f011230c:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112311:	e8 9a de fe ff       	call   f01001b0 <_panic>

f0112316 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112316:	55                   	push   %ebp
f0112317:	89 e5                	mov    %esp,%ebp
f0112319:	57                   	push   %edi
f011231a:	56                   	push   %esi
f011231b:	53                   	push   %ebx
f011231c:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112322:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112328:	bb 10 75 13 f0       	mov    $0xf0137510,%ebx
f011232d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112332:	89 c7                	mov    %eax,%edi
f0112334:	89 de                	mov    %ebx,%esi
f0112336:	89 d1                	mov    %edx,%ecx
f0112338:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011233a:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112340:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112345:	b0 00                	mov    $0x0,%al
f0112347:	89 d7                	mov    %edx,%edi
f0112349:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011234b:	6a 00                	push   $0x0
f011234d:	6a 0a                	push   $0xa
f011234f:	6a 14                	push   $0x14
f0112351:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112357:	50                   	push   %eax
f0112358:	e8 50 69 ff ff       	call   f0108cad <env_create>
f011235d:	83 c4 10             	add    $0x10,%esp
f0112360:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112363:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112366:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011236c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011236f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112372:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112378:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011237b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011237e:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112381:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112388:	75 70 20 
f011238b:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0112392:	00 00 00 
f0112395:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011239b:	b9 03 00 00 00       	mov    $0x3,%ecx
f01123a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01123a5:	89 d7                	mov    %edx,%edi
f01123a7:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01123a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01123ac:	8b 40 4c             	mov    0x4c(%eax),%eax
f01123af:	83 ec 08             	sub    $0x8,%esp
f01123b2:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01123b8:	52                   	push   %edx
f01123b9:	50                   	push   %eax
f01123ba:	e8 d7 ce 01 00       	call   f012f296 <ltostr>
f01123bf:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01123c2:	83 ec 04             	sub    $0x4,%esp
f01123c5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123cb:	50                   	push   %eax
f01123cc:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01123d2:	50                   	push   %eax
f01123d3:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01123d9:	50                   	push   %eax
f01123da:	e8 af cf 01 00       	call   f012f38e <strcconcat>
f01123df:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01123e2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01123e9:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01123f0:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01123f7:	83 ec 0c             	sub    $0xc,%esp
f01123fa:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123fd:	e8 ee 48 00 00       	call   f0116cf0 <ClearUserSpace>
f0112402:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112405:	83 ec 04             	sub    $0x4,%esp
f0112408:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011240e:	50                   	push   %eax
f011240f:	68 62 72 13 f0       	push   $0xf0137262
f0112414:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011241a:	50                   	push   %eax
f011241b:	e8 6e cf 01 00       	call   f012f38e <strcconcat>
f0112420:	83 c4 10             	add    $0x10,%esp
f0112423:	83 ec 0c             	sub    $0xc,%esp
f0112426:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011242c:	50                   	push   %eax
f011242d:	e8 91 f7 fe ff       	call   f0101bc3 <execute_command>
f0112432:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112435:	83 ec 04             	sub    $0x4,%esp
f0112438:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011243e:	50                   	push   %eax
f011243f:	68 6d 72 13 f0       	push   $0xf013726d
f0112444:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011244a:	50                   	push   %eax
f011244b:	e8 3e cf 01 00       	call   f012f38e <strcconcat>
f0112450:	83 c4 10             	add    $0x10,%esp
f0112453:	83 ec 0c             	sub    $0xc,%esp
f0112456:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011245c:	50                   	push   %eax
f011245d:	e8 61 f7 fe ff       	call   f0101bc3 <execute_command>
f0112462:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112465:	83 ec 04             	sub    $0x4,%esp
f0112468:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011246e:	50                   	push   %eax
f011246f:	68 78 72 13 f0       	push   $0xf0137278
f0112474:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011247a:	50                   	push   %eax
f011247b:	e8 0e cf 01 00       	call   f012f38e <strcconcat>
f0112480:	83 c4 10             	add    $0x10,%esp
f0112483:	83 ec 0c             	sub    $0xc,%esp
f0112486:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011248c:	50                   	push   %eax
f011248d:	e8 31 f7 fe ff       	call   f0101bc3 <execute_command>
f0112492:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112495:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011249c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011249f:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01124a2:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01124a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124ac:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01124af:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01124b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124b9:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01124bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124bf:	83 ec 08             	sub    $0x8,%esp
f01124c2:	50                   	push   %eax
f01124c3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124c6:	e8 8c 47 00 00       	call   f0116c57 <GP>
f01124cb:	83 c4 10             	add    $0x10,%esp
f01124ce:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01124d1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01124d8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01124df:	e8 dc a4 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01124e4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01124e7:	83 ec 0c             	sub    $0xc,%esp
f01124ea:	68 84 72 13 f0       	push   $0xf0137284
f01124ef:	e8 3d e9 fe ff       	call   f0100e31 <cprintf>
f01124f4:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01124f7:	6a 03                	push   $0x3
f01124f9:	68 00 00 90 02       	push   $0x2900000
f01124fe:	68 00 00 80 02       	push   $0x2800000
f0112503:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112506:	e8 64 66 ff ff       	call   f0108b6f <cut_paste_pages>
f011250b:	83 c4 10             	add    $0x10,%esp
f011250e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112511:	e8 aa a4 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0112516:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112519:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112520:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112524:	75 08                	jne    f011252e <test_cut_paste_pages+0x218>
f0112526:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112529:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011252c:	74 2b                	je     f0112559 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011252e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112531:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112534:	83 ec 0c             	sub    $0xc,%esp
f0112537:	50                   	push   %eax
f0112538:	ff 75 b4             	pushl  -0x4c(%ebp)
f011253b:	68 b4 72 13 f0       	push   $0xf01372b4
f0112540:	68 3a 01 00 00       	push   $0x13a
f0112545:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011254a:	e8 6f de fe ff       	call   f01003be <_warn>
f011254f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112552:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112559:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011255d:	74 04                	je     f0112563 <test_cut_paste_pages+0x24d>
f011255f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112563:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011256a:	83 ec 08             	sub    $0x8,%esp
f011256d:	6a 00                	push   $0x0
f011256f:	6a 01                	push   $0x1
f0112571:	6a 00                	push   $0x0
f0112573:	68 ff 0f 00 00       	push   $0xfff
f0112578:	ff 75 bc             	pushl  -0x44(%ebp)
f011257b:	6a 01                	push   $0x1
f011257d:	68 00 30 00 00       	push   $0x3000
f0112582:	68 00 00 90 02       	push   $0x2900000
f0112587:	68 00 00 80 02       	push   $0x2800000
f011258c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011258f:	e8 90 47 00 00       	call   f0116d24 <CCP>
f0112594:	83 c4 30             	add    $0x30,%esp
f0112597:	83 f8 01             	cmp    $0x1,%eax
f011259a:	74 21                	je     f01125bd <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011259c:	83 ec 04             	sub    $0x4,%esp
f011259f:	68 08 73 13 f0       	push   $0xf0137308
f01125a4:	68 42 01 00 00       	push   $0x142
f01125a9:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01125ae:	e8 0b de fe ff       	call   f01003be <_warn>
f01125b3:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01125b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01125bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125c1:	74 04                	je     f01125c7 <test_cut_paste_pages+0x2b1>
f01125c3:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01125c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01125ce:	83 ec 04             	sub    $0x4,%esp
f01125d1:	6a 00                	push   $0x0
f01125d3:	68 00 00 90 02       	push   $0x2900000
f01125d8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125db:	e8 d5 41 00 00       	call   f01167b5 <CB>
f01125e0:	83 c4 10             	add    $0x10,%esp
f01125e3:	85 c0                	test   %eax,%eax
f01125e5:	0f 84 f6 00 00 00    	je     f01126e1 <test_cut_paste_pages+0x3cb>
f01125eb:	83 ec 04             	sub    $0x4,%esp
f01125ee:	6a 00                	push   $0x0
f01125f0:	68 00 10 90 02       	push   $0x2901000
f01125f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125f8:	e8 b8 41 00 00       	call   f01167b5 <CB>
f01125fd:	83 c4 10             	add    $0x10,%esp
f0112600:	85 c0                	test   %eax,%eax
f0112602:	0f 84 d9 00 00 00    	je     f01126e1 <test_cut_paste_pages+0x3cb>
f0112608:	83 ec 04             	sub    $0x4,%esp
f011260b:	6a 00                	push   $0x0
f011260d:	68 00 20 90 02       	push   $0x2902000
f0112612:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112615:	e8 9b 41 00 00       	call   f01167b5 <CB>
f011261a:	83 c4 10             	add    $0x10,%esp
f011261d:	85 c0                	test   %eax,%eax
f011261f:	0f 84 bc 00 00 00    	je     f01126e1 <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f0112625:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011262c:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112633:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011263a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011263d:	8a 00                	mov    (%eax),%al
f011263f:	3c 61                	cmp    $0x61,%al
f0112641:	75 12                	jne    f0112655 <test_cut_paste_pages+0x33f>
f0112643:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112646:	8a 00                	mov    (%eax),%al
f0112648:	3c 62                	cmp    $0x62,%al
f011264a:	75 09                	jne    f0112655 <test_cut_paste_pages+0x33f>
f011264c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011264f:	8a 00                	mov    (%eax),%al
f0112651:	3c 63                	cmp    $0x63,%al
f0112653:	74 21                	je     f0112676 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112655:	83 ec 04             	sub    $0x4,%esp
f0112658:	68 54 73 13 f0       	push   $0xf0137354
f011265d:	68 4f 01 00 00       	push   $0x14f
f0112662:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112667:	e8 52 dd fe ff       	call   f01003be <_warn>
f011266c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011266f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112676:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011267a:	74 04                	je     f0112680 <test_cut_paste_pages+0x36a>
f011267c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112680:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112687:	83 ec 04             	sub    $0x4,%esp
f011268a:	6a 01                	push   $0x1
f011268c:	68 00 10 90 02       	push   $0x2901000
f0112691:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112694:	e8 1c 41 00 00       	call   f01167b5 <CB>
f0112699:	83 c4 10             	add    $0x10,%esp
f011269c:	85 c0                	test   %eax,%eax
f011269e:	74 41                	je     f01126e1 <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f01126a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126a3:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01126a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126a9:	8a 00                	mov    (%eax),%al
f01126ab:	3c 79                	cmp    $0x79,%al
f01126ad:	74 21                	je     f01126d0 <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01126af:	83 ec 04             	sub    $0x4,%esp
f01126b2:	68 54 73 13 f0       	push   $0xf0137354
f01126b7:	68 5a 01 00 00       	push   $0x15a
f01126bc:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01126c1:	e8 f8 dc fe ff       	call   f01003be <_warn>
f01126c6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01126c9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01126d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126d4:	74 04                	je     f01126da <test_cut_paste_pages+0x3c4>
f01126d6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01126da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01126e1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01126e4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01126e7:	6a 02                	push   $0x2
f01126e9:	68 00 f0 bf 02       	push   $0x2bff000
f01126ee:	68 00 10 90 02       	push   $0x2901000
f01126f3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126f6:	e8 74 64 ff ff       	call   f0108b6f <cut_paste_pages>
f01126fb:	83 c4 10             	add    $0x10,%esp
f01126fe:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112701:	e8 ba a2 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0112706:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112709:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011270d:	75 0b                	jne    f011271a <test_cut_paste_pages+0x404>
f011270f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112712:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112715:	83 f8 01             	cmp    $0x1,%eax
f0112718:	74 2b                	je     f0112745 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011271a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011271d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112720:	83 ec 0c             	sub    $0xc,%esp
f0112723:	50                   	push   %eax
f0112724:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112727:	68 b4 72 13 f0       	push   $0xf01372b4
f011272c:	68 6b 01 00 00       	push   $0x16b
f0112731:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112736:	e8 83 dc fe ff       	call   f01003be <_warn>
f011273b:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011273e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112745:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112749:	74 04                	je     f011274f <test_cut_paste_pages+0x439>
f011274b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011274f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112756:	83 ec 08             	sub    $0x8,%esp
f0112759:	6a 00                	push   $0x0
f011275b:	6a 01                	push   $0x1
f011275d:	6a 00                	push   $0x0
f011275f:	68 ff 0f 00 00       	push   $0xfff
f0112764:	ff 75 bc             	pushl  -0x44(%ebp)
f0112767:	6a 01                	push   $0x1
f0112769:	68 00 20 00 00       	push   $0x2000
f011276e:	68 00 f0 bf 02       	push   $0x2bff000
f0112773:	68 00 10 90 02       	push   $0x2901000
f0112778:	ff 75 d4             	pushl  -0x2c(%ebp)
f011277b:	e8 a4 45 00 00       	call   f0116d24 <CCP>
f0112780:	83 c4 30             	add    $0x30,%esp
f0112783:	83 f8 01             	cmp    $0x1,%eax
f0112786:	74 21                	je     f01127a9 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112788:	83 ec 04             	sub    $0x4,%esp
f011278b:	68 08 73 13 f0       	push   $0xf0137308
f0112790:	68 73 01 00 00       	push   $0x173
f0112795:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011279a:	e8 1f dc fe ff       	call   f01003be <_warn>
f011279f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01127a2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01127a9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127ad:	74 04                	je     f01127b3 <test_cut_paste_pages+0x49d>
f01127af:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01127b3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01127ba:	83 ec 04             	sub    $0x4,%esp
f01127bd:	6a 00                	push   $0x0
f01127bf:	68 ff f7 bf 02       	push   $0x2bff7ff
f01127c4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127c7:	e8 e9 3f 00 00       	call   f01167b5 <CB>
f01127cc:	83 c4 10             	add    $0x10,%esp
f01127cf:	85 c0                	test   %eax,%eax
f01127d1:	74 6b                	je     f011283e <test_cut_paste_pages+0x528>
f01127d3:	83 ec 04             	sub    $0x4,%esp
f01127d6:	6a 00                	push   $0x0
f01127d8:	68 ff 0f c0 02       	push   $0x2c00fff
f01127dd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127e0:	e8 d0 3f 00 00       	call   f01167b5 <CB>
f01127e5:	83 c4 10             	add    $0x10,%esp
f01127e8:	85 c0                	test   %eax,%eax
f01127ea:	74 52                	je     f011283e <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f01127ec:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01127f3:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01127fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127fd:	8a 00                	mov    (%eax),%al
f01127ff:	3c 79                	cmp    $0x79,%al
f0112801:	75 09                	jne    f011280c <test_cut_paste_pages+0x4f6>
f0112803:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112806:	8a 00                	mov    (%eax),%al
f0112808:	3c 63                	cmp    $0x63,%al
f011280a:	74 21                	je     f011282d <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011280c:	83 ec 04             	sub    $0x4,%esp
f011280f:	68 54 73 13 f0       	push   $0xf0137354
f0112814:	68 7f 01 00 00       	push   $0x17f
f0112819:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011281e:	e8 9b db fe ff       	call   f01003be <_warn>
f0112823:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112826:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011282d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112831:	74 04                	je     f0112837 <test_cut_paste_pages+0x521>
f0112833:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112837:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011283e:	83 ec 0c             	sub    $0xc,%esp
f0112841:	68 8d 73 13 f0       	push   $0xf013738d
f0112846:	e8 e6 e5 fe ff       	call   f0100e31 <cprintf>
f011284b:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011284e:	83 ec 0c             	sub    $0xc,%esp
f0112851:	68 9c 73 13 f0       	push   $0xf013739c
f0112856:	e8 d6 e5 fe ff       	call   f0100e31 <cprintf>
f011285b:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011285e:	83 ec 04             	sub    $0x4,%esp
f0112861:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112867:	50                   	push   %eax
f0112868:	68 c5 73 13 f0       	push   $0xf01373c5
f011286d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112873:	50                   	push   %eax
f0112874:	e8 15 cb 01 00       	call   f012f38e <strcconcat>
f0112879:	83 c4 10             	add    $0x10,%esp
f011287c:	83 ec 0c             	sub    $0xc,%esp
f011287f:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112885:	50                   	push   %eax
f0112886:	e8 38 f3 fe ff       	call   f0101bc3 <execute_command>
f011288b:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011288e:	83 ec 04             	sub    $0x4,%esp
f0112891:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112897:	50                   	push   %eax
f0112898:	68 d0 73 13 f0       	push   $0xf01373d0
f011289d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128a3:	50                   	push   %eax
f01128a4:	e8 e5 ca 01 00       	call   f012f38e <strcconcat>
f01128a9:	83 c4 10             	add    $0x10,%esp
f01128ac:	83 ec 0c             	sub    $0xc,%esp
f01128af:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01128b5:	50                   	push   %eax
f01128b6:	e8 08 f3 fe ff       	call   f0101bc3 <execute_command>
f01128bb:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01128be:	83 ec 04             	sub    $0x4,%esp
f01128c1:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01128c7:	50                   	push   %eax
f01128c8:	68 db 73 13 f0       	push   $0xf01373db
f01128cd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128d3:	50                   	push   %eax
f01128d4:	e8 b5 ca 01 00       	call   f012f38e <strcconcat>
f01128d9:	83 c4 10             	add    $0x10,%esp
f01128dc:	83 ec 0c             	sub    $0xc,%esp
f01128df:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01128e5:	50                   	push   %eax
f01128e6:	e8 d8 f2 fe ff       	call   f0101bc3 <execute_command>
f01128eb:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01128ee:	83 ec 04             	sub    $0x4,%esp
f01128f1:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01128f7:	50                   	push   %eax
f01128f8:	68 e6 73 13 f0       	push   $0xf01373e6
f01128fd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112903:	50                   	push   %eax
f0112904:	e8 85 ca 01 00       	call   f012f38e <strcconcat>
f0112909:	83 c4 10             	add    $0x10,%esp
f011290c:	83 ec 0c             	sub    $0xc,%esp
f011290f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112915:	50                   	push   %eax
f0112916:	e8 a8 f2 fe ff       	call   f0101bc3 <execute_command>
f011291b:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011291e:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112925:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112928:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f011292b:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112932:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112935:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112938:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011293f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112942:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112945:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011294c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011294f:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112952:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112959:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011295c:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011295f:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112966:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112969:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011296c:	83 ec 08             	sub    $0x8,%esp
f011296f:	68 00 00 c0 01       	push   $0x1c00000
f0112974:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112977:	e8 db 42 00 00       	call   f0116c57 <GP>
f011297c:	83 c4 10             	add    $0x10,%esp
f011297f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112982:	83 ec 08             	sub    $0x8,%esp
f0112985:	68 00 00 40 01       	push   $0x1400000
f011298a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011298d:	e8 c5 42 00 00       	call   f0116c57 <GP>
f0112992:	83 c4 10             	add    $0x10,%esp
f0112995:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112998:	e8 23 a0 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011299d:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01129a0:	6a 01                	push   $0x1
f01129a2:	68 00 00 40 01       	push   $0x1400000
f01129a7:	68 00 00 c0 01       	push   $0x1c00000
f01129ac:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129af:	e8 bb 61 ff ff       	call   f0108b6f <cut_paste_pages>
f01129b4:	83 c4 10             	add    $0x10,%esp
f01129b7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01129ba:	e8 01 a0 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01129bf:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01129c2:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01129c6:	75 08                	jne    f01129d0 <test_cut_paste_pages+0x6ba>
f01129c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129cb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01129ce:	74 2b                	je     f01129fb <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01129d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129d3:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01129d6:	83 ec 0c             	sub    $0xc,%esp
f01129d9:	50                   	push   %eax
f01129da:	ff 75 b4             	pushl  -0x4c(%ebp)
f01129dd:	68 f4 73 13 f0       	push   $0xf01373f4
f01129e2:	68 a2 01 00 00       	push   $0x1a2
f01129e7:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01129ec:	e8 cd d9 fe ff       	call   f01003be <_warn>
f01129f1:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01129f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01129fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129ff:	74 04                	je     f0112a05 <test_cut_paste_pages+0x6ef>
f0112a01:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112a05:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112a0c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112a13:	83 ec 08             	sub    $0x8,%esp
f0112a16:	6a 00                	push   $0x0
f0112a18:	68 ff 0f 00 00       	push   $0xfff
f0112a1d:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112a20:	68 ff 0f 00 00       	push   $0xfff
f0112a25:	ff 75 a0             	pushl  -0x60(%ebp)
f0112a28:	6a 01                	push   $0x1
f0112a2a:	68 00 10 00 00       	push   $0x1000
f0112a2f:	68 00 00 40 01       	push   $0x1400000
f0112a34:	68 00 00 c0 01       	push   $0x1c00000
f0112a39:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a3c:	e8 e3 42 00 00       	call   f0116d24 <CCP>
f0112a41:	83 c4 30             	add    $0x30,%esp
f0112a44:	83 f8 01             	cmp    $0x1,%eax
f0112a47:	74 28                	je     f0112a71 <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112a49:	83 ec 04             	sub    $0x4,%esp
f0112a4c:	68 08 73 13 f0       	push   $0xf0137308
f0112a51:	68 ab 01 00 00       	push   $0x1ab
f0112a56:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112a5b:	e8 5e d9 fe ff       	call   f01003be <_warn>
f0112a60:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112a63:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112a6a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112a71:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a75:	74 04                	je     f0112a7b <test_cut_paste_pages+0x765>
f0112a77:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112a7b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112a82:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112a86:	0f 84 92 00 00 00    	je     f0112b1e <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0112a8c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112a93:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112a9a:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112aa1:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112aa8:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112aaf:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ab6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ab9:	8a 00                	mov    (%eax),%al
f0112abb:	3c 61                	cmp    $0x61,%al
f0112abd:	75 2d                	jne    f0112aec <test_cut_paste_pages+0x7d6>
f0112abf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ac2:	8a 00                	mov    (%eax),%al
f0112ac4:	3c 78                	cmp    $0x78,%al
f0112ac6:	75 24                	jne    f0112aec <test_cut_paste_pages+0x7d6>
f0112ac8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112acb:	8a 00                	mov    (%eax),%al
f0112acd:	3c 62                	cmp    $0x62,%al
f0112acf:	75 1b                	jne    f0112aec <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ad1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ad4:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ad6:	3c 79                	cmp    $0x79,%al
f0112ad8:	75 12                	jne    f0112aec <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ada:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112add:	8a 00                	mov    (%eax),%al
f0112adf:	3c 63                	cmp    $0x63,%al
f0112ae1:	75 09                	jne    f0112aec <test_cut_paste_pages+0x7d6>
f0112ae3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112ae6:	8a 00                	mov    (%eax),%al
f0112ae8:	3c 7a                	cmp    $0x7a,%al
f0112aea:	74 21                	je     f0112b0d <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112aec:	83 ec 04             	sub    $0x4,%esp
f0112aef:	68 54 73 13 f0       	push   $0xf0137354
f0112af4:	68 bd 01 00 00       	push   $0x1bd
f0112af9:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112afe:	e8 bb d8 fe ff       	call   f01003be <_warn>
f0112b03:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112b06:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112b0d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b11:	74 04                	je     f0112b17 <test_cut_paste_pages+0x801>
f0112b13:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b17:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112b1e:	e8 9d 9e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0112b23:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112b26:	6a 03                	push   $0x3
f0112b28:	68 00 f0 bf 01       	push   $0x1bff000
f0112b2d:	68 00 00 40 01       	push   $0x1400000
f0112b32:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b35:	e8 35 60 ff ff       	call   f0108b6f <cut_paste_pages>
f0112b3a:	83 c4 10             	add    $0x10,%esp
f0112b3d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112b40:	e8 7b 9e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0112b45:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112b48:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112b4c:	75 08                	jne    f0112b56 <test_cut_paste_pages+0x840>
f0112b4e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b51:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112b54:	74 2b                	je     f0112b81 <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112b56:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b59:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112b5c:	83 ec 0c             	sub    $0xc,%esp
f0112b5f:	50                   	push   %eax
f0112b60:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b63:	68 f4 73 13 f0       	push   $0xf01373f4
f0112b68:	68 cc 01 00 00       	push   $0x1cc
f0112b6d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112b72:	e8 47 d8 fe ff       	call   f01003be <_warn>
f0112b77:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112b7a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112b81:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b85:	74 04                	je     f0112b8b <test_cut_paste_pages+0x875>
f0112b87:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112b8b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112b92:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b99:	83 ec 04             	sub    $0x4,%esp
f0112b9c:	6a 00                	push   $0x0
f0112b9e:	68 00 00 40 01       	push   $0x1400000
f0112ba3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ba6:	e8 0a 3c 00 00       	call   f01167b5 <CB>
f0112bab:	83 c4 10             	add    $0x10,%esp
f0112bae:	83 f8 01             	cmp    $0x1,%eax
f0112bb1:	0f 85 80 00 00 00    	jne    f0112c37 <test_cut_paste_pages+0x921>
f0112bb7:	83 ec 04             	sub    $0x4,%esp
f0112bba:	6a 00                	push   $0x0
f0112bbc:	68 00 10 40 01       	push   $0x1401000
f0112bc1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bc4:	e8 ec 3b 00 00       	call   f01167b5 <CB>
f0112bc9:	83 c4 10             	add    $0x10,%esp
f0112bcc:	83 f8 01             	cmp    $0x1,%eax
f0112bcf:	75 66                	jne    f0112c37 <test_cut_paste_pages+0x921>
f0112bd1:	83 ec 04             	sub    $0x4,%esp
f0112bd4:	6a 00                	push   $0x0
f0112bd6:	68 00 20 40 01       	push   $0x1402000
f0112bdb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bde:	e8 d2 3b 00 00       	call   f01167b5 <CB>
f0112be3:	83 c4 10             	add    $0x10,%esp
f0112be6:	83 f8 01             	cmp    $0x1,%eax
f0112be9:	75 4c                	jne    f0112c37 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112beb:	83 ec 04             	sub    $0x4,%esp
f0112bee:	6a 00                	push   $0x0
f0112bf0:	68 00 f0 bf 01       	push   $0x1bff000
f0112bf5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bf8:	e8 b8 3b 00 00       	call   f01167b5 <CB>
f0112bfd:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112c00:	85 c0                	test   %eax,%eax
f0112c02:	75 33                	jne    f0112c37 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112c04:	83 ec 04             	sub    $0x4,%esp
f0112c07:	6a 00                	push   $0x0
f0112c09:	68 00 00 c0 01       	push   $0x1c00000
f0112c0e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c11:	e8 9f 3b 00 00       	call   f01167b5 <CB>
f0112c16:	83 c4 10             	add    $0x10,%esp
f0112c19:	83 f8 01             	cmp    $0x1,%eax
f0112c1c:	75 19                	jne    f0112c37 <test_cut_paste_pages+0x921>
f0112c1e:	83 ec 04             	sub    $0x4,%esp
f0112c21:	6a 00                	push   $0x0
f0112c23:	68 00 10 c0 01       	push   $0x1c01000
f0112c28:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c2b:	e8 85 3b 00 00       	call   f01167b5 <CB>
f0112c30:	83 c4 10             	add    $0x10,%esp
f0112c33:	85 c0                	test   %eax,%eax
f0112c35:	74 28                	je     f0112c5f <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112c37:	83 ec 04             	sub    $0x4,%esp
f0112c3a:	68 54 74 13 f0       	push   $0xf0137454
f0112c3f:	68 d5 01 00 00       	push   $0x1d5
f0112c44:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112c49:	e8 70 d7 fe ff       	call   f01003be <_warn>
f0112c4e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c51:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112c58:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112c5f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c63:	74 04                	je     f0112c69 <test_cut_paste_pages+0x953>
f0112c65:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112c69:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112c70:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112c74:	0f 84 99 00 00 00    	je     f0112d13 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112c7a:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112c81:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112c88:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112c8f:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112c96:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112c9d:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ca4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ca7:	8a 00                	mov    (%eax),%al
f0112ca9:	3c 61                	cmp    $0x61,%al
f0112cab:	75 2d                	jne    f0112cda <test_cut_paste_pages+0x9c4>
f0112cad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112cb0:	8a 00                	mov    (%eax),%al
f0112cb2:	3c 78                	cmp    $0x78,%al
f0112cb4:	75 24                	jne    f0112cda <test_cut_paste_pages+0x9c4>
f0112cb6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112cb9:	8a 00                	mov    (%eax),%al
f0112cbb:	3c 62                	cmp    $0x62,%al
f0112cbd:	75 1b                	jne    f0112cda <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112cbf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112cc2:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112cc4:	3c 79                	cmp    $0x79,%al
f0112cc6:	75 12                	jne    f0112cda <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112cc8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ccb:	8a 00                	mov    (%eax),%al
f0112ccd:	3c 63                	cmp    $0x63,%al
f0112ccf:	75 09                	jne    f0112cda <test_cut_paste_pages+0x9c4>
f0112cd1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112cd4:	8a 00                	mov    (%eax),%al
f0112cd6:	3c 7a                	cmp    $0x7a,%al
f0112cd8:	74 28                	je     f0112d02 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112cda:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112ce1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112ce8:	83 ec 04             	sub    $0x4,%esp
f0112ceb:	68 54 73 13 f0       	push   $0xf0137354
f0112cf0:	68 e9 01 00 00       	push   $0x1e9
f0112cf5:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0112cfa:	e8 bf d6 fe ff       	call   f01003be <_warn>
f0112cff:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112d02:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d06:	74 04                	je     f0112d0c <test_cut_paste_pages+0x9f6>
f0112d08:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d0c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112d13:	83 ec 0c             	sub    $0xc,%esp
f0112d16:	68 8d 74 13 f0       	push   $0xf013748d
f0112d1b:	e8 11 e1 fe ff       	call   f0100e31 <cprintf>
f0112d20:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112d23:	83 ec 08             	sub    $0x8,%esp
f0112d26:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112d29:	68 9c 74 13 f0       	push   $0xf013749c
f0112d2e:	e8 fe e0 fe ff       	call   f0100e31 <cprintf>
f0112d33:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112d36:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112d3a:	75 10                	jne    f0112d4c <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112d3c:	83 ec 0c             	sub    $0xc,%esp
f0112d3f:	68 d0 74 13 f0       	push   $0xf01374d0
f0112d44:	e8 e8 e0 fe ff       	call   f0100e31 <cprintf>
f0112d49:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112d4c:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0112d51:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112d54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112d57:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112d5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112d5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112d62:	5b                   	pop    %ebx
f0112d63:	5e                   	pop    %esi
f0112d64:	5f                   	pop    %edi
f0112d65:	5d                   	pop    %ebp
f0112d66:	c3                   	ret    

f0112d67 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112d67:	55                   	push   %ebp
f0112d68:	89 e5                	mov    %esp,%ebp
f0112d6a:	57                   	push   %edi
f0112d6b:	56                   	push   %esi
f0112d6c:	53                   	push   %ebx
f0112d6d:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112d73:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d79:	bb 10 75 13 f0       	mov    $0xf0137510,%ebx
f0112d7e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d83:	89 c7                	mov    %eax,%edi
f0112d85:	89 de                	mov    %ebx,%esi
f0112d87:	89 d1                	mov    %edx,%ecx
f0112d89:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d8b:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112d91:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112d96:	b0 00                	mov    $0x0,%al
f0112d98:	89 d7                	mov    %edx,%edi
f0112d9a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112d9c:	6a 00                	push   $0x0
f0112d9e:	6a 0a                	push   $0xa
f0112da0:	6a 14                	push   $0x14
f0112da2:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112da8:	50                   	push   %eax
f0112da9:	e8 ff 5e ff ff       	call   f0108cad <env_create>
f0112dae:	83 c4 10             	add    $0x10,%esp
f0112db1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112db4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112db7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112dbd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112dc0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112dc3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112dc9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112dcf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112dd5:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112dd8:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112ddf:	75 70 20 
f0112de2:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112de9:	00 00 00 
f0112dec:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112df2:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0112dfc:	89 d7                	mov    %edx,%edi
f0112dfe:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112e00:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e03:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112e06:	83 ec 08             	sub    $0x8,%esp
f0112e09:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112e0f:	52                   	push   %edx
f0112e10:	50                   	push   %eax
f0112e11:	e8 80 c4 01 00       	call   f012f296 <ltostr>
f0112e16:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112e19:	83 ec 04             	sub    $0x4,%esp
f0112e1c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e22:	50                   	push   %eax
f0112e23:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112e29:	50                   	push   %eax
f0112e2a:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112e30:	50                   	push   %eax
f0112e31:	e8 58 c5 01 00       	call   f012f38e <strcconcat>
f0112e36:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112e39:	83 ec 0c             	sub    $0xc,%esp
f0112e3c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e3f:	e8 ac 3e 00 00       	call   f0116cf0 <ClearUserSpace>
f0112e44:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112e47:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112e4e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112e55:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112e5c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112e63:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112e6a:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112e71:	83 ec 0c             	sub    $0xc,%esp
f0112e74:	68 44 75 13 f0       	push   $0xf0137544
f0112e79:	e8 b3 df fe ff       	call   f0100e31 <cprintf>
f0112e7e:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112e81:	83 ec 04             	sub    $0x4,%esp
f0112e84:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e8a:	50                   	push   %eax
f0112e8b:	68 7a 75 13 f0       	push   $0xf013757a
f0112e90:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e96:	50                   	push   %eax
f0112e97:	e8 f2 c4 01 00       	call   f012f38e <strcconcat>
f0112e9c:	83 c4 10             	add    $0x10,%esp
f0112e9f:	83 ec 0c             	sub    $0xc,%esp
f0112ea2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ea8:	50                   	push   %eax
f0112ea9:	e8 15 ed fe ff       	call   f0101bc3 <execute_command>
f0112eae:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112eb1:	83 ec 04             	sub    $0x4,%esp
f0112eb4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112eba:	50                   	push   %eax
f0112ebb:	68 7f 75 13 f0       	push   $0xf013757f
f0112ec0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ec6:	50                   	push   %eax
f0112ec7:	e8 c2 c4 01 00       	call   f012f38e <strcconcat>
f0112ecc:	83 c4 10             	add    $0x10,%esp
f0112ecf:	83 ec 0c             	sub    $0xc,%esp
f0112ed2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ed8:	50                   	push   %eax
f0112ed9:	e8 e5 ec fe ff       	call   f0101bc3 <execute_command>
f0112ede:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112ee1:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ee7:	bb 85 78 13 f0       	mov    $0xf0137885,%ebx
f0112eec:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ef1:	89 c7                	mov    %eax,%edi
f0112ef3:	89 de                	mov    %ebx,%esi
f0112ef5:	89 d1                	mov    %edx,%ecx
f0112ef7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ef9:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112eff:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f04:	b0 00                	mov    $0x0,%al
f0112f06:	89 d7                	mov    %edx,%edi
f0112f08:	f3 aa                	rep stos %al,%es:(%edi)
f0112f0a:	83 ec 0c             	sub    $0xc,%esp
f0112f0d:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112f13:	50                   	push   %eax
f0112f14:	e8 aa ec fe ff       	call   f0101bc3 <execute_command>
f0112f19:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112f1c:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f22:	bb e9 78 13 f0       	mov    $0xf01378e9,%ebx
f0112f27:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f2c:	89 c7                	mov    %eax,%edi
f0112f2e:	89 de                	mov    %ebx,%esi
f0112f30:	89 d1                	mov    %edx,%ecx
f0112f32:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f34:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112f3a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f3f:	b0 00                	mov    $0x0,%al
f0112f41:	89 d7                	mov    %edx,%edi
f0112f43:	f3 aa                	rep stos %al,%es:(%edi)
f0112f45:	83 ec 0c             	sub    $0xc,%esp
f0112f48:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f4e:	50                   	push   %eax
f0112f4f:	e8 6f ec fe ff       	call   f0101bc3 <execute_command>
f0112f54:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112f57:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f5d:	bb 4d 79 13 f0       	mov    $0xf013794d,%ebx
f0112f62:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f67:	89 c7                	mov    %eax,%edi
f0112f69:	89 de                	mov    %ebx,%esi
f0112f6b:	89 d1                	mov    %edx,%ecx
f0112f6d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f6f:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f75:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f7a:	b0 00                	mov    $0x0,%al
f0112f7c:	89 d7                	mov    %edx,%edi
f0112f7e:	f3 aa                	rep stos %al,%es:(%edi)
f0112f80:	83 ec 0c             	sub    $0xc,%esp
f0112f83:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f89:	50                   	push   %eax
f0112f8a:	e8 34 ec fe ff       	call   f0101bc3 <execute_command>
f0112f8f:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112f92:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f98:	bb b1 79 13 f0       	mov    $0xf01379b1,%ebx
f0112f9d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fa2:	89 c7                	mov    %eax,%edi
f0112fa4:	89 de                	mov    %ebx,%esi
f0112fa6:	89 d1                	mov    %edx,%ecx
f0112fa8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112faa:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112fb0:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fb5:	b0 00                	mov    $0x0,%al
f0112fb7:	89 d7                	mov    %edx,%edi
f0112fb9:	f3 aa                	rep stos %al,%es:(%edi)
f0112fbb:	83 ec 0c             	sub    $0xc,%esp
f0112fbe:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112fc4:	50                   	push   %eax
f0112fc5:	e8 f9 eb fe ff       	call   f0101bc3 <execute_command>
f0112fca:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112fcd:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fd3:	bb 15 7a 13 f0       	mov    $0xf0137a15,%ebx
f0112fd8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fdd:	89 c7                	mov    %eax,%edi
f0112fdf:	89 de                	mov    %ebx,%esi
f0112fe1:	89 d1                	mov    %edx,%ecx
f0112fe3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fe5:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112feb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ff0:	b0 00                	mov    $0x0,%al
f0112ff2:	89 d7                	mov    %edx,%edi
f0112ff4:	f3 aa                	rep stos %al,%es:(%edi)
f0112ff6:	83 ec 0c             	sub    $0xc,%esp
f0112ff9:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fff:	50                   	push   %eax
f0113000:	e8 be eb fe ff       	call   f0101bc3 <execute_command>
f0113005:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0113008:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011300e:	bb 79 7a 13 f0       	mov    $0xf0137a79,%ebx
f0113013:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113018:	89 c7                	mov    %eax,%edi
f011301a:	89 de                	mov    %ebx,%esi
f011301c:	89 d1                	mov    %edx,%ecx
f011301e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113020:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113026:	b9 55 00 00 00       	mov    $0x55,%ecx
f011302b:	b0 00                	mov    $0x0,%al
f011302d:	89 d7                	mov    %edx,%edi
f011302f:	f3 aa                	rep stos %al,%es:(%edi)
f0113031:	83 ec 0c             	sub    $0xc,%esp
f0113034:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011303a:	50                   	push   %eax
f011303b:	e8 83 eb fe ff       	call   f0101bc3 <execute_command>
f0113040:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0113043:	83 ec 04             	sub    $0x4,%esp
f0113046:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011304c:	50                   	push   %eax
f011304d:	68 87 75 13 f0       	push   $0xf0137587
f0113052:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113058:	50                   	push   %eax
f0113059:	e8 30 c3 01 00       	call   f012f38e <strcconcat>
f011305e:	83 c4 10             	add    $0x10,%esp
f0113061:	83 ec 0c             	sub    $0xc,%esp
f0113064:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011306a:	50                   	push   %eax
f011306b:	e8 53 eb fe ff       	call   f0101bc3 <execute_command>
f0113070:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0113073:	83 ec 04             	sub    $0x4,%esp
f0113076:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011307c:	50                   	push   %eax
f011307d:	68 91 75 13 f0       	push   $0xf0137591
f0113082:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113088:	50                   	push   %eax
f0113089:	e8 00 c3 01 00       	call   f012f38e <strcconcat>
f011308e:	83 c4 10             	add    $0x10,%esp
f0113091:	83 ec 0c             	sub    $0xc,%esp
f0113094:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011309a:	50                   	push   %eax
f011309b:	e8 23 eb fe ff       	call   f0101bc3 <execute_command>
f01130a0:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f01130a3:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130a9:	bb dd 7a 13 f0       	mov    $0xf0137add,%ebx
f01130ae:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130b3:	89 c7                	mov    %eax,%edi
f01130b5:	89 de                	mov    %ebx,%esi
f01130b7:	89 d1                	mov    %edx,%ecx
f01130b9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130bb:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01130c1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130c6:	b0 00                	mov    $0x0,%al
f01130c8:	89 d7                	mov    %edx,%edi
f01130ca:	f3 aa                	rep stos %al,%es:(%edi)
f01130cc:	83 ec 0c             	sub    $0xc,%esp
f01130cf:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130d5:	50                   	push   %eax
f01130d6:	e8 e8 ea fe ff       	call   f0101bc3 <execute_command>
f01130db:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01130de:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130e4:	bb 41 7b 13 f0       	mov    $0xf0137b41,%ebx
f01130e9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130ee:	89 c7                	mov    %eax,%edi
f01130f0:	89 de                	mov    %ebx,%esi
f01130f2:	89 d1                	mov    %edx,%ecx
f01130f4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130f6:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01130fc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113101:	b0 00                	mov    $0x0,%al
f0113103:	89 d7                	mov    %edx,%edi
f0113105:	f3 aa                	rep stos %al,%es:(%edi)
f0113107:	83 ec 0c             	sub    $0xc,%esp
f011310a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113110:	50                   	push   %eax
f0113111:	e8 ad ea fe ff       	call   f0101bc3 <execute_command>
f0113116:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113119:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011311f:	bb a5 7b 13 f0       	mov    $0xf0137ba5,%ebx
f0113124:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113129:	89 c7                	mov    %eax,%edi
f011312b:	89 de                	mov    %ebx,%esi
f011312d:	89 d1                	mov    %edx,%ecx
f011312f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113131:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113137:	b9 55 00 00 00       	mov    $0x55,%ecx
f011313c:	b0 00                	mov    $0x0,%al
f011313e:	89 d7                	mov    %edx,%edi
f0113140:	f3 aa                	rep stos %al,%es:(%edi)
f0113142:	83 ec 0c             	sub    $0xc,%esp
f0113145:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011314b:	50                   	push   %eax
f011314c:	e8 72 ea fe ff       	call   f0101bc3 <execute_command>
f0113151:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0113154:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011315b:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0113162:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0113169:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0113170:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0113177:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011317e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113185:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f011318c:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0113193:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f011319a:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01131a1:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01131a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01131ab:	8a 00                	mov    (%eax),%al
f01131ad:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01131b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01131b6:	8a 00                	mov    (%eax),%al
f01131b8:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01131be:	8b 45 90             	mov    -0x70(%ebp),%eax
f01131c1:	8a 00                	mov    (%eax),%al
f01131c3:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131c9:	e8 f2 97 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01131ce:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01131d1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01131d4:	89 d0                	mov    %edx,%eax
f01131d6:	01 c0                	add    %eax,%eax
f01131d8:	01 d0                	add    %edx,%eax
f01131da:	01 c0                	add    %eax,%eax
f01131dc:	50                   	push   %eax
f01131dd:	68 00 00 10 00       	push   $0x100000
f01131e2:	6a 00                	push   $0x0
f01131e4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01131e7:	e8 9d 59 ff ff       	call   f0108b89 <copy_paste_chunk>
f01131ec:	83 c4 10             	add    $0x10,%esp
f01131ef:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01131f2:	e8 c9 97 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01131f7:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01131fa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113201:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0113205:	75 08                	jne    f011320f <test_copy_paste_chunk+0x4a8>
f0113207:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011320a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011320d:	74 2b                	je     f011323a <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011320f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113212:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113215:	83 ec 0c             	sub    $0xc,%esp
f0113218:	50                   	push   %eax
f0113219:	ff 75 88             	pushl  -0x78(%ebp)
f011321c:	68 a0 75 13 f0       	push   $0xf01375a0
f0113221:	68 3c 02 00 00       	push   $0x23c
f0113226:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011322b:	e8 8e d1 fe ff       	call   f01003be <_warn>
f0113230:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113233:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011323a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011323e:	74 04                	je     f0113244 <test_copy_paste_chunk+0x4dd>
f0113240:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113244:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f011324b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011324e:	8a 00                	mov    (%eax),%al
f0113250:	3c 61                	cmp    $0x61,%al
f0113252:	75 75                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f0113254:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113257:	8a 00                	mov    (%eax),%al
f0113259:	3c 78                	cmp    $0x78,%al
f011325b:	75 6c                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f011325d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113260:	8a 00                	mov    (%eax),%al
f0113262:	3c 62                	cmp    $0x62,%al
f0113264:	75 63                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f0113266:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113269:	8a 00                	mov    (%eax),%al
f011326b:	3c 79                	cmp    $0x79,%al
f011326d:	75 5a                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f011326f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113272:	8a 00                	mov    (%eax),%al
f0113274:	3c 63                	cmp    $0x63,%al
f0113276:	75 51                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f0113278:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011327b:	8a 00                	mov    (%eax),%al
f011327d:	3c 7a                	cmp    $0x7a,%al
f011327f:	75 48                	jne    f01132c9 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0113281:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113284:	8a 00                	mov    (%eax),%al
f0113286:	3c 64                	cmp    $0x64,%al
f0113288:	75 3f                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f011328a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011328d:	8a 10                	mov    (%eax),%dl
f011328f:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0113295:	38 c2                	cmp    %al,%dl
f0113297:	75 30                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f0113299:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011329c:	8a 00                	mov    (%eax),%al
f011329e:	3c 65                	cmp    $0x65,%al
f01132a0:	75 27                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f01132a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132a5:	8a 10                	mov    (%eax),%dl
f01132a7:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01132ad:	38 c2                	cmp    %al,%dl
f01132af:	75 18                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f01132b1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01132b4:	8a 00                	mov    (%eax),%al
f01132b6:	3c 66                	cmp    $0x66,%al
f01132b8:	75 0f                	jne    f01132c9 <test_copy_paste_chunk+0x562>
f01132ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f01132bd:	8a 10                	mov    (%eax),%dl
f01132bf:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01132c5:	38 c2                	cmp    %al,%dl
f01132c7:	74 21                	je     f01132ea <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01132c9:	83 ec 04             	sub    $0x4,%esp
f01132cc:	68 04 76 13 f0       	push   $0xf0137604
f01132d1:	68 45 02 00 00       	push   $0x245
f01132d6:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01132db:	e8 de d0 fe ff       	call   f01003be <_warn>
f01132e0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01132ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132ee:	74 04                	je     f01132f4 <test_copy_paste_chunk+0x58d>
f01132f0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01132f4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f01132fb:	83 ec 0c             	sub    $0xc,%esp
f01132fe:	68 3e 76 13 f0       	push   $0xf013763e
f0113303:	e8 29 db fe ff       	call   f0100e31 <cprintf>
f0113308:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f011330b:	83 ec 0c             	sub    $0xc,%esp
f011330e:	68 50 76 13 f0       	push   $0xf0137650
f0113313:	e8 19 db fe ff       	call   f0100e31 <cprintf>
f0113318:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f011331b:	83 ec 04             	sub    $0x4,%esp
f011331e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113324:	50                   	push   %eax
f0113325:	68 86 76 13 f0       	push   $0xf0137686
f011332a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113330:	50                   	push   %eax
f0113331:	e8 58 c0 01 00       	call   f012f38e <strcconcat>
f0113336:	83 c4 10             	add    $0x10,%esp
f0113339:	83 ec 0c             	sub    $0xc,%esp
f011333c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113342:	50                   	push   %eax
f0113343:	e8 7b e8 fe ff       	call   f0101bc3 <execute_command>
f0113348:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f011334b:	83 ec 04             	sub    $0x4,%esp
f011334e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113354:	50                   	push   %eax
f0113355:	68 90 76 13 f0       	push   $0xf0137690
f011335a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113360:	50                   	push   %eax
f0113361:	e8 28 c0 01 00       	call   f012f38e <strcconcat>
f0113366:	83 c4 10             	add    $0x10,%esp
f0113369:	83 ec 0c             	sub    $0xc,%esp
f011336c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113372:	50                   	push   %eax
f0113373:	e8 4b e8 fe ff       	call   f0101bc3 <execute_command>
f0113378:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f011337b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113381:	bb 09 7c 13 f0       	mov    $0xf0137c09,%ebx
f0113386:	ba 0f 00 00 00       	mov    $0xf,%edx
f011338b:	89 c7                	mov    %eax,%edi
f011338d:	89 de                	mov    %ebx,%esi
f011338f:	89 d1                	mov    %edx,%ecx
f0113391:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113393:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113399:	b9 55 00 00 00       	mov    $0x55,%ecx
f011339e:	b0 00                	mov    $0x0,%al
f01133a0:	89 d7                	mov    %edx,%edi
f01133a2:	f3 aa                	rep stos %al,%es:(%edi)
f01133a4:	83 ec 0c             	sub    $0xc,%esp
f01133a7:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01133ad:	50                   	push   %eax
f01133ae:	e8 10 e8 fe ff       	call   f0101bc3 <execute_command>
f01133b3:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01133b6:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01133bc:	bb 6d 7c 13 f0       	mov    $0xf0137c6d,%ebx
f01133c1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133c6:	89 c7                	mov    %eax,%edi
f01133c8:	89 de                	mov    %ebx,%esi
f01133ca:	89 d1                	mov    %edx,%ecx
f01133cc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133ce:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01133d4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133d9:	b0 00                	mov    $0x0,%al
f01133db:	89 d7                	mov    %edx,%edi
f01133dd:	f3 aa                	rep stos %al,%es:(%edi)
f01133df:	83 ec 0c             	sub    $0xc,%esp
f01133e2:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01133e8:	50                   	push   %eax
f01133e9:	e8 d5 e7 fe ff       	call   f0101bc3 <execute_command>
f01133ee:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01133f1:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01133f7:	bb d1 7c 13 f0       	mov    $0xf0137cd1,%ebx
f01133fc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113401:	89 c7                	mov    %eax,%edi
f0113403:	89 de                	mov    %ebx,%esi
f0113405:	89 d1                	mov    %edx,%ecx
f0113407:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113409:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011340f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113414:	b0 00                	mov    $0x0,%al
f0113416:	89 d7                	mov    %edx,%edi
f0113418:	f3 aa                	rep stos %al,%es:(%edi)
f011341a:	83 ec 0c             	sub    $0xc,%esp
f011341d:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113423:	50                   	push   %eax
f0113424:	e8 9a e7 fe ff       	call   f0101bc3 <execute_command>
f0113429:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011342c:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113432:	bb 35 7d 13 f0       	mov    $0xf0137d35,%ebx
f0113437:	ba 0f 00 00 00       	mov    $0xf,%edx
f011343c:	89 c7                	mov    %eax,%edi
f011343e:	89 de                	mov    %ebx,%esi
f0113440:	89 d1                	mov    %edx,%ecx
f0113442:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113444:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011344a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011344f:	b0 00                	mov    $0x0,%al
f0113451:	89 d7                	mov    %edx,%edi
f0113453:	f3 aa                	rep stos %al,%es:(%edi)
f0113455:	83 ec 0c             	sub    $0xc,%esp
f0113458:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011345e:	50                   	push   %eax
f011345f:	e8 5f e7 fe ff       	call   f0101bc3 <execute_command>
f0113464:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113467:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011346d:	bb 99 7d 13 f0       	mov    $0xf0137d99,%ebx
f0113472:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113477:	89 c7                	mov    %eax,%edi
f0113479:	89 de                	mov    %ebx,%esi
f011347b:	89 d1                	mov    %edx,%ecx
f011347d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011347f:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113485:	b9 55 00 00 00       	mov    $0x55,%ecx
f011348a:	b0 00                	mov    $0x0,%al
f011348c:	89 d7                	mov    %edx,%edi
f011348e:	f3 aa                	rep stos %al,%es:(%edi)
f0113490:	83 ec 0c             	sub    $0xc,%esp
f0113493:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113499:	50                   	push   %eax
f011349a:	e8 24 e7 fe ff       	call   f0101bc3 <execute_command>
f011349f:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01134a2:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01134a8:	bb fd 7d 13 f0       	mov    $0xf0137dfd,%ebx
f01134ad:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134b2:	89 c7                	mov    %eax,%edi
f01134b4:	89 de                	mov    %ebx,%esi
f01134b6:	89 d1                	mov    %edx,%ecx
f01134b8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134ba:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01134c0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134c5:	b0 00                	mov    $0x0,%al
f01134c7:	89 d7                	mov    %edx,%edi
f01134c9:	f3 aa                	rep stos %al,%es:(%edi)
f01134cb:	83 ec 0c             	sub    $0xc,%esp
f01134ce:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01134d4:	50                   	push   %eax
f01134d5:	e8 e9 e6 fe ff       	call   f0101bc3 <execute_command>
f01134da:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01134dd:	83 ec 04             	sub    $0x4,%esp
f01134e0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134e6:	50                   	push   %eax
f01134e7:	68 9a 76 13 f0       	push   $0xf013769a
f01134ec:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134f2:	50                   	push   %eax
f01134f3:	e8 96 be 01 00       	call   f012f38e <strcconcat>
f01134f8:	83 c4 10             	add    $0x10,%esp
f01134fb:	83 ec 0c             	sub    $0xc,%esp
f01134fe:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113504:	50                   	push   %eax
f0113505:	e8 b9 e6 fe ff       	call   f0101bc3 <execute_command>
f011350a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011350d:	83 ec 04             	sub    $0x4,%esp
f0113510:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113516:	50                   	push   %eax
f0113517:	68 a4 76 13 f0       	push   $0xf01376a4
f011351c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113522:	50                   	push   %eax
f0113523:	e8 66 be 01 00       	call   f012f38e <strcconcat>
f0113528:	83 c4 10             	add    $0x10,%esp
f011352b:	83 ec 0c             	sub    $0xc,%esp
f011352e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113534:	50                   	push   %eax
f0113535:	e8 89 e6 fe ff       	call   f0101bc3 <execute_command>
f011353a:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011353d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113543:	bb 61 7e 13 f0       	mov    $0xf0137e61,%ebx
f0113548:	ba 0f 00 00 00       	mov    $0xf,%edx
f011354d:	89 c7                	mov    %eax,%edi
f011354f:	89 de                	mov    %ebx,%esi
f0113551:	89 d1                	mov    %edx,%ecx
f0113553:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113555:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011355b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113560:	b0 00                	mov    $0x0,%al
f0113562:	89 d7                	mov    %edx,%edi
f0113564:	f3 aa                	rep stos %al,%es:(%edi)
f0113566:	83 ec 0c             	sub    $0xc,%esp
f0113569:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011356f:	50                   	push   %eax
f0113570:	e8 4e e6 fe ff       	call   f0101bc3 <execute_command>
f0113575:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113578:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011357e:	bb c5 7e 13 f0       	mov    $0xf0137ec5,%ebx
f0113583:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113588:	89 c7                	mov    %eax,%edi
f011358a:	89 de                	mov    %ebx,%esi
f011358c:	89 d1                	mov    %edx,%ecx
f011358e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113590:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113596:	b9 55 00 00 00       	mov    $0x55,%ecx
f011359b:	b0 00                	mov    $0x0,%al
f011359d:	89 d7                	mov    %edx,%edi
f011359f:	f3 aa                	rep stos %al,%es:(%edi)
f01135a1:	83 ec 0c             	sub    $0xc,%esp
f01135a4:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135aa:	50                   	push   %eax
f01135ab:	e8 13 e6 fe ff       	call   f0101bc3 <execute_command>
f01135b0:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01135b3:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135b9:	bb 29 7f 13 f0       	mov    $0xf0137f29,%ebx
f01135be:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135c3:	89 c7                	mov    %eax,%edi
f01135c5:	89 de                	mov    %ebx,%esi
f01135c7:	89 d1                	mov    %edx,%ecx
f01135c9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135cb:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01135d1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135d6:	b0 00                	mov    $0x0,%al
f01135d8:	89 d7                	mov    %edx,%edi
f01135da:	f3 aa                	rep stos %al,%es:(%edi)
f01135dc:	83 ec 0c             	sub    $0xc,%esp
f01135df:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135e5:	50                   	push   %eax
f01135e6:	e8 d8 e5 fe ff       	call   f0101bc3 <execute_command>
f01135eb:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01135ee:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01135f5:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01135fc:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113603:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011360a:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113611:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113618:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011361f:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113626:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011362d:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113634:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011363b:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113642:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113645:	8a 00                	mov    (%eax),%al
f0113647:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011364d:	e8 6e 93 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113652:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113655:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113658:	89 d0                	mov    %edx,%eax
f011365a:	01 c0                	add    %eax,%eax
f011365c:	01 d0                	add    %edx,%eax
f011365e:	01 c0                	add    %eax,%eax
f0113660:	50                   	push   %eax
f0113661:	68 00 00 40 00       	push   $0x400000
f0113666:	68 00 00 20 00       	push   $0x200000
f011366b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011366e:	e8 16 55 ff ff       	call   f0108b89 <copy_paste_chunk>
f0113673:	83 c4 10             	add    $0x10,%esp
f0113676:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113679:	e8 42 93 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011367e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113681:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113688:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011368c:	75 08                	jne    f0113696 <test_copy_paste_chunk+0x92f>
f011368e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113691:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113694:	74 2b                	je     f01136c1 <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113696:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113699:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011369c:	83 ec 0c             	sub    $0xc,%esp
f011369f:	50                   	push   %eax
f01136a0:	ff 75 80             	pushl  -0x80(%ebp)
f01136a3:	68 b0 76 13 f0       	push   $0xf01376b0
f01136a8:	68 75 02 00 00       	push   $0x275
f01136ad:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01136b2:	e8 07 cd fe ff       	call   f01003be <_warn>
f01136b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01136ba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01136c1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136c5:	74 04                	je     f01136cb <test_copy_paste_chunk+0x964>
f01136c7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136cb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01136d2:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01136d9:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01136dc:	83 ec 08             	sub    $0x8,%esp
f01136df:	6a 01                	push   $0x1
f01136e1:	6a 07                	push   $0x7
f01136e3:	6a 07                	push   $0x7
f01136e5:	6a 07                	push   $0x7
f01136e7:	6a 07                	push   $0x7
f01136e9:	6a 01                	push   $0x1
f01136eb:	68 00 20 00 00       	push   $0x2000
f01136f0:	68 00 00 40 00       	push   $0x400000
f01136f5:	68 00 00 20 00       	push   $0x200000
f01136fa:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136fd:	e8 22 36 00 00       	call   f0116d24 <CCP>
f0113702:	83 c4 30             	add    $0x30,%esp
f0113705:	83 f8 01             	cmp    $0x1,%eax
f0113708:	74 2b                	je     f0113735 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011370a:	83 ec 04             	sub    $0x4,%esp
f011370d:	68 04 77 13 f0       	push   $0xf0137704
f0113712:	68 7e 02 00 00       	push   $0x27e
f0113717:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011371c:	e8 9d cc fe ff       	call   f01003be <_warn>
f0113721:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113724:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011372b:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113732:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113735:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113739:	74 04                	je     f011373f <test_copy_paste_chunk+0x9d8>
f011373b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011373f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113746:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113749:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011374c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011374f:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113752:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113755:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113758:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011375b:	8a 00                	mov    (%eax),%al
f011375d:	3c 61                	cmp    $0x61,%al
f011375f:	75 69                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f0113761:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113764:	8a 00                	mov    (%eax),%al
f0113766:	3c 61                	cmp    $0x61,%al
f0113768:	75 60                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f011376a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011376d:	8a 00                	mov    (%eax),%al
f011376f:	3c 79                	cmp    $0x79,%al
f0113771:	75 57                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f0113773:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113776:	8a 00                	mov    (%eax),%al
f0113778:	3c 62                	cmp    $0x62,%al
f011377a:	75 4e                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f011377c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011377f:	8a 00                	mov    (%eax),%al
f0113781:	3c 63                	cmp    $0x63,%al
f0113783:	75 45                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f0113785:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113788:	8a 00                	mov    (%eax),%al
f011378a:	3c 7a                	cmp    $0x7a,%al
f011378c:	75 3c                	jne    f01137ca <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011378e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113791:	8a 00                	mov    (%eax),%al
f0113793:	3c 77                	cmp    $0x77,%al
f0113795:	75 33                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f0113797:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011379a:	8a 00                	mov    (%eax),%al
f011379c:	3c 64                	cmp    $0x64,%al
f011379e:	75 2a                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f01137a0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01137a3:	8a 00                	mov    (%eax),%al
f01137a5:	3c 65                	cmp    $0x65,%al
f01137a7:	75 21                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f01137a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137ac:	8a 00                	mov    (%eax),%al
f01137ae:	3c 65                	cmp    $0x65,%al
f01137b0:	75 18                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f01137b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01137b5:	8a 00                	mov    (%eax),%al
f01137b7:	3c 66                	cmp    $0x66,%al
f01137b9:	75 0f                	jne    f01137ca <test_copy_paste_chunk+0xa63>
f01137bb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01137be:	8a 10                	mov    (%eax),%dl
f01137c0:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01137c6:	38 c2                	cmp    %al,%dl
f01137c8:	74 21                	je     f01137eb <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01137ca:	83 ec 04             	sub    $0x4,%esp
f01137cd:	68 04 76 13 f0       	push   $0xf0137604
f01137d2:	68 8c 02 00 00       	push   $0x28c
f01137d7:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01137dc:	e8 dd cb fe ff       	call   f01003be <_warn>
f01137e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01137eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137ef:	74 04                	je     f01137f5 <test_copy_paste_chunk+0xa8e>
f01137f1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137f5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01137fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137ff:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113802:	e8 b9 91 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113807:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011380a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011380d:	89 c2                	mov    %eax,%edx
f011380f:	01 d2                	add    %edx,%edx
f0113811:	01 d0                	add    %edx,%eax
f0113813:	50                   	push   %eax
f0113814:	68 00 08 20 00       	push   $0x200800
f0113819:	68 00 08 40 00       	push   $0x400800
f011381e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113821:	e8 63 53 ff ff       	call   f0108b89 <copy_paste_chunk>
f0113826:	83 c4 10             	add    $0x10,%esp
f0113829:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011382c:	e8 8f 91 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113831:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113834:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113838:	75 08                	jne    f0113842 <test_copy_paste_chunk+0xadb>
f011383a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011383d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113840:	74 2b                	je     f011386d <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113842:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113845:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113848:	83 ec 0c             	sub    $0xc,%esp
f011384b:	50                   	push   %eax
f011384c:	ff 75 80             	pushl  -0x80(%ebp)
f011384f:	68 b0 76 13 f0       	push   $0xf01376b0
f0113854:	68 9c 02 00 00       	push   $0x29c
f0113859:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011385e:	e8 5b cb fe ff       	call   f01003be <_warn>
f0113863:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113866:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011386d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113871:	74 04                	je     f0113877 <test_copy_paste_chunk+0xb10>
f0113873:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113877:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011387e:	83 ec 08             	sub    $0x8,%esp
f0113881:	6a 01                	push   $0x1
f0113883:	6a 07                	push   $0x7
f0113885:	6a 07                	push   $0x7
f0113887:	6a 07                	push   $0x7
f0113889:	6a 07                	push   $0x7
f011388b:	6a 01                	push   $0x1
f011388d:	68 00 20 00 00       	push   $0x2000
f0113892:	68 00 00 20 00       	push   $0x200000
f0113897:	68 00 00 40 00       	push   $0x400000
f011389c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011389f:	e8 80 34 00 00       	call   f0116d24 <CCP>
f01138a4:	83 c4 30             	add    $0x30,%esp
f01138a7:	83 f8 01             	cmp    $0x1,%eax
f01138aa:	74 21                	je     f01138cd <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01138ac:	83 ec 04             	sub    $0x4,%esp
f01138af:	68 50 77 13 f0       	push   $0xf0137750
f01138b4:	68 a4 02 00 00       	push   $0x2a4
f01138b9:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01138be:	e8 fb ca fe ff       	call   f01003be <_warn>
f01138c3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138c6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01138cd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138d1:	74 04                	je     f01138d7 <test_copy_paste_chunk+0xb70>
f01138d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138d7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01138de:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138e1:	8a 00                	mov    (%eax),%al
f01138e3:	3c 61                	cmp    $0x61,%al
f01138e5:	75 69                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f01138e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138ea:	8a 00                	mov    (%eax),%al
f01138ec:	3c 61                	cmp    $0x61,%al
f01138ee:	75 60                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f01138f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138f3:	8a 00                	mov    (%eax),%al
f01138f5:	3c 79                	cmp    $0x79,%al
f01138f7:	75 57                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f01138f9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138fc:	8a 00                	mov    (%eax),%al
f01138fe:	3c 62                	cmp    $0x62,%al
f0113900:	75 4e                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f0113902:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113905:	8a 00                	mov    (%eax),%al
f0113907:	3c 7a                	cmp    $0x7a,%al
f0113909:	75 45                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f011390b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011390e:	8a 00                	mov    (%eax),%al
f0113910:	3c 7a                	cmp    $0x7a,%al
f0113912:	75 3c                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113914:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113917:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113919:	3c 64                	cmp    $0x64,%al
f011391b:	75 33                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011391d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113920:	8a 00                	mov    (%eax),%al
f0113922:	3c 64                	cmp    $0x64,%al
f0113924:	75 2a                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f0113926:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113929:	8a 00                	mov    (%eax),%al
f011392b:	3c 65                	cmp    $0x65,%al
f011392d:	75 21                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f011392f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113932:	8a 00                	mov    (%eax),%al
f0113934:	3c 78                	cmp    $0x78,%al
f0113936:	75 18                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f0113938:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011393b:	8a 00                	mov    (%eax),%al
f011393d:	3c 66                	cmp    $0x66,%al
f011393f:	75 0f                	jne    f0113950 <test_copy_paste_chunk+0xbe9>
f0113941:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113944:	8a 10                	mov    (%eax),%dl
f0113946:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011394c:	38 c2                	cmp    %al,%dl
f011394e:	74 21                	je     f0113971 <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113950:	83 ec 04             	sub    $0x4,%esp
f0113953:	68 04 76 13 f0       	push   $0xf0137604
f0113958:	68 ad 02 00 00       	push   $0x2ad
f011395d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113962:	e8 57 ca fe ff       	call   f01003be <_warn>
f0113967:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011396a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113971:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113975:	74 04                	je     f011397b <test_copy_paste_chunk+0xc14>
f0113977:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011397b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113982:	83 ec 0c             	sub    $0xc,%esp
f0113985:	68 9b 77 13 f0       	push   $0xf013779b
f011398a:	e8 a2 d4 fe ff       	call   f0100e31 <cprintf>
f011398f:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113992:	83 ec 0c             	sub    $0xc,%esp
f0113995:	68 ac 77 13 f0       	push   $0xf01377ac
f011399a:	e8 92 d4 fe ff       	call   f0100e31 <cprintf>
f011399f:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01139a2:	83 ec 04             	sub    $0x4,%esp
f01139a5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139ab:	50                   	push   %eax
f01139ac:	68 e0 77 13 f0       	push   $0xf01377e0
f01139b1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139b7:	50                   	push   %eax
f01139b8:	e8 d1 b9 01 00       	call   f012f38e <strcconcat>
f01139bd:	83 c4 10             	add    $0x10,%esp
f01139c0:	83 ec 0c             	sub    $0xc,%esp
f01139c3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139c9:	50                   	push   %eax
f01139ca:	e8 f4 e1 fe ff       	call   f0101bc3 <execute_command>
f01139cf:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01139d2:	83 ec 04             	sub    $0x4,%esp
f01139d5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139db:	50                   	push   %eax
f01139dc:	68 ea 77 13 f0       	push   $0xf01377ea
f01139e1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139e7:	50                   	push   %eax
f01139e8:	e8 a1 b9 01 00       	call   f012f38e <strcconcat>
f01139ed:	83 c4 10             	add    $0x10,%esp
f01139f0:	83 ec 0c             	sub    $0xc,%esp
f01139f3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139f9:	50                   	push   %eax
f01139fa:	e8 c4 e1 fe ff       	call   f0101bc3 <execute_command>
f01139ff:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113a02:	83 ec 04             	sub    $0x4,%esp
f0113a05:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a0b:	50                   	push   %eax
f0113a0c:	68 f4 77 13 f0       	push   $0xf01377f4
f0113a11:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113a17:	50                   	push   %eax
f0113a18:	e8 71 b9 01 00       	call   f012f38e <strcconcat>
f0113a1d:	83 c4 10             	add    $0x10,%esp
f0113a20:	83 ec 0c             	sub    $0xc,%esp
f0113a23:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a29:	50                   	push   %eax
f0113a2a:	e8 94 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a2f:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113a32:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a38:	bb 8d 7f 13 f0       	mov    $0xf0137f8d,%ebx
f0113a3d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a42:	89 c7                	mov    %eax,%edi
f0113a44:	89 de                	mov    %ebx,%esi
f0113a46:	89 d1                	mov    %edx,%ecx
f0113a48:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a4a:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113a50:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a55:	b0 00                	mov    $0x0,%al
f0113a57:	89 d7                	mov    %edx,%edi
f0113a59:	f3 aa                	rep stos %al,%es:(%edi)
f0113a5b:	83 ec 0c             	sub    $0xc,%esp
f0113a5e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a64:	50                   	push   %eax
f0113a65:	e8 59 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a6a:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113a6d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a73:	bb f1 7f 13 f0       	mov    $0xf0137ff1,%ebx
f0113a78:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a7d:	89 c7                	mov    %eax,%edi
f0113a7f:	89 de                	mov    %ebx,%esi
f0113a81:	89 d1                	mov    %edx,%ecx
f0113a83:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a85:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113a8b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a90:	b0 00                	mov    $0x0,%al
f0113a92:	89 d7                	mov    %edx,%edi
f0113a94:	f3 aa                	rep stos %al,%es:(%edi)
f0113a96:	83 ec 0c             	sub    $0xc,%esp
f0113a99:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a9f:	50                   	push   %eax
f0113aa0:	e8 1e e1 fe ff       	call   f0101bc3 <execute_command>
f0113aa5:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113aa8:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113aae:	bb 55 80 13 f0       	mov    $0xf0138055,%ebx
f0113ab3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ab8:	89 c7                	mov    %eax,%edi
f0113aba:	89 de                	mov    %ebx,%esi
f0113abc:	89 d1                	mov    %edx,%ecx
f0113abe:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ac0:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113ac6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113acb:	b0 00                	mov    $0x0,%al
f0113acd:	89 d7                	mov    %edx,%edi
f0113acf:	f3 aa                	rep stos %al,%es:(%edi)
f0113ad1:	83 ec 0c             	sub    $0xc,%esp
f0113ad4:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113ada:	50                   	push   %eax
f0113adb:	e8 e3 e0 fe ff       	call   f0101bc3 <execute_command>
f0113ae0:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ae3:	e8 d8 8e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113ae8:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113aeb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113aee:	89 d0                	mov    %edx,%eax
f0113af0:	01 c0                	add    %eax,%eax
f0113af2:	01 d0                	add    %edx,%eax
f0113af4:	c1 e0 02             	shl    $0x2,%eax
f0113af7:	50                   	push   %eax
f0113af8:	68 00 00 90 00       	push   $0x900000
f0113afd:	68 00 00 80 00       	push   $0x800000
f0113b02:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b05:	e8 7f 50 ff ff       	call   f0108b89 <copy_paste_chunk>
f0113b0a:	83 c4 10             	add    $0x10,%esp
f0113b0d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b13:	e8 a8 8e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113b18:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113b1b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113b22:	75 0b                	jne    f0113b2f <test_copy_paste_chunk+0xdc8>
f0113b24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b27:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b2a:	83 f8 03             	cmp    $0x3,%eax
f0113b2d:	74 2e                	je     f0113b5d <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113b2f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b32:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b35:	83 ec 0c             	sub    $0xc,%esp
f0113b38:	50                   	push   %eax
f0113b39:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113b3f:	68 b0 76 13 f0       	push   $0xf01376b0
f0113b44:	68 cb 02 00 00       	push   $0x2cb
f0113b49:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113b4e:	e8 6b c8 fe ff       	call   f01003be <_warn>
f0113b53:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b56:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b5d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b61:	74 04                	je     f0113b67 <test_copy_paste_chunk+0xe00>
f0113b63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b67:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113b6e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113b75:	83 ec 08             	sub    $0x8,%esp
f0113b78:	6a 01                	push   $0x1
f0113b7a:	6a 07                	push   $0x7
f0113b7c:	6a 07                	push   $0x7
f0113b7e:	6a 07                	push   $0x7
f0113b80:	6a 07                	push   $0x7
f0113b82:	6a 01                	push   $0x1
f0113b84:	68 00 30 00 00       	push   $0x3000
f0113b89:	68 00 00 90 00       	push   $0x900000
f0113b8e:	68 00 00 80 00       	push   $0x800000
f0113b93:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b96:	e8 89 31 00 00       	call   f0116d24 <CCP>
f0113b9b:	83 c4 30             	add    $0x30,%esp
f0113b9e:	83 f8 01             	cmp    $0x1,%eax
f0113ba1:	74 28                	je     f0113bcb <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113ba3:	83 ec 04             	sub    $0x4,%esp
f0113ba6:	68 50 77 13 f0       	push   $0xf0137750
f0113bab:	68 d4 02 00 00       	push   $0x2d4
f0113bb0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113bb5:	e8 04 c8 fe ff       	call   f01003be <_warn>
f0113bba:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113bbd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113bc4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113bcb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113bcf:	74 04                	je     f0113bd5 <test_copy_paste_chunk+0xe6e>
f0113bd1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bd5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113bdc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113be0:	0f 84 9e 00 00 00    	je     f0113c84 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113be6:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113bed:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113bf4:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113bfb:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113c02:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113c09:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113c10:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c13:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113c16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c19:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113c1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c1f:	8a 00                	mov    (%eax),%al
f0113c21:	3c 61                	cmp    $0x61,%al
f0113c23:	75 2d                	jne    f0113c52 <test_copy_paste_chunk+0xeeb>
f0113c25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c28:	8a 00                	mov    (%eax),%al
f0113c2a:	3c 61                	cmp    $0x61,%al
f0113c2c:	75 24                	jne    f0113c52 <test_copy_paste_chunk+0xeeb>
f0113c2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c31:	8a 00                	mov    (%eax),%al
f0113c33:	3c 79                	cmp    $0x79,%al
f0113c35:	75 1b                	jne    f0113c52 <test_copy_paste_chunk+0xeeb>
f0113c37:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113c3a:	8a 00                	mov    (%eax),%al
f0113c3c:	3c 62                	cmp    $0x62,%al
f0113c3e:	75 12                	jne    f0113c52 <test_copy_paste_chunk+0xeeb>
f0113c40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113c43:	8a 00                	mov    (%eax),%al
f0113c45:	3c 63                	cmp    $0x63,%al
f0113c47:	75 09                	jne    f0113c52 <test_copy_paste_chunk+0xeeb>
f0113c49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c4c:	8a 00                	mov    (%eax),%al
f0113c4e:	3c 7a                	cmp    $0x7a,%al
f0113c50:	74 21                	je     f0113c73 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113c52:	83 ec 04             	sub    $0x4,%esp
f0113c55:	68 04 76 13 f0       	push   $0xf0137604
f0113c5a:	68 e6 02 00 00       	push   $0x2e6
f0113c5f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113c64:	e8 55 c7 fe ff       	call   f01003be <_warn>
f0113c69:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c6c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113c73:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c77:	74 04                	je     f0113c7d <test_copy_paste_chunk+0xf16>
f0113c79:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113c7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c84:	e8 37 8d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113c89:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113c8c:	6a 00                	push   $0x0
f0113c8e:	6a 02                	push   $0x2
f0113c90:	68 00 10 90 00       	push   $0x901000
f0113c95:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c98:	e8 c9 2b 00 00       	call   f0116866 <SB>
f0113c9d:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113ca0:	6a 00                	push   $0x0
f0113ca2:	6a 02                	push   $0x2
f0113ca4:	68 00 20 90 00       	push   $0x902000
f0113ca9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cac:	e8 b5 2b 00 00       	call   f0116866 <SB>
f0113cb1:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113cb4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cb7:	c1 e0 03             	shl    $0x3,%eax
f0113cba:	50                   	push   %eax
f0113cbb:	68 00 f0 bf 00       	push   $0xbff000
f0113cc0:	68 00 10 90 00       	push   $0x901000
f0113cc5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cc8:	e8 bc 4e ff ff       	call   f0108b89 <copy_paste_chunk>
f0113ccd:	83 c4 10             	add    $0x10,%esp
f0113cd0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113cd6:	e8 e5 8c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113cdb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113cde:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113ce5:	75 0b                	jne    f0113cf2 <test_copy_paste_chunk+0xf8b>
f0113ce7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113cea:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113ced:	83 f8 03             	cmp    $0x3,%eax
f0113cf0:	74 2e                	je     f0113d20 <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113cf2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113cf5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113cf8:	83 ec 0c             	sub    $0xc,%esp
f0113cfb:	50                   	push   %eax
f0113cfc:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113d02:	68 b0 76 13 f0       	push   $0xf01376b0
f0113d07:	68 f6 02 00 00       	push   $0x2f6
f0113d0c:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113d11:	e8 a8 c6 fe ff       	call   f01003be <_warn>
f0113d16:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d19:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113d20:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d24:	74 04                	je     f0113d2a <test_copy_paste_chunk+0xfc3>
f0113d26:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d2a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113d31:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113d38:	83 ec 08             	sub    $0x8,%esp
f0113d3b:	6a 01                	push   $0x1
f0113d3d:	6a 07                	push   $0x7
f0113d3f:	6a 03                	push   $0x3
f0113d41:	6a 07                	push   $0x7
f0113d43:	6a 03                	push   $0x3
f0113d45:	6a 01                	push   $0x1
f0113d47:	68 00 20 00 00       	push   $0x2000
f0113d4c:	68 00 f0 bf 00       	push   $0xbff000
f0113d51:	68 00 10 90 00       	push   $0x901000
f0113d56:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d59:	e8 c6 2f 00 00       	call   f0116d24 <CCP>
f0113d5e:	83 c4 30             	add    $0x30,%esp
f0113d61:	83 f8 01             	cmp    $0x1,%eax
f0113d64:	74 28                	je     f0113d8e <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113d66:	83 ec 04             	sub    $0x4,%esp
f0113d69:	68 50 77 13 f0       	push   $0xf0137750
f0113d6e:	68 ff 02 00 00       	push   $0x2ff
f0113d73:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113d78:	e8 41 c6 fe ff       	call   f01003be <_warn>
f0113d7d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d80:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113d87:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113d8e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d92:	74 04                	je     f0113d98 <test_copy_paste_chunk+0x1031>
f0113d94:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d98:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113d9f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113da3:	74 72                	je     f0113e17 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113da5:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113dac:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113db3:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113dba:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113dc1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dc4:	8a 00                	mov    (%eax),%al
f0113dc6:	3c 62                	cmp    $0x62,%al
f0113dc8:	75 1b                	jne    f0113de5 <test_copy_paste_chunk+0x107e>
f0113dca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113dcd:	8a 00                	mov    (%eax),%al
f0113dcf:	3c 62                	cmp    $0x62,%al
f0113dd1:	75 12                	jne    f0113de5 <test_copy_paste_chunk+0x107e>
f0113dd3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113dd6:	8a 00                	mov    (%eax),%al
f0113dd8:	3c 7a                	cmp    $0x7a,%al
f0113dda:	75 09                	jne    f0113de5 <test_copy_paste_chunk+0x107e>
f0113ddc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113ddf:	8a 00                	mov    (%eax),%al
f0113de1:	3c 7a                	cmp    $0x7a,%al
f0113de3:	74 21                	je     f0113e06 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113de5:	83 ec 04             	sub    $0x4,%esp
f0113de8:	68 04 76 13 f0       	push   $0xf0137604
f0113ded:	68 0b 03 00 00       	push   $0x30b
f0113df2:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113df7:	e8 c2 c5 fe ff       	call   f01003be <_warn>
f0113dfc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113dff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113e06:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e0a:	74 04                	je     f0113e10 <test_copy_paste_chunk+0x10a9>
f0113e0c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e10:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113e17:	83 ec 0c             	sub    $0xc,%esp
f0113e1a:	68 fe 77 13 f0       	push   $0xf01377fe
f0113e1f:	e8 0d d0 fe ff       	call   f0100e31 <cprintf>
f0113e24:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113e27:	83 ec 08             	sub    $0x8,%esp
f0113e2a:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113e2d:	68 10 78 13 f0       	push   $0xf0137810
f0113e32:	e8 fa cf fe ff       	call   f0100e31 <cprintf>
f0113e37:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113e3a:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113e3e:	75 10                	jne    f0113e50 <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113e40:	83 ec 0c             	sub    $0xc,%esp
f0113e43:	68 44 78 13 f0       	push   $0xf0137844
f0113e48:	e8 e4 cf fe ff       	call   f0100e31 <cprintf>
f0113e4d:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113e50:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0113e55:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113e58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e5b:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113e5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113e63:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113e66:	5b                   	pop    %ebx
f0113e67:	5e                   	pop    %esi
f0113e68:	5f                   	pop    %edi
f0113e69:	5d                   	pop    %ebp
f0113e6a:	c3                   	ret    

f0113e6b <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113e6b:	55                   	push   %ebp
f0113e6c:	89 e5                	mov    %esp,%ebp
f0113e6e:	57                   	push   %edi
f0113e6f:	56                   	push   %esi
f0113e70:	53                   	push   %ebx
f0113e71:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113e77:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e7d:	bb 10 75 13 f0       	mov    $0xf0137510,%ebx
f0113e82:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113e87:	89 c7                	mov    %eax,%edi
f0113e89:	89 de                	mov    %ebx,%esi
f0113e8b:	89 d1                	mov    %edx,%ecx
f0113e8d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113e8f:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113e95:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113e9a:	b0 00                	mov    $0x0,%al
f0113e9c:	89 d7                	mov    %edx,%edi
f0113e9e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113ea0:	6a 00                	push   $0x0
f0113ea2:	6a 0a                	push   $0xa
f0113ea4:	6a 14                	push   $0x14
f0113ea6:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113eac:	50                   	push   %eax
f0113ead:	e8 fb 4d ff ff       	call   f0108cad <env_create>
f0113eb2:	83 c4 10             	add    $0x10,%esp
f0113eb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113eb8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ebb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113ec1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113ec4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ec7:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113ecd:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113ed0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113ed3:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113ed6:	83 ec 0c             	sub    $0xc,%esp
f0113ed9:	ff 75 cc             	pushl  -0x34(%ebp)
f0113edc:	e8 0f 2e 00 00       	call   f0116cf0 <ClearUserSpace>
f0113ee1:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113ee4:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113eeb:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113ef2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113ef9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113efd:	83 ec 0c             	sub    $0xc,%esp
f0113f00:	68 bc 80 13 f0       	push   $0xf01380bc
f0113f05:	e8 27 cf fe ff       	call   f0100e31 <cprintf>
f0113f0a:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113f0d:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0113f14:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113f1b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f1e:	8a 00                	mov    (%eax),%al
f0113f20:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113f26:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f29:	8a 00                	mov    (%eax),%al
f0113f2b:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f31:	e8 8a 8a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113f36:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113f39:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f3c:	89 d0                	mov    %edx,%eax
f0113f3e:	01 c0                	add    %eax,%eax
f0113f40:	01 d0                	add    %edx,%eax
f0113f42:	01 c0                	add    %eax,%eax
f0113f44:	83 ec 0c             	sub    $0xc,%esp
f0113f47:	6a 02                	push   $0x2
f0113f49:	50                   	push   %eax
f0113f4a:	68 00 40 10 f0       	push   $0xf0104000
f0113f4f:	68 00 00 10 f0       	push   $0xf0100000
f0113f54:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f57:	e8 47 4c ff ff       	call   f0108ba3 <share_chunk>
f0113f5c:	83 c4 20             	add    $0x20,%esp
f0113f5f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f62:	e8 59 8a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0113f67:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113f6a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113f6e:	75 08                	jne    f0113f78 <test_share_chunk+0x10d>
f0113f70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f73:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113f76:	74 28                	je     f0113fa0 <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113f78:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f7b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f7e:	83 ec 0c             	sub    $0xc,%esp
f0113f81:	50                   	push   %eax
f0113f82:	ff 75 b0             	pushl  -0x50(%ebp)
f0113f85:	68 e8 80 13 f0       	push   $0xf01380e8
f0113f8a:	68 47 03 00 00       	push   $0x347
f0113f8f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113f94:	e8 25 c4 fe ff       	call   f01003be <_warn>
f0113f99:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f9c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fa0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fa4:	74 04                	je     f0113faa <test_share_chunk+0x13f>
f0113fa6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113faa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113fae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fb1:	c1 e0 03             	shl    $0x3,%eax
f0113fb4:	83 ec 08             	sub    $0x8,%esp
f0113fb7:	68 fd 00 00 00       	push   $0xfd
f0113fbc:	6a 07                	push   $0x7
f0113fbe:	6a 03                	push   $0x3
f0113fc0:	6a 07                	push   $0x7
f0113fc2:	6a 03                	push   $0x3
f0113fc4:	6a 01                	push   $0x1
f0113fc6:	50                   	push   %eax
f0113fc7:	68 00 40 10 f0       	push   $0xf0104000
f0113fcc:	68 00 00 10 f0       	push   $0xf0100000
f0113fd1:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fd4:	e8 4b 2d 00 00       	call   f0116d24 <CCP>
f0113fd9:	83 c4 30             	add    $0x30,%esp
f0113fdc:	85 c0                	test   %eax,%eax
f0113fde:	75 1e                	jne    f0113ffe <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fe0:	83 ec 04             	sub    $0x4,%esp
f0113fe3:	68 44 81 13 f0       	push   $0xf0138144
f0113fe8:	68 4f 03 00 00       	push   $0x34f
f0113fed:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0113ff2:	e8 c7 c3 fe ff       	call   f01003be <_warn>
f0113ff7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ffa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ffe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114002:	74 04                	je     f0114008 <test_share_chunk+0x19d>
f0114004:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0114008:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011400b:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f011400e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114011:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0114014:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114017:	8a 00                	mov    (%eax),%al
f0114019:	3c 41                	cmp    $0x41,%al
f011401b:	75 09                	jne    f0114026 <test_share_chunk+0x1bb>
f011401d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114020:	8a 00                	mov    (%eax),%al
f0114022:	3c 42                	cmp    $0x42,%al
f0114024:	74 1e                	je     f0114044 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114026:	83 ec 04             	sub    $0x4,%esp
f0114029:	68 8c 81 13 f0       	push   $0xf013818c
f011402e:	68 59 03 00 00       	push   $0x359
f0114033:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114038:	e8 81 c3 fe ff       	call   f01003be <_warn>
f011403d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114040:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114044:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114048:	74 04                	je     f011404e <test_share_chunk+0x1e3>
f011404a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011404e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0114052:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0114058:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011405b:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f011405d:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0114063:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114066:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0114068:	83 ec 0c             	sub    $0xc,%esp
f011406b:	68 c1 81 13 f0       	push   $0xf01381c1
f0114070:	e8 bc cd fe ff       	call   f0100e31 <cprintf>
f0114075:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0114078:	83 ec 0c             	sub    $0xc,%esp
f011407b:	68 d0 81 13 f0       	push   $0xf01381d0
f0114080:	e8 ac cd fe ff       	call   f0100e31 <cprintf>
f0114085:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114088:	e8 33 89 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011408d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114090:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114093:	c1 e0 05             	shl    $0x5,%eax
f0114096:	83 ec 0c             	sub    $0xc,%esp
f0114099:	68 02 0e 00 00       	push   $0xe02
f011409e:	50                   	push   %eax
f011409f:	68 00 00 00 40       	push   $0x40000000
f01140a4:	68 00 00 00 f0       	push   $0xf0000000
f01140a9:	ff 75 cc             	pushl  -0x34(%ebp)
f01140ac:	e8 f2 4a ff ff       	call   f0108ba3 <share_chunk>
f01140b1:	83 c4 20             	add    $0x20,%esp
f01140b4:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01140b7:	e8 04 89 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01140bc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01140bf:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01140c3:	75 1f                	jne    f01140e4 <test_share_chunk+0x279>
f01140c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140c8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140cb:	89 c1                	mov    %eax,%ecx
f01140cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140d0:	c1 e0 05             	shl    $0x5,%eax
f01140d3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01140d6:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01140dd:	99                   	cltd   
f01140de:	f7 fb                	idiv   %ebx
f01140e0:	39 c1                	cmp    %eax,%ecx
f01140e2:	74 28                	je     f011410c <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01140e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140e7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140ea:	83 ec 0c             	sub    $0xc,%esp
f01140ed:	50                   	push   %eax
f01140ee:	ff 75 a8             	pushl  -0x58(%ebp)
f01140f1:	68 0c 82 13 f0       	push   $0xf013820c
f01140f6:	68 71 03 00 00       	push   $0x371
f01140fb:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114100:	e8 b9 c2 fe ff       	call   f01003be <_warn>
f0114105:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114108:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011410c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114110:	74 04                	je     f0114116 <test_share_chunk+0x2ab>
f0114112:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114116:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011411a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114121:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114124:	c1 e0 05             	shl    $0x5,%eax
f0114127:	83 ec 08             	sub    $0x8,%esp
f011412a:	6a 02                	push   $0x2
f011412c:	6a 07                	push   $0x7
f011412e:	6a 03                	push   $0x3
f0114130:	68 07 0e 00 00       	push   $0xe07
f0114135:	68 03 0e 00 00       	push   $0xe03
f011413a:	6a ff                	push   $0xffffffff
f011413c:	50                   	push   %eax
f011413d:	68 00 00 00 40       	push   $0x40000000
f0114142:	68 00 00 00 f0       	push   $0xf0000000
f0114147:	ff 75 cc             	pushl  -0x34(%ebp)
f011414a:	e8 d5 2b 00 00       	call   f0116d24 <CCP>
f011414f:	83 c4 30             	add    $0x30,%esp
f0114152:	85 c0                	test   %eax,%eax
f0114154:	75 25                	jne    f011417b <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114156:	83 ec 04             	sub    $0x4,%esp
f0114159:	68 44 81 13 f0       	push   $0xf0138144
f011415e:	68 7a 03 00 00       	push   $0x37a
f0114163:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114168:	e8 51 c2 fe ff       	call   f01003be <_warn>
f011416d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114170:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114174:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011417b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011417e:	89 d0                	mov    %edx,%eax
f0114180:	01 c0                	add    %eax,%eax
f0114182:	01 d0                	add    %edx,%eax
f0114184:	c1 e0 02             	shl    $0x2,%eax
f0114187:	83 ec 08             	sub    $0x8,%esp
f011418a:	6a 02                	push   $0x2
f011418c:	6a 07                	push   $0x7
f011418e:	6a 03                	push   $0x3
f0114190:	68 07 0e 00 00       	push   $0xe07
f0114195:	68 03 0e 00 00       	push   $0xe03
f011419a:	6a 02                	push   $0x2
f011419c:	50                   	push   %eax
f011419d:	68 00 00 00 40       	push   $0x40000000
f01141a2:	68 00 00 00 f0       	push   $0xf0000000
f01141a7:	ff 75 cc             	pushl  -0x34(%ebp)
f01141aa:	e8 75 2b 00 00       	call   f0116d24 <CCP>
f01141af:	83 c4 30             	add    $0x30,%esp
f01141b2:	85 c0                	test   %eax,%eax
f01141b4:	75 1e                	jne    f01141d4 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141b6:	83 ec 04             	sub    $0x4,%esp
f01141b9:	68 44 81 13 f0       	push   $0xf0138144
f01141be:	68 81 03 00 00       	push   $0x381
f01141c3:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01141c8:	e8 f1 c1 fe ff       	call   f01003be <_warn>
f01141cd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141d0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141d4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141d8:	74 04                	je     f01141de <test_share_chunk+0x373>
f01141da:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141de:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01141e2:	b8 5c e6 2d f0       	mov    $0xf02de65c,%eax
f01141e7:	05 00 00 00 10       	add    $0x10000000,%eax
f01141ec:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01141ef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01141f2:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01141f7:	83 ec 08             	sub    $0x8,%esp
f01141fa:	6a 02                	push   $0x2
f01141fc:	6a 07                	push   $0x7
f01141fe:	6a 03                	push   $0x3
f0114200:	68 07 0e 00 00       	push   $0xe07
f0114205:	68 03 0e 00 00       	push   $0xe03
f011420a:	6a 02                	push   $0x2
f011420c:	50                   	push   %eax
f011420d:	68 00 00 0a 40       	push   $0x400a0000
f0114212:	68 00 00 0a f0       	push   $0xf00a0000
f0114217:	ff 75 cc             	pushl  -0x34(%ebp)
f011421a:	e8 05 2b 00 00       	call   f0116d24 <CCP>
f011421f:	83 c4 30             	add    $0x30,%esp
f0114222:	85 c0                	test   %eax,%eax
f0114224:	75 1e                	jne    f0114244 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114226:	83 ec 04             	sub    $0x4,%esp
f0114229:	68 44 81 13 f0       	push   $0xf0138144
f011422e:	68 8b 03 00 00       	push   $0x38b
f0114233:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114238:	e8 81 c1 fe ff       	call   f01003be <_warn>
f011423d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114240:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114244:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114248:	74 04                	je     f011424e <test_share_chunk+0x3e3>
f011424a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011424e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114252:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114256:	0f 84 a4 00 00 00    	je     f0114300 <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f011425c:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0114263:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114266:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0114269:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0114270:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114273:	8a 00                	mov    (%eax),%al
f0114275:	3c 41                	cmp    $0x41,%al
f0114277:	75 09                	jne    f0114282 <test_share_chunk+0x417>
f0114279:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011427c:	8a 00                	mov    (%eax),%al
f011427e:	3c 41                	cmp    $0x41,%al
f0114280:	74 1e                	je     f01142a0 <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114282:	83 ec 04             	sub    $0x4,%esp
f0114285:	68 8c 81 13 f0       	push   $0xf013818c
f011428a:	68 98 03 00 00       	push   $0x398
f011428f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114294:	e8 25 c1 fe ff       	call   f01003be <_warn>
f0114299:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011429c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142a4:	74 04                	je     f01142aa <test_share_chunk+0x43f>
f01142a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01142ae:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01142b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142b8:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01142bb:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f01142c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142c5:	8a 00                	mov    (%eax),%al
f01142c7:	3c 43                	cmp    $0x43,%al
f01142c9:	75 09                	jne    f01142d4 <test_share_chunk+0x469>
f01142cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142ce:	8a 00                	mov    (%eax),%al
f01142d0:	3c 43                	cmp    $0x43,%al
f01142d2:	74 1e                	je     f01142f2 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01142d4:	83 ec 04             	sub    $0x4,%esp
f01142d7:	68 8c 81 13 f0       	push   $0xf013818c
f01142dc:	68 a3 03 00 00       	push   $0x3a3
f01142e1:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01142e6:	e8 d3 c0 fe ff       	call   f01003be <_warn>
f01142eb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142f6:	74 04                	je     f01142fc <test_share_chunk+0x491>
f01142f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114300:	83 ec 0c             	sub    $0xc,%esp
f0114303:	68 9b 77 13 f0       	push   $0xf013779b
f0114308:	e8 24 cb fe ff       	call   f0100e31 <cprintf>
f011430d:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0114310:	83 ec 0c             	sub    $0xc,%esp
f0114313:	68 5c 82 13 f0       	push   $0xf013825c
f0114318:	e8 14 cb fe ff       	call   f0100e31 <cprintf>
f011431d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114320:	e8 9b 86 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114325:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114328:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011432b:	89 d0                	mov    %edx,%eax
f011432d:	c1 e0 03             	shl    $0x3,%eax
f0114330:	01 d0                	add    %edx,%eax
f0114332:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0114339:	01 d0                	add    %edx,%eax
f011433b:	c1 e0 03             	shl    $0x3,%eax
f011433e:	83 ec 0c             	sub    $0xc,%esp
f0114341:	6a 06                	push   $0x6
f0114343:	50                   	push   %eax
f0114344:	6a 00                	push   $0x0
f0114346:	68 00 00 00 40       	push   $0x40000000
f011434b:	ff 75 cc             	pushl  -0x34(%ebp)
f011434e:	e8 50 48 ff ff       	call   f0108ba3 <share_chunk>
f0114353:	83 c4 20             	add    $0x20,%esp
f0114356:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114359:	e8 62 86 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011435e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114361:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114365:	75 0b                	jne    f0114372 <test_share_chunk+0x507>
f0114367:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011436a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011436d:	83 f8 01             	cmp    $0x1,%eax
f0114370:	74 28                	je     f011439a <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114372:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114375:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114378:	83 ec 0c             	sub    $0xc,%esp
f011437b:	50                   	push   %eax
f011437c:	ff 75 a0             	pushl  -0x60(%ebp)
f011437f:	68 0c 82 13 f0       	push   $0xf013820c
f0114384:	68 b9 03 00 00       	push   $0x3b9
f0114389:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011438e:	e8 2b c0 fe ff       	call   f01003be <_warn>
f0114393:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114396:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011439a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011439e:	74 04                	je     f01143a4 <test_share_chunk+0x539>
f01143a0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143a4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01143a8:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143b2:	05 00 80 02 00       	add    $0x28000,%eax
f01143b7:	c1 e0 02             	shl    $0x2,%eax
f01143ba:	83 ec 08             	sub    $0x8,%esp
f01143bd:	6a 02                	push   $0x2
f01143bf:	6a 07                	push   $0x7
f01143c1:	6a 03                	push   $0x3
f01143c3:	6a 07                	push   $0x7
f01143c5:	6a 07                	push   $0x7
f01143c7:	6a ff                	push   $0xffffffff
f01143c9:	50                   	push   %eax
f01143ca:	6a 00                	push   $0x0
f01143cc:	68 00 00 00 40       	push   $0x40000000
f01143d1:	ff 75 cc             	pushl  -0x34(%ebp)
f01143d4:	e8 4b 29 00 00       	call   f0116d24 <CCP>
f01143d9:	83 c4 30             	add    $0x30,%esp
f01143dc:	85 c0                	test   %eax,%eax
f01143de:	75 25                	jne    f0114405 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143e0:	83 ec 04             	sub    $0x4,%esp
f01143e3:	68 44 81 13 f0       	push   $0xf0138144
f01143e8:	68 c2 03 00 00       	push   $0x3c2
f01143ed:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01143f2:	e8 c7 bf fe ff       	call   f01003be <_warn>
f01143f7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01143fe:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114405:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114408:	89 d0                	mov    %edx,%eax
f011440a:	01 c0                	add    %eax,%eax
f011440c:	01 d0                	add    %edx,%eax
f011440e:	c1 e0 02             	shl    $0x2,%eax
f0114411:	83 ec 08             	sub    $0x8,%esp
f0114414:	6a 02                	push   $0x2
f0114416:	6a 07                	push   $0x7
f0114418:	6a 03                	push   $0x3
f011441a:	6a 07                	push   $0x7
f011441c:	6a 07                	push   $0x7
f011441e:	6a 03                	push   $0x3
f0114420:	50                   	push   %eax
f0114421:	6a 00                	push   $0x0
f0114423:	68 00 00 00 40       	push   $0x40000000
f0114428:	ff 75 cc             	pushl  -0x34(%ebp)
f011442b:	e8 f4 28 00 00       	call   f0116d24 <CCP>
f0114430:	83 c4 30             	add    $0x30,%esp
f0114433:	85 c0                	test   %eax,%eax
f0114435:	75 1e                	jne    f0114455 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114437:	83 ec 04             	sub    $0x4,%esp
f011443a:	68 44 81 13 f0       	push   $0xf0138144
f011443f:	68 c9 03 00 00       	push   $0x3c9
f0114444:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114449:	e8 70 bf fe ff       	call   f01003be <_warn>
f011444e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114451:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114455:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114459:	74 04                	je     f011445f <test_share_chunk+0x5f4>
f011445b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011445f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114463:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114466:	89 d0                	mov    %edx,%eax
f0114468:	01 c0                	add    %eax,%eax
f011446a:	01 d0                	add    %edx,%eax
f011446c:	c1 e0 02             	shl    $0x2,%eax
f011446f:	f7 d8                	neg    %eax
f0114471:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114476:	83 ec 08             	sub    $0x8,%esp
f0114479:	6a 02                	push   $0x2
f011447b:	6a 07                	push   $0x7
f011447d:	6a 03                	push   $0x3
f011447f:	6a 07                	push   $0x7
f0114481:	6a 07                	push   $0x7
f0114483:	6a 02                	push   $0x2
f0114485:	50                   	push   %eax
f0114486:	68 00 30 00 00       	push   $0x3000
f011448b:	68 00 30 00 40       	push   $0x40003000
f0114490:	ff 75 cc             	pushl  -0x34(%ebp)
f0114493:	e8 8c 28 00 00       	call   f0116d24 <CCP>
f0114498:	83 c4 30             	add    $0x30,%esp
f011449b:	85 c0                	test   %eax,%eax
f011449d:	75 1e                	jne    f01144bd <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011449f:	83 ec 04             	sub    $0x4,%esp
f01144a2:	68 44 81 13 f0       	push   $0xf0138144
f01144a7:	68 d1 03 00 00       	push   $0x3d1
f01144ac:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01144b1:	e8 08 bf fe ff       	call   f01003be <_warn>
f01144b6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144bd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144c1:	74 04                	je     f01144c7 <test_share_chunk+0x65c>
f01144c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144c7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01144cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144ce:	c1 e0 02             	shl    $0x2,%eax
f01144d1:	83 ec 08             	sub    $0x8,%esp
f01144d4:	6a 02                	push   $0x2
f01144d6:	6a 07                	push   $0x7
f01144d8:	6a 03                	push   $0x3
f01144da:	6a 07                	push   $0x7
f01144dc:	6a 07                	push   $0x7
f01144de:	6a 03                	push   $0x3
f01144e0:	50                   	push   %eax
f01144e1:	68 00 00 0a 00       	push   $0xa0000
f01144e6:	68 00 00 0a 40       	push   $0x400a0000
f01144eb:	ff 75 cc             	pushl  -0x34(%ebp)
f01144ee:	e8 31 28 00 00       	call   f0116d24 <CCP>
f01144f3:	83 c4 30             	add    $0x30,%esp
f01144f6:	85 c0                	test   %eax,%eax
f01144f8:	75 1e                	jne    f0114518 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144fa:	83 ec 04             	sub    $0x4,%esp
f01144fd:	68 44 81 13 f0       	push   $0xf0138144
f0114502:	68 d9 03 00 00       	push   $0x3d9
f0114507:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011450c:	e8 ad be fe ff       	call   f01003be <_warn>
f0114511:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114514:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114518:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011451c:	74 04                	je     f0114522 <test_share_chunk+0x6b7>
f011451e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114522:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114526:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011452a:	0f 84 92 00 00 00    	je     f01145c2 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f0114530:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114537:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011453e:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114545:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011454c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011454f:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114552:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114559:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114560:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114563:	8a 00                	mov    (%eax),%al
f0114565:	3c 41                	cmp    $0x41,%al
f0114567:	75 2d                	jne    f0114596 <test_share_chunk+0x72b>
f0114569:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011456c:	8a 00                	mov    (%eax),%al
f011456e:	3c 41                	cmp    $0x41,%al
f0114570:	75 24                	jne    f0114596 <test_share_chunk+0x72b>
f0114572:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114575:	8a 00                	mov    (%eax),%al
f0114577:	3c 41                	cmp    $0x41,%al
f0114579:	75 1b                	jne    f0114596 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011457b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011457e:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114580:	3c 44                	cmp    $0x44,%al
f0114582:	75 12                	jne    f0114596 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114584:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114587:	8a 00                	mov    (%eax),%al
f0114589:	3c 44                	cmp    $0x44,%al
f011458b:	75 09                	jne    f0114596 <test_share_chunk+0x72b>
f011458d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114590:	8a 00                	mov    (%eax),%al
f0114592:	3c 44                	cmp    $0x44,%al
f0114594:	74 1e                	je     f01145b4 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114596:	83 ec 04             	sub    $0x4,%esp
f0114599:	68 8c 81 13 f0       	push   $0xf013818c
f011459e:	68 eb 03 00 00       	push   $0x3eb
f01145a3:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01145a8:	e8 11 be fe ff       	call   f01003be <_warn>
f01145ad:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01145b0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01145b4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145b8:	74 04                	je     f01145be <test_share_chunk+0x753>
f01145ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01145be:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01145c2:	83 ec 0c             	sub    $0xc,%esp
f01145c5:	68 fe 77 13 f0       	push   $0xf01377fe
f01145ca:	e8 62 c8 fe ff       	call   f0100e31 <cprintf>
f01145cf:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01145d2:	83 ec 0c             	sub    $0xc,%esp
f01145d5:	68 98 82 13 f0       	push   $0xf0138298
f01145da:	e8 52 c8 fe ff       	call   f0100e31 <cprintf>
f01145df:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01145e2:	e8 d9 83 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01145e7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01145ea:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145ed:	89 d0                	mov    %edx,%eax
f01145ef:	01 c0                	add    %eax,%eax
f01145f1:	01 d0                	add    %edx,%eax
f01145f3:	01 c0                	add    %eax,%eax
f01145f5:	01 d0                	add    %edx,%eax
f01145f7:	83 ec 0c             	sub    $0xc,%esp
f01145fa:	6a 04                	push   $0x4
f01145fc:	50                   	push   %eax
f01145fd:	68 00 fc 3f 00       	push   $0x3ffc00
f0114602:	68 00 fc 09 00       	push   $0x9fc00
f0114607:	ff 75 cc             	pushl  -0x34(%ebp)
f011460a:	e8 94 45 ff ff       	call   f0108ba3 <share_chunk>
f011460f:	83 c4 20             	add    $0x20,%esp
f0114612:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114615:	e8 a6 83 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011461a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011461d:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114621:	75 0b                	jne    f011462e <test_share_chunk+0x7c3>
f0114623:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114626:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114629:	83 f8 01             	cmp    $0x1,%eax
f011462c:	74 28                	je     f0114656 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011462e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114631:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114634:	83 ec 0c             	sub    $0xc,%esp
f0114637:	50                   	push   %eax
f0114638:	ff 75 8c             	pushl  -0x74(%ebp)
f011463b:	68 0c 82 13 f0       	push   $0xf013820c
f0114640:	68 01 04 00 00       	push   $0x401
f0114645:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011464a:	e8 6f bd fe ff       	call   f01003be <_warn>
f011464f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114652:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114656:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011465a:	74 04                	je     f0114660 <test_share_chunk+0x7f5>
f011465c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114660:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114664:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011466b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011466e:	89 d0                	mov    %edx,%eax
f0114670:	01 c0                	add    %eax,%eax
f0114672:	01 d0                	add    %edx,%eax
f0114674:	c1 e0 02             	shl    $0x2,%eax
f0114677:	83 ec 08             	sub    $0x8,%esp
f011467a:	6a 02                	push   $0x2
f011467c:	6a 07                	push   $0x7
f011467e:	6a 07                	push   $0x7
f0114680:	6a 07                	push   $0x7
f0114682:	6a 05                	push   $0x5
f0114684:	6a ff                	push   $0xffffffff
f0114686:	50                   	push   %eax
f0114687:	68 00 f0 3f 00       	push   $0x3ff000
f011468c:	68 00 f0 09 00       	push   $0x9f000
f0114691:	ff 75 cc             	pushl  -0x34(%ebp)
f0114694:	e8 8b 26 00 00       	call   f0116d24 <CCP>
f0114699:	83 c4 30             	add    $0x30,%esp
f011469c:	85 c0                	test   %eax,%eax
f011469e:	75 25                	jne    f01146c5 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146a0:	83 ec 04             	sub    $0x4,%esp
f01146a3:	68 44 81 13 f0       	push   $0xf0138144
f01146a8:	68 0a 04 00 00       	push   $0x40a
f01146ad:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01146b2:	e8 07 bd fe ff       	call   f01003be <_warn>
f01146b7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01146be:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01146c5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146c9:	74 04                	je     f01146cf <test_share_chunk+0x864>
f01146cb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01146d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146d6:	c1 e0 02             	shl    $0x2,%eax
f01146d9:	83 ec 08             	sub    $0x8,%esp
f01146dc:	6a 02                	push   $0x2
f01146de:	6a 07                	push   $0x7
f01146e0:	6a 07                	push   $0x7
f01146e2:	6a 07                	push   $0x7
f01146e4:	6a 05                	push   $0x5
f01146e6:	6a 03                	push   $0x3
f01146e8:	50                   	push   %eax
f01146e9:	68 00 f0 3f 00       	push   $0x3ff000
f01146ee:	68 00 f0 09 00       	push   $0x9f000
f01146f3:	ff 75 cc             	pushl  -0x34(%ebp)
f01146f6:	e8 29 26 00 00       	call   f0116d24 <CCP>
f01146fb:	83 c4 30             	add    $0x30,%esp
f01146fe:	85 c0                	test   %eax,%eax
f0114700:	75 1e                	jne    f0114720 <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114702:	83 ec 04             	sub    $0x4,%esp
f0114705:	68 44 81 13 f0       	push   $0xf0138144
f011470a:	68 13 04 00 00       	push   $0x413
f011470f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114714:	e8 a5 bc fe ff       	call   f01003be <_warn>
f0114719:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011471c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114720:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114724:	74 04                	je     f011472a <test_share_chunk+0x8bf>
f0114726:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011472a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011472e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114731:	c1 e0 03             	shl    $0x3,%eax
f0114734:	83 ec 08             	sub    $0x8,%esp
f0114737:	6a 02                	push   $0x2
f0114739:	6a 07                	push   $0x7
f011473b:	6a 07                	push   $0x7
f011473d:	6a 07                	push   $0x7
f011473f:	6a 05                	push   $0x5
f0114741:	6a 04                	push   $0x4
f0114743:	50                   	push   %eax
f0114744:	68 00 00 40 00       	push   $0x400000
f0114749:	68 00 00 0a 00       	push   $0xa0000
f011474e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114751:	e8 ce 25 00 00       	call   f0116d24 <CCP>
f0114756:	83 c4 30             	add    $0x30,%esp
f0114759:	85 c0                	test   %eax,%eax
f011475b:	75 1e                	jne    f011477b <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011475d:	83 ec 04             	sub    $0x4,%esp
f0114760:	68 44 81 13 f0       	push   $0xf0138144
f0114765:	68 1b 04 00 00       	push   $0x41b
f011476a:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011476f:	e8 4a bc fe ff       	call   f01003be <_warn>
f0114774:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114777:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011477b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011477f:	74 04                	je     f0114785 <test_share_chunk+0x91a>
f0114781:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114785:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114789:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011478d:	0f 84 b2 00 00 00    	je     f0114845 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f0114793:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011479a:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01147a1:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01147a8:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01147af:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01147b6:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01147bd:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01147c4:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01147cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147ce:	8a 00                	mov    (%eax),%al
f01147d0:	3c 44                	cmp    $0x44,%al
f01147d2:	75 45                	jne    f0114819 <test_share_chunk+0x9ae>
f01147d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01147d7:	8a 00                	mov    (%eax),%al
f01147d9:	3c 44                	cmp    $0x44,%al
f01147db:	75 3c                	jne    f0114819 <test_share_chunk+0x9ae>
f01147dd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01147e0:	8a 00                	mov    (%eax),%al
f01147e2:	3c 44                	cmp    $0x44,%al
f01147e4:	75 33                	jne    f0114819 <test_share_chunk+0x9ae>
f01147e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01147e9:	8a 00                	mov    (%eax),%al
f01147eb:	3c 44                	cmp    $0x44,%al
f01147ed:	75 2a                	jne    f0114819 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01147ef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147f2:	8a 10                	mov    (%eax),%dl
f01147f4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01147f7:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01147f9:	38 c2                	cmp    %al,%dl
f01147fb:	75 1c                	jne    f0114819 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01147fd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114800:	8a 10                	mov    (%eax),%dl
f0114802:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114805:	8a 00                	mov    (%eax),%al
f0114807:	38 c2                	cmp    %al,%dl
f0114809:	75 0e                	jne    f0114819 <test_share_chunk+0x9ae>
f011480b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011480e:	8a 10                	mov    (%eax),%dl
f0114810:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114813:	8a 00                	mov    (%eax),%al
f0114815:	38 c2                	cmp    %al,%dl
f0114817:	74 1e                	je     f0114837 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114819:	83 ec 04             	sub    $0x4,%esp
f011481c:	68 8c 81 13 f0       	push   $0xf013818c
f0114821:	68 30 04 00 00       	push   $0x430
f0114826:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011482b:	e8 8e bb fe ff       	call   f01003be <_warn>
f0114830:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114833:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114837:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011483b:	74 04                	je     f0114841 <test_share_chunk+0x9d6>
f011483d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114841:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114845:	83 ec 0c             	sub    $0xc,%esp
f0114848:	68 d0 82 13 f0       	push   $0xf01382d0
f011484d:	e8 df c5 fe ff       	call   f0100e31 <cprintf>
f0114852:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114855:	83 ec 08             	sub    $0x8,%esp
f0114858:	ff 75 e4             	pushl  -0x1c(%ebp)
f011485b:	68 e0 82 13 f0       	push   $0xf01382e0
f0114860:	e8 cc c5 fe ff       	call   f0100e31 <cprintf>
f0114865:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114868:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011486c:	75 10                	jne    f011487e <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011486e:	83 ec 0c             	sub    $0xc,%esp
f0114871:	68 10 83 13 f0       	push   $0xf0138310
f0114876:	e8 b6 c5 fe ff       	call   f0100e31 <cprintf>
f011487b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011487e:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0114883:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114886:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114889:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011488c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114891:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114894:	5b                   	pop    %ebx
f0114895:	5e                   	pop    %esi
f0114896:	5f                   	pop    %edi
f0114897:	5d                   	pop    %ebp
f0114898:	c3                   	ret    

f0114899 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114899:	55                   	push   %ebp
f011489a:	89 e5                	mov    %esp,%ebp
f011489c:	57                   	push   %edi
f011489d:	56                   	push   %esi
f011489e:	53                   	push   %ebx
f011489f:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01148a5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01148ab:	bb 10 75 13 f0       	mov    $0xf0137510,%ebx
f01148b0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01148b5:	89 c7                	mov    %eax,%edi
f01148b7:	89 de                	mov    %ebx,%esi
f01148b9:	89 d1                	mov    %edx,%ecx
f01148bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01148bd:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01148c3:	b9 23 00 00 00       	mov    $0x23,%ecx
f01148c8:	b0 00                	mov    $0x0,%al
f01148ca:	89 d7                	mov    %edx,%edi
f01148cc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01148ce:	6a 00                	push   $0x0
f01148d0:	6a 0a                	push   $0xa
f01148d2:	6a 14                	push   $0x14
f01148d4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01148da:	50                   	push   %eax
f01148db:	e8 cd 43 ff ff       	call   f0108cad <env_create>
f01148e0:	83 c4 10             	add    $0x10,%esp
f01148e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01148e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148e9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01148ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01148f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148f5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01148fb:	89 45 90             	mov    %eax,-0x70(%ebp)
f01148fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114901:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114904:	83 ec 0c             	sub    $0xc,%esp
f0114907:	ff 75 cc             	pushl  -0x34(%ebp)
f011490a:	e8 e1 23 00 00       	call   f0116cf0 <ClearUserSpace>
f011490f:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114912:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114919:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114920:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114927:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f011492b:	83 ec 0c             	sub    $0xc,%esp
f011492e:	68 4c 83 13 f0       	push   $0xf013834c
f0114933:	e8 f9 c4 fe ff       	call   f0100e31 <cprintf>
f0114938:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f011493b:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114942:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114949:	eb 03                	jmp    f011494e <test_allocate_chunk+0xb5>
f011494b:	ff 4d e4             	decl   -0x1c(%ebp)
f011494e:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114955:	76 09                	jbe    f0114960 <test_allocate_chunk+0xc7>
f0114957:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011495a:	8a 00                	mov    (%eax),%al
f011495c:	84 c0                	test   %al,%al
f011495e:	74 eb                	je     f011494b <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0114960:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114967:	75 06                	jne    f011496f <test_allocate_chunk+0xd6>
f0114969:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011496c:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f011496f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114972:	8a 00                	mov    (%eax),%al
f0114974:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011497a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011497d:	8a 00                	mov    (%eax),%al
f011497f:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0114985:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114988:	8a 00                	mov    (%eax),%al
f011498a:	0f be c0             	movsbl %al,%eax
f011498d:	83 ec 08             	sub    $0x8,%esp
f0114990:	50                   	push   %eax
f0114991:	68 76 83 13 f0       	push   $0xf0138376
f0114996:	e8 96 c4 fe ff       	call   f0100e31 <cprintf>
f011499b:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f011499e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01149a1:	8a 00                	mov    (%eax),%al
f01149a3:	0f be c0             	movsbl %al,%eax
f01149a6:	83 ec 08             	sub    $0x8,%esp
f01149a9:	50                   	push   %eax
f01149aa:	68 82 83 13 f0       	push   $0xf0138382
f01149af:	e8 7d c4 fe ff       	call   f0100e31 <cprintf>
f01149b4:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01149b7:	83 ec 08             	sub    $0x8,%esp
f01149ba:	68 00 f0 bf ef       	push   $0xefbff000
f01149bf:	ff 75 cc             	pushl  -0x34(%ebp)
f01149c2:	e8 90 22 00 00       	call   f0116c57 <GP>
f01149c7:	83 c4 10             	add    $0x10,%esp
f01149ca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149cd:	e8 ee 7f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01149d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01149d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149d8:	c1 e0 02             	shl    $0x2,%eax
f01149db:	6a 02                	push   $0x2
f01149dd:	50                   	push   %eax
f01149de:	68 00 f0 bf ef       	push   $0xefbff000
f01149e3:	ff 75 cc             	pushl  -0x34(%ebp)
f01149e6:	e8 d2 41 ff ff       	call   f0108bbd <allocate_chunk>
f01149eb:	83 c4 10             	add    $0x10,%esp
f01149ee:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149f1:	e8 ca 7f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01149f6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01149f9:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01149fd:	75 08                	jne    f0114a07 <test_allocate_chunk+0x16e>
f01149ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a02:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114a05:	74 2a                	je     f0114a31 <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114a07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a0a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a0d:	83 ec 08             	sub    $0x8,%esp
f0114a10:	6a 00                	push   $0x0
f0114a12:	50                   	push   %eax
f0114a13:	ff 75 b0             	pushl  -0x50(%ebp)
f0114a16:	68 90 83 13 f0       	push   $0xf0138390
f0114a1b:	68 70 04 00 00       	push   $0x470
f0114a20:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114a25:	e8 94 b9 fe ff       	call   f01003be <_warn>
f0114a2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a2d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114a31:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114a35:	74 04                	je     f0114a3b <test_allocate_chunk+0x1a2>
f0114a37:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114a3b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a3f:	e8 7c 7f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114a44:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114a47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a4a:	01 c0                	add    %eax,%eax
f0114a4c:	89 c1                	mov    %eax,%ecx
f0114a4e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a51:	89 d0                	mov    %edx,%eax
f0114a53:	c1 e0 02             	shl    $0x2,%eax
f0114a56:	01 d0                	add    %edx,%eax
f0114a58:	f7 d8                	neg    %eax
f0114a5a:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114a5f:	6a 02                	push   $0x2
f0114a61:	51                   	push   %ecx
f0114a62:	50                   	push   %eax
f0114a63:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a66:	e8 52 41 ff ff       	call   f0108bbd <allocate_chunk>
f0114a6b:	83 c4 10             	add    $0x10,%esp
f0114a6e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a71:	e8 4a 7f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114a76:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114a79:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114a7d:	75 08                	jne    f0114a87 <test_allocate_chunk+0x1ee>
f0114a7f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a82:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114a85:	74 2a                	je     f0114ab1 <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114a87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a8a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a8d:	83 ec 08             	sub    $0x8,%esp
f0114a90:	6a 00                	push   $0x0
f0114a92:	50                   	push   %eax
f0114a93:	ff 75 b0             	pushl  -0x50(%ebp)
f0114a96:	68 90 83 13 f0       	push   $0xf0138390
f0114a9b:	68 7e 04 00 00       	push   $0x47e
f0114aa0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114aa5:	e8 14 b9 fe ff       	call   f01003be <_warn>
f0114aaa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114aad:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114ab1:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ab5:	74 04                	je     f0114abb <test_allocate_chunk+0x222>
f0114ab7:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114abb:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114abf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ac2:	c1 e0 02             	shl    $0x2,%eax
f0114ac5:	83 ec 08             	sub    $0x8,%esp
f0114ac8:	6a 03                	push   $0x3
f0114aca:	6a 00                	push   $0x0
f0114acc:	6a 00                	push   $0x0
f0114ace:	68 ff 0f 00 00       	push   $0xfff
f0114ad3:	ff 75 b8             	pushl  -0x48(%ebp)
f0114ad6:	6a 01                	push   $0x1
f0114ad8:	50                   	push   %eax
f0114ad9:	68 00 f0 bf ef       	push   $0xefbff000
f0114ade:	6a 00                	push   $0x0
f0114ae0:	ff 75 cc             	pushl  -0x34(%ebp)
f0114ae3:	e8 3c 22 00 00       	call   f0116d24 <CCP>
f0114ae8:	83 c4 30             	add    $0x30,%esp
f0114aeb:	85 c0                	test   %eax,%eax
f0114aed:	75 1e                	jne    f0114b0d <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114aef:	83 ec 04             	sub    $0x4,%esp
f0114af2:	68 f8 83 13 f0       	push   $0xf01383f8
f0114af7:	68 86 04 00 00       	push   $0x486
f0114afc:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114b01:	e8 b8 b8 fe ff       	call   f01003be <_warn>
f0114b06:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b09:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114b0d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b11:	74 04                	je     f0114b17 <test_allocate_chunk+0x27e>
f0114b13:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114b17:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114b1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b1e:	8a 10                	mov    (%eax),%dl
f0114b20:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114b26:	38 c2                	cmp    %al,%dl
f0114b28:	75 0f                	jne    f0114b39 <test_allocate_chunk+0x2a0>
f0114b2a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b2d:	8a 10                	mov    (%eax),%dl
f0114b2f:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114b35:	38 c2                	cmp    %al,%dl
f0114b37:	74 1e                	je     f0114b57 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114b39:	83 ec 04             	sub    $0x4,%esp
f0114b3c:	68 44 84 13 f0       	push   $0xf0138444
f0114b41:	68 8e 04 00 00       	push   $0x48e
f0114b46:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114b4b:	e8 6e b8 fe ff       	call   f01003be <_warn>
f0114b50:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b53:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114b57:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b5b:	74 04                	je     f0114b61 <test_allocate_chunk+0x2c8>
f0114b5d:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114b61:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114b65:	83 ec 0c             	sub    $0xc,%esp
f0114b68:	68 c1 81 13 f0       	push   $0xf01381c1
f0114b6d:	e8 bf c2 fe ff       	call   f0100e31 <cprintf>
f0114b72:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114b75:	83 ec 0c             	sub    $0xc,%esp
f0114b78:	68 7c 84 13 f0       	push   $0xf013847c
f0114b7d:	e8 af c2 fe ff       	call   f0100e31 <cprintf>
f0114b82:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b85:	e8 36 7e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114b8a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114b8d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b90:	c1 e0 05             	shl    $0x5,%eax
f0114b93:	68 02 0e 00 00       	push   $0xe02
f0114b98:	50                   	push   %eax
f0114b99:	6a 00                	push   $0x0
f0114b9b:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b9e:	e8 1a 40 ff ff       	call   f0108bbd <allocate_chunk>
f0114ba3:	83 c4 10             	add    $0x10,%esp
f0114ba6:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114ba9:	e8 12 7e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114bae:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114bb1:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114bb5:	75 36                	jne    f0114bed <test_allocate_chunk+0x354>
f0114bb7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bba:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bbd:	89 c1                	mov    %eax,%ecx
f0114bbf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bc2:	c1 e0 05             	shl    $0x5,%eax
f0114bc5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114bc8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114bcf:	99                   	cltd   
f0114bd0:	f7 fe                	idiv   %esi
f0114bd2:	89 c3                	mov    %eax,%ebx
f0114bd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bd7:	c1 e0 05             	shl    $0x5,%eax
f0114bda:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114bdd:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114be4:	99                   	cltd   
f0114be5:	f7 fe                	idiv   %esi
f0114be7:	01 d8                	add    %ebx,%eax
f0114be9:	39 c1                	cmp    %eax,%ecx
f0114beb:	74 54                	je     f0114c41 <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114bed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bf0:	c1 e0 05             	shl    $0x5,%eax
f0114bf3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114bf6:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114bfd:	99                   	cltd   
f0114bfe:	f7 ff                	idiv   %edi
f0114c00:	89 c1                	mov    %eax,%ecx
f0114c02:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c05:	c1 e0 05             	shl    $0x5,%eax
f0114c08:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c0b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c12:	99                   	cltd   
f0114c13:	f7 fe                	idiv   %esi
f0114c15:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114c18:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c1b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c1e:	83 ec 08             	sub    $0x8,%esp
f0114c21:	52                   	push   %edx
f0114c22:	50                   	push   %eax
f0114c23:	ff 75 a8             	pushl  -0x58(%ebp)
f0114c26:	68 bc 84 13 f0       	push   $0xf01384bc
f0114c2b:	68 a3 04 00 00       	push   $0x4a3
f0114c30:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114c35:	e8 84 b7 fe ff       	call   f01003be <_warn>
f0114c3a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c3d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114c41:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c45:	74 04                	je     f0114c4b <test_allocate_chunk+0x3b2>
f0114c47:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114c4b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114c4f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114c56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c59:	c1 e0 05             	shl    $0x5,%eax
f0114c5c:	83 ec 08             	sub    $0x8,%esp
f0114c5f:	6a 03                	push   $0x3
f0114c61:	6a 00                	push   $0x0
f0114c63:	6a 00                	push   $0x0
f0114c65:	68 07 0e 00 00       	push   $0xe07
f0114c6a:	68 03 0e 00 00       	push   $0xe03
f0114c6f:	6a 01                	push   $0x1
f0114c71:	50                   	push   %eax
f0114c72:	6a 00                	push   $0x0
f0114c74:	6a 00                	push   $0x0
f0114c76:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c79:	e8 a6 20 00 00       	call   f0116d24 <CCP>
f0114c7e:	83 c4 30             	add    $0x30,%esp
f0114c81:	85 c0                	test   %eax,%eax
f0114c83:	75 25                	jne    f0114caa <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114c85:	83 ec 04             	sub    $0x4,%esp
f0114c88:	68 f8 83 13 f0       	push   $0xf01383f8
f0114c8d:	68 ac 04 00 00       	push   $0x4ac
f0114c92:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114c97:	e8 22 b7 fe ff       	call   f01003be <_warn>
f0114c9c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c9f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114ca3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114caa:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114cae:	74 04                	je     f0114cb4 <test_allocate_chunk+0x41b>
f0114cb0:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114cb4:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114cb8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114cbc:	74 5a                	je     f0114d18 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114cbe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cc1:	01 c0                	add    %eax,%eax
f0114cc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114cc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114cc9:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114ccc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ccf:	01 c0                	add    %eax,%eax
f0114cd1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114cd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114cd7:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114cda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114cdd:	8a 00                	mov    (%eax),%al
f0114cdf:	3c 4b                	cmp    $0x4b,%al
f0114ce1:	75 09                	jne    f0114cec <test_allocate_chunk+0x453>
f0114ce3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ce6:	8a 00                	mov    (%eax),%al
f0114ce8:	3c 4d                	cmp    $0x4d,%al
f0114cea:	74 1e                	je     f0114d0a <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114cec:	83 ec 04             	sub    $0x4,%esp
f0114cef:	68 44 84 13 f0       	push   $0xf0138444
f0114cf4:	68 ba 04 00 00       	push   $0x4ba
f0114cf9:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114cfe:	e8 bb b6 fe ff       	call   f01003be <_warn>
f0114d03:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114d06:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114d0a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d0e:	74 04                	je     f0114d14 <test_allocate_chunk+0x47b>
f0114d10:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114d14:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114d18:	83 ec 0c             	sub    $0xc,%esp
f0114d1b:	68 9b 77 13 f0       	push   $0xf013779b
f0114d20:	e8 0c c1 fe ff       	call   f0100e31 <cprintf>
f0114d25:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114d28:	83 ec 0c             	sub    $0xc,%esp
f0114d2b:	68 1c 85 13 f0       	push   $0xf013851c
f0114d30:	e8 fc c0 fe ff       	call   f0100e31 <cprintf>
f0114d35:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d38:	e8 83 7c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114d3d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114d40:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d43:	c1 e0 06             	shl    $0x6,%eax
f0114d46:	89 c2                	mov    %eax,%edx
f0114d48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d4b:	c1 e0 05             	shl    $0x5,%eax
f0114d4e:	6a 00                	push   $0x0
f0114d50:	52                   	push   %edx
f0114d51:	50                   	push   %eax
f0114d52:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d55:	e8 63 3e ff ff       	call   f0108bbd <allocate_chunk>
f0114d5a:	83 c4 10             	add    $0x10,%esp
f0114d5d:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d60:	e8 5b 7c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114d65:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114d68:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114d6c:	75 36                	jne    f0114da4 <test_allocate_chunk+0x50b>
f0114d6e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d71:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d74:	89 c1                	mov    %eax,%ecx
f0114d76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d79:	c1 e0 06             	shl    $0x6,%eax
f0114d7c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114d7f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114d86:	99                   	cltd   
f0114d87:	f7 ff                	idiv   %edi
f0114d89:	89 c3                	mov    %eax,%ebx
f0114d8b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d8e:	c1 e0 06             	shl    $0x6,%eax
f0114d91:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d94:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d9b:	99                   	cltd   
f0114d9c:	f7 fe                	idiv   %esi
f0114d9e:	01 d8                	add    %ebx,%eax
f0114da0:	39 c1                	cmp    %eax,%ecx
f0114da2:	74 54                	je     f0114df8 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114da4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114da7:	c1 e0 06             	shl    $0x6,%eax
f0114daa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114dad:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114db4:	99                   	cltd   
f0114db5:	f7 fb                	idiv   %ebx
f0114db7:	89 c1                	mov    %eax,%ecx
f0114db9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dbc:	c1 e0 06             	shl    $0x6,%eax
f0114dbf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114dc2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114dc9:	99                   	cltd   
f0114dca:	f7 ff                	idiv   %edi
f0114dcc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114dcf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dd2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114dd5:	83 ec 08             	sub    $0x8,%esp
f0114dd8:	52                   	push   %edx
f0114dd9:	50                   	push   %eax
f0114dda:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114ddd:	68 bc 84 13 f0       	push   $0xf01384bc
f0114de2:	68 d0 04 00 00       	push   $0x4d0
f0114de7:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114dec:	e8 cd b5 fe ff       	call   f01003be <_warn>
f0114df1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114df4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114df8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114dfc:	74 04                	je     f0114e02 <test_allocate_chunk+0x569>
f0114dfe:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114e02:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114e06:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e0d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e10:	c1 e0 06             	shl    $0x6,%eax
f0114e13:	89 c2                	mov    %eax,%edx
f0114e15:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e18:	c1 e0 05             	shl    $0x5,%eax
f0114e1b:	83 ec 08             	sub    $0x8,%esp
f0114e1e:	6a 03                	push   $0x3
f0114e20:	6a 00                	push   $0x0
f0114e22:	6a 00                	push   $0x0
f0114e24:	68 07 0e 00 00       	push   $0xe07
f0114e29:	6a 01                	push   $0x1
f0114e2b:	6a 01                	push   $0x1
f0114e2d:	52                   	push   %edx
f0114e2e:	50                   	push   %eax
f0114e2f:	6a 00                	push   $0x0
f0114e31:	ff 75 cc             	pushl  -0x34(%ebp)
f0114e34:	e8 eb 1e 00 00       	call   f0116d24 <CCP>
f0114e39:	83 c4 30             	add    $0x30,%esp
f0114e3c:	85 c0                	test   %eax,%eax
f0114e3e:	75 25                	jne    f0114e65 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e40:	83 ec 04             	sub    $0x4,%esp
f0114e43:	68 f8 83 13 f0       	push   $0xf01383f8
f0114e48:	68 d9 04 00 00       	push   $0x4d9
f0114e4d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114e52:	e8 67 b5 fe ff       	call   f01003be <_warn>
f0114e57:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114e5a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114e5e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114e65:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e69:	74 04                	je     f0114e6f <test_allocate_chunk+0x5d6>
f0114e6b:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114e6f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114e73:	83 ec 0c             	sub    $0xc,%esp
f0114e76:	68 fe 77 13 f0       	push   $0xf01377fe
f0114e7b:	e8 b1 bf fe ff       	call   f0100e31 <cprintf>
f0114e80:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114e83:	83 ec 0c             	sub    $0xc,%esp
f0114e86:	68 5c 85 13 f0       	push   $0xf013855c
f0114e8b:	e8 a1 bf fe ff       	call   f0100e31 <cprintf>
f0114e90:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114e93:	e8 28 7b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114e98:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114e9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e9e:	c1 e0 06             	shl    $0x6,%eax
f0114ea1:	68 06 0e 00 00       	push   $0xe06
f0114ea6:	50                   	push   %eax
f0114ea7:	68 00 00 00 80       	push   $0x80000000
f0114eac:	ff 75 cc             	pushl  -0x34(%ebp)
f0114eaf:	e8 09 3d ff ff       	call   f0108bbd <allocate_chunk>
f0114eb4:	83 c4 10             	add    $0x10,%esp
f0114eb7:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114eba:	e8 01 7b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0114ebf:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114ec2:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114ec6:	75 36                	jne    f0114efe <test_allocate_chunk+0x665>
f0114ec8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ecb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ece:	89 c1                	mov    %eax,%ecx
f0114ed0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ed3:	c1 e0 06             	shl    $0x6,%eax
f0114ed6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ed9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114ee0:	99                   	cltd   
f0114ee1:	f7 fb                	idiv   %ebx
f0114ee3:	89 c3                	mov    %eax,%ebx
f0114ee5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ee8:	c1 e0 06             	shl    $0x6,%eax
f0114eeb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114eee:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ef5:	99                   	cltd   
f0114ef6:	f7 fe                	idiv   %esi
f0114ef8:	01 d8                	add    %ebx,%eax
f0114efa:	39 c1                	cmp    %eax,%ecx
f0114efc:	74 54                	je     f0114f52 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114efe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f01:	c1 e0 06             	shl    $0x6,%eax
f0114f04:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f07:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114f0e:	99                   	cltd   
f0114f0f:	f7 ff                	idiv   %edi
f0114f11:	89 c1                	mov    %eax,%ecx
f0114f13:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f16:	c1 e0 06             	shl    $0x6,%eax
f0114f19:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f1c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f23:	99                   	cltd   
f0114f24:	f7 fb                	idiv   %ebx
f0114f26:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114f29:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f2c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f2f:	83 ec 08             	sub    $0x8,%esp
f0114f32:	52                   	push   %edx
f0114f33:	50                   	push   %eax
f0114f34:	ff 75 9c             	pushl  -0x64(%ebp)
f0114f37:	68 bc 84 13 f0       	push   $0xf01384bc
f0114f3c:	68 ef 04 00 00       	push   $0x4ef
f0114f41:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114f46:	e8 73 b4 fe ff       	call   f01003be <_warn>
f0114f4b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f4e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114f52:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f56:	74 04                	je     f0114f5c <test_allocate_chunk+0x6c3>
f0114f58:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114f5c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114f60:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114f67:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f6a:	c1 e0 06             	shl    $0x6,%eax
f0114f6d:	83 ec 08             	sub    $0x8,%esp
f0114f70:	6a 03                	push   $0x3
f0114f72:	6a 00                	push   $0x0
f0114f74:	6a 00                	push   $0x0
f0114f76:	68 07 0e 00 00       	push   $0xe07
f0114f7b:	68 07 0e 00 00       	push   $0xe07
f0114f80:	6a 01                	push   $0x1
f0114f82:	50                   	push   %eax
f0114f83:	68 00 00 00 80       	push   $0x80000000
f0114f88:	6a 00                	push   $0x0
f0114f8a:	ff 75 cc             	pushl  -0x34(%ebp)
f0114f8d:	e8 92 1d 00 00       	call   f0116d24 <CCP>
f0114f92:	83 c4 30             	add    $0x30,%esp
f0114f95:	85 c0                	test   %eax,%eax
f0114f97:	75 25                	jne    f0114fbe <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114f99:	83 ec 04             	sub    $0x4,%esp
f0114f9c:	68 f8 83 13 f0       	push   $0xf01383f8
f0114fa1:	68 f8 04 00 00       	push   $0x4f8
f0114fa6:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0114fab:	e8 0e b4 fe ff       	call   f01003be <_warn>
f0114fb0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114fb3:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114fb7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0114fbe:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114fc2:	74 04                	je     f0114fc8 <test_allocate_chunk+0x72f>
f0114fc4:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114fc8:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114fcc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114fd0:	74 6f                	je     f0115041 <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114fd2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114fd5:	01 c0                	add    %eax,%eax
f0114fd7:	05 00 00 00 80       	add    $0x80000000,%eax
f0114fdc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114fdf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114fe2:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114fe5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114fe8:	89 d0                	mov    %edx,%eax
f0114fea:	c1 e0 02             	shl    $0x2,%eax
f0114fed:	01 d0                	add    %edx,%eax
f0114fef:	01 c0                	add    %eax,%eax
f0114ff1:	01 d0                	add    %edx,%eax
f0114ff3:	01 c0                	add    %eax,%eax
f0114ff5:	05 00 00 00 80       	add    $0x80000000,%eax
f0114ffa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114ffd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115000:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0115003:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115006:	8a 00                	mov    (%eax),%al
f0115008:	3c 4b                	cmp    $0x4b,%al
f011500a:	75 09                	jne    f0115015 <test_allocate_chunk+0x77c>
f011500c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011500f:	8a 00                	mov    (%eax),%al
f0115011:	3c 4d                	cmp    $0x4d,%al
f0115013:	74 1e                	je     f0115033 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0115015:	83 ec 04             	sub    $0x4,%esp
f0115018:	68 44 84 13 f0       	push   $0xf0138444
f011501d:	68 06 05 00 00       	push   $0x506
f0115022:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115027:	e8 92 b3 fe ff       	call   f01003be <_warn>
f011502c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011502f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0115033:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115037:	74 04                	je     f011503d <test_allocate_chunk+0x7a4>
f0115039:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f011503d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0115041:	83 ec 0c             	sub    $0xc,%esp
f0115044:	68 d0 82 13 f0       	push   $0xf01382d0
f0115049:	e8 e3 bd fe ff       	call   f0100e31 <cprintf>
f011504e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0115051:	83 ec 0c             	sub    $0xc,%esp
f0115054:	68 98 85 13 f0       	push   $0xf0138598
f0115059:	e8 d3 bd fe ff       	call   f0100e31 <cprintf>
f011505e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115061:	e8 5a 79 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0115066:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0115069:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011506c:	89 d0                	mov    %edx,%eax
f011506e:	01 c0                	add    %eax,%eax
f0115070:	01 d0                	add    %edx,%eax
f0115072:	01 c0                	add    %eax,%eax
f0115074:	01 d0                	add    %edx,%eax
f0115076:	68 04 0e 00 00       	push   $0xe04
f011507b:	50                   	push   %eax
f011507c:	68 00 fc 3f 40       	push   $0x403ffc00
f0115081:	ff 75 cc             	pushl  -0x34(%ebp)
f0115084:	e8 34 3b ff ff       	call   f0108bbd <allocate_chunk>
f0115089:	83 c4 10             	add    $0x10,%esp
f011508c:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011508f:	e8 2c 79 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0115094:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0115097:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f011509b:	75 0b                	jne    f01150a8 <test_allocate_chunk+0x80f>
f011509d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150a0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150a3:	83 f8 05             	cmp    $0x5,%eax
f01150a6:	74 2a                	je     f01150d2 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01150a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150ab:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150ae:	83 ec 08             	sub    $0x8,%esp
f01150b1:	6a 05                	push   $0x5
f01150b3:	50                   	push   %eax
f01150b4:	ff 75 98             	pushl  -0x68(%ebp)
f01150b7:	68 bc 84 13 f0       	push   $0xf01384bc
f01150bc:	68 1d 05 00 00       	push   $0x51d
f01150c1:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01150c6:	e8 f3 b2 fe ff       	call   f01003be <_warn>
f01150cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150ce:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01150d2:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01150d6:	74 04                	je     f01150dc <test_allocate_chunk+0x843>
f01150d8:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01150dc:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01150e0:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01150e7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01150ea:	89 d0                	mov    %edx,%eax
f01150ec:	01 c0                	add    %eax,%eax
f01150ee:	01 d0                	add    %edx,%eax
f01150f0:	c1 e0 02             	shl    $0x2,%eax
f01150f3:	83 ec 08             	sub    $0x8,%esp
f01150f6:	6a 03                	push   $0x3
f01150f8:	6a 00                	push   $0x0
f01150fa:	6a 00                	push   $0x0
f01150fc:	68 07 0e 00 00       	push   $0xe07
f0115101:	68 05 0e 00 00       	push   $0xe05
f0115106:	6a 01                	push   $0x1
f0115108:	50                   	push   %eax
f0115109:	68 00 f0 3f 40       	push   $0x403ff000
f011510e:	6a 00                	push   $0x0
f0115110:	ff 75 cc             	pushl  -0x34(%ebp)
f0115113:	e8 0c 1c 00 00       	call   f0116d24 <CCP>
f0115118:	83 c4 30             	add    $0x30,%esp
f011511b:	85 c0                	test   %eax,%eax
f011511d:	75 25                	jne    f0115144 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011511f:	83 ec 04             	sub    $0x4,%esp
f0115122:	68 f8 83 13 f0       	push   $0xf01383f8
f0115127:	68 26 05 00 00       	push   $0x526
f011512c:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115131:	e8 88 b2 fe ff       	call   f01003be <_warn>
f0115136:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115139:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011513d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115144:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115148:	74 04                	je     f011514e <test_allocate_chunk+0x8b5>
f011514a:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011514e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115152:	83 ec 0c             	sub    $0xc,%esp
f0115155:	68 cf 85 13 f0       	push   $0xf01385cf
f011515a:	e8 d2 bc fe ff       	call   f0100e31 <cprintf>
f011515f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115162:	83 ec 08             	sub    $0x8,%esp
f0115165:	ff 75 e0             	pushl  -0x20(%ebp)
f0115168:	68 e0 85 13 f0       	push   $0xf01385e0
f011516d:	e8 bf bc fe ff       	call   f0100e31 <cprintf>
f0115172:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115175:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0115179:	75 10                	jne    f011518b <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f011517b:	83 ec 0c             	sub    $0xc,%esp
f011517e:	68 14 86 13 f0       	push   $0xf0138614
f0115183:	e8 a9 bc fe ff       	call   f0100e31 <cprintf>
f0115188:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011518b:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0115190:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0115193:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115196:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115199:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011519e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01151a1:	5b                   	pop    %ebx
f01151a2:	5e                   	pop    %esi
f01151a3:	5f                   	pop    %edi
f01151a4:	5d                   	pop    %ebp
f01151a5:	c3                   	ret    

f01151a6 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01151a6:	55                   	push   %ebp
f01151a7:	89 e5                	mov    %esp,%ebp
f01151a9:	57                   	push   %edi
f01151aa:	56                   	push   %esi
f01151ab:	53                   	push   %ebx
f01151ac:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01151b2:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01151b5:	bb 10 75 13 f0       	mov    $0xf0137510,%ebx
f01151ba:	ba 0f 00 00 00       	mov    $0xf,%edx
f01151bf:	89 c7                	mov    %eax,%edi
f01151c1:	89 de                	mov    %ebx,%esi
f01151c3:	89 d1                	mov    %edx,%ecx
f01151c5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01151c7:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01151ca:	b9 23 00 00 00       	mov    $0x23,%ecx
f01151cf:	b0 00                	mov    $0x0,%al
f01151d1:	89 d7                	mov    %edx,%edi
f01151d3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01151d5:	6a 00                	push   $0x0
f01151d7:	6a 0a                	push   $0xa
f01151d9:	6a 14                	push   $0x14
f01151db:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01151de:	50                   	push   %eax
f01151df:	e8 c9 3a ff ff       	call   f0108cad <env_create>
f01151e4:	83 c4 10             	add    $0x10,%esp
f01151e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01151ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151ed:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01151f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01151f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151f9:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01151ff:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115202:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115205:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115208:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011520f:	75 70 20 
f0115212:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115219:	00 00 00 
f011521c:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011521f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115224:	b8 00 00 00 00       	mov    $0x0,%eax
f0115229:	89 d7                	mov    %edx,%edi
f011522b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011522d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115230:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115233:	83 ec 08             	sub    $0x8,%esp
f0115236:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011523c:	52                   	push   %edx
f011523d:	50                   	push   %eax
f011523e:	e8 53 a0 01 00       	call   f012f296 <ltostr>
f0115243:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115246:	83 ec 04             	sub    $0x4,%esp
f0115249:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011524f:	50                   	push   %eax
f0115250:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115256:	50                   	push   %eax
f0115257:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011525d:	50                   	push   %eax
f011525e:	e8 2b a1 01 00       	call   f012f38e <strcconcat>
f0115263:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115266:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011526d:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115274:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011527b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0115282:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115286:	83 ec 0c             	sub    $0xc,%esp
f0115289:	ff 75 d8             	pushl  -0x28(%ebp)
f011528c:	e8 5f 1a 00 00       	call   f0116cf0 <ClearUserSpace>
f0115291:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115294:	83 ec 0c             	sub    $0xc,%esp
f0115297:	68 54 86 13 f0       	push   $0xf0138654
f011529c:	e8 90 bb fe ff       	call   f0100e31 <cprintf>
f01152a1:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01152a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152a7:	c1 e0 03             	shl    $0x3,%eax
f01152aa:	83 ec 04             	sub    $0x4,%esp
f01152ad:	50                   	push   %eax
f01152ae:	6a 00                	push   $0x0
f01152b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01152b3:	e8 39 39 ff ff       	call   f0108bf1 <calculate_required_frames>
f01152b8:	83 c4 10             	add    $0x10,%esp
f01152bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01152be:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01152c2:	74 23                	je     f01152e7 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01152c4:	83 ec 0c             	sub    $0xc,%esp
f01152c7:	6a 03                	push   $0x3
f01152c9:	ff 75 c8             	pushl  -0x38(%ebp)
f01152cc:	68 88 86 13 f0       	push   $0xf0138688
f01152d1:	68 5f 05 00 00       	push   $0x55f
f01152d6:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01152db:	e8 de b0 fe ff       	call   f01003be <_warn>
f01152e0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152e3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152e7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152eb:	74 04                	je     f01152f1 <test_calculate_required_frames+0x14b>
f01152ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152f1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01152f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152f8:	c1 e0 02             	shl    $0x2,%eax
f01152fb:	83 ec 04             	sub    $0x4,%esp
f01152fe:	50                   	push   %eax
f01152ff:	6a 00                	push   $0x0
f0115301:	ff 75 d8             	pushl  -0x28(%ebp)
f0115304:	e8 e8 38 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115309:	83 c4 10             	add    $0x10,%esp
f011530c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011530f:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115316:	74 26                	je     f011533e <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115318:	83 ec 0c             	sub    $0xc,%esp
f011531b:	68 01 04 00 00       	push   $0x401
f0115320:	ff 75 c8             	pushl  -0x38(%ebp)
f0115323:	68 88 86 13 f0       	push   $0xf0138688
f0115328:	68 69 05 00 00       	push   $0x569
f011532d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115332:	e8 87 b0 fe ff       	call   f01003be <_warn>
f0115337:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011533a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011533e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115342:	74 04                	je     f0115348 <test_calculate_required_frames+0x1a2>
f0115344:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115348:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011534c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011534f:	c1 e0 0a             	shl    $0xa,%eax
f0115352:	83 ec 04             	sub    $0x4,%esp
f0115355:	50                   	push   %eax
f0115356:	6a 00                	push   $0x0
f0115358:	ff 75 d8             	pushl  -0x28(%ebp)
f011535b:	e8 91 38 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115360:	83 c4 10             	add    $0x10,%esp
f0115363:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115366:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115369:	c1 e0 0a             	shl    $0xa,%eax
f011536c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011536f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115376:	99                   	cltd   
f0115377:	f7 fb                	idiv   %ebx
f0115379:	89 c1                	mov    %eax,%ecx
f011537b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011537e:	c1 e0 0a             	shl    $0xa,%eax
f0115381:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115384:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011538b:	99                   	cltd   
f011538c:	f7 fe                	idiv   %esi
f011538e:	01 c8                	add    %ecx,%eax
f0115390:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115393:	74 4c                	je     f01153e1 <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115395:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115398:	c1 e0 0a             	shl    $0xa,%eax
f011539b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011539e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01153a5:	99                   	cltd   
f01153a6:	f7 fb                	idiv   %ebx
f01153a8:	89 c1                	mov    %eax,%ecx
f01153aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153ad:	c1 e0 0a             	shl    $0xa,%eax
f01153b0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153b3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01153ba:	99                   	cltd   
f01153bb:	f7 fe                	idiv   %esi
f01153bd:	01 c8                	add    %ecx,%eax
f01153bf:	83 ec 0c             	sub    $0xc,%esp
f01153c2:	50                   	push   %eax
f01153c3:	ff 75 c8             	pushl  -0x38(%ebp)
f01153c6:	68 88 86 13 f0       	push   $0xf0138688
f01153cb:	68 73 05 00 00       	push   $0x573
f01153d0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01153d5:	e8 e4 af fe ff       	call   f01003be <_warn>
f01153da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153e1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153e5:	74 04                	je     f01153eb <test_calculate_required_frames+0x245>
f01153e7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153eb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01153ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153f2:	89 d0                	mov    %edx,%eax
f01153f4:	01 c0                	add    %eax,%eax
f01153f6:	01 d0                	add    %edx,%eax
f01153f8:	01 c0                	add    %eax,%eax
f01153fa:	83 ec 04             	sub    $0x4,%esp
f01153fd:	50                   	push   %eax
f01153fe:	68 00 10 00 00       	push   $0x1000
f0115403:	ff 75 d8             	pushl  -0x28(%ebp)
f0115406:	e8 e6 37 ff ff       	call   f0108bf1 <calculate_required_frames>
f011540b:	83 c4 10             	add    $0x10,%esp
f011540e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115411:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115415:	74 23                	je     f011543a <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115417:	83 ec 0c             	sub    $0xc,%esp
f011541a:	6a 03                	push   $0x3
f011541c:	ff 75 c8             	pushl  -0x38(%ebp)
f011541f:	68 88 86 13 f0       	push   $0xf0138688
f0115424:	68 7f 05 00 00       	push   $0x57f
f0115429:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011542e:	e8 8b af fe ff       	call   f01003be <_warn>
f0115433:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115436:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011543a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011543e:	74 04                	je     f0115444 <test_calculate_required_frames+0x29e>
f0115440:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115444:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115448:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011544b:	89 c2                	mov    %eax,%edx
f011544d:	01 d2                	add    %edx,%edx
f011544f:	01 d0                	add    %edx,%eax
f0115451:	83 ec 04             	sub    $0x4,%esp
f0115454:	50                   	push   %eax
f0115455:	68 00 18 00 00       	push   $0x1800
f011545a:	ff 75 d8             	pushl  -0x28(%ebp)
f011545d:	e8 8f 37 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115462:	83 c4 10             	add    $0x10,%esp
f0115465:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115468:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011546c:	74 23                	je     f0115491 <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011546e:	83 ec 0c             	sub    $0xc,%esp
f0115471:	6a 03                	push   $0x3
f0115473:	ff 75 c8             	pushl  -0x38(%ebp)
f0115476:	68 88 86 13 f0       	push   $0xf0138688
f011547b:	68 89 05 00 00       	push   $0x589
f0115480:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115485:	e8 34 af fe ff       	call   f01003be <_warn>
f011548a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011548d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115491:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115495:	74 04                	je     f011549b <test_calculate_required_frames+0x2f5>
f0115497:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011549b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011549f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154a2:	89 d0                	mov    %edx,%eax
f01154a4:	c1 e0 02             	shl    $0x2,%eax
f01154a7:	01 d0                	add    %edx,%eax
f01154a9:	01 c0                	add    %eax,%eax
f01154ab:	83 ec 04             	sub    $0x4,%esp
f01154ae:	50                   	push   %eax
f01154af:	68 00 00 40 00       	push   $0x400000
f01154b4:	ff 75 d8             	pushl  -0x28(%ebp)
f01154b7:	e8 35 37 ff ff       	call   f0108bf1 <calculate_required_frames>
f01154bc:	83 c4 10             	add    $0x10,%esp
f01154bf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01154c2:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01154c9:	74 26                	je     f01154f1 <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01154cb:	83 ec 0c             	sub    $0xc,%esp
f01154ce:	68 03 0a 00 00       	push   $0xa03
f01154d3:	ff 75 c8             	pushl  -0x38(%ebp)
f01154d6:	68 88 86 13 f0       	push   $0xf0138688
f01154db:	68 93 05 00 00       	push   $0x593
f01154e0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01154e5:	e8 d4 ae fe ff       	call   f01003be <_warn>
f01154ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154f5:	74 04                	je     f01154fb <test_calculate_required_frames+0x355>
f01154f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01154ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115502:	01 c0                	add    %eax,%eax
f0115504:	83 ec 04             	sub    $0x4,%esp
f0115507:	50                   	push   %eax
f0115508:	68 00 00 70 00       	push   $0x700000
f011550d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115510:	e8 dc 36 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115515:	83 c4 10             	add    $0x10,%esp
f0115518:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011551b:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115522:	74 26                	je     f011554a <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115524:	83 ec 0c             	sub    $0xc,%esp
f0115527:	68 02 02 00 00       	push   $0x202
f011552c:	ff 75 c8             	pushl  -0x38(%ebp)
f011552f:	68 88 86 13 f0       	push   $0xf0138688
f0115534:	68 9f 05 00 00       	push   $0x59f
f0115539:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011553e:	e8 7b ae fe ff       	call   f01003be <_warn>
f0115543:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115546:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011554a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011554e:	74 04                	je     f0115554 <test_calculate_required_frames+0x3ae>
f0115550:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115554:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115558:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011555b:	83 ec 04             	sub    $0x4,%esp
f011555e:	50                   	push   %eax
f011555f:	68 ff ff 3f 00       	push   $0x3fffff
f0115564:	ff 75 d8             	pushl  -0x28(%ebp)
f0115567:	e8 85 36 ff ff       	call   f0108bf1 <calculate_required_frames>
f011556c:	83 c4 10             	add    $0x10,%esp
f011556f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115572:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115576:	74 23                	je     f011559b <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115578:	83 ec 0c             	sub    $0xc,%esp
f011557b:	6a 04                	push   $0x4
f011557d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115580:	68 88 86 13 f0       	push   $0xf0138688
f0115585:	68 a9 05 00 00       	push   $0x5a9
f011558a:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011558f:	e8 2a ae fe ff       	call   f01003be <_warn>
f0115594:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115597:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011559b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011559f:	74 04                	je     f01155a5 <test_calculate_required_frames+0x3ff>
f01155a1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01155a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01155a9:	83 ec 0c             	sub    $0xc,%esp
f01155ac:	68 c1 81 13 f0       	push   $0xf01381c1
f01155b1:	e8 7b b8 fe ff       	call   f0100e31 <cprintf>
f01155b6:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01155b9:	83 ec 0c             	sub    $0xc,%esp
f01155bc:	68 e0 86 13 f0       	push   $0xf01386e0
f01155c1:	e8 6b b8 fe ff       	call   f0100e31 <cprintf>
f01155c6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01155c9:	83 ec 04             	sub    $0x4,%esp
f01155cc:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01155d2:	50                   	push   %eax
f01155d3:	68 7a 75 13 f0       	push   $0xf013757a
f01155d8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01155de:	50                   	push   %eax
f01155df:	e8 aa 9d 01 00       	call   f012f38e <strcconcat>
f01155e4:	83 c4 10             	add    $0x10,%esp
f01155e7:	83 ec 0c             	sub    $0xc,%esp
f01155ea:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01155f0:	50                   	push   %eax
f01155f1:	e8 cd c5 fe ff       	call   f0101bc3 <execute_command>
f01155f6:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01155f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155fc:	c1 e0 03             	shl    $0x3,%eax
f01155ff:	83 ec 04             	sub    $0x4,%esp
f0115602:	50                   	push   %eax
f0115603:	6a 00                	push   $0x0
f0115605:	ff 75 d8             	pushl  -0x28(%ebp)
f0115608:	e8 e4 35 ff ff       	call   f0108bf1 <calculate_required_frames>
f011560d:	83 c4 10             	add    $0x10,%esp
f0115610:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115613:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011561a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011561d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115620:	74 24                	je     f0115646 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115622:	83 ec 0c             	sub    $0xc,%esp
f0115625:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115628:	ff 75 c8             	pushl  -0x38(%ebp)
f011562b:	68 88 86 13 f0       	push   $0xf0138688
f0115630:	68 bd 05 00 00       	push   $0x5bd
f0115635:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011563a:	e8 7f ad fe ff       	call   f01003be <_warn>
f011563f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115642:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115646:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011564a:	74 04                	je     f0115650 <test_calculate_required_frames+0x4aa>
f011564c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115650:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115654:	83 ec 04             	sub    $0x4,%esp
f0115657:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011565d:	50                   	push   %eax
f011565e:	68 87 75 13 f0       	push   $0xf0137587
f0115663:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115669:	50                   	push   %eax
f011566a:	e8 1f 9d 01 00       	call   f012f38e <strcconcat>
f011566f:	83 c4 10             	add    $0x10,%esp
f0115672:	83 ec 0c             	sub    $0xc,%esp
f0115675:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011567b:	50                   	push   %eax
f011567c:	e8 42 c5 fe ff       	call   f0101bc3 <execute_command>
f0115681:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115684:	83 ec 04             	sub    $0x4,%esp
f0115687:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011568d:	50                   	push   %eax
f011568e:	68 14 87 13 f0       	push   $0xf0138714
f0115693:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115699:	50                   	push   %eax
f011569a:	e8 ef 9c 01 00       	call   f012f38e <strcconcat>
f011569f:	83 c4 10             	add    $0x10,%esp
f01156a2:	83 ec 0c             	sub    $0xc,%esp
f01156a5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156ab:	50                   	push   %eax
f01156ac:	e8 12 c5 fe ff       	call   f0101bc3 <execute_command>
f01156b1:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01156b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156b7:	c1 e0 03             	shl    $0x3,%eax
f01156ba:	83 ec 04             	sub    $0x4,%esp
f01156bd:	50                   	push   %eax
f01156be:	6a 00                	push   $0x0
f01156c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01156c3:	e8 29 35 ff ff       	call   f0108bf1 <calculate_required_frames>
f01156c8:	83 c4 10             	add    $0x10,%esp
f01156cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01156ce:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01156d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01156d8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156db:	74 24                	je     f0115701 <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01156dd:	83 ec 0c             	sub    $0xc,%esp
f01156e0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01156e6:	68 88 86 13 f0       	push   $0xf0138688
f01156eb:	68 cb 05 00 00       	push   $0x5cb
f01156f0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01156f5:	e8 c4 ac fe ff       	call   f01003be <_warn>
f01156fa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115701:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115705:	74 04                	je     f011570b <test_calculate_required_frames+0x565>
f0115707:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011570b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011570f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115712:	c1 e0 0a             	shl    $0xa,%eax
f0115715:	83 ec 04             	sub    $0x4,%esp
f0115718:	50                   	push   %eax
f0115719:	6a 00                	push   $0x0
f011571b:	ff 75 d8             	pushl  -0x28(%ebp)
f011571e:	e8 ce 34 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115723:	83 c4 10             	add    $0x10,%esp
f0115726:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115729:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011572c:	c1 e0 0a             	shl    $0xa,%eax
f011572f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115732:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115739:	99                   	cltd   
f011573a:	f7 fb                	idiv   %ebx
f011573c:	89 c1                	mov    %eax,%ecx
f011573e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115741:	c1 e0 0a             	shl    $0xa,%eax
f0115744:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115747:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011574e:	99                   	cltd   
f011574f:	f7 fe                	idiv   %esi
f0115751:	01 c8                	add    %ecx,%eax
f0115753:	83 e8 05             	sub    $0x5,%eax
f0115756:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115759:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011575c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011575f:	74 24                	je     f0115785 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115761:	83 ec 0c             	sub    $0xc,%esp
f0115764:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115767:	ff 75 c8             	pushl  -0x38(%ebp)
f011576a:	68 88 86 13 f0       	push   $0xf0138688
f011576f:	68 d6 05 00 00       	push   $0x5d6
f0115774:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115779:	e8 40 ac fe ff       	call   f01003be <_warn>
f011577e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115781:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115785:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115789:	74 04                	je     f011578f <test_calculate_required_frames+0x5e9>
f011578b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011578f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115793:	83 ec 04             	sub    $0x4,%esp
f0115796:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011579c:	50                   	push   %eax
f011579d:	68 20 87 13 f0       	push   $0xf0138720
f01157a2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157a8:	50                   	push   %eax
f01157a9:	e8 e0 9b 01 00       	call   f012f38e <strcconcat>
f01157ae:	83 c4 10             	add    $0x10,%esp
f01157b1:	83 ec 0c             	sub    $0xc,%esp
f01157b4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157ba:	50                   	push   %eax
f01157bb:	e8 03 c4 fe ff       	call   f0101bc3 <execute_command>
f01157c0:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01157c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157c6:	89 c2                	mov    %eax,%edx
f01157c8:	01 d2                	add    %edx,%edx
f01157ca:	01 d0                	add    %edx,%eax
f01157cc:	83 ec 04             	sub    $0x4,%esp
f01157cf:	50                   	push   %eax
f01157d0:	68 00 18 00 00       	push   $0x1800
f01157d5:	ff 75 d8             	pushl  -0x28(%ebp)
f01157d8:	e8 14 34 ff ff       	call   f0108bf1 <calculate_required_frames>
f01157dd:	83 c4 10             	add    $0x10,%esp
f01157e0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01157e3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01157ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01157ed:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01157f0:	74 24                	je     f0115816 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01157f2:	83 ec 0c             	sub    $0xc,%esp
f01157f5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01157f8:	ff 75 c8             	pushl  -0x38(%ebp)
f01157fb:	68 88 86 13 f0       	push   $0xf0138688
f0115800:	68 e5 05 00 00       	push   $0x5e5
f0115805:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011580a:	e8 af ab fe ff       	call   f01003be <_warn>
f011580f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115812:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115816:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011581a:	74 04                	je     f0115820 <test_calculate_required_frames+0x67a>
f011581c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115820:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115824:	83 ec 04             	sub    $0x4,%esp
f0115827:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011582d:	50                   	push   %eax
f011582e:	68 e0 77 13 f0       	push   $0xf01377e0
f0115833:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115839:	50                   	push   %eax
f011583a:	e8 4f 9b 01 00       	call   f012f38e <strcconcat>
f011583f:	83 c4 10             	add    $0x10,%esp
f0115842:	83 ec 0c             	sub    $0xc,%esp
f0115845:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011584b:	50                   	push   %eax
f011584c:	e8 72 c3 fe ff       	call   f0101bc3 <execute_command>
f0115851:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115854:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115857:	89 d0                	mov    %edx,%eax
f0115859:	c1 e0 02             	shl    $0x2,%eax
f011585c:	01 d0                	add    %edx,%eax
f011585e:	01 c0                	add    %eax,%eax
f0115860:	83 ec 04             	sub    $0x4,%esp
f0115863:	50                   	push   %eax
f0115864:	68 00 00 40 00       	push   $0x400000
f0115869:	ff 75 d8             	pushl  -0x28(%ebp)
f011586c:	e8 80 33 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115871:	83 c4 10             	add    $0x10,%esp
f0115874:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115877:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011587e:	74 26                	je     f01158a6 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115880:	83 ec 0c             	sub    $0xc,%esp
f0115883:	68 03 0a 00 00       	push   $0xa03
f0115888:	ff 75 c8             	pushl  -0x38(%ebp)
f011588b:	68 88 86 13 f0       	push   $0xf0138688
f0115890:	68 f1 05 00 00       	push   $0x5f1
f0115895:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011589a:	e8 1f ab fe ff       	call   f01003be <_warn>
f011589f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158a6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158aa:	74 04                	je     f01158b0 <test_calculate_required_frames+0x70a>
f01158ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158b0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01158b4:	83 ec 04             	sub    $0x4,%esp
f01158b7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01158bd:	50                   	push   %eax
f01158be:	68 ea 77 13 f0       	push   $0xf01377ea
f01158c3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158c9:	50                   	push   %eax
f01158ca:	e8 bf 9a 01 00       	call   f012f38e <strcconcat>
f01158cf:	83 c4 10             	add    $0x10,%esp
f01158d2:	83 ec 0c             	sub    $0xc,%esp
f01158d5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01158db:	50                   	push   %eax
f01158dc:	e8 e2 c2 fe ff       	call   f0101bc3 <execute_command>
f01158e1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01158e4:	83 ec 04             	sub    $0x4,%esp
f01158e7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01158ed:	50                   	push   %eax
f01158ee:	68 28 87 13 f0       	push   $0xf0138728
f01158f3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158f9:	50                   	push   %eax
f01158fa:	e8 8f 9a 01 00       	call   f012f38e <strcconcat>
f01158ff:	83 c4 10             	add    $0x10,%esp
f0115902:	83 ec 0c             	sub    $0xc,%esp
f0115905:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011590b:	50                   	push   %eax
f011590c:	e8 b2 c2 fe ff       	call   f0101bc3 <execute_command>
f0115911:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115914:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115917:	01 c0                	add    %eax,%eax
f0115919:	83 ec 04             	sub    $0x4,%esp
f011591c:	50                   	push   %eax
f011591d:	68 00 00 70 00       	push   $0x700000
f0115922:	ff 75 d8             	pushl  -0x28(%ebp)
f0115925:	e8 c7 32 ff ff       	call   f0108bf1 <calculate_required_frames>
f011592a:	83 c4 10             	add    $0x10,%esp
f011592d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115930:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115937:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011593a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011593d:	74 24                	je     f0115963 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011593f:	83 ec 0c             	sub    $0xc,%esp
f0115942:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115945:	ff 75 c8             	pushl  -0x38(%ebp)
f0115948:	68 88 86 13 f0       	push   $0xf0138688
f011594d:	68 01 06 00 00       	push   $0x601
f0115952:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115957:	e8 62 aa fe ff       	call   f01003be <_warn>
f011595c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011595f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115963:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115967:	74 04                	je     f011596d <test_calculate_required_frames+0x7c7>
f0115969:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011596d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115971:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115974:	83 ec 04             	sub    $0x4,%esp
f0115977:	50                   	push   %eax
f0115978:	68 ff ff 3f 00       	push   $0x3fffff
f011597d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115980:	e8 6c 32 ff ff       	call   f0108bf1 <calculate_required_frames>
f0115985:	83 c4 10             	add    $0x10,%esp
f0115988:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f011598b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115992:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115995:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115998:	74 24                	je     f01159be <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011599a:	83 ec 0c             	sub    $0xc,%esp
f011599d:	ff 75 c4             	pushl  -0x3c(%ebp)
f01159a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01159a3:	68 88 86 13 f0       	push   $0xf0138688
f01159a8:	68 0c 06 00 00       	push   $0x60c
f01159ad:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01159b2:	e8 07 aa fe ff       	call   f01003be <_warn>
f01159b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01159be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159c2:	74 04                	je     f01159c8 <test_calculate_required_frames+0x822>
f01159c4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01159c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01159cc:	83 ec 0c             	sub    $0xc,%esp
f01159cf:	68 9b 77 13 f0       	push   $0xf013779b
f01159d4:	e8 58 b4 fe ff       	call   f0100e31 <cprintf>
f01159d9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01159dc:	83 ec 08             	sub    $0x8,%esp
f01159df:	ff 75 e4             	pushl  -0x1c(%ebp)
f01159e2:	68 34 87 13 f0       	push   $0xf0138734
f01159e7:	e8 45 b4 fe ff       	call   f0100e31 <cprintf>
f01159ec:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01159ef:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01159f3:	75 10                	jne    f0115a05 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01159f5:	83 ec 0c             	sub    $0xc,%esp
f01159f8:	68 74 87 13 f0       	push   $0xf0138774
f01159fd:	e8 2f b4 fe ff       	call   f0100e31 <cprintf>
f0115a02:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115a05:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0115a0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115a0d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115a10:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115a13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115a18:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115a1b:	5b                   	pop    %ebx
f0115a1c:	5e                   	pop    %esi
f0115a1d:	5f                   	pop    %edi
f0115a1e:	5d                   	pop    %ebp
f0115a1f:	c3                   	ret    

f0115a20 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115a20:	55                   	push   %ebp
f0115a21:	89 e5                	mov    %esp,%ebp
f0115a23:	57                   	push   %edi
f0115a24:	56                   	push   %esi
f0115a25:	53                   	push   %ebx
f0115a26:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115a2c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115a2f:	bb 10 75 13 f0       	mov    $0xf0137510,%ebx
f0115a34:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115a39:	89 c7                	mov    %eax,%edi
f0115a3b:	89 de                	mov    %ebx,%esi
f0115a3d:	89 d1                	mov    %edx,%ecx
f0115a3f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115a41:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115a44:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115a49:	b0 00                	mov    $0x0,%al
f0115a4b:	89 d7                	mov    %edx,%edi
f0115a4d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115a4f:	6a 00                	push   $0x0
f0115a51:	6a 0a                	push   $0xa
f0115a53:	6a 14                	push   $0x14
f0115a55:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115a58:	50                   	push   %eax
f0115a59:	e8 4f 32 ff ff       	call   f0108cad <env_create>
f0115a5e:	83 c4 10             	add    $0x10,%esp
f0115a61:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115a64:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a67:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115a6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115a70:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a73:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115a79:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115a7c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115a7f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115a82:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115a89:	75 70 20 
f0115a8c:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115a93:	00 00 00 
f0115a96:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115a99:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115a9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0115aa3:	89 d7                	mov    %edx,%edi
f0115aa5:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115aa7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115aaa:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115aad:	83 ec 08             	sub    $0x8,%esp
f0115ab0:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115ab6:	52                   	push   %edx
f0115ab7:	50                   	push   %eax
f0115ab8:	e8 d9 97 01 00       	call   f012f296 <ltostr>
f0115abd:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115ac0:	83 ec 04             	sub    $0x4,%esp
f0115ac3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ac9:	50                   	push   %eax
f0115aca:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115ad0:	50                   	push   %eax
f0115ad1:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115ad7:	50                   	push   %eax
f0115ad8:	e8 b1 98 01 00       	call   f012f38e <strcconcat>
f0115add:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115ae0:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115ae7:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115aee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115af5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115af9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b00:	00 00 00 
	uint32 num_tables = 0;
f0115b03:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b0a:	00 00 00 
	ClearUserSpace(proc_directory);
f0115b0d:	83 ec 0c             	sub    $0xc,%esp
f0115b10:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b13:	e8 d8 11 00 00       	call   f0116cf0 <ClearUserSpace>
f0115b18:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115b1b:	83 ec 0c             	sub    $0xc,%esp
f0115b1e:	68 54 86 13 f0       	push   $0xf0138654
f0115b23:	e8 09 b3 fe ff       	call   f0100e31 <cprintf>
f0115b28:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115b2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b2e:	c1 e0 03             	shl    $0x3,%eax
f0115b31:	89 c2                	mov    %eax,%edx
f0115b33:	83 ec 0c             	sub    $0xc,%esp
f0115b36:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b3c:	50                   	push   %eax
f0115b3d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b43:	50                   	push   %eax
f0115b44:	52                   	push   %edx
f0115b45:	6a 00                	push   $0x0
f0115b47:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b4a:	e8 88 30 ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115b4f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b52:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b58:	85 c0                	test   %eax,%eax
f0115b5a:	74 27                	je     f0115b83 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b5c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b62:	83 ec 0c             	sub    $0xc,%esp
f0115b65:	6a 00                	push   $0x0
f0115b67:	50                   	push   %eax
f0115b68:	68 c0 87 13 f0       	push   $0xf01387c0
f0115b6d:	68 41 06 00 00       	push   $0x641
f0115b72:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115b77:	e8 42 a8 fe ff       	call   f01003be <_warn>
f0115b7c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b7f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b83:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b89:	85 c0                	test   %eax,%eax
f0115b8b:	74 27                	je     f0115bb4 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b8d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b93:	83 ec 0c             	sub    $0xc,%esp
f0115b96:	6a 00                	push   $0x0
f0115b98:	50                   	push   %eax
f0115b99:	68 20 88 13 f0       	push   $0xf0138820
f0115b9e:	68 46 06 00 00       	push   $0x646
f0115ba3:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115ba8:	e8 11 a8 fe ff       	call   f01003be <_warn>
f0115bad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bb0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115bb4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bb8:	74 04                	je     f0115bbe <test_calculate_allocated_space+0x19e>
f0115bba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115bbe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115bc2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115bc9:	00 00 00 
		num_pages = 0;
f0115bcc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bd3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115bd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115bd9:	c1 e0 02             	shl    $0x2,%eax
f0115bdc:	89 c2                	mov    %eax,%edx
f0115bde:	83 ec 0c             	sub    $0xc,%esp
f0115be1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115be7:	50                   	push   %eax
f0115be8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bee:	50                   	push   %eax
f0115bef:	52                   	push   %edx
f0115bf0:	6a 00                	push   $0x0
f0115bf2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bf5:	e8 dd 2f ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115bfa:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115bfd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c03:	85 c0                	test   %eax,%eax
f0115c05:	74 27                	je     f0115c2e <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c07:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c0d:	83 ec 0c             	sub    $0xc,%esp
f0115c10:	6a 00                	push   $0x0
f0115c12:	50                   	push   %eax
f0115c13:	68 c0 87 13 f0       	push   $0xf01387c0
f0115c18:	68 52 06 00 00       	push   $0x652
f0115c1d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115c22:	e8 97 a7 fe ff       	call   f01003be <_warn>
f0115c27:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c2a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c2e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c34:	85 c0                	test   %eax,%eax
f0115c36:	74 27                	je     f0115c5f <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c38:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c3e:	83 ec 0c             	sub    $0xc,%esp
f0115c41:	6a 00                	push   $0x0
f0115c43:	50                   	push   %eax
f0115c44:	68 20 88 13 f0       	push   $0xf0138820
f0115c49:	68 57 06 00 00       	push   $0x657
f0115c4e:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115c53:	e8 66 a7 fe ff       	call   f01003be <_warn>
f0115c58:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c5b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c5f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c63:	74 04                	je     f0115c69 <test_calculate_allocated_space+0x249>
f0115c65:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c69:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115c6d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c74:	00 00 00 
		num_pages = 0;
f0115c77:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c7e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115c81:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115c84:	c1 e0 0a             	shl    $0xa,%eax
f0115c87:	89 c2                	mov    %eax,%edx
f0115c89:	83 ec 0c             	sub    $0xc,%esp
f0115c8c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c92:	50                   	push   %eax
f0115c93:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c99:	50                   	push   %eax
f0115c9a:	52                   	push   %edx
f0115c9b:	6a 00                	push   $0x0
f0115c9d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ca0:	e8 32 2f ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115ca5:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ca8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cae:	85 c0                	test   %eax,%eax
f0115cb0:	74 27                	je     f0115cd9 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cb2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cb8:	83 ec 0c             	sub    $0xc,%esp
f0115cbb:	6a 00                	push   $0x0
f0115cbd:	50                   	push   %eax
f0115cbe:	68 c0 87 13 f0       	push   $0xf01387c0
f0115cc3:	68 63 06 00 00       	push   $0x663
f0115cc8:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115ccd:	e8 ec a6 fe ff       	call   f01003be <_warn>
f0115cd2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cd5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115cd9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cdf:	85 c0                	test   %eax,%eax
f0115ce1:	74 27                	je     f0115d0a <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ce3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ce9:	83 ec 0c             	sub    $0xc,%esp
f0115cec:	6a 00                	push   $0x0
f0115cee:	50                   	push   %eax
f0115cef:	68 20 88 13 f0       	push   $0xf0138820
f0115cf4:	68 68 06 00 00       	push   $0x668
f0115cf9:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115cfe:	e8 bb a6 fe ff       	call   f01003be <_warn>
f0115d03:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d06:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d0a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d0e:	74 04                	je     f0115d14 <test_calculate_allocated_space+0x2f4>
f0115d10:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d14:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115d18:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d1f:	00 00 00 
		num_pages = 0;
f0115d22:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d29:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115d2c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115d2f:	89 d0                	mov    %edx,%eax
f0115d31:	01 c0                	add    %eax,%eax
f0115d33:	01 d0                	add    %edx,%eax
f0115d35:	01 c0                	add    %eax,%eax
f0115d37:	05 00 10 00 00       	add    $0x1000,%eax
f0115d3c:	89 c2                	mov    %eax,%edx
f0115d3e:	83 ec 0c             	sub    $0xc,%esp
f0115d41:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d47:	50                   	push   %eax
f0115d48:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d4e:	50                   	push   %eax
f0115d4f:	52                   	push   %edx
f0115d50:	68 00 10 00 00       	push   $0x1000
f0115d55:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d58:	e8 7a 2e ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115d5d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d60:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d66:	85 c0                	test   %eax,%eax
f0115d68:	74 27                	je     f0115d91 <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d6a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d70:	83 ec 0c             	sub    $0xc,%esp
f0115d73:	6a 00                	push   $0x0
f0115d75:	50                   	push   %eax
f0115d76:	68 c0 87 13 f0       	push   $0xf01387c0
f0115d7b:	68 75 06 00 00       	push   $0x675
f0115d80:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115d85:	e8 34 a6 fe ff       	call   f01003be <_warn>
f0115d8a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d8d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d91:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d97:	85 c0                	test   %eax,%eax
f0115d99:	74 27                	je     f0115dc2 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d9b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115da1:	83 ec 0c             	sub    $0xc,%esp
f0115da4:	6a 00                	push   $0x0
f0115da6:	50                   	push   %eax
f0115da7:	68 20 88 13 f0       	push   $0xf0138820
f0115dac:	68 7a 06 00 00       	push   $0x67a
f0115db1:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115db6:	e8 03 a6 fe ff       	call   f01003be <_warn>
f0115dbb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dbe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115dc2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115dc6:	74 04                	je     f0115dcc <test_calculate_allocated_space+0x3ac>
f0115dc8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dcc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115dd0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115dd7:	00 00 00 
		num_pages = 0;
f0115dda:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115de1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115de4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115de7:	89 c2                	mov    %eax,%edx
f0115de9:	01 d2                	add    %edx,%edx
f0115deb:	01 d0                	add    %edx,%eax
f0115ded:	05 00 18 00 00       	add    $0x1800,%eax
f0115df2:	89 c2                	mov    %eax,%edx
f0115df4:	83 ec 0c             	sub    $0xc,%esp
f0115df7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115dfd:	50                   	push   %eax
f0115dfe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e04:	50                   	push   %eax
f0115e05:	52                   	push   %edx
f0115e06:	68 00 18 00 00       	push   $0x1800
f0115e0b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e0e:	e8 c4 2d ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115e13:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e16:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e1c:	85 c0                	test   %eax,%eax
f0115e1e:	74 27                	je     f0115e47 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e26:	83 ec 0c             	sub    $0xc,%esp
f0115e29:	6a 00                	push   $0x0
f0115e2b:	50                   	push   %eax
f0115e2c:	68 c0 87 13 f0       	push   $0xf01387c0
f0115e31:	68 86 06 00 00       	push   $0x686
f0115e36:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115e3b:	e8 7e a5 fe ff       	call   f01003be <_warn>
f0115e40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e4d:	85 c0                	test   %eax,%eax
f0115e4f:	74 27                	je     f0115e78 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e57:	83 ec 0c             	sub    $0xc,%esp
f0115e5a:	6a 00                	push   $0x0
f0115e5c:	50                   	push   %eax
f0115e5d:	68 20 88 13 f0       	push   $0xf0138820
f0115e62:	68 8b 06 00 00       	push   $0x68b
f0115e67:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115e6c:	e8 4d a5 fe ff       	call   f01003be <_warn>
f0115e71:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e74:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e78:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e7c:	74 04                	je     f0115e82 <test_calculate_allocated_space+0x462>
f0115e7e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e82:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115e86:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e8d:	00 00 00 
		num_pages = 0;
f0115e90:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e97:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115e9a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115e9d:	89 d0                	mov    %edx,%eax
f0115e9f:	c1 e0 02             	shl    $0x2,%eax
f0115ea2:	01 d0                	add    %edx,%eax
f0115ea4:	01 c0                	add    %eax,%eax
f0115ea6:	05 00 00 40 00       	add    $0x400000,%eax
f0115eab:	89 c2                	mov    %eax,%edx
f0115ead:	83 ec 0c             	sub    $0xc,%esp
f0115eb0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115eb6:	50                   	push   %eax
f0115eb7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ebd:	50                   	push   %eax
f0115ebe:	52                   	push   %edx
f0115ebf:	68 00 00 40 00       	push   $0x400000
f0115ec4:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ec7:	e8 0b 2d ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115ecc:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ecf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ed5:	85 c0                	test   %eax,%eax
f0115ed7:	74 27                	je     f0115f00 <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ed9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115edf:	83 ec 0c             	sub    $0xc,%esp
f0115ee2:	6a 00                	push   $0x0
f0115ee4:	50                   	push   %eax
f0115ee5:	68 c0 87 13 f0       	push   $0xf01387c0
f0115eea:	68 97 06 00 00       	push   $0x697
f0115eef:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115ef4:	e8 c5 a4 fe ff       	call   f01003be <_warn>
f0115ef9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115efc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f00:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f06:	85 c0                	test   %eax,%eax
f0115f08:	74 27                	je     f0115f31 <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f0a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f10:	83 ec 0c             	sub    $0xc,%esp
f0115f13:	6a 00                	push   $0x0
f0115f15:	50                   	push   %eax
f0115f16:	68 20 88 13 f0       	push   $0xf0138820
f0115f1b:	68 9c 06 00 00       	push   $0x69c
f0115f20:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115f25:	e8 94 a4 fe ff       	call   f01003be <_warn>
f0115f2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f31:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f35:	74 04                	je     f0115f3b <test_calculate_allocated_space+0x51b>
f0115f37:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f3b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115f3f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f46:	00 00 00 
		num_pages = 0;
f0115f49:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f50:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115f53:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f56:	05 00 00 38 00       	add    $0x380000,%eax
f0115f5b:	01 c0                	add    %eax,%eax
f0115f5d:	89 c2                	mov    %eax,%edx
f0115f5f:	83 ec 0c             	sub    $0xc,%esp
f0115f62:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f68:	50                   	push   %eax
f0115f69:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f6f:	50                   	push   %eax
f0115f70:	52                   	push   %edx
f0115f71:	68 00 00 70 00       	push   $0x700000
f0115f76:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f79:	e8 59 2c ff ff       	call   f0108bd7 <calculate_allocated_space>
f0115f7e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f81:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f87:	85 c0                	test   %eax,%eax
f0115f89:	74 27                	je     f0115fb2 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f8b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f91:	83 ec 0c             	sub    $0xc,%esp
f0115f94:	6a 00                	push   $0x0
f0115f96:	50                   	push   %eax
f0115f97:	68 c0 87 13 f0       	push   $0xf01387c0
f0115f9c:	68 a9 06 00 00       	push   $0x6a9
f0115fa1:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115fa6:	e8 13 a4 fe ff       	call   f01003be <_warn>
f0115fab:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115fb2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fb8:	85 c0                	test   %eax,%eax
f0115fba:	74 27                	je     f0115fe3 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115fbc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fc2:	83 ec 0c             	sub    $0xc,%esp
f0115fc5:	6a 00                	push   $0x0
f0115fc7:	50                   	push   %eax
f0115fc8:	68 20 88 13 f0       	push   $0xf0138820
f0115fcd:	68 ae 06 00 00       	push   $0x6ae
f0115fd2:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0115fd7:	e8 e2 a3 fe ff       	call   f01003be <_warn>
f0115fdc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fdf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115fe3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fe7:	74 04                	je     f0115fed <test_calculate_allocated_space+0x5cd>
f0115fe9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115fed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115ff1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ff8:	00 00 00 
		num_pages = 0;
f0115ffb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116002:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116005:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116008:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011600d:	89 c2                	mov    %eax,%edx
f011600f:	83 ec 0c             	sub    $0xc,%esp
f0116012:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116018:	50                   	push   %eax
f0116019:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011601f:	50                   	push   %eax
f0116020:	52                   	push   %edx
f0116021:	68 ff ff 3f 00       	push   $0x3fffff
f0116026:	ff 75 d8             	pushl  -0x28(%ebp)
f0116029:	e8 a9 2b ff ff       	call   f0108bd7 <calculate_allocated_space>
f011602e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116031:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116037:	85 c0                	test   %eax,%eax
f0116039:	74 27                	je     f0116062 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011603b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116041:	83 ec 0c             	sub    $0xc,%esp
f0116044:	6a 00                	push   $0x0
f0116046:	50                   	push   %eax
f0116047:	68 c0 87 13 f0       	push   $0xf01387c0
f011604c:	68 ba 06 00 00       	push   $0x6ba
f0116051:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116056:	e8 63 a3 fe ff       	call   f01003be <_warn>
f011605b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011605e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116062:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116068:	85 c0                	test   %eax,%eax
f011606a:	74 27                	je     f0116093 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011606c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116072:	83 ec 0c             	sub    $0xc,%esp
f0116075:	6a 00                	push   $0x0
f0116077:	50                   	push   %eax
f0116078:	68 20 88 13 f0       	push   $0xf0138820
f011607d:	68 bf 06 00 00       	push   $0x6bf
f0116082:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116087:	e8 32 a3 fe ff       	call   f01003be <_warn>
f011608c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011608f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116093:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116097:	74 04                	je     f011609d <test_calculate_allocated_space+0x67d>
f0116099:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011609d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01160a1:	83 ec 0c             	sub    $0xc,%esp
f01160a4:	68 c1 81 13 f0       	push   $0xf01381c1
f01160a9:	e8 83 ad fe ff       	call   f0100e31 <cprintf>
f01160ae:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01160b1:	83 ec 0c             	sub    $0xc,%esp
f01160b4:	68 e0 86 13 f0       	push   $0xf01386e0
f01160b9:	e8 73 ad fe ff       	call   f0100e31 <cprintf>
f01160be:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01160c1:	83 ec 04             	sub    $0x4,%esp
f01160c4:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01160ca:	50                   	push   %eax
f01160cb:	68 7a 75 13 f0       	push   $0xf013757a
f01160d0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160d6:	50                   	push   %eax
f01160d7:	e8 b2 92 01 00       	call   f012f38e <strcconcat>
f01160dc:	83 c4 10             	add    $0x10,%esp
f01160df:	83 ec 0c             	sub    $0xc,%esp
f01160e2:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01160e8:	50                   	push   %eax
f01160e9:	e8 d5 ba fe ff       	call   f0101bc3 <execute_command>
f01160ee:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01160f1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01160f8:	00 00 00 
		num_pages = 0;
f01160fb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116102:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0116105:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116108:	c1 e0 03             	shl    $0x3,%eax
f011610b:	89 c2                	mov    %eax,%edx
f011610d:	83 ec 0c             	sub    $0xc,%esp
f0116110:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116116:	50                   	push   %eax
f0116117:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011611d:	50                   	push   %eax
f011611e:	52                   	push   %edx
f011611f:	6a 00                	push   $0x0
f0116121:	ff 75 d8             	pushl  -0x28(%ebp)
f0116124:	e8 ae 2a ff ff       	call   f0108bd7 <calculate_allocated_space>
f0116129:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011612c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0116133:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011613a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116140:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116143:	74 28                	je     f011616d <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116145:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011614b:	83 ec 0c             	sub    $0xc,%esp
f011614e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116151:	50                   	push   %eax
f0116152:	68 c0 87 13 f0       	push   $0xf01387c0
f0116157:	68 d6 06 00 00       	push   $0x6d6
f011615c:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116161:	e8 58 a2 fe ff       	call   f01003be <_warn>
f0116166:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116169:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011616d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116173:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116176:	74 28                	je     f01161a0 <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116178:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011617e:	83 ec 0c             	sub    $0xc,%esp
f0116181:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116184:	50                   	push   %eax
f0116185:	68 20 88 13 f0       	push   $0xf0138820
f011618a:	68 db 06 00 00       	push   $0x6db
f011618f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116194:	e8 25 a2 fe ff       	call   f01003be <_warn>
f0116199:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011619c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161a4:	74 04                	je     f01161aa <test_calculate_allocated_space+0x78a>
f01161a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01161ae:	83 ec 04             	sub    $0x4,%esp
f01161b1:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01161b7:	50                   	push   %eax
f01161b8:	68 87 75 13 f0       	push   $0xf0137587
f01161bd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01161c3:	50                   	push   %eax
f01161c4:	e8 c5 91 01 00       	call   f012f38e <strcconcat>
f01161c9:	83 c4 10             	add    $0x10,%esp
f01161cc:	83 ec 0c             	sub    $0xc,%esp
f01161cf:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01161d5:	50                   	push   %eax
f01161d6:	e8 e8 b9 fe ff       	call   f0101bc3 <execute_command>
f01161db:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01161de:	83 ec 04             	sub    $0x4,%esp
f01161e1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01161e7:	50                   	push   %eax
f01161e8:	68 14 87 13 f0       	push   $0xf0138714
f01161ed:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01161f3:	50                   	push   %eax
f01161f4:	e8 95 91 01 00       	call   f012f38e <strcconcat>
f01161f9:	83 c4 10             	add    $0x10,%esp
f01161fc:	83 ec 0c             	sub    $0xc,%esp
f01161ff:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116205:	50                   	push   %eax
f0116206:	e8 b8 b9 fe ff       	call   f0101bc3 <execute_command>
f011620b:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011620e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116215:	00 00 00 
		num_pages = 0;
f0116218:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011621f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116222:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116225:	c1 e0 03             	shl    $0x3,%eax
f0116228:	89 c2                	mov    %eax,%edx
f011622a:	83 ec 0c             	sub    $0xc,%esp
f011622d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116233:	50                   	push   %eax
f0116234:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011623a:	50                   	push   %eax
f011623b:	52                   	push   %edx
f011623c:	6a 00                	push   $0x0
f011623e:	ff 75 d8             	pushl  -0x28(%ebp)
f0116241:	e8 91 29 ff ff       	call   f0108bd7 <calculate_allocated_space>
f0116246:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116249:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116250:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116257:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011625d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116260:	74 28                	je     f011628a <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116262:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116268:	83 ec 0c             	sub    $0xc,%esp
f011626b:	ff 75 c8             	pushl  -0x38(%ebp)
f011626e:	50                   	push   %eax
f011626f:	68 c0 87 13 f0       	push   $0xf01387c0
f0116274:	68 ec 06 00 00       	push   $0x6ec
f0116279:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011627e:	e8 3b a1 fe ff       	call   f01003be <_warn>
f0116283:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116286:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011628a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116290:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116293:	74 28                	je     f01162bd <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116295:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011629b:	83 ec 0c             	sub    $0xc,%esp
f011629e:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162a1:	50                   	push   %eax
f01162a2:	68 20 88 13 f0       	push   $0xf0138820
f01162a7:	68 f1 06 00 00       	push   $0x6f1
f01162ac:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01162b1:	e8 08 a1 fe ff       	call   f01003be <_warn>
f01162b6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01162bd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162c1:	74 04                	je     f01162c7 <test_calculate_allocated_space+0x8a7>
f01162c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01162c7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01162cb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162d2:	00 00 00 
		num_pages = 0;
f01162d5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162dc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01162df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01162e2:	c1 e0 0a             	shl    $0xa,%eax
f01162e5:	89 c2                	mov    %eax,%edx
f01162e7:	83 ec 0c             	sub    $0xc,%esp
f01162ea:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162f0:	50                   	push   %eax
f01162f1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162f7:	50                   	push   %eax
f01162f8:	52                   	push   %edx
f01162f9:	6a 00                	push   $0x0
f01162fb:	ff 75 d8             	pushl  -0x28(%ebp)
f01162fe:	e8 d4 28 ff ff       	call   f0108bd7 <calculate_allocated_space>
f0116303:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0116306:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011630d:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116314:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011631a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011631d:	74 28                	je     f0116347 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011631f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116325:	83 ec 0c             	sub    $0xc,%esp
f0116328:	ff 75 c8             	pushl  -0x38(%ebp)
f011632b:	50                   	push   %eax
f011632c:	68 c0 87 13 f0       	push   $0xf01387c0
f0116331:	68 ff 06 00 00       	push   $0x6ff
f0116336:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011633b:	e8 7e a0 fe ff       	call   f01003be <_warn>
f0116340:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116343:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116347:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011634d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116350:	74 28                	je     f011637a <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116352:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116358:	83 ec 0c             	sub    $0xc,%esp
f011635b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011635e:	50                   	push   %eax
f011635f:	68 20 88 13 f0       	push   $0xf0138820
f0116364:	68 04 07 00 00       	push   $0x704
f0116369:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011636e:	e8 4b a0 fe ff       	call   f01003be <_warn>
f0116373:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116376:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011637a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011637e:	74 04                	je     f0116384 <test_calculate_allocated_space+0x964>
f0116380:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116384:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0116388:	83 ec 04             	sub    $0x4,%esp
f011638b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116391:	50                   	push   %eax
f0116392:	68 20 87 13 f0       	push   $0xf0138720
f0116397:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011639d:	50                   	push   %eax
f011639e:	e8 eb 8f 01 00       	call   f012f38e <strcconcat>
f01163a3:	83 c4 10             	add    $0x10,%esp
f01163a6:	83 ec 0c             	sub    $0xc,%esp
f01163a9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163af:	50                   	push   %eax
f01163b0:	e8 0e b8 fe ff       	call   f0101bc3 <execute_command>
f01163b5:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01163b8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163bf:	00 00 00 
		num_pages = 0;
f01163c2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163c9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01163cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01163cf:	89 c2                	mov    %eax,%edx
f01163d1:	01 d2                	add    %edx,%edx
f01163d3:	01 d0                	add    %edx,%eax
f01163d5:	05 00 18 00 00       	add    $0x1800,%eax
f01163da:	89 c2                	mov    %eax,%edx
f01163dc:	83 ec 0c             	sub    $0xc,%esp
f01163df:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163e5:	50                   	push   %eax
f01163e6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163ec:	50                   	push   %eax
f01163ed:	52                   	push   %edx
f01163ee:	68 00 18 00 00       	push   $0x1800
f01163f3:	ff 75 d8             	pushl  -0x28(%ebp)
f01163f6:	e8 dc 27 ff ff       	call   f0108bd7 <calculate_allocated_space>
f01163fb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01163fe:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116405:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011640c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116412:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116415:	74 28                	je     f011643f <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116417:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011641d:	83 ec 0c             	sub    $0xc,%esp
f0116420:	ff 75 c8             	pushl  -0x38(%ebp)
f0116423:	50                   	push   %eax
f0116424:	68 c0 87 13 f0       	push   $0xf01387c0
f0116429:	68 15 07 00 00       	push   $0x715
f011642e:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116433:	e8 86 9f fe ff       	call   f01003be <_warn>
f0116438:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011643b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011643f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116445:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116448:	74 28                	je     f0116472 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011644a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116450:	83 ec 0c             	sub    $0xc,%esp
f0116453:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116456:	50                   	push   %eax
f0116457:	68 20 88 13 f0       	push   $0xf0138820
f011645c:	68 1a 07 00 00       	push   $0x71a
f0116461:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116466:	e8 53 9f fe ff       	call   f01003be <_warn>
f011646b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011646e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116472:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116476:	74 04                	je     f011647c <test_calculate_allocated_space+0xa5c>
f0116478:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011647c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116480:	83 ec 04             	sub    $0x4,%esp
f0116483:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116489:	50                   	push   %eax
f011648a:	68 e0 77 13 f0       	push   $0xf01377e0
f011648f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116495:	50                   	push   %eax
f0116496:	e8 f3 8e 01 00       	call   f012f38e <strcconcat>
f011649b:	83 c4 10             	add    $0x10,%esp
f011649e:	83 ec 0c             	sub    $0xc,%esp
f01164a1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164a7:	50                   	push   %eax
f01164a8:	e8 16 b7 fe ff       	call   f0101bc3 <execute_command>
f01164ad:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01164b0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164b7:	00 00 00 
		num_pages = 0;
f01164ba:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164c1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01164c4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01164c7:	89 d0                	mov    %edx,%eax
f01164c9:	c1 e0 02             	shl    $0x2,%eax
f01164cc:	01 d0                	add    %edx,%eax
f01164ce:	01 c0                	add    %eax,%eax
f01164d0:	05 00 00 40 00       	add    $0x400000,%eax
f01164d5:	89 c2                	mov    %eax,%edx
f01164d7:	83 ec 0c             	sub    $0xc,%esp
f01164da:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164e0:	50                   	push   %eax
f01164e1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01164e7:	50                   	push   %eax
f01164e8:	52                   	push   %edx
f01164e9:	68 00 00 40 00       	push   $0x400000
f01164ee:	ff 75 d8             	pushl  -0x28(%ebp)
f01164f1:	e8 e1 26 ff ff       	call   f0108bd7 <calculate_allocated_space>
f01164f6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01164f9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116500:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116507:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011650d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116510:	74 28                	je     f011653a <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116512:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116518:	83 ec 0c             	sub    $0xc,%esp
f011651b:	ff 75 c8             	pushl  -0x38(%ebp)
f011651e:	50                   	push   %eax
f011651f:	68 c0 87 13 f0       	push   $0xf01387c0
f0116524:	68 2a 07 00 00       	push   $0x72a
f0116529:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011652e:	e8 8b 9e fe ff       	call   f01003be <_warn>
f0116533:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116536:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011653a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116540:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116543:	74 28                	je     f011656d <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116545:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011654b:	83 ec 0c             	sub    $0xc,%esp
f011654e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116551:	50                   	push   %eax
f0116552:	68 20 88 13 f0       	push   $0xf0138820
f0116557:	68 2f 07 00 00       	push   $0x72f
f011655c:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116561:	e8 58 9e fe ff       	call   f01003be <_warn>
f0116566:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116569:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011656d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116571:	74 04                	je     f0116577 <test_calculate_allocated_space+0xb57>
f0116573:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116577:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011657b:	83 ec 04             	sub    $0x4,%esp
f011657e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116584:	50                   	push   %eax
f0116585:	68 ea 77 13 f0       	push   $0xf01377ea
f011658a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116590:	50                   	push   %eax
f0116591:	e8 f8 8d 01 00       	call   f012f38e <strcconcat>
f0116596:	83 c4 10             	add    $0x10,%esp
f0116599:	83 ec 0c             	sub    $0xc,%esp
f011659c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165a2:	50                   	push   %eax
f01165a3:	e8 1b b6 fe ff       	call   f0101bc3 <execute_command>
f01165a8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01165ab:	83 ec 04             	sub    $0x4,%esp
f01165ae:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01165b4:	50                   	push   %eax
f01165b5:	68 28 87 13 f0       	push   $0xf0138728
f01165ba:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01165c0:	50                   	push   %eax
f01165c1:	e8 c8 8d 01 00       	call   f012f38e <strcconcat>
f01165c6:	83 c4 10             	add    $0x10,%esp
f01165c9:	83 ec 0c             	sub    $0xc,%esp
f01165cc:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01165d2:	50                   	push   %eax
f01165d3:	e8 eb b5 fe ff       	call   f0101bc3 <execute_command>
f01165d8:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01165db:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01165e2:	00 00 00 
		num_pages = 0;
f01165e5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01165ec:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01165ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01165f2:	05 00 00 38 00       	add    $0x380000,%eax
f01165f7:	01 c0                	add    %eax,%eax
f01165f9:	89 c2                	mov    %eax,%edx
f01165fb:	83 ec 0c             	sub    $0xc,%esp
f01165fe:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116604:	50                   	push   %eax
f0116605:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011660b:	50                   	push   %eax
f011660c:	52                   	push   %edx
f011660d:	68 00 00 70 00       	push   $0x700000
f0116612:	ff 75 d8             	pushl  -0x28(%ebp)
f0116615:	e8 bd 25 ff ff       	call   f0108bd7 <calculate_allocated_space>
f011661a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011661d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116624:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011662b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116631:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116634:	74 28                	je     f011665e <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116636:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011663c:	83 ec 0c             	sub    $0xc,%esp
f011663f:	ff 75 c8             	pushl  -0x38(%ebp)
f0116642:	50                   	push   %eax
f0116643:	68 c0 87 13 f0       	push   $0xf01387c0
f0116648:	68 41 07 00 00       	push   $0x741
f011664d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116652:	e8 67 9d fe ff       	call   f01003be <_warn>
f0116657:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011665a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011665e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116664:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116667:	74 28                	je     f0116691 <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116669:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011666f:	83 ec 0c             	sub    $0xc,%esp
f0116672:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116675:	50                   	push   %eax
f0116676:	68 20 88 13 f0       	push   $0xf0138820
f011667b:	68 46 07 00 00       	push   $0x746
f0116680:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116685:	e8 34 9d fe ff       	call   f01003be <_warn>
f011668a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011668d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116691:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116695:	74 04                	je     f011669b <test_calculate_allocated_space+0xc7b>
f0116697:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011669b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011669f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01166a6:	00 00 00 
		num_pages = 0;
f01166a9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01166b0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01166b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01166b6:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01166bb:	89 c2                	mov    %eax,%edx
f01166bd:	83 ec 0c             	sub    $0xc,%esp
f01166c0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01166c6:	50                   	push   %eax
f01166c7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01166cd:	50                   	push   %eax
f01166ce:	52                   	push   %edx
f01166cf:	68 ff ff 3f 00       	push   $0x3fffff
f01166d4:	ff 75 d8             	pushl  -0x28(%ebp)
f01166d7:	e8 fb 24 ff ff       	call   f0108bd7 <calculate_allocated_space>
f01166dc:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01166df:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01166e6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01166ed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166f3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01166f6:	74 28                	je     f0116720 <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01166f8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166fe:	83 ec 0c             	sub    $0xc,%esp
f0116701:	ff 75 c8             	pushl  -0x38(%ebp)
f0116704:	50                   	push   %eax
f0116705:	68 c0 87 13 f0       	push   $0xf01387c0
f011670a:	68 54 07 00 00       	push   $0x754
f011670f:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116714:	e8 a5 9c fe ff       	call   f01003be <_warn>
f0116719:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011671c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116720:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116726:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116729:	74 28                	je     f0116753 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011672b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116731:	83 ec 0c             	sub    $0xc,%esp
f0116734:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116737:	50                   	push   %eax
f0116738:	68 20 88 13 f0       	push   $0xf0138820
f011673d:	68 59 07 00 00       	push   $0x759
f0116742:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116747:	e8 72 9c fe ff       	call   f01003be <_warn>
f011674c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011674f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116753:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116757:	74 04                	je     f011675d <test_calculate_allocated_space+0xd3d>
f0116759:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011675d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116761:	83 ec 0c             	sub    $0xc,%esp
f0116764:	68 9b 77 13 f0       	push   $0xf013779b
f0116769:	e8 c3 a6 fe ff       	call   f0100e31 <cprintf>
f011676e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116771:	83 ec 08             	sub    $0x8,%esp
f0116774:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116777:	68 7c 88 13 f0       	push   $0xf013887c
f011677c:	e8 b0 a6 fe ff       	call   f0100e31 <cprintf>
f0116781:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116784:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116788:	75 10                	jne    f011679a <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011678a:	83 ec 0c             	sub    $0xc,%esp
f011678d:	68 bc 88 13 f0       	push   $0xf01388bc
f0116792:	e8 9a a6 fe ff       	call   f0100e31 <cprintf>
f0116797:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011679a:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f011679f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01167a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01167a5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01167a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01167ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01167b0:	5b                   	pop    %ebx
f01167b1:	5e                   	pop    %esi
f01167b2:	5f                   	pop    %edi
f01167b3:	5d                   	pop    %ebp
f01167b4:	c3                   	ret    

f01167b5 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01167b5:	55                   	push   %ebp
f01167b6:	89 e5                	mov    %esp,%ebp
f01167b8:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01167bb:	8b 45 10             	mov    0x10(%ebp),%eax
f01167be:	ba 01 00 00 00       	mov    $0x1,%edx
f01167c3:	88 c1                	mov    %al,%cl
f01167c5:	d3 e2                	shl    %cl,%edx
f01167c7:	89 d0                	mov    %edx,%eax
f01167c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01167cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167cf:	c1 e8 16             	shr    $0x16,%eax
f01167d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01167dc:	01 d0                	add    %edx,%eax
f01167de:	8b 00                	mov    (%eax),%eax
f01167e0:	83 e0 01             	and    $0x1,%eax
f01167e3:	85 c0                	test   %eax,%eax
f01167e5:	75 07                	jne    f01167ee <CB+0x39>
f01167e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01167ec:	eb 76                	jmp    f0116864 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01167ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167f1:	c1 e8 16             	shr    $0x16,%eax
f01167f4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01167fe:	01 d0                	add    %edx,%eax
f0116800:	8b 00                	mov    (%eax),%eax
f0116802:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116807:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011680a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011680d:	c1 e8 0c             	shr    $0xc,%eax
f0116810:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116813:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116818:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011681b:	72 17                	jb     f0116834 <CB+0x7f>
f011681d:	ff 75 f0             	pushl  -0x10(%ebp)
f0116820:	68 08 89 13 f0       	push   $0xf0138908
f0116825:	68 74 07 00 00       	push   $0x774
f011682a:	68 0e 6e 13 f0       	push   $0xf0136e0e
f011682f:	e8 7c 99 fe ff       	call   f01001b0 <_panic>
f0116834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116837:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011683c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011683f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116842:	c1 e8 0c             	shr    $0xc,%eax
f0116845:	25 ff 03 00 00       	and    $0x3ff,%eax
f011684a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116851:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116854:	01 d0                	add    %edx,%eax
f0116856:	8b 00                	mov    (%eax),%eax
f0116858:	23 45 f4             	and    -0xc(%ebp),%eax
f011685b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011685e:	0f 94 c0             	sete   %al
f0116861:	0f b6 c0             	movzbl %al,%eax
}
f0116864:	c9                   	leave  
f0116865:	c3                   	ret    

f0116866 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116866:	55                   	push   %ebp
f0116867:	89 e5                	mov    %esp,%ebp
f0116869:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011686c:	8b 45 10             	mov    0x10(%ebp),%eax
f011686f:	ba 01 00 00 00       	mov    $0x1,%edx
f0116874:	88 c1                	mov    %al,%cl
f0116876:	d3 e2                	shl    %cl,%edx
f0116878:	89 d0                	mov    %edx,%eax
f011687a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011687d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116880:	c1 e8 16             	shr    $0x16,%eax
f0116883:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011688a:	8b 45 08             	mov    0x8(%ebp),%eax
f011688d:	01 d0                	add    %edx,%eax
f011688f:	8b 00                	mov    (%eax),%eax
f0116891:	83 e0 01             	and    $0x1,%eax
f0116894:	85 c0                	test   %eax,%eax
f0116896:	75 0a                	jne    f01168a2 <SB+0x3c>
f0116898:	b8 00 00 00 00       	mov    $0x0,%eax
f011689d:	e9 cd 00 00 00       	jmp    f011696f <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01168a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168a5:	c1 e8 16             	shr    $0x16,%eax
f01168a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168af:	8b 45 08             	mov    0x8(%ebp),%eax
f01168b2:	01 d0                	add    %edx,%eax
f01168b4:	8b 00                	mov    (%eax),%eax
f01168b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01168be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01168c1:	c1 e8 0c             	shr    $0xc,%eax
f01168c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01168c7:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01168cc:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01168cf:	72 17                	jb     f01168e8 <SB+0x82>
f01168d1:	ff 75 f0             	pushl  -0x10(%ebp)
f01168d4:	68 08 89 13 f0       	push   $0xf0138908
f01168d9:	68 7c 07 00 00       	push   $0x77c
f01168de:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01168e3:	e8 c8 98 fe ff       	call   f01001b0 <_panic>
f01168e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01168eb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01168f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f01168f3:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f01168f7:	74 3c                	je     f0116935 <SB+0xcf>
f01168f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168fc:	c1 e8 0c             	shr    $0xc,%eax
f01168ff:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116904:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011690b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011690e:	01 d0                	add    %edx,%eax
f0116910:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116913:	c1 ea 0c             	shr    $0xc,%edx
f0116916:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011691c:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116923:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116926:	01 ca                	add    %ecx,%edx
f0116928:	8b 12                	mov    (%edx),%edx
f011692a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011692d:	f7 d1                	not    %ecx
f011692f:	21 ca                	and    %ecx,%edx
f0116931:	89 10                	mov    %edx,(%eax)
f0116933:	eb 35                	jmp    f011696a <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116935:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116938:	c1 e8 0c             	shr    $0xc,%eax
f011693b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116940:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116947:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011694a:	01 c2                	add    %eax,%edx
f011694c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011694f:	c1 e8 0c             	shr    $0xc,%eax
f0116952:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116957:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011695e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116961:	01 c8                	add    %ecx,%eax
f0116963:	8b 00                	mov    (%eax),%eax
f0116965:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116968:	89 02                	mov    %eax,(%edx)
	return 0;
f011696a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011696f:	c9                   	leave  
f0116970:	c3                   	ret    

f0116971 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116971:	55                   	push   %ebp
f0116972:	89 e5                	mov    %esp,%ebp
f0116974:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116977:	8b 45 0c             	mov    0xc(%ebp),%eax
f011697a:	c1 e8 16             	shr    $0x16,%eax
f011697d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116984:	8b 45 08             	mov    0x8(%ebp),%eax
f0116987:	01 d0                	add    %edx,%eax
f0116989:	8b 00                	mov    (%eax),%eax
f011698b:	83 e0 01             	and    $0x1,%eax
f011698e:	85 c0                	test   %eax,%eax
f0116990:	75 0a                	jne    f011699c <CPs+0x2b>
f0116992:	b8 00 00 00 00       	mov    $0x0,%eax
f0116997:	e9 b8 00 00 00       	jmp    f0116a54 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011699c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011699f:	c1 e8 16             	shr    $0x16,%eax
f01169a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01169ac:	01 d0                	add    %edx,%eax
f01169ae:	8b 00                	mov    (%eax),%eax
f01169b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01169b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01169b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01169bb:	c1 e8 0c             	shr    $0xc,%eax
f01169be:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01169c1:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01169c6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01169c9:	72 17                	jb     f01169e2 <CPs+0x71>
f01169cb:	ff 75 f0             	pushl  -0x10(%ebp)
f01169ce:	68 08 89 13 f0       	push   $0xf0138908
f01169d3:	68 85 07 00 00       	push   $0x785
f01169d8:	68 0e 6e 13 f0       	push   $0xf0136e0e
f01169dd:	e8 ce 97 fe ff       	call   f01001b0 <_panic>
f01169e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01169e5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01169ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f01169ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01169f4:	eb 53                	jmp    f0116a49 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f01169f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01169f9:	ba 01 00 00 00       	mov    $0x1,%edx
f01169fe:	88 c1                	mov    %al,%cl
f0116a00:	d3 e2                	shl    %cl,%edx
f0116a02:	89 d0                	mov    %edx,%eax
f0116a04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116a07:	8b 45 14             	mov    0x14(%ebp),%eax
f0116a0a:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116a0d:	85 c0                	test   %eax,%eax
f0116a0f:	74 34                	je     f0116a45 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116a11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a14:	c1 e8 0c             	shr    $0xc,%eax
f0116a17:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116a1c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a26:	01 d0                	add    %edx,%eax
f0116a28:	8b 00                	mov    (%eax),%eax
f0116a2a:	33 45 10             	xor    0x10(%ebp),%eax
f0116a2d:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116a30:	85 c0                	test   %eax,%eax
f0116a32:	0f 94 c0             	sete   %al
f0116a35:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0116a38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116a3c:	75 08                	jne    f0116a46 <CPs+0xd5>
f0116a3e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a43:	eb 0f                	jmp    f0116a54 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116a45:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116a46:	ff 45 f4             	incl   -0xc(%ebp)
f0116a49:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116a4d:	7e a7                	jle    f01169f6 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116a4f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116a54:	c9                   	leave  
f0116a55:	c3                   	ret    

f0116a56 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116a56:	55                   	push   %ebp
f0116a57:	89 e5                	mov    %esp,%ebp
f0116a59:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116a5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a5f:	c1 e8 16             	shr    $0x16,%eax
f0116a62:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a6c:	01 d0                	add    %edx,%eax
f0116a6e:	8b 00                	mov    (%eax),%eax
f0116a70:	83 e0 01             	and    $0x1,%eax
f0116a73:	85 c0                	test   %eax,%eax
f0116a75:	75 07                	jne    f0116a7e <CA+0x28>
f0116a77:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a7c:	eb 6f                	jmp    f0116aed <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a81:	c1 e8 16             	shr    $0x16,%eax
f0116a84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a8e:	01 d0                	add    %edx,%eax
f0116a90:	8b 00                	mov    (%eax),%eax
f0116a92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a9d:	c1 e8 0c             	shr    $0xc,%eax
f0116aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116aa3:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116aa8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116aab:	72 17                	jb     f0116ac4 <CA+0x6e>
f0116aad:	ff 75 f4             	pushl  -0xc(%ebp)
f0116ab0:	68 08 89 13 f0       	push   $0xf0138908
f0116ab5:	68 94 07 00 00       	push   $0x794
f0116aba:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116abf:	e8 ec 96 fe ff       	call   f01001b0 <_panic>
f0116ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ac7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116acc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116acf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ad2:	c1 e8 0c             	shr    $0xc,%eax
f0116ad5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116ada:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ae1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ae4:	01 d0                	add    %edx,%eax
f0116ae6:	8b 00                	mov    (%eax),%eax
f0116ae8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116aed:	c9                   	leave  
f0116aee:	c3                   	ret    

f0116aef <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116aef:	55                   	push   %ebp
f0116af0:	89 e5                	mov    %esp,%ebp
f0116af2:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116af5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116af8:	c1 e8 16             	shr    $0x16,%eax
f0116afb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b02:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b05:	01 d0                	add    %edx,%eax
f0116b07:	8b 00                	mov    (%eax),%eax
f0116b09:	83 e0 01             	and    $0x1,%eax
f0116b0c:	85 c0                	test   %eax,%eax
f0116b0e:	75 07                	jne    f0116b17 <CE+0x28>
f0116b10:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b15:	eb 7a                	jmp    f0116b91 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116b17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b1a:	c1 e8 16             	shr    $0x16,%eax
f0116b1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b24:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b27:	01 d0                	add    %edx,%eax
f0116b29:	8b 00                	mov    (%eax),%eax
f0116b2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116b30:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b36:	c1 e8 0c             	shr    $0xc,%eax
f0116b39:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b3c:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116b41:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116b44:	72 17                	jb     f0116b5d <CE+0x6e>
f0116b46:	ff 75 f4             	pushl  -0xc(%ebp)
f0116b49:	68 08 89 13 f0       	push   $0xf0138908
f0116b4e:	68 9b 07 00 00       	push   $0x79b
f0116b53:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116b58:	e8 53 96 fe ff       	call   f01001b0 <_panic>
f0116b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b60:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b65:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116b68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b6b:	c1 e8 0c             	shr    $0xc,%eax
f0116b6e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b7d:	01 d0                	add    %edx,%eax
f0116b7f:	8b 00                	mov    (%eax),%eax
f0116b81:	85 c0                	test   %eax,%eax
f0116b83:	74 07                	je     f0116b8c <CE+0x9d>
f0116b85:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b8a:	eb 05                	jmp    f0116b91 <CE+0xa2>
	return 1;
f0116b8c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116b91:	c9                   	leave  
f0116b92:	c3                   	ret    

f0116b93 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116b93:	55                   	push   %ebp
f0116b94:	89 e5                	mov    %esp,%ebp
f0116b96:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116b99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b9c:	c1 e8 16             	shr    $0x16,%eax
f0116b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ba6:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ba9:	01 d0                	add    %edx,%eax
f0116bab:	8b 00                	mov    (%eax),%eax
f0116bad:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116bb3:	83 e0 01             	and    $0x1,%eax
f0116bb6:	85 c0                	test   %eax,%eax
f0116bb8:	0f 84 92 00 00 00    	je     f0116c50 <CP+0xbd>
	{
		uint32 *t = NULL;
f0116bbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116bc8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116bcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116bd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116bd3:	c1 e8 0c             	shr    $0xc,%eax
f0116bd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116bd9:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116bde:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116be1:	72 17                	jb     f0116bfa <CP+0x67>
f0116be3:	ff 75 ec             	pushl  -0x14(%ebp)
f0116be6:	68 08 89 13 f0       	push   $0xf0138908
f0116beb:	68 a7 07 00 00       	push   $0x7a7
f0116bf0:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116bf5:	e8 b6 95 fe ff       	call   f01001b0 <_panic>
f0116bfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116bfd:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116c02:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116c05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c08:	c1 e8 0c             	shr    $0xc,%eax
f0116c0b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c1a:	01 d0                	add    %edx,%eax
f0116c1c:	8b 00                	mov    (%eax),%eax
f0116c1e:	23 45 10             	and    0x10(%ebp),%eax
f0116c21:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116c24:	75 2a                	jne    f0116c50 <CP+0xbd>
f0116c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c29:	c1 e8 0c             	shr    $0xc,%eax
f0116c2c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c38:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c3b:	01 d0                	add    %edx,%eax
f0116c3d:	8b 00                	mov    (%eax),%eax
f0116c3f:	f7 d0                	not    %eax
f0116c41:	23 45 14             	and    0x14(%ebp),%eax
f0116c44:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116c47:	75 07                	jne    f0116c50 <CP+0xbd>
			return 1;
f0116c49:	b8 01 00 00 00       	mov    $0x1,%eax
f0116c4e:	eb 05                	jmp    f0116c55 <CP+0xc2>
	}
	return 0;
f0116c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116c55:	c9                   	leave  
f0116c56:	c3                   	ret    

f0116c57 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116c57:	55                   	push   %ebp
f0116c58:	89 e5                	mov    %esp,%ebp
f0116c5a:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c60:	c1 e8 16             	shr    $0x16,%eax
f0116c63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c6d:	01 d0                	add    %edx,%eax
f0116c6f:	8b 00                	mov    (%eax),%eax
f0116c71:	83 e0 01             	and    $0x1,%eax
f0116c74:	85 c0                	test   %eax,%eax
f0116c76:	75 07                	jne    f0116c7f <GP+0x28>
f0116c78:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c7d:	eb 6f                	jmp    f0116cee <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116c7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c82:	c1 e8 16             	shr    $0x16,%eax
f0116c85:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c8f:	01 d0                	add    %edx,%eax
f0116c91:	8b 00                	mov    (%eax),%eax
f0116c93:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116c98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c9e:	c1 e8 0c             	shr    $0xc,%eax
f0116ca1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116ca4:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116ca9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116cac:	72 17                	jb     f0116cc5 <GP+0x6e>
f0116cae:	ff 75 f4             	pushl  -0xc(%ebp)
f0116cb1:	68 08 89 13 f0       	push   $0xf0138908
f0116cb6:	68 b4 07 00 00       	push   $0x7b4
f0116cbb:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116cc0:	e8 eb 94 fe ff       	call   f01001b0 <_panic>
f0116cc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116cc8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116ccd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116cd3:	c1 e8 0c             	shr    $0xc,%eax
f0116cd6:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116cdb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ce2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ce5:	01 d0                	add    %edx,%eax
f0116ce7:	8b 00                	mov    (%eax),%eax
f0116ce9:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116cee:	c9                   	leave  
f0116cef:	c3                   	ret    

f0116cf0 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116cf0:	55                   	push   %ebp
f0116cf1:	89 e5                	mov    %esp,%ebp
f0116cf3:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116cf6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116cfd:	eb 18                	jmp    f0116d17 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116cff:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116d02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d09:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d0c:	01 d0                	add    %edx,%eax
f0116d0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116d14:	ff 45 fc             	incl   -0x4(%ebp)
f0116d17:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116d1a:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116d1f:	76 de                	jbe    f0116cff <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116d21:	90                   	nop
f0116d22:	c9                   	leave  
f0116d23:	c3                   	ret    

f0116d24 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116d24:	55                   	push   %ebp
f0116d25:	89 e5                	mov    %esp,%ebp
f0116d27:	83 ec 38             	sub    $0x38,%esp
f0116d2a:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116d2d:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116d30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d33:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116d3b:	8b 45 10             	mov    0x10(%ebp),%eax
f0116d3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d43:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116d46:	e9 ea 01 00 00       	jmp    f0116f35 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116d4b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116d4f:	74 44                	je     f0116d95 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d54:	83 ec 04             	sub    $0x4,%esp
f0116d57:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116d5a:	52                   	push   %edx
f0116d5b:	50                   	push   %eax
f0116d5c:	ff 75 08             	pushl  0x8(%ebp)
f0116d5f:	e8 fd 09 ff ff       	call   f0107761 <get_frame_info>
f0116d64:	83 c4 10             	add    $0x10,%esp
f0116d67:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116d6a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d6d:	85 c0                	test   %eax,%eax
f0116d6f:	75 24                	jne    f0116d95 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116d71:	83 ec 04             	sub    $0x4,%esp
f0116d74:	68 38 89 13 f0       	push   $0xf0138938
f0116d79:	68 cf 07 00 00       	push   $0x7cf
f0116d7e:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116d83:	e8 36 96 fe ff       	call   f01003be <_warn>
f0116d88:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116d8b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d90:	e9 b6 01 00 00       	jmp    f0116f4b <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116d98:	83 ec 04             	sub    $0x4,%esp
f0116d9b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116d9e:	52                   	push   %edx
f0116d9f:	50                   	push   %eax
f0116da0:	ff 75 08             	pushl  0x8(%ebp)
f0116da3:	e8 b9 09 ff ff       	call   f0107761 <get_frame_info>
f0116da8:	83 c4 10             	add    $0x10,%esp
f0116dab:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116db1:	85 c0                	test   %eax,%eax
f0116db3:	75 24                	jne    f0116dd9 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116db5:	83 ec 04             	sub    $0x4,%esp
f0116db8:	68 64 89 13 f0       	push   $0xf0138964
f0116dbd:	68 d6 07 00 00       	push   $0x7d6
f0116dc2:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116dc7:	e8 f2 95 fe ff       	call   f01003be <_warn>
f0116dcc:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116dcf:	b8 00 00 00 00       	mov    $0x0,%eax
f0116dd4:	e9 72 01 00 00       	jmp    f0116f4b <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116dd9:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116ddd:	75 70                	jne    f0116e4f <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116ddf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116de2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116de5:	c1 ea 0c             	shr    $0xc,%edx
f0116de8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116dee:	c1 e2 02             	shl    $0x2,%edx
f0116df1:	01 d0                	add    %edx,%eax
f0116df3:	8b 00                	mov    (%eax),%eax
f0116df5:	c1 e8 0c             	shr    $0xc,%eax
f0116df8:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116dfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116dfe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116e01:	c1 ea 0c             	shr    $0xc,%edx
f0116e04:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116e0a:	c1 e2 02             	shl    $0x2,%edx
f0116e0d:	01 d0                	add    %edx,%eax
f0116e0f:	8b 00                	mov    (%eax),%eax
f0116e11:	c1 e8 0c             	shr    $0xc,%eax
f0116e14:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116e17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116e1a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116e1d:	74 30                	je     f0116e4f <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116e1f:	83 ec 04             	sub    $0x4,%esp
f0116e22:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116e25:	ff 75 e8             	pushl  -0x18(%ebp)
f0116e28:	ff 75 f0             	pushl  -0x10(%ebp)
f0116e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0116e2e:	68 90 89 13 f0       	push   $0xf0138990
f0116e33:	68 e0 07 00 00       	push   $0x7e0
f0116e38:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116e3d:	e8 7c 95 fe ff       	call   f01003be <_warn>
f0116e42:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116e45:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e4a:	e9 fc 00 00 00       	jmp    f0116f4b <CCP+0x227>
			}
		}
		if (ref != -1)
f0116e4f:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116e53:	74 52                	je     f0116ea7 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116e55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e59:	74 0e                	je     f0116e69 <CCP+0x145>
f0116e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e5e:	8b 40 08             	mov    0x8(%eax),%eax
f0116e61:	0f b7 c0             	movzwl %ax,%eax
f0116e64:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116e67:	74 3e                	je     f0116ea7 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116e69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e6d:	74 0b                	je     f0116e7a <CCP+0x156>
f0116e6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e72:	8b 40 08             	mov    0x8(%eax),%eax
f0116e75:	0f b7 c0             	movzwl %ax,%eax
f0116e78:	eb 05                	jmp    f0116e7f <CCP+0x15b>
f0116e7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e7f:	83 ec 0c             	sub    $0xc,%esp
f0116e82:	50                   	push   %eax
f0116e83:	ff 75 f0             	pushl  -0x10(%ebp)
f0116e86:	68 ec 89 13 f0       	push   $0xf01389ec
f0116e8b:	68 e8 07 00 00       	push   $0x7e8
f0116e90:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116e95:	e8 24 95 fe ff       	call   f01003be <_warn>
f0116e9a:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116e9d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ea2:	e9 a4 00 00 00       	jmp    f0116f4b <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116eaa:	ff 75 20             	pushl  0x20(%ebp)
f0116ead:	ff 75 1c             	pushl  0x1c(%ebp)
f0116eb0:	50                   	push   %eax
f0116eb1:	ff 75 08             	pushl  0x8(%ebp)
f0116eb4:	e8 b8 fa ff ff       	call   f0116971 <CPs>
f0116eb9:	83 c4 10             	add    $0x10,%esp
f0116ebc:	85 c0                	test   %eax,%eax
f0116ebe:	7f 21                	jg     f0116ee1 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116ec0:	83 ec 04             	sub    $0x4,%esp
f0116ec3:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0116ec8:	68 ee 07 00 00       	push   $0x7ee
f0116ecd:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116ed2:	e8 e7 94 fe ff       	call   f01003be <_warn>
f0116ed7:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116eda:	b8 00 00 00 00       	mov    $0x0,%eax
f0116edf:	eb 6a                	jmp    f0116f4b <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116ee1:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116ee5:	74 3a                	je     f0116f21 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116eea:	ff 75 28             	pushl  0x28(%ebp)
f0116eed:	ff 75 24             	pushl  0x24(%ebp)
f0116ef0:	50                   	push   %eax
f0116ef1:	ff 75 08             	pushl  0x8(%ebp)
f0116ef4:	e8 78 fa ff ff       	call   f0116971 <CPs>
f0116ef9:	83 c4 10             	add    $0x10,%esp
f0116efc:	85 c0                	test   %eax,%eax
f0116efe:	7f 21                	jg     f0116f21 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116f00:	83 ec 04             	sub    $0x4,%esp
f0116f03:	68 a4 8a 13 f0       	push   $0xf0138aa4
f0116f08:	68 f5 07 00 00       	push   $0x7f5
f0116f0d:	68 0e 6e 13 f0       	push   $0xf0136e0e
f0116f12:	e8 a7 94 fe ff       	call   f01003be <_warn>
f0116f17:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116f1a:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f1f:	eb 2a                	jmp    f0116f4b <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116f21:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116f25:	74 07                	je     f0116f2e <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116f27:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116f2e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116f35:	8b 55 10             	mov    0x10(%ebp),%edx
f0116f38:	8b 45 14             	mov    0x14(%ebp),%eax
f0116f3b:	01 d0                	add    %edx,%eax
f0116f3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116f40:	0f 87 05 fe ff ff    	ja     f0116d4b <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116f46:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116f4b:	c9                   	leave  
f0116f4c:	c3                   	ret    

f0116f4d <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116f4d:	55                   	push   %ebp
f0116f4e:	89 e5                	mov    %esp,%ebp
f0116f50:	57                   	push   %edi
f0116f51:	56                   	push   %esi
f0116f52:	53                   	push   %ebx
f0116f53:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0116f59:	a0 3c cb 18 f0       	mov    0xf018cb3c,%al
f0116f5e:	84 c0                	test   %al,%al
f0116f60:	0f 84 38 0a 00 00    	je     f011799e <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116f66:	c6 05 3c cb 18 f0 00 	movb   $0x0,0xf018cb3c
		char command[100] = "load fos_add 20";
f0116f6d:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116f73:	bb 60 8d 13 f0       	mov    $0xf0138d60,%ebx
f0116f78:	ba 04 00 00 00       	mov    $0x4,%edx
f0116f7d:	89 c7                	mov    %eax,%edi
f0116f7f:	89 de                	mov    %ebx,%esi
f0116f81:	89 d1                	mov    %edx,%ecx
f0116f83:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116f85:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116f8b:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116f90:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f95:	89 d7                	mov    %edx,%edi
f0116f97:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116f99:	83 ec 0c             	sub    $0xc,%esp
f0116f9c:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116fa2:	50                   	push   %eax
f0116fa3:	e8 1b ac fe ff       	call   f0101bc3 <execute_command>
f0116fa8:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116fab:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116fb1:	bb c4 8d 13 f0       	mov    $0xf0138dc4,%ebx
f0116fb6:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116fbb:	89 c7                	mov    %eax,%edi
f0116fbd:	89 de                	mov    %ebx,%esi
f0116fbf:	89 d1                	mov    %edx,%ecx
f0116fc1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116fc3:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116fc9:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116fce:	b0 00                	mov    $0x0,%al
f0116fd0:	89 d7                	mov    %edx,%edi
f0116fd2:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116fd4:	83 ec 0c             	sub    $0xc,%esp
f0116fd7:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116fdd:	50                   	push   %eax
f0116fde:	e8 e0 ab fe ff       	call   f0101bc3 <execute_command>
f0116fe3:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116fe6:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116fec:	bb 28 8e 13 f0       	mov    $0xf0138e28,%ebx
f0116ff1:	ba 17 00 00 00       	mov    $0x17,%edx
f0116ff6:	89 c7                	mov    %eax,%edi
f0116ff8:	89 de                	mov    %ebx,%esi
f0116ffa:	89 d1                	mov    %edx,%ecx
f0116ffc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116ffe:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0117004:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117009:	b0 00                	mov    $0x0,%al
f011700b:	89 d7                	mov    %edx,%edi
f011700d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011700f:	83 ec 0c             	sub    $0xc,%esp
f0117012:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117018:	50                   	push   %eax
f0117019:	e8 a5 ab fe ff       	call   f0101bc3 <execute_command>
f011701e:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0117021:	83 ec 04             	sub    $0x4,%esp
f0117024:	6a 00                	push   $0x0
f0117026:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0117029:	50                   	push   %eax
f011702a:	6a 10                	push   $0x10
f011702c:	e8 7f 29 ff ff       	call   f01099b0 <envid2env>
f0117031:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0117034:	83 ec 04             	sub    $0x4,%esp
f0117037:	6a 00                	push   $0x0
f0117039:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011703c:	50                   	push   %eax
f011703d:	6a 11                	push   $0x11
f011703f:	e8 6c 29 ff ff       	call   f01099b0 <envid2env>
f0117044:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0117047:	83 ec 04             	sub    $0x4,%esp
f011704a:	6a 00                	push   $0x0
f011704c:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011704f:	50                   	push   %eax
f0117050:	6a 12                	push   $0x12
f0117052:	e8 59 29 ff ff       	call   f01099b0 <envid2env>
f0117057:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011705a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011705d:	85 c0                	test   %eax,%eax
f011705f:	74 0e                	je     f011706f <test_priority_normal_and_higher+0x122>
f0117061:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117064:	85 c0                	test   %eax,%eax
f0117066:	74 07                	je     f011706f <test_priority_normal_and_higher+0x122>
f0117068:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011706b:	85 c0                	test   %eax,%eax
f011706d:	75 14                	jne    f0117083 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f011706f:	83 ec 04             	sub    $0x4,%esp
f0117072:	68 e4 8a 13 f0       	push   $0xf0138ae4
f0117077:	6a 29                	push   $0x29
f0117079:	68 fd 8a 13 f0       	push   $0xf0138afd
f011707e:	e8 2d 91 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117083:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117086:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011708c:	83 f8 14             	cmp    $0x14,%eax
f011708f:	75 1c                	jne    f01170ad <test_priority_normal_and_higher+0x160>
f0117091:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117094:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011709a:	83 f8 0f             	cmp    $0xf,%eax
f011709d:	75 0e                	jne    f01170ad <test_priority_normal_and_higher+0x160>
f011709f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170a2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170a8:	83 f8 0a             	cmp    $0xa,%eax
f01170ab:	74 32                	je     f01170df <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f01170ad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170b0:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f01170b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170b9:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01170bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170c2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170c8:	83 ec 08             	sub    $0x8,%esp
f01170cb:	51                   	push   %ecx
f01170cc:	52                   	push   %edx
f01170cd:	50                   	push   %eax
f01170ce:	68 18 8b 13 f0       	push   $0xf0138b18
f01170d3:	6a 2c                	push   $0x2c
f01170d5:	68 fd 8a 13 f0       	push   $0xf0138afd
f01170da:	e8 d1 90 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f01170df:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01170e6:	eb 47                	jmp    f011712f <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01170e8:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01170eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01170ee:	89 d0                	mov    %edx,%eax
f01170f0:	01 c0                	add    %eax,%eax
f01170f2:	01 d0                	add    %edx,%eax
f01170f4:	c1 e0 03             	shl    $0x3,%eax
f01170f7:	01 c8                	add    %ecx,%eax
f01170f9:	05 b8 00 00 00       	add    $0xb8,%eax
f01170fe:	8b 10                	mov    (%eax),%edx
f0117100:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117103:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011710a:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011710d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117110:	89 d0                	mov    %edx,%eax
f0117112:	01 c0                	add    %eax,%eax
f0117114:	01 d0                	add    %edx,%eax
f0117116:	c1 e0 03             	shl    $0x3,%eax
f0117119:	01 c8                	add    %ecx,%eax
f011711b:	05 c0 00 00 00       	add    $0xc0,%eax
f0117120:	8b 10                	mov    (%eax),%edx
f0117122:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117125:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f011712c:	ff 45 e4             	incl   -0x1c(%ebp)
f011712f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117133:	7e b3                	jle    f01170e8 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117135:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011713c:	eb 47                	jmp    f0117185 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011713e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117141:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117144:	89 d0                	mov    %edx,%eax
f0117146:	01 c0                	add    %eax,%eax
f0117148:	01 d0                	add    %edx,%eax
f011714a:	c1 e0 03             	shl    $0x3,%eax
f011714d:	01 c8                	add    %ecx,%eax
f011714f:	05 b8 00 00 00       	add    $0xb8,%eax
f0117154:	8b 10                	mov    (%eax),%edx
f0117156:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117159:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117160:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117163:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117166:	89 d0                	mov    %edx,%eax
f0117168:	01 c0                	add    %eax,%eax
f011716a:	01 d0                	add    %edx,%eax
f011716c:	c1 e0 03             	shl    $0x3,%eax
f011716f:	01 c8                	add    %ecx,%eax
f0117171:	05 c0 00 00 00       	add    $0xc0,%eax
f0117176:	8b 10                	mov    (%eax),%edx
f0117178:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011717b:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117182:	ff 45 e0             	incl   -0x20(%ebp)
f0117185:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0117189:	7e b3                	jle    f011713e <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011718b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117192:	eb 47                	jmp    f01171db <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117194:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117197:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011719a:	89 d0                	mov    %edx,%eax
f011719c:	01 c0                	add    %eax,%eax
f011719e:	01 d0                	add    %edx,%eax
f01171a0:	c1 e0 03             	shl    $0x3,%eax
f01171a3:	01 c8                	add    %ecx,%eax
f01171a5:	05 b8 00 00 00       	add    $0xb8,%eax
f01171aa:	8b 10                	mov    (%eax),%edx
f01171ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171af:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01171b6:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01171b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171bc:	89 d0                	mov    %edx,%eax
f01171be:	01 c0                	add    %eax,%eax
f01171c0:	01 d0                	add    %edx,%eax
f01171c2:	c1 e0 03             	shl    $0x3,%eax
f01171c5:	01 c8                	add    %ecx,%eax
f01171c7:	05 c0 00 00 00       	add    $0xc0,%eax
f01171cc:	8b 10                	mov    (%eax),%edx
f01171ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171d1:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01171d8:	ff 45 dc             	incl   -0x24(%ebp)
f01171db:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01171df:	7e b3                	jle    f0117194 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01171e1:	e8 da 57 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01171e6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f01171e9:	e8 78 d4 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01171ee:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01171f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171f4:	83 ec 08             	sub    $0x8,%esp
f01171f7:	6a 03                	push   $0x3
f01171f9:	50                   	push   %eax
f01171fa:	e8 a8 3c ff ff       	call   f010aea7 <set_program_priority>
f01171ff:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117202:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117205:	83 ec 08             	sub    $0x8,%esp
f0117208:	6a 03                	push   $0x3
f011720a:	50                   	push   %eax
f011720b:	e8 97 3c ff ff       	call   f010aea7 <set_program_priority>
f0117210:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117213:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117216:	83 ec 08             	sub    $0x8,%esp
f0117219:	6a 03                	push   $0x3
f011721b:	50                   	push   %eax
f011721c:	e8 86 3c ff ff       	call   f010aea7 <set_program_priority>
f0117221:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117224:	e8 3d d4 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117229:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011722c:	74 14                	je     f0117242 <test_priority_normal_and_higher+0x2f5>
f011722e:	83 ec 04             	sub    $0x4,%esp
f0117231:	68 80 8b 13 f0       	push   $0xf0138b80
f0117236:	6a 48                	push   $0x48
f0117238:	68 fd 8a 13 f0       	push   $0xf0138afd
f011723d:	e8 6e 8f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117242:	e8 79 57 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117247:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011724a:	74 14                	je     f0117260 <test_priority_normal_and_higher+0x313>
f011724c:	83 ec 04             	sub    $0x4,%esp
f011724f:	68 80 8b 13 f0       	push   $0xf0138b80
f0117254:	6a 49                	push   $0x49
f0117256:	68 fd 8a 13 f0       	push   $0xf0138afd
f011725b:	e8 50 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117260:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117263:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117269:	83 f8 14             	cmp    $0x14,%eax
f011726c:	75 1c                	jne    f011728a <test_priority_normal_and_higher+0x33d>
f011726e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117271:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117277:	83 f8 0f             	cmp    $0xf,%eax
f011727a:	75 0e                	jne    f011728a <test_priority_normal_and_higher+0x33d>
f011727c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011727f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117285:	83 f8 0a             	cmp    $0xa,%eax
f0117288:	74 14                	je     f011729e <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011728a:	83 ec 04             	sub    $0x4,%esp
f011728d:	68 ac 8b 13 f0       	push   $0xf0138bac
f0117292:	6a 4c                	push   $0x4c
f0117294:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117299:	e8 12 8f fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011729e:	e8 1d 57 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01172a3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01172a6:	e8 bb d3 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01172ab:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01172ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172b1:	83 ec 08             	sub    $0x8,%esp
f01172b4:	6a 04                	push   $0x4
f01172b6:	50                   	push   %eax
f01172b7:	e8 eb 3b ff ff       	call   f010aea7 <set_program_priority>
f01172bc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01172bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172c2:	83 ec 08             	sub    $0x8,%esp
f01172c5:	6a 04                	push   $0x4
f01172c7:	50                   	push   %eax
f01172c8:	e8 da 3b ff ff       	call   f010aea7 <set_program_priority>
f01172cd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01172d0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172d3:	83 ec 08             	sub    $0x8,%esp
f01172d6:	6a 04                	push   $0x4
f01172d8:	50                   	push   %eax
f01172d9:	e8 c9 3b ff ff       	call   f010aea7 <set_program_priority>
f01172de:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01172e1:	e8 80 d3 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01172e6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01172e9:	74 14                	je     f01172ff <test_priority_normal_and_higher+0x3b2>
f01172eb:	83 ec 04             	sub    $0x4,%esp
f01172ee:	68 80 8b 13 f0       	push   $0xf0138b80
f01172f3:	6a 56                	push   $0x56
f01172f5:	68 fd 8a 13 f0       	push   $0xf0138afd
f01172fa:	e8 b1 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f01172ff:	e8 bc 56 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117304:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117307:	74 14                	je     f011731d <test_priority_normal_and_higher+0x3d0>
f0117309:	83 ec 04             	sub    $0x4,%esp
f011730c:	68 00 8c 13 f0       	push   $0xf0138c00
f0117311:	6a 57                	push   $0x57
f0117313:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117318:	e8 93 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011731d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117320:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117326:	83 f8 14             	cmp    $0x14,%eax
f0117329:	75 1c                	jne    f0117347 <test_priority_normal_and_higher+0x3fa>
f011732b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011732e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117334:	83 f8 0f             	cmp    $0xf,%eax
f0117337:	75 0e                	jne    f0117347 <test_priority_normal_and_higher+0x3fa>
f0117339:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011733c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117342:	83 f8 14             	cmp    $0x14,%eax
f0117345:	74 14                	je     f011735b <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117347:	83 ec 04             	sub    $0x4,%esp
f011734a:	68 30 8c 13 f0       	push   $0xf0138c30
f011734f:	6a 5a                	push   $0x5a
f0117351:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117356:	e8 55 8e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011735b:	e8 60 56 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117360:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117363:	e8 fe d2 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117368:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f011736b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011736e:	83 ec 08             	sub    $0x8,%esp
f0117371:	6a 04                	push   $0x4
f0117373:	50                   	push   %eax
f0117374:	e8 2e 3b ff ff       	call   f010aea7 <set_program_priority>
f0117379:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011737c:	e8 e5 d2 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117381:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117384:	74 14                	je     f011739a <test_priority_normal_and_higher+0x44d>
f0117386:	83 ec 04             	sub    $0x4,%esp
f0117389:	68 80 8b 13 f0       	push   $0xf0138b80
f011738e:	6a 62                	push   $0x62
f0117390:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117395:	e8 16 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011739a:	e8 21 56 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011739f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01173a2:	74 14                	je     f01173b8 <test_priority_normal_and_higher+0x46b>
f01173a4:	83 ec 04             	sub    $0x4,%esp
f01173a7:	68 80 8b 13 f0       	push   $0xf0138b80
f01173ac:	6a 63                	push   $0x63
f01173ae:	68 fd 8a 13 f0       	push   $0xf0138afd
f01173b3:	e8 f8 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01173b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01173bb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173c1:	83 f8 14             	cmp    $0x14,%eax
f01173c4:	75 1c                	jne    f01173e2 <test_priority_normal_and_higher+0x495>
f01173c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173c9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173cf:	83 f8 0f             	cmp    $0xf,%eax
f01173d2:	75 0e                	jne    f01173e2 <test_priority_normal_and_higher+0x495>
f01173d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173d7:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173dd:	83 f8 14             	cmp    $0x14,%eax
f01173e0:	74 14                	je     f01173f6 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f01173e2:	83 ec 04             	sub    $0x4,%esp
f01173e5:	68 78 8c 13 f0       	push   $0xf0138c78
f01173ea:	6a 66                	push   $0x66
f01173ec:	68 fd 8a 13 f0       	push   $0xf0138afd
f01173f1:	e8 ba 8d fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01173f6:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01173fd:	eb 1c                	jmp    f011741b <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01173ff:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117402:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117405:	89 d0                	mov    %edx,%eax
f0117407:	01 c0                	add    %eax,%eax
f0117409:	01 d0                	add    %edx,%eax
f011740b:	c1 e0 03             	shl    $0x3,%eax
f011740e:	01 c8                	add    %ecx,%eax
f0117410:	05 bc 00 00 00       	add    $0xbc,%eax
f0117415:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117418:	ff 45 d8             	incl   -0x28(%ebp)
f011741b:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011741f:	7e de                	jle    f01173ff <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117421:	e8 9a 55 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117426:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117429:	e8 38 d2 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011742e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0117431:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117434:	83 ec 08             	sub    $0x8,%esp
f0117437:	6a 04                	push   $0x4
f0117439:	50                   	push   %eax
f011743a:	e8 68 3a ff ff       	call   f010aea7 <set_program_priority>
f011743f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117442:	e8 1f d2 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117447:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011744a:	74 14                	je     f0117460 <test_priority_normal_and_higher+0x513>
f011744c:	83 ec 04             	sub    $0x4,%esp
f011744f:	68 80 8b 13 f0       	push   $0xf0138b80
f0117454:	6a 73                	push   $0x73
f0117456:	68 fd 8a 13 f0       	push   $0xf0138afd
f011745b:	e8 50 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117460:	e8 5b 55 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117465:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117468:	74 14                	je     f011747e <test_priority_normal_and_higher+0x531>
f011746a:	83 ec 04             	sub    $0x4,%esp
f011746d:	68 80 8b 13 f0       	push   $0xf0138b80
f0117472:	6a 74                	push   $0x74
f0117474:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117479:	e8 32 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011747e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117481:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117487:	83 f8 14             	cmp    $0x14,%eax
f011748a:	75 1c                	jne    f01174a8 <test_priority_normal_and_higher+0x55b>
f011748c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011748f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117495:	83 f8 0f             	cmp    $0xf,%eax
f0117498:	75 0e                	jne    f01174a8 <test_priority_normal_and_higher+0x55b>
f011749a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011749d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174a3:	83 f8 14             	cmp    $0x14,%eax
f01174a6:	74 14                	je     f01174bc <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f01174a8:	83 ec 04             	sub    $0x4,%esp
f01174ab:	68 78 8c 13 f0       	push   $0xf0138c78
f01174b0:	6a 77                	push   $0x77
f01174b2:	68 fd 8a 13 f0       	push   $0xf0138afd
f01174b7:	e8 f4 8c fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f01174bc:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01174c3:	eb 1c                	jmp    f01174e1 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01174c5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01174c8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01174cb:	89 d0                	mov    %edx,%eax
f01174cd:	01 c0                	add    %eax,%eax
f01174cf:	01 d0                	add    %edx,%eax
f01174d1:	c1 e0 03             	shl    $0x3,%eax
f01174d4:	01 c8                	add    %ecx,%eax
f01174d6:	05 bc 00 00 00       	add    $0xbc,%eax
f01174db:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01174de:	ff 45 d4             	incl   -0x2c(%ebp)
f01174e1:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01174e5:	7e de                	jle    f01174c5 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01174e7:	e8 d4 54 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01174ec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174ef:	e8 72 d1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01174f4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01174f7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01174fa:	83 ec 08             	sub    $0x8,%esp
f01174fd:	6a 05                	push   $0x5
f01174ff:	50                   	push   %eax
f0117500:	e8 a2 39 ff ff       	call   f010aea7 <set_program_priority>
f0117505:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117508:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011750b:	83 ec 08             	sub    $0x8,%esp
f011750e:	6a 05                	push   $0x5
f0117510:	50                   	push   %eax
f0117511:	e8 91 39 ff ff       	call   f010aea7 <set_program_priority>
f0117516:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117519:	e8 48 d1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011751e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117521:	74 17                	je     f011753a <test_priority_normal_and_higher+0x5ed>
f0117523:	83 ec 04             	sub    $0x4,%esp
f0117526:	68 80 8b 13 f0       	push   $0xf0138b80
f011752b:	68 82 00 00 00       	push   $0x82
f0117530:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117535:	e8 76 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011753a:	e8 81 54 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011753f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117542:	74 17                	je     f011755b <test_priority_normal_and_higher+0x60e>
f0117544:	83 ec 04             	sub    $0x4,%esp
f0117547:	68 80 8b 13 f0       	push   $0xf0138b80
f011754c:	68 83 00 00 00       	push   $0x83
f0117551:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117556:	e8 55 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011755b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011755e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117564:	83 f8 14             	cmp    $0x14,%eax
f0117567:	75 1c                	jne    f0117585 <test_priority_normal_and_higher+0x638>
f0117569:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011756c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117572:	83 f8 1e             	cmp    $0x1e,%eax
f0117575:	75 0e                	jne    f0117585 <test_priority_normal_and_higher+0x638>
f0117577:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011757a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117580:	83 f8 28             	cmp    $0x28,%eax
f0117583:	74 17                	je     f011759c <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0117585:	83 ec 04             	sub    $0x4,%esp
f0117588:	68 b4 8c 13 f0       	push   $0xf0138cb4
f011758d:	68 86 00 00 00       	push   $0x86
f0117592:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117597:	e8 14 8c fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f011759c:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01175a3:	eb 1c                	jmp    f01175c1 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01175a5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01175a8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01175ab:	89 d0                	mov    %edx,%eax
f01175ad:	01 c0                	add    %eax,%eax
f01175af:	01 d0                	add    %edx,%eax
f01175b1:	c1 e0 03             	shl    $0x3,%eax
f01175b4:	01 c8                	add    %ecx,%eax
f01175b6:	05 bc 00 00 00       	add    $0xbc,%eax
f01175bb:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01175be:	ff 45 d0             	incl   -0x30(%ebp)
f01175c1:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01175c5:	7e de                	jle    f01175a5 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01175c7:	e8 f4 53 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01175cc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01175cf:	e8 92 d0 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01175d4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01175d7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175da:	83 ec 08             	sub    $0x8,%esp
f01175dd:	6a 05                	push   $0x5
f01175df:	50                   	push   %eax
f01175e0:	e8 c2 38 ff ff       	call   f010aea7 <set_program_priority>
f01175e5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01175e8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175eb:	83 ec 08             	sub    $0x8,%esp
f01175ee:	6a 04                	push   $0x4
f01175f0:	50                   	push   %eax
f01175f1:	e8 b1 38 ff ff       	call   f010aea7 <set_program_priority>
f01175f6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01175f9:	e8 68 d0 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01175fe:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117601:	74 17                	je     f011761a <test_priority_normal_and_higher+0x6cd>
f0117603:	83 ec 04             	sub    $0x4,%esp
f0117606:	68 80 8b 13 f0       	push   $0xf0138b80
f011760b:	68 91 00 00 00       	push   $0x91
f0117610:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117615:	e8 96 8b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011761a:	e8 a1 53 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011761f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117622:	74 17                	je     f011763b <test_priority_normal_and_higher+0x6ee>
f0117624:	83 ec 04             	sub    $0x4,%esp
f0117627:	68 80 8b 13 f0       	push   $0xf0138b80
f011762c:	68 92 00 00 00       	push   $0x92
f0117631:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117636:	e8 75 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011763b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011763e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117644:	83 f8 14             	cmp    $0x14,%eax
f0117647:	75 1c                	jne    f0117665 <test_priority_normal_and_higher+0x718>
f0117649:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011764c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117652:	83 f8 1e             	cmp    $0x1e,%eax
f0117655:	75 0e                	jne    f0117665 <test_priority_normal_and_higher+0x718>
f0117657:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011765a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117660:	83 f8 28             	cmp    $0x28,%eax
f0117663:	74 17                	je     f011767c <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117665:	83 ec 04             	sub    $0x4,%esp
f0117668:	68 b4 8c 13 f0       	push   $0xf0138cb4
f011766d:	68 95 00 00 00       	push   $0x95
f0117672:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117677:	e8 34 8b fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f011767c:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0117683:	eb 1c                	jmp    f01176a1 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117685:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117688:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011768b:	89 d0                	mov    %edx,%eax
f011768d:	01 c0                	add    %eax,%eax
f011768f:	01 d0                	add    %edx,%eax
f0117691:	c1 e0 03             	shl    $0x3,%eax
f0117694:	01 c8                	add    %ecx,%eax
f0117696:	05 bc 00 00 00       	add    $0xbc,%eax
f011769b:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011769e:	ff 45 cc             	incl   -0x34(%ebp)
f01176a1:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01176a5:	7e de                	jle    f0117685 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01176a7:	e8 14 53 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01176ac:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176af:	e8 b2 cf fe ff       	call   f0104666 <pf_calculate_free_frames>
f01176b4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01176b7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01176ba:	83 ec 08             	sub    $0x8,%esp
f01176bd:	6a 05                	push   $0x5
f01176bf:	50                   	push   %eax
f01176c0:	e8 e2 37 ff ff       	call   f010aea7 <set_program_priority>
f01176c5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01176c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176cb:	83 ec 08             	sub    $0x8,%esp
f01176ce:	6a 04                	push   $0x4
f01176d0:	50                   	push   %eax
f01176d1:	e8 d1 37 ff ff       	call   f010aea7 <set_program_priority>
f01176d6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01176d9:	e8 88 cf fe ff       	call   f0104666 <pf_calculate_free_frames>
f01176de:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01176e1:	74 17                	je     f01176fa <test_priority_normal_and_higher+0x7ad>
f01176e3:	83 ec 04             	sub    $0x4,%esp
f01176e6:	68 80 8b 13 f0       	push   $0xf0138b80
f01176eb:	68 a0 00 00 00       	push   $0xa0
f01176f0:	68 fd 8a 13 f0       	push   $0xf0138afd
f01176f5:	e8 b6 8a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01176fa:	e8 c1 52 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01176ff:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117702:	74 17                	je     f011771b <test_priority_normal_and_higher+0x7ce>
f0117704:	83 ec 04             	sub    $0x4,%esp
f0117707:	68 80 8b 13 f0       	push   $0xf0138b80
f011770c:	68 a1 00 00 00       	push   $0xa1
f0117711:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117716:	e8 95 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011771b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011771e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117724:	83 f8 14             	cmp    $0x14,%eax
f0117727:	75 1c                	jne    f0117745 <test_priority_normal_and_higher+0x7f8>
f0117729:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011772c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117732:	83 f8 3c             	cmp    $0x3c,%eax
f0117735:	75 0e                	jne    f0117745 <test_priority_normal_and_higher+0x7f8>
f0117737:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011773a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117740:	83 f8 28             	cmp    $0x28,%eax
f0117743:	74 17                	je     f011775c <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117745:	83 ec 04             	sub    $0x4,%esp
f0117748:	68 b4 8c 13 f0       	push   $0xf0138cb4
f011774d:	68 a4 00 00 00       	push   $0xa4
f0117752:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117757:	e8 54 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f011775c:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117763:	eb 1c                	jmp    f0117781 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117765:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117768:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011776b:	89 d0                	mov    %edx,%eax
f011776d:	01 c0                	add    %eax,%eax
f011776f:	01 d0                	add    %edx,%eax
f0117771:	c1 e0 03             	shl    $0x3,%eax
f0117774:	01 c8                	add    %ecx,%eax
f0117776:	05 bc 00 00 00       	add    $0xbc,%eax
f011777b:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011777e:	ff 45 c8             	incl   -0x38(%ebp)
f0117781:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117785:	7e de                	jle    f0117765 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117787:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011778e:	eb 1c                	jmp    f01177ac <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0117790:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117793:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117796:	89 d0                	mov    %edx,%eax
f0117798:	01 c0                	add    %eax,%eax
f011779a:	01 d0                	add    %edx,%eax
f011779c:	c1 e0 03             	shl    $0x3,%eax
f011779f:	01 c8                	add    %ecx,%eax
f01177a1:	05 bc 00 00 00       	add    $0xbc,%eax
f01177a6:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01177a9:	ff 45 c4             	incl   -0x3c(%ebp)
f01177ac:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01177b0:	7e de                	jle    f0117790 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01177b2:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01177b9:	eb 7d                	jmp    f0117838 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01177bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01177be:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01177c5:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01177c8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01177cb:	89 d0                	mov    %edx,%eax
f01177cd:	01 c0                	add    %eax,%eax
f01177cf:	01 d0                	add    %edx,%eax
f01177d1:	c1 e0 03             	shl    $0x3,%eax
f01177d4:	01 d8                	add    %ebx,%eax
f01177d6:	05 b8 00 00 00       	add    $0xb8,%eax
f01177db:	8b 00                	mov    (%eax),%eax
f01177dd:	39 c1                	cmp    %eax,%ecx
f01177df:	74 17                	je     f01177f8 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f01177e1:	83 ec 04             	sub    $0x4,%esp
f01177e4:	68 f0 8c 13 f0       	push   $0xf0138cf0
f01177e9:	68 b2 00 00 00       	push   $0xb2
f01177ee:	68 fd 8a 13 f0       	push   $0xf0138afd
f01177f3:	e8 b8 89 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01177f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01177fb:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117802:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117805:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117808:	89 d0                	mov    %edx,%eax
f011780a:	01 c0                	add    %eax,%eax
f011780c:	01 d0                	add    %edx,%eax
f011780e:	c1 e0 03             	shl    $0x3,%eax
f0117811:	01 d8                	add    %ebx,%eax
f0117813:	05 c0 00 00 00       	add    $0xc0,%eax
f0117818:	8b 00                	mov    (%eax),%eax
f011781a:	39 c1                	cmp    %eax,%ecx
f011781c:	74 17                	je     f0117835 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f011781e:	83 ec 04             	sub    $0x4,%esp
f0117821:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117826:	68 b5 00 00 00       	push   $0xb5
f011782b:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117830:	e8 7b 89 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117835:	ff 45 c0             	incl   -0x40(%ebp)
f0117838:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011783c:	0f 8e 79 ff ff ff    	jle    f01177bb <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117842:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117849:	eb 7d                	jmp    f01178c8 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011784b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011784e:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117855:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117858:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011785b:	89 d0                	mov    %edx,%eax
f011785d:	01 c0                	add    %eax,%eax
f011785f:	01 d0                	add    %edx,%eax
f0117861:	c1 e0 03             	shl    $0x3,%eax
f0117864:	01 d8                	add    %ebx,%eax
f0117866:	05 b8 00 00 00       	add    $0xb8,%eax
f011786b:	8b 00                	mov    (%eax),%eax
f011786d:	39 c1                	cmp    %eax,%ecx
f011786f:	74 17                	je     f0117888 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0117871:	83 ec 04             	sub    $0x4,%esp
f0117874:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117879:	68 bb 00 00 00       	push   $0xbb
f011787e:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117883:	e8 28 89 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117888:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011788b:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117892:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117895:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117898:	89 d0                	mov    %edx,%eax
f011789a:	01 c0                	add    %eax,%eax
f011789c:	01 d0                	add    %edx,%eax
f011789e:	c1 e0 03             	shl    $0x3,%eax
f01178a1:	01 d8                	add    %ebx,%eax
f01178a3:	05 c0 00 00 00       	add    $0xc0,%eax
f01178a8:	8b 00                	mov    (%eax),%eax
f01178aa:	39 c1                	cmp    %eax,%ecx
f01178ac:	74 17                	je     f01178c5 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f01178ae:	83 ec 04             	sub    $0x4,%esp
f01178b1:	68 f0 8c 13 f0       	push   $0xf0138cf0
f01178b6:	68 be 00 00 00       	push   $0xbe
f01178bb:	68 fd 8a 13 f0       	push   $0xf0138afd
f01178c0:	e8 eb 88 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01178c5:	ff 45 bc             	incl   -0x44(%ebp)
f01178c8:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01178cc:	0f 8e 79 ff ff ff    	jle    f011784b <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01178d2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01178d9:	eb 7d                	jmp    f0117958 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01178db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178de:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01178e5:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01178e8:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01178eb:	89 d0                	mov    %edx,%eax
f01178ed:	01 c0                	add    %eax,%eax
f01178ef:	01 d0                	add    %edx,%eax
f01178f1:	c1 e0 03             	shl    $0x3,%eax
f01178f4:	01 d8                	add    %ebx,%eax
f01178f6:	05 b8 00 00 00       	add    $0xb8,%eax
f01178fb:	8b 00                	mov    (%eax),%eax
f01178fd:	39 c1                	cmp    %eax,%ecx
f01178ff:	74 17                	je     f0117918 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0117901:	83 ec 04             	sub    $0x4,%esp
f0117904:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117909:	68 c4 00 00 00       	push   $0xc4
f011790e:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117913:	e8 98 88 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117918:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011791b:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117922:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117925:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117928:	89 d0                	mov    %edx,%eax
f011792a:	01 c0                	add    %eax,%eax
f011792c:	01 d0                	add    %edx,%eax
f011792e:	c1 e0 03             	shl    $0x3,%eax
f0117931:	01 d8                	add    %ebx,%eax
f0117933:	05 c0 00 00 00       	add    $0xc0,%eax
f0117938:	8b 00                	mov    (%eax),%eax
f011793a:	39 c1                	cmp    %eax,%ecx
f011793c:	74 17                	je     f0117955 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f011793e:	83 ec 04             	sub    $0x4,%esp
f0117941:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117946:	68 c7 00 00 00       	push   $0xc7
f011794b:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117950:	e8 5b 88 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117955:	ff 45 b8             	incl   -0x48(%ebp)
f0117958:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011795c:	0f 8e 79 ff ff ff    	jle    f01178db <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117962:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117969:	75 6e 61 
f011796c:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117973:	6c 00 00 
f0117976:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011797c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117981:	b8 00 00 00 00       	mov    $0x0,%eax
f0117986:	89 d7                	mov    %edx,%edi
f0117988:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011798a:	83 ec 0c             	sub    $0xc,%esp
f011798d:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117993:	50                   	push   %eax
f0117994:	e8 2a a2 fe ff       	call   f0101bc3 <execute_command>
f0117999:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f011799c:	eb 10                	jmp    f01179ae <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011799e:	83 ec 0c             	sub    $0xc,%esp
f01179a1:	68 24 8d 13 f0       	push   $0xf0138d24
f01179a6:	e8 86 94 fe ff       	call   f0100e31 <cprintf>
f01179ab:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f01179ae:	90                   	nop
f01179af:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01179b2:	5b                   	pop    %ebx
f01179b3:	5e                   	pop    %esi
f01179b4:	5f                   	pop    %edi
f01179b5:	5d                   	pop    %ebp
f01179b6:	c3                   	ret    

f01179b7 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01179b7:	55                   	push   %ebp
f01179b8:	89 e5                	mov    %esp,%ebp
f01179ba:	57                   	push   %edi
f01179bb:	56                   	push   %esi
f01179bc:	53                   	push   %ebx
f01179bd:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f01179c3:	a0 3c cb 18 f0       	mov    0xf018cb3c,%al
f01179c8:	84 c0                	test   %al,%al
f01179ca:	0f 84 1b 0a 00 00    	je     f01183eb <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01179d0:	c6 05 3c cb 18 f0 00 	movb   $0x0,0xf018cb3c
		char command[100] = "load fos_add 20";
f01179d7:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01179dd:	bb 60 8d 13 f0       	mov    $0xf0138d60,%ebx
f01179e2:	ba 04 00 00 00       	mov    $0x4,%edx
f01179e7:	89 c7                	mov    %eax,%edi
f01179e9:	89 de                	mov    %ebx,%esi
f01179eb:	89 d1                	mov    %edx,%ecx
f01179ed:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01179ef:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01179f5:	b9 15 00 00 00       	mov    $0x15,%ecx
f01179fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01179ff:	89 d7                	mov    %edx,%edi
f0117a01:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117a03:	83 ec 0c             	sub    $0xc,%esp
f0117a06:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117a0c:	50                   	push   %eax
f0117a0d:	e8 b1 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a12:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117a15:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a1b:	bb 68 90 13 f0       	mov    $0xf0139068,%ebx
f0117a20:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117a25:	89 c7                	mov    %eax,%edi
f0117a27:	89 de                	mov    %ebx,%esi
f0117a29:	89 d1                	mov    %edx,%ecx
f0117a2b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117a2d:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117a33:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117a38:	b0 00                	mov    $0x0,%al
f0117a3a:	89 d7                	mov    %edx,%edi
f0117a3c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117a3e:	83 ec 0c             	sub    $0xc,%esp
f0117a41:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a47:	50                   	push   %eax
f0117a48:	e8 76 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a4d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117a50:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117a56:	bb cc 90 13 f0       	mov    $0xf01390cc,%ebx
f0117a5b:	ba 17 00 00 00       	mov    $0x17,%edx
f0117a60:	89 c7                	mov    %eax,%edi
f0117a62:	89 de                	mov    %ebx,%esi
f0117a64:	89 d1                	mov    %edx,%ecx
f0117a66:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117a68:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117a6e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117a73:	b0 00                	mov    $0x0,%al
f0117a75:	89 d7                	mov    %edx,%edi
f0117a77:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117a79:	83 ec 0c             	sub    $0xc,%esp
f0117a7c:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117a82:	50                   	push   %eax
f0117a83:	e8 3b a1 fe ff       	call   f0101bc3 <execute_command>
f0117a88:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117a8b:	83 ec 04             	sub    $0x4,%esp
f0117a8e:	6a 00                	push   $0x0
f0117a90:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117a93:	50                   	push   %eax
f0117a94:	68 00 10 00 00       	push   $0x1000
f0117a99:	e8 12 1f ff ff       	call   f01099b0 <envid2env>
f0117a9e:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117aa1:	83 ec 04             	sub    $0x4,%esp
f0117aa4:	6a 00                	push   $0x0
f0117aa6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117aa9:	50                   	push   %eax
f0117aaa:	68 01 10 00 00       	push   $0x1001
f0117aaf:	e8 fc 1e ff ff       	call   f01099b0 <envid2env>
f0117ab4:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117ab7:	83 ec 04             	sub    $0x4,%esp
f0117aba:	6a 00                	push   $0x0
f0117abc:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117abf:	50                   	push   %eax
f0117ac0:	68 02 10 00 00       	push   $0x1002
f0117ac5:	e8 e6 1e ff ff       	call   f01099b0 <envid2env>
f0117aca:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117acd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ad0:	85 c0                	test   %eax,%eax
f0117ad2:	74 0e                	je     f0117ae2 <test_priority_normal_and_lower+0x12b>
f0117ad4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ad7:	85 c0                	test   %eax,%eax
f0117ad9:	74 07                	je     f0117ae2 <test_priority_normal_and_lower+0x12b>
f0117adb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ade:	85 c0                	test   %eax,%eax
f0117ae0:	75 17                	jne    f0117af9 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117ae2:	83 ec 04             	sub    $0x4,%esp
f0117ae5:	68 e4 8a 13 f0       	push   $0xf0138ae4
f0117aea:	68 f2 00 00 00       	push   $0xf2
f0117aef:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117af4:	e8 b7 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117af9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117afc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b02:	83 f8 14             	cmp    $0x14,%eax
f0117b05:	75 1c                	jne    f0117b23 <test_priority_normal_and_lower+0x16c>
f0117b07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b0a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b10:	83 f8 1e             	cmp    $0x1e,%eax
f0117b13:	75 0e                	jne    f0117b23 <test_priority_normal_and_lower+0x16c>
f0117b15:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b18:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b1e:	83 f8 28             	cmp    $0x28,%eax
f0117b21:	74 17                	je     f0117b3a <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117b23:	83 ec 04             	sub    $0x4,%esp
f0117b26:	68 8c 8e 13 f0       	push   $0xf0138e8c
f0117b2b:	68 f5 00 00 00       	push   $0xf5
f0117b30:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117b35:	e8 76 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117b3a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117b41:	eb 47                	jmp    f0117b8a <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117b43:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b46:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b49:	89 d0                	mov    %edx,%eax
f0117b4b:	01 c0                	add    %eax,%eax
f0117b4d:	01 d0                	add    %edx,%eax
f0117b4f:	c1 e0 03             	shl    $0x3,%eax
f0117b52:	01 c8                	add    %ecx,%eax
f0117b54:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b59:	8b 10                	mov    (%eax),%edx
f0117b5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b5e:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117b65:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b6b:	89 d0                	mov    %edx,%eax
f0117b6d:	01 c0                	add    %eax,%eax
f0117b6f:	01 d0                	add    %edx,%eax
f0117b71:	c1 e0 03             	shl    $0x3,%eax
f0117b74:	01 c8                	add    %ecx,%eax
f0117b76:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b7b:	8b 10                	mov    (%eax),%edx
f0117b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b80:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117b87:	ff 45 e4             	incl   -0x1c(%ebp)
f0117b8a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117b8e:	7e b3                	jle    f0117b43 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117b90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117b97:	eb 47                	jmp    f0117be0 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117b99:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117b9c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117b9f:	89 d0                	mov    %edx,%eax
f0117ba1:	01 c0                	add    %eax,%eax
f0117ba3:	01 d0                	add    %edx,%eax
f0117ba5:	c1 e0 03             	shl    $0x3,%eax
f0117ba8:	01 c8                	add    %ecx,%eax
f0117baa:	05 b8 00 00 00       	add    $0xb8,%eax
f0117baf:	8b 10                	mov    (%eax),%edx
f0117bb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117bb4:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117bbb:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117bbe:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117bc1:	89 d0                	mov    %edx,%eax
f0117bc3:	01 c0                	add    %eax,%eax
f0117bc5:	01 d0                	add    %edx,%eax
f0117bc7:	c1 e0 03             	shl    $0x3,%eax
f0117bca:	01 c8                	add    %ecx,%eax
f0117bcc:	05 c0 00 00 00       	add    $0xc0,%eax
f0117bd1:	8b 10                	mov    (%eax),%edx
f0117bd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117bd6:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117bdd:	ff 45 e0             	incl   -0x20(%ebp)
f0117be0:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117be4:	7e b3                	jle    f0117b99 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117be6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117bed:	eb 47                	jmp    f0117c36 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117bef:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117bf2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117bf5:	89 d0                	mov    %edx,%eax
f0117bf7:	01 c0                	add    %eax,%eax
f0117bf9:	01 d0                	add    %edx,%eax
f0117bfb:	c1 e0 03             	shl    $0x3,%eax
f0117bfe:	01 c8                	add    %ecx,%eax
f0117c00:	05 b8 00 00 00       	add    $0xb8,%eax
f0117c05:	8b 10                	mov    (%eax),%edx
f0117c07:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c0a:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117c11:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117c14:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117c17:	89 d0                	mov    %edx,%eax
f0117c19:	01 c0                	add    %eax,%eax
f0117c1b:	01 d0                	add    %edx,%eax
f0117c1d:	c1 e0 03             	shl    $0x3,%eax
f0117c20:	01 c8                	add    %ecx,%eax
f0117c22:	05 c0 00 00 00       	add    $0xc0,%eax
f0117c27:	8b 10                	mov    (%eax),%edx
f0117c29:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c2c:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117c33:	ff 45 dc             	incl   -0x24(%ebp)
f0117c36:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117c3a:	7e b3                	jle    f0117bef <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117c3c:	e8 7f 4d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117c41:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117c44:	e8 1d ca fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117c49:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117c4c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c4f:	83 ec 08             	sub    $0x8,%esp
f0117c52:	6a 03                	push   $0x3
f0117c54:	50                   	push   %eax
f0117c55:	e8 4d 32 ff ff       	call   f010aea7 <set_program_priority>
f0117c5a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117c5d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c60:	83 ec 08             	sub    $0x8,%esp
f0117c63:	6a 03                	push   $0x3
f0117c65:	50                   	push   %eax
f0117c66:	e8 3c 32 ff ff       	call   f010aea7 <set_program_priority>
f0117c6b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117c6e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c71:	83 ec 08             	sub    $0x8,%esp
f0117c74:	6a 03                	push   $0x3
f0117c76:	50                   	push   %eax
f0117c77:	e8 2b 32 ff ff       	call   f010aea7 <set_program_priority>
f0117c7c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c7f:	e8 e2 c9 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117c84:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117c87:	74 17                	je     f0117ca0 <test_priority_normal_and_lower+0x2e9>
f0117c89:	83 ec 04             	sub    $0x4,%esp
f0117c8c:	68 80 8b 13 f0       	push   $0xf0138b80
f0117c91:	68 11 01 00 00       	push   $0x111
f0117c96:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117c9b:	e8 10 85 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117ca0:	e8 1b 4d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117ca5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117ca8:	74 17                	je     f0117cc1 <test_priority_normal_and_lower+0x30a>
f0117caa:	83 ec 04             	sub    $0x4,%esp
f0117cad:	68 80 8b 13 f0       	push   $0xf0138b80
f0117cb2:	68 12 01 00 00       	push   $0x112
f0117cb7:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117cbc:	e8 ef 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117cc1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cc4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117cca:	83 f8 14             	cmp    $0x14,%eax
f0117ccd:	75 1c                	jne    f0117ceb <test_priority_normal_and_lower+0x334>
f0117ccf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cd2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117cd8:	83 f8 1e             	cmp    $0x1e,%eax
f0117cdb:	75 0e                	jne    f0117ceb <test_priority_normal_and_lower+0x334>
f0117cdd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ce0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ce6:	83 f8 28             	cmp    $0x28,%eax
f0117ce9:	74 17                	je     f0117d02 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117ceb:	83 ec 04             	sub    $0x4,%esp
f0117cee:	68 ac 8b 13 f0       	push   $0xf0138bac
f0117cf3:	68 15 01 00 00       	push   $0x115
f0117cf8:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117cfd:	e8 ae 84 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117d02:	e8 b9 4c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117d07:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d0a:	e8 57 c9 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117d0f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117d12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d15:	83 ec 08             	sub    $0x8,%esp
f0117d18:	6a 02                	push   $0x2
f0117d1a:	50                   	push   %eax
f0117d1b:	e8 87 31 ff ff       	call   f010aea7 <set_program_priority>
f0117d20:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117d23:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d26:	83 ec 08             	sub    $0x8,%esp
f0117d29:	6a 02                	push   $0x2
f0117d2b:	50                   	push   %eax
f0117d2c:	e8 76 31 ff ff       	call   f010aea7 <set_program_priority>
f0117d31:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117d34:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d37:	83 ec 08             	sub    $0x8,%esp
f0117d3a:	6a 02                	push   $0x2
f0117d3c:	50                   	push   %eax
f0117d3d:	e8 65 31 ff ff       	call   f010aea7 <set_program_priority>
f0117d42:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d45:	e8 1c c9 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117d4a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117d4d:	74 17                	je     f0117d66 <test_priority_normal_and_lower+0x3af>
f0117d4f:	83 ec 04             	sub    $0x4,%esp
f0117d52:	68 80 8b 13 f0       	push   $0xf0138b80
f0117d57:	68 1f 01 00 00       	push   $0x11f
f0117d5c:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117d61:	e8 4a 84 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117d66:	e8 55 4c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117d6b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117d6e:	74 21                	je     f0117d91 <test_priority_normal_and_lower+0x3da>
f0117d70:	e8 4b 4c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117d75:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117d78:	29 c2                	sub    %eax,%edx
f0117d7a:	89 d0                	mov    %edx,%eax
f0117d7c:	50                   	push   %eax
f0117d7d:	68 00 8c 13 f0       	push   $0xf0138c00
f0117d82:	68 20 01 00 00       	push   $0x120
f0117d87:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117d8c:	e8 1f 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117d91:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d94:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d9a:	83 f8 0a             	cmp    $0xa,%eax
f0117d9d:	75 1c                	jne    f0117dbb <test_priority_normal_and_lower+0x404>
f0117d9f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117da2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117da8:	83 f8 0f             	cmp    $0xf,%eax
f0117dab:	75 0e                	jne    f0117dbb <test_priority_normal_and_lower+0x404>
f0117dad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117db0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117db6:	83 f8 14             	cmp    $0x14,%eax
f0117db9:	74 17                	je     f0117dd2 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117dbb:	83 ec 04             	sub    $0x4,%esp
f0117dbe:	68 30 8c 13 f0       	push   $0xf0138c30
f0117dc3:	68 23 01 00 00       	push   $0x123
f0117dc8:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117dcd:	e8 de 83 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117dd2:	e8 e9 4b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117dd7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117dda:	e8 87 c8 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117ddf:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117de2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117de5:	83 ec 08             	sub    $0x8,%esp
f0117de8:	6a 02                	push   $0x2
f0117dea:	50                   	push   %eax
f0117deb:	e8 b7 30 ff ff       	call   f010aea7 <set_program_priority>
f0117df0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117df3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117df6:	83 ec 08             	sub    $0x8,%esp
f0117df9:	6a 02                	push   $0x2
f0117dfb:	50                   	push   %eax
f0117dfc:	e8 a6 30 ff ff       	call   f010aea7 <set_program_priority>
f0117e01:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117e04:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e07:	83 ec 08             	sub    $0x8,%esp
f0117e0a:	6a 02                	push   $0x2
f0117e0c:	50                   	push   %eax
f0117e0d:	e8 95 30 ff ff       	call   f010aea7 <set_program_priority>
f0117e12:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117e15:	e8 4c c8 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0117e1a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117e1d:	74 17                	je     f0117e36 <test_priority_normal_and_lower+0x47f>
f0117e1f:	83 ec 04             	sub    $0x4,%esp
f0117e22:	68 80 8b 13 f0       	push   $0xf0138b80
f0117e27:	68 2d 01 00 00       	push   $0x12d
f0117e2c:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117e31:	e8 7a 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117e36:	e8 85 4b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117e3b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117e3e:	74 21                	je     f0117e61 <test_priority_normal_and_lower+0x4aa>
f0117e40:	e8 7b 4b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0117e45:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117e48:	29 c2                	sub    %eax,%edx
f0117e4a:	89 d0                	mov    %edx,%eax
f0117e4c:	50                   	push   %eax
f0117e4d:	68 00 8c 13 f0       	push   $0xf0138c00
f0117e52:	68 2e 01 00 00       	push   $0x12e
f0117e57:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117e5c:	e8 4f 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117e61:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e64:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e6a:	83 f8 0a             	cmp    $0xa,%eax
f0117e6d:	75 1c                	jne    f0117e8b <test_priority_normal_and_lower+0x4d4>
f0117e6f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e72:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e78:	83 f8 0f             	cmp    $0xf,%eax
f0117e7b:	75 0e                	jne    f0117e8b <test_priority_normal_and_lower+0x4d4>
f0117e7d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e80:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e86:	83 f8 0a             	cmp    $0xa,%eax
f0117e89:	74 17                	je     f0117ea2 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117e8b:	83 ec 04             	sub    $0x4,%esp
f0117e8e:	68 30 8c 13 f0       	push   $0xf0138c30
f0117e93:	68 31 01 00 00       	push   $0x131
f0117e98:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117e9d:	e8 0e 83 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f0117ea2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117ea9:	eb 7d                	jmp    f0117f28 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117eab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117eae:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117eb5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117eb8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117ebb:	89 d0                	mov    %edx,%eax
f0117ebd:	01 c0                	add    %eax,%eax
f0117ebf:	01 d0                	add    %edx,%eax
f0117ec1:	c1 e0 03             	shl    $0x3,%eax
f0117ec4:	01 d8                	add    %ebx,%eax
f0117ec6:	05 b8 00 00 00       	add    $0xb8,%eax
f0117ecb:	8b 00                	mov    (%eax),%eax
f0117ecd:	39 c1                	cmp    %eax,%ecx
f0117ecf:	74 17                	je     f0117ee8 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0117ed1:	83 ec 04             	sub    $0x4,%esp
f0117ed4:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117ed9:	68 36 01 00 00       	push   $0x136
f0117ede:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117ee3:	e8 c8 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117ee8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117eeb:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117ef2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117ef5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117ef8:	89 d0                	mov    %edx,%eax
f0117efa:	01 c0                	add    %eax,%eax
f0117efc:	01 d0                	add    %edx,%eax
f0117efe:	c1 e0 03             	shl    $0x3,%eax
f0117f01:	01 d8                	add    %ebx,%eax
f0117f03:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f08:	8b 00                	mov    (%eax),%eax
f0117f0a:	39 c1                	cmp    %eax,%ecx
f0117f0c:	74 17                	je     f0117f25 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0117f0e:	83 ec 04             	sub    $0x4,%esp
f0117f11:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117f16:	68 39 01 00 00       	push   $0x139
f0117f1b:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117f20:	e8 8b 82 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117f25:	ff 45 d8             	incl   -0x28(%ebp)
f0117f28:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117f2c:	0f 8e 79 ff ff ff    	jle    f0117eab <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117f32:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117f39:	eb 7d                	jmp    f0117fb8 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f3e:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117f45:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f48:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117f4b:	89 d0                	mov    %edx,%eax
f0117f4d:	01 c0                	add    %eax,%eax
f0117f4f:	01 d0                	add    %edx,%eax
f0117f51:	c1 e0 03             	shl    $0x3,%eax
f0117f54:	01 d8                	add    %ebx,%eax
f0117f56:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f5b:	8b 00                	mov    (%eax),%eax
f0117f5d:	39 c1                	cmp    %eax,%ecx
f0117f5f:	74 17                	je     f0117f78 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0117f61:	83 ec 04             	sub    $0x4,%esp
f0117f64:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117f69:	68 3f 01 00 00       	push   $0x13f
f0117f6e:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117f73:	e8 38 82 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f7b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117f82:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f85:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117f88:	89 d0                	mov    %edx,%eax
f0117f8a:	01 c0                	add    %eax,%eax
f0117f8c:	01 d0                	add    %edx,%eax
f0117f8e:	c1 e0 03             	shl    $0x3,%eax
f0117f91:	01 d8                	add    %ebx,%eax
f0117f93:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f98:	8b 00                	mov    (%eax),%eax
f0117f9a:	39 c1                	cmp    %eax,%ecx
f0117f9c:	74 17                	je     f0117fb5 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0117f9e:	83 ec 04             	sub    $0x4,%esp
f0117fa1:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117fa6:	68 42 01 00 00       	push   $0x142
f0117fab:	68 fd 8a 13 f0       	push   $0xf0138afd
f0117fb0:	e8 fb 81 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117fb5:	ff 45 d4             	incl   -0x2c(%ebp)
f0117fb8:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117fbc:	0f 8e 79 ff ff ff    	jle    f0117f3b <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117fc2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117fc9:	eb 7d                	jmp    f0118048 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117fcb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117fce:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117fd5:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117fd8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117fdb:	89 d0                	mov    %edx,%eax
f0117fdd:	01 c0                	add    %eax,%eax
f0117fdf:	01 d0                	add    %edx,%eax
f0117fe1:	c1 e0 03             	shl    $0x3,%eax
f0117fe4:	01 d8                	add    %ebx,%eax
f0117fe6:	05 b8 00 00 00       	add    $0xb8,%eax
f0117feb:	8b 00                	mov    (%eax),%eax
f0117fed:	39 c1                	cmp    %eax,%ecx
f0117fef:	74 17                	je     f0118008 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0117ff1:	83 ec 04             	sub    $0x4,%esp
f0117ff4:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117ff9:	68 48 01 00 00       	push   $0x148
f0117ffe:	68 fd 8a 13 f0       	push   $0xf0138afd
f0118003:	e8 a8 81 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118008:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011800b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0118012:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118015:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118018:	89 d0                	mov    %edx,%eax
f011801a:	01 c0                	add    %eax,%eax
f011801c:	01 d0                	add    %edx,%eax
f011801e:	c1 e0 03             	shl    $0x3,%eax
f0118021:	01 d8                	add    %ebx,%eax
f0118023:	05 c0 00 00 00       	add    $0xc0,%eax
f0118028:	8b 00                	mov    (%eax),%eax
f011802a:	39 c1                	cmp    %eax,%ecx
f011802c:	74 17                	je     f0118045 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f011802e:	83 ec 04             	sub    $0x4,%esp
f0118031:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0118036:	68 4b 01 00 00       	push   $0x14b
f011803b:	68 fd 8a 13 f0       	push   $0xf0138afd
f0118040:	e8 6b 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0118045:	ff 45 d0             	incl   -0x30(%ebp)
f0118048:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011804c:	0f 8e 79 ff ff ff    	jle    f0117fcb <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0118052:	e8 69 49 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118057:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011805a:	e8 07 c6 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011805f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0118062:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118065:	83 ec 08             	sub    $0x8,%esp
f0118068:	6a 01                	push   $0x1
f011806a:	50                   	push   %eax
f011806b:	e8 37 2e ff ff       	call   f010aea7 <set_program_priority>
f0118070:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0118073:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118076:	83 ec 08             	sub    $0x8,%esp
f0118079:	6a 01                	push   $0x1
f011807b:	50                   	push   %eax
f011807c:	e8 26 2e ff ff       	call   f010aea7 <set_program_priority>
f0118081:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0118084:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118087:	83 ec 08             	sub    $0x8,%esp
f011808a:	6a 01                	push   $0x1
f011808c:	50                   	push   %eax
f011808d:	e8 15 2e ff ff       	call   f010aea7 <set_program_priority>
f0118092:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118095:	e8 cc c5 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011809a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011809d:	74 17                	je     f01180b6 <test_priority_normal_and_lower+0x6ff>
f011809f:	83 ec 04             	sub    $0x4,%esp
f01180a2:	68 80 8b 13 f0       	push   $0xf0138b80
f01180a7:	68 54 01 00 00       	push   $0x154
f01180ac:	68 fd 8a 13 f0       	push   $0xf0138afd
f01180b1:	e8 fa 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01180b6:	e8 05 49 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01180bb:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01180be:	83 f8 0d             	cmp    $0xd,%eax
f01180c1:	74 17                	je     f01180da <test_priority_normal_and_lower+0x723>
f01180c3:	83 ec 04             	sub    $0x4,%esp
f01180c6:	68 d8 8e 13 f0       	push   $0xf0138ed8
f01180cb:	68 55 01 00 00       	push   $0x155
f01180d0:	68 fd 8a 13 f0       	push   $0xf0138afd
f01180d5:	e8 d6 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01180da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01180dd:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01180e3:	83 f8 05             	cmp    $0x5,%eax
f01180e6:	75 1c                	jne    f0118104 <test_priority_normal_and_lower+0x74d>
f01180e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180eb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01180f1:	83 f8 07             	cmp    $0x7,%eax
f01180f4:	75 0e                	jne    f0118104 <test_priority_normal_and_lower+0x74d>
f01180f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180f9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01180ff:	83 f8 05             	cmp    $0x5,%eax
f0118102:	74 17                	je     f011811b <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0118104:	83 ec 04             	sub    $0x4,%esp
f0118107:	68 20 8f 13 f0       	push   $0xf0138f20
f011810c:	68 58 01 00 00       	push   $0x158
f0118111:	68 fd 8a 13 f0       	push   $0xf0138afd
f0118116:	e8 95 80 fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f011811b:	e8 a0 48 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118120:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118123:	e8 3e c5 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118128:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011812b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011812e:	83 ec 08             	sub    $0x8,%esp
f0118131:	6a 01                	push   $0x1
f0118133:	50                   	push   %eax
f0118134:	e8 6e 2d ff ff       	call   f010aea7 <set_program_priority>
f0118139:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011813c:	e8 25 c5 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118141:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118144:	74 17                	je     f011815d <test_priority_normal_and_lower+0x7a6>
f0118146:	83 ec 04             	sub    $0x4,%esp
f0118149:	68 80 8b 13 f0       	push   $0xf0138b80
f011814e:	68 5e 01 00 00       	push   $0x15e
f0118153:	68 fd 8a 13 f0       	push   $0xf0138afd
f0118158:	e8 53 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011815d:	e8 5e 48 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118162:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0118165:	83 f8 03             	cmp    $0x3,%eax
f0118168:	74 17                	je     f0118181 <test_priority_normal_and_lower+0x7ca>
f011816a:	83 ec 04             	sub    $0x4,%esp
f011816d:	68 80 8b 13 f0       	push   $0xf0138b80
f0118172:	68 5f 01 00 00       	push   $0x15f
f0118177:	68 fd 8a 13 f0       	push   $0xf0138afd
f011817c:	e8 2f 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118181:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118184:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011818a:	83 f8 02             	cmp    $0x2,%eax
f011818d:	75 1c                	jne    f01181ab <test_priority_normal_and_lower+0x7f4>
f011818f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118192:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118198:	83 f8 07             	cmp    $0x7,%eax
f011819b:	75 0e                	jne    f01181ab <test_priority_normal_and_lower+0x7f4>
f011819d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01181a0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181a6:	83 f8 05             	cmp    $0x5,%eax
f01181a9:	74 17                	je     f01181c2 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f01181ab:	83 ec 04             	sub    $0x4,%esp
f01181ae:	68 b4 8c 13 f0       	push   $0xf0138cb4
f01181b3:	68 62 01 00 00       	push   $0x162
f01181b8:	68 fd 8a 13 f0       	push   $0xf0138afd
f01181bd:	e8 ee 7f fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f01181c2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01181c9:	e9 83 00 00 00       	jmp    f0118251 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01181ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01181d1:	83 c0 08             	add    $0x8,%eax
f01181d4:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01181db:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01181de:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01181e1:	89 d0                	mov    %edx,%eax
f01181e3:	01 c0                	add    %eax,%eax
f01181e5:	01 d0                	add    %edx,%eax
f01181e7:	c1 e0 03             	shl    $0x3,%eax
f01181ea:	01 d8                	add    %ebx,%eax
f01181ec:	05 b8 00 00 00       	add    $0xb8,%eax
f01181f1:	8b 00                	mov    (%eax),%eax
f01181f3:	39 c1                	cmp    %eax,%ecx
f01181f5:	74 17                	je     f011820e <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01181f7:	83 ec 04             	sub    $0x4,%esp
f01181fa:	68 50 8f 13 f0       	push   $0xf0138f50
f01181ff:	68 67 01 00 00       	push   $0x167
f0118204:	68 fd 8a 13 f0       	push   $0xf0138afd
f0118209:	e8 a2 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011820e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118211:	83 c0 08             	add    $0x8,%eax
f0118214:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011821b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011821e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118221:	89 d0                	mov    %edx,%eax
f0118223:	01 c0                	add    %eax,%eax
f0118225:	01 d0                	add    %edx,%eax
f0118227:	c1 e0 03             	shl    $0x3,%eax
f011822a:	01 d8                	add    %ebx,%eax
f011822c:	05 c0 00 00 00       	add    $0xc0,%eax
f0118231:	8b 00                	mov    (%eax),%eax
f0118233:	39 c1                	cmp    %eax,%ecx
f0118235:	74 17                	je     f011824e <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118237:	83 ec 04             	sub    $0x4,%esp
f011823a:	68 50 8f 13 f0       	push   $0xf0138f50
f011823f:	68 6a 01 00 00       	push   $0x16a
f0118244:	68 fd 8a 13 f0       	push   $0xf0138afd
f0118249:	e8 62 7f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011824e:	ff 45 cc             	incl   -0x34(%ebp)
f0118251:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0118255:	0f 8e 73 ff ff ff    	jle    f01181ce <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011825b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0118262:	e9 83 00 00 00       	jmp    f01182ea <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0118267:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011826a:	83 c0 03             	add    $0x3,%eax
f011826d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0118274:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118277:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011827a:	89 d0                	mov    %edx,%eax
f011827c:	01 c0                	add    %eax,%eax
f011827e:	01 d0                	add    %edx,%eax
f0118280:	c1 e0 03             	shl    $0x3,%eax
f0118283:	01 d8                	add    %ebx,%eax
f0118285:	05 b8 00 00 00       	add    $0xb8,%eax
f011828a:	8b 00                	mov    (%eax),%eax
f011828c:	39 c1                	cmp    %eax,%ecx
f011828e:	74 17                	je     f01182a7 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0118290:	ff 75 c8             	pushl  -0x38(%ebp)
f0118293:	68 bc 8f 13 f0       	push   $0xf0138fbc
f0118298:	68 70 01 00 00       	push   $0x170
f011829d:	68 fd 8a 13 f0       	push   $0xf0138afd
f01182a2:	e8 09 7f fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01182a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01182aa:	83 c0 03             	add    $0x3,%eax
f01182ad:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01182b4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01182b7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01182ba:	89 d0                	mov    %edx,%eax
f01182bc:	01 c0                	add    %eax,%eax
f01182be:	01 d0                	add    %edx,%eax
f01182c0:	c1 e0 03             	shl    $0x3,%eax
f01182c3:	01 d8                	add    %ebx,%eax
f01182c5:	05 c0 00 00 00       	add    $0xc0,%eax
f01182ca:	8b 00                	mov    (%eax),%eax
f01182cc:	39 c1                	cmp    %eax,%ecx
f01182ce:	74 17                	je     f01182e7 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01182d0:	83 ec 04             	sub    $0x4,%esp
f01182d3:	68 50 8f 13 f0       	push   $0xf0138f50
f01182d8:	68 73 01 00 00       	push   $0x173
f01182dd:	68 fd 8a 13 f0       	push   $0xf0138afd
f01182e2:	e8 c9 7e fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01182e7:	ff 45 c8             	incl   -0x38(%ebp)
f01182ea:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f01182ee:	0f 8e 73 ff ff ff    	jle    f0118267 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01182f4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01182fb:	e9 83 00 00 00       	jmp    f0118383 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118300:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118303:	83 c0 05             	add    $0x5,%eax
f0118306:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011830d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118310:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118313:	89 d0                	mov    %edx,%eax
f0118315:	01 c0                	add    %eax,%eax
f0118317:	01 d0                	add    %edx,%eax
f0118319:	c1 e0 03             	shl    $0x3,%eax
f011831c:	01 d8                	add    %ebx,%eax
f011831e:	05 b8 00 00 00       	add    $0xb8,%eax
f0118323:	8b 00                	mov    (%eax),%eax
f0118325:	39 c1                	cmp    %eax,%ecx
f0118327:	74 17                	je     f0118340 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118329:	83 ec 04             	sub    $0x4,%esp
f011832c:	68 50 8f 13 f0       	push   $0xf0138f50
f0118331:	68 79 01 00 00       	push   $0x179
f0118336:	68 fd 8a 13 f0       	push   $0xf0138afd
f011833b:	e8 70 7e fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118340:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118343:	83 c0 05             	add    $0x5,%eax
f0118346:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011834d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118350:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118353:	89 d0                	mov    %edx,%eax
f0118355:	01 c0                	add    %eax,%eax
f0118357:	01 d0                	add    %edx,%eax
f0118359:	c1 e0 03             	shl    $0x3,%eax
f011835c:	01 d8                	add    %ebx,%eax
f011835e:	05 c0 00 00 00       	add    $0xc0,%eax
f0118363:	8b 00                	mov    (%eax),%eax
f0118365:	39 c1                	cmp    %eax,%ecx
f0118367:	74 17                	je     f0118380 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118369:	83 ec 04             	sub    $0x4,%esp
f011836c:	68 50 8f 13 f0       	push   $0xf0138f50
f0118371:	68 7c 01 00 00       	push   $0x17c
f0118376:	68 fd 8a 13 f0       	push   $0xf0138afd
f011837b:	e8 30 7e fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118380:	ff 45 c4             	incl   -0x3c(%ebp)
f0118383:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0118387:	0f 8e 73 ff ff ff    	jle    f0118300 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011838d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118390:	83 ec 08             	sub    $0x8,%esp
f0118393:	6a 05                	push   $0x5
f0118395:	50                   	push   %eax
f0118396:	e8 0c 2b ff ff       	call   f010aea7 <set_program_priority>
f011839b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011839e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01183a1:	83 ec 08             	sub    $0x8,%esp
f01183a4:	6a 05                	push   $0x5
f01183a6:	50                   	push   %eax
f01183a7:	e8 fb 2a ff ff       	call   f010aea7 <set_program_priority>
f01183ac:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f01183af:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f01183b6:	75 6e 61 
f01183b9:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f01183c0:	6c 00 00 
f01183c3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01183c9:	b9 17 00 00 00       	mov    $0x17,%ecx
f01183ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01183d3:	89 d7                	mov    %edx,%edi
f01183d5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01183d7:	83 ec 0c             	sub    $0xc,%esp
f01183da:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01183e0:	50                   	push   %eax
f01183e1:	e8 dd 97 fe ff       	call   f0101bc3 <execute_command>
f01183e6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f01183e9:	eb 10                	jmp    f01183fb <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01183eb:	83 ec 0c             	sub    $0xc,%esp
f01183ee:	68 2c 90 13 f0       	push   $0xf013902c
f01183f3:	e8 39 8a fe ff       	call   f0100e31 <cprintf>
f01183f8:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f01183fb:	90                   	nop
f01183fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01183ff:	5b                   	pop    %ebx
f0118400:	5e                   	pop    %esi
f0118401:	5f                   	pop    %edi
f0118402:	5d                   	pop    %ebp
f0118403:	c3                   	ret    

f0118404 <isKHeapPlacementStrategyNEXTFIT>:
f0118404:	55                   	push   %ebp
f0118405:	89 e5                	mov    %esp,%ebp
f0118407:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f011840c:	83 f8 03             	cmp    $0x3,%eax
f011840f:	75 04                	jne    f0118415 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0118411:	b0 01                	mov    $0x1,%al
f0118413:	eb 02                	jmp    f0118417 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0118415:	b0 00                	mov    $0x0,%al
f0118417:	5d                   	pop    %ebp
f0118418:	c3                   	ret    

f0118419 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0118419:	55                   	push   %ebp
f011841a:	89 e5                	mov    %esp,%ebp
f011841c:	57                   	push   %edi
f011841d:	53                   	push   %ebx
f011841e:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f0118424:	83 ec 0c             	sub    $0xc,%esp
f0118427:	68 30 91 13 f0       	push   $0xf0139130
f011842c:	e8 00 8a fe ff       	call   f0100e31 <cprintf>
f0118431:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118434:	83 ec 0c             	sub    $0xc,%esp
f0118437:	68 60 91 13 f0       	push   $0xf0139160
f011843c:	e8 f0 89 fe ff       	call   f0100e31 <cprintf>
f0118441:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118444:	83 ec 0c             	sub    $0xc,%esp
f0118447:	68 30 91 13 f0       	push   $0xf0139130
f011844c:	e8 e0 89 fe ff       	call   f0100e31 <cprintf>
f0118451:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118454:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0118458:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011845c:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0118462:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118468:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011846f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118476:	e8 45 45 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011847b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011847e:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0118484:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118489:	b8 00 00 00 00       	mov    $0x0,%eax
f011848e:	89 d7                	mov    %edx,%edi
f0118490:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0118492:	e8 29 45 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118497:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011849a:	e8 c7 c1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011849f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01184a2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01184a9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01184ae:	0f b6 d0             	movzbl %al,%edx
f01184b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01184b4:	01 d0                	add    %edx,%eax
f01184b6:	48                   	dec    %eax
f01184b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01184ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01184bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01184c2:	f7 75 d4             	divl   -0x2c(%ebp)
f01184c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01184c8:	29 d0                	sub    %edx,%eax
f01184ca:	89 c1                	mov    %eax,%ecx
f01184cc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01184d3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01184d8:	0f b6 c0             	movzbl %al,%eax
f01184db:	c1 e0 04             	shl    $0x4,%eax
f01184de:	89 c2                	mov    %eax,%edx
f01184e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01184e3:	01 d0                	add    %edx,%eax
f01184e5:	48                   	dec    %eax
f01184e6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01184e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01184f1:	f7 75 cc             	divl   -0x34(%ebp)
f01184f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184f7:	29 d0                	sub    %edx,%eax
f01184f9:	01 c8                	add    %ecx,%eax
f01184fb:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0118500:	29 c2                	sub    %eax,%edx
f0118502:	89 d0                	mov    %edx,%eax
f0118504:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118507:	83 ec 0c             	sub    $0xc,%esp
f011850a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011850d:	e8 2f fa fe ff       	call   f0107f41 <kmalloc>
f0118512:	83 c4 10             	add    $0x10,%esp
f0118515:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011851b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118521:	85 c0                	test   %eax,%eax
f0118523:	74 14                	je     f0118539 <test_kmalloc+0x120>
f0118525:	83 ec 04             	sub    $0x4,%esp
f0118528:	68 bc 91 13 f0       	push   $0xf01391bc
f011852d:	6a 40                	push   $0x40
f011852f:	68 ee 91 13 f0       	push   $0xf01391ee
f0118534:	e8 77 7c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118539:	e8 28 c1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011853e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118541:	74 14                	je     f0118557 <test_kmalloc+0x13e>
f0118543:	83 ec 04             	sub    $0x4,%esp
f0118546:	68 08 92 13 f0       	push   $0xf0139208
f011854b:	6a 41                	push   $0x41
f011854d:	68 ee 91 13 f0       	push   $0xf01391ee
f0118552:	e8 59 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118557:	e8 64 44 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011855c:	89 c2                	mov    %eax,%edx
f011855e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118561:	39 c2                	cmp    %eax,%edx
f0118563:	74 14                	je     f0118579 <test_kmalloc+0x160>
f0118565:	83 ec 04             	sub    $0x4,%esp
f0118568:	68 70 92 13 f0       	push   $0xf0139270
f011856d:	6a 42                	push   $0x42
f011856f:	68 ee 91 13 f0       	push   $0xf01391ee
f0118574:	e8 37 7c fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118579:	83 ec 0c             	sub    $0xc,%esp
f011857c:	68 b0 92 13 f0       	push   $0xf01392b0
f0118581:	e8 ab 88 fe ff       	call   f0100e31 <cprintf>
f0118586:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118589:	e8 32 44 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011858e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118591:	e8 d0 c0 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118596:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118599:	83 ec 0c             	sub    $0xc,%esp
f011859c:	68 00 fc 1f 00       	push   $0x1ffc00
f01185a1:	e8 9b f9 fe ff       	call   f0107f41 <kmalloc>
f01185a6:	83 c4 10             	add    $0x10,%esp
f01185a9:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01185af:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01185b5:	89 c1                	mov    %eax,%ecx
f01185b7:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01185be:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01185c3:	0f b6 d0             	movzbl %al,%edx
f01185c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01185c9:	01 d0                	add    %edx,%eax
f01185cb:	48                   	dec    %eax
f01185cc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01185cf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01185d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01185d7:	f7 75 c0             	divl   -0x40(%ebp)
f01185da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01185dd:	29 d0                	sub    %edx,%eax
f01185df:	89 c3                	mov    %eax,%ebx
f01185e1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01185e8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01185ed:	0f b6 c0             	movzbl %al,%eax
f01185f0:	c1 e0 04             	shl    $0x4,%eax
f01185f3:	89 c2                	mov    %eax,%edx
f01185f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01185f8:	01 d0                	add    %edx,%eax
f01185fa:	48                   	dec    %eax
f01185fb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01185fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118601:	ba 00 00 00 00       	mov    $0x0,%edx
f0118606:	f7 75 b8             	divl   -0x48(%ebp)
f0118609:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011860c:	29 d0                	sub    %edx,%eax
f011860e:	01 d8                	add    %ebx,%eax
f0118610:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118615:	39 c1                	cmp    %eax,%ecx
f0118617:	74 14                	je     f011862d <test_kmalloc+0x214>
f0118619:	83 ec 04             	sub    $0x4,%esp
f011861c:	68 d4 92 13 f0       	push   $0xf01392d4
f0118621:	6a 49                	push   $0x49
f0118623:	68 ee 91 13 f0       	push   $0xf01391ee
f0118628:	e8 83 7b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011862d:	e8 34 c0 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118632:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118635:	74 14                	je     f011864b <test_kmalloc+0x232>
f0118637:	83 ec 04             	sub    $0x4,%esp
f011863a:	68 08 92 13 f0       	push   $0xf0139208
f011863f:	6a 4a                	push   $0x4a
f0118641:	68 ee 91 13 f0       	push   $0xf01391ee
f0118646:	e8 65 7b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011864b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011864e:	e8 6d 43 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118653:	29 c3                	sub    %eax,%ebx
f0118655:	89 d8                	mov    %ebx,%eax
f0118657:	3d 00 02 00 00       	cmp    $0x200,%eax
f011865c:	74 14                	je     f0118672 <test_kmalloc+0x259>
f011865e:	83 ec 04             	sub    $0x4,%esp
f0118661:	68 70 92 13 f0       	push   $0xf0139270
f0118666:	6a 4b                	push   $0x4b
f0118668:	68 ee 91 13 f0       	push   $0xf01391ee
f011866d:	e8 3e 7b fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118672:	e8 49 43 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118677:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011867a:	e8 e7 bf fe ff       	call   f0104666 <pf_calculate_free_frames>
f011867f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118682:	83 ec 0c             	sub    $0xc,%esp
f0118685:	68 00 fc 1f 00       	push   $0x1ffc00
f011868a:	e8 b2 f8 fe ff       	call   f0107f41 <kmalloc>
f011868f:	83 c4 10             	add    $0x10,%esp
f0118692:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118698:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011869e:	89 c1                	mov    %eax,%ecx
f01186a0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01186a7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01186ac:	0f b6 d0             	movzbl %al,%edx
f01186af:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01186b2:	01 d0                	add    %edx,%eax
f01186b4:	48                   	dec    %eax
f01186b5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01186b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01186bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01186c0:	f7 75 b0             	divl   -0x50(%ebp)
f01186c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01186c6:	29 d0                	sub    %edx,%eax
f01186c8:	89 c3                	mov    %eax,%ebx
f01186ca:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01186d1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01186d6:	0f b6 c0             	movzbl %al,%eax
f01186d9:	c1 e0 04             	shl    $0x4,%eax
f01186dc:	89 c2                	mov    %eax,%edx
f01186de:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01186e1:	01 d0                	add    %edx,%eax
f01186e3:	48                   	dec    %eax
f01186e4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01186e7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01186ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01186ef:	f7 75 a8             	divl   -0x58(%ebp)
f01186f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01186f5:	29 d0                	sub    %edx,%eax
f01186f7:	01 d8                	add    %ebx,%eax
f01186f9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01186fe:	39 c1                	cmp    %eax,%ecx
f0118700:	74 14                	je     f0118716 <test_kmalloc+0x2fd>
f0118702:	83 ec 04             	sub    $0x4,%esp
f0118705:	68 d4 92 13 f0       	push   $0xf01392d4
f011870a:	6a 51                	push   $0x51
f011870c:	68 ee 91 13 f0       	push   $0xf01391ee
f0118711:	e8 9a 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118716:	e8 4b bf fe ff       	call   f0104666 <pf_calculate_free_frames>
f011871b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011871e:	74 14                	je     f0118734 <test_kmalloc+0x31b>
f0118720:	83 ec 04             	sub    $0x4,%esp
f0118723:	68 08 92 13 f0       	push   $0xf0139208
f0118728:	6a 52                	push   $0x52
f011872a:	68 ee 91 13 f0       	push   $0xf01391ee
f011872f:	e8 7c 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118734:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118737:	e8 84 42 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011873c:	29 c3                	sub    %eax,%ebx
f011873e:	89 d8                	mov    %ebx,%eax
f0118740:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118745:	74 14                	je     f011875b <test_kmalloc+0x342>
f0118747:	83 ec 04             	sub    $0x4,%esp
f011874a:	68 70 92 13 f0       	push   $0xf0139270
f011874f:	6a 53                	push   $0x53
f0118751:	68 ee 91 13 f0       	push   $0xf01391ee
f0118756:	e8 55 7a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011875b:	e8 60 42 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118760:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118763:	e8 fe be fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118768:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011876b:	83 ec 0c             	sub    $0xc,%esp
f011876e:	68 00 08 00 00       	push   $0x800
f0118773:	e8 c9 f7 fe ff       	call   f0107f41 <kmalloc>
f0118778:	83 c4 10             	add    $0x10,%esp
f011877b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118781:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118787:	89 c1                	mov    %eax,%ecx
f0118789:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118790:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118795:	0f b6 d0             	movzbl %al,%edx
f0118798:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011879b:	01 d0                	add    %edx,%eax
f011879d:	48                   	dec    %eax
f011879e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01187a1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01187a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01187a9:	f7 75 a0             	divl   -0x60(%ebp)
f01187ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01187af:	29 d0                	sub    %edx,%eax
f01187b1:	89 c3                	mov    %eax,%ebx
f01187b3:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01187ba:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01187bf:	0f b6 c0             	movzbl %al,%eax
f01187c2:	c1 e0 04             	shl    $0x4,%eax
f01187c5:	89 c2                	mov    %eax,%edx
f01187c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01187ca:	01 d0                	add    %edx,%eax
f01187cc:	48                   	dec    %eax
f01187cd:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01187d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01187d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01187d8:	f7 75 98             	divl   -0x68(%ebp)
f01187db:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01187de:	29 d0                	sub    %edx,%eax
f01187e0:	01 d8                	add    %ebx,%eax
f01187e2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01187e7:	39 c1                	cmp    %eax,%ecx
f01187e9:	74 14                	je     f01187ff <test_kmalloc+0x3e6>
f01187eb:	83 ec 04             	sub    $0x4,%esp
f01187ee:	68 d4 92 13 f0       	push   $0xf01392d4
f01187f3:	6a 59                	push   $0x59
f01187f5:	68 ee 91 13 f0       	push   $0xf01391ee
f01187fa:	e8 b1 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01187ff:	e8 62 be fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118804:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118807:	74 14                	je     f011881d <test_kmalloc+0x404>
f0118809:	83 ec 04             	sub    $0x4,%esp
f011880c:	68 08 92 13 f0       	push   $0xf0139208
f0118811:	6a 5a                	push   $0x5a
f0118813:	68 ee 91 13 f0       	push   $0xf01391ee
f0118818:	e8 93 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011881d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118820:	e8 9b 41 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118825:	29 c3                	sub    %eax,%ebx
f0118827:	89 d8                	mov    %ebx,%eax
f0118829:	83 f8 01             	cmp    $0x1,%eax
f011882c:	74 14                	je     f0118842 <test_kmalloc+0x429>
f011882e:	83 ec 04             	sub    $0x4,%esp
f0118831:	68 70 92 13 f0       	push   $0xf0139270
f0118836:	6a 5b                	push   $0x5b
f0118838:	68 ee 91 13 f0       	push   $0xf01391ee
f011883d:	e8 6e 79 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118842:	e8 79 41 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118847:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011884a:	e8 17 be fe ff       	call   f0104666 <pf_calculate_free_frames>
f011884f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118852:	83 ec 0c             	sub    $0xc,%esp
f0118855:	68 00 08 00 00       	push   $0x800
f011885a:	e8 e2 f6 fe ff       	call   f0107f41 <kmalloc>
f011885f:	83 c4 10             	add    $0x10,%esp
f0118862:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118868:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011886e:	89 c1                	mov    %eax,%ecx
f0118870:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118877:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011887c:	0f b6 d0             	movzbl %al,%edx
f011887f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118882:	01 d0                	add    %edx,%eax
f0118884:	48                   	dec    %eax
f0118885:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118888:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011888b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118890:	f7 75 90             	divl   -0x70(%ebp)
f0118893:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118896:	29 d0                	sub    %edx,%eax
f0118898:	89 c3                	mov    %eax,%ebx
f011889a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01188a1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01188a6:	0f b6 c0             	movzbl %al,%eax
f01188a9:	c1 e0 04             	shl    $0x4,%eax
f01188ac:	89 c2                	mov    %eax,%edx
f01188ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f01188b1:	01 d0                	add    %edx,%eax
f01188b3:	48                   	dec    %eax
f01188b4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01188b7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01188ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01188bf:	f7 75 88             	divl   -0x78(%ebp)
f01188c2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01188c5:	29 d0                	sub    %edx,%eax
f01188c7:	01 d8                	add    %ebx,%eax
f01188c9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01188ce:	39 c1                	cmp    %eax,%ecx
f01188d0:	74 14                	je     f01188e6 <test_kmalloc+0x4cd>
f01188d2:	83 ec 04             	sub    $0x4,%esp
f01188d5:	68 d4 92 13 f0       	push   $0xf01392d4
f01188da:	6a 61                	push   $0x61
f01188dc:	68 ee 91 13 f0       	push   $0xf01391ee
f01188e1:	e8 ca 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188e6:	e8 7b bd fe ff       	call   f0104666 <pf_calculate_free_frames>
f01188eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188ee:	74 14                	je     f0118904 <test_kmalloc+0x4eb>
f01188f0:	83 ec 04             	sub    $0x4,%esp
f01188f3:	68 08 92 13 f0       	push   $0xf0139208
f01188f8:	6a 62                	push   $0x62
f01188fa:	68 ee 91 13 f0       	push   $0xf01391ee
f01188ff:	e8 ac 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118904:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118907:	e8 b4 40 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011890c:	29 c3                	sub    %eax,%ebx
f011890e:	89 d8                	mov    %ebx,%eax
f0118910:	83 f8 01             	cmp    $0x1,%eax
f0118913:	74 14                	je     f0118929 <test_kmalloc+0x510>
f0118915:	83 ec 04             	sub    $0x4,%esp
f0118918:	68 70 92 13 f0       	push   $0xf0139270
f011891d:	6a 63                	push   $0x63
f011891f:	68 ee 91 13 f0       	push   $0xf01391ee
f0118924:	e8 87 78 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118929:	e8 92 40 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011892e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118931:	e8 30 bd fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118936:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118939:	83 ec 0c             	sub    $0xc,%esp
f011893c:	68 00 1c 00 00       	push   $0x1c00
f0118941:	e8 fb f5 fe ff       	call   f0107f41 <kmalloc>
f0118946:	83 c4 10             	add    $0x10,%esp
f0118949:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011894f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118955:	89 c1                	mov    %eax,%ecx
f0118957:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011895e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118963:	0f b6 d0             	movzbl %al,%edx
f0118966:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118969:	01 d0                	add    %edx,%eax
f011896b:	48                   	dec    %eax
f011896c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118972:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118978:	ba 00 00 00 00       	mov    $0x0,%edx
f011897d:	f7 75 80             	divl   -0x80(%ebp)
f0118980:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118986:	29 d0                	sub    %edx,%eax
f0118988:	89 c3                	mov    %eax,%ebx
f011898a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118991:	10 00 00 
f0118994:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118999:	0f b6 c0             	movzbl %al,%eax
f011899c:	c1 e0 04             	shl    $0x4,%eax
f011899f:	89 c2                	mov    %eax,%edx
f01189a1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01189a7:	01 d0                	add    %edx,%eax
f01189a9:	48                   	dec    %eax
f01189aa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01189b0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01189bb:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01189c1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189c7:	29 d0                	sub    %edx,%eax
f01189c9:	01 d8                	add    %ebx,%eax
f01189cb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01189d0:	39 c1                	cmp    %eax,%ecx
f01189d2:	74 14                	je     f01189e8 <test_kmalloc+0x5cf>
f01189d4:	83 ec 04             	sub    $0x4,%esp
f01189d7:	68 d4 92 13 f0       	push   $0xf01392d4
f01189dc:	6a 69                	push   $0x69
f01189de:	68 ee 91 13 f0       	push   $0xf01391ee
f01189e3:	e8 c8 77 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189e8:	e8 79 bc fe ff       	call   f0104666 <pf_calculate_free_frames>
f01189ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189f0:	74 14                	je     f0118a06 <test_kmalloc+0x5ed>
f01189f2:	83 ec 04             	sub    $0x4,%esp
f01189f5:	68 08 92 13 f0       	push   $0xf0139208
f01189fa:	6a 6a                	push   $0x6a
f01189fc:	68 ee 91 13 f0       	push   $0xf01391ee
f0118a01:	e8 aa 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a06:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118a09:	e8 b2 3f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118a0e:	29 c3                	sub    %eax,%ebx
f0118a10:	89 d8                	mov    %ebx,%eax
f0118a12:	83 f8 02             	cmp    $0x2,%eax
f0118a15:	74 14                	je     f0118a2b <test_kmalloc+0x612>
f0118a17:	83 ec 04             	sub    $0x4,%esp
f0118a1a:	68 70 92 13 f0       	push   $0xf0139270
f0118a1f:	6a 6b                	push   $0x6b
f0118a21:	68 ee 91 13 f0       	push   $0xf01391ee
f0118a26:	e8 85 77 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118a2b:	e8 90 3f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118a30:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a33:	e8 2e bc fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118a38:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118a3b:	83 ec 0c             	sub    $0xc,%esp
f0118a3e:	68 00 fc 2f 00       	push   $0x2ffc00
f0118a43:	e8 f9 f4 fe ff       	call   f0107f41 <kmalloc>
f0118a48:	83 c4 10             	add    $0x10,%esp
f0118a4b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a51:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118a57:	89 c1                	mov    %eax,%ecx
f0118a59:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118a60:	10 00 00 
f0118a63:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118a68:	0f b6 d0             	movzbl %al,%edx
f0118a6b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118a71:	01 d0                	add    %edx,%eax
f0118a73:	48                   	dec    %eax
f0118a74:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118a7a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a85:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118a8b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a91:	29 d0                	sub    %edx,%eax
f0118a93:	89 c3                	mov    %eax,%ebx
f0118a95:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118a9c:	10 00 00 
f0118a9f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118aa4:	0f b6 c0             	movzbl %al,%eax
f0118aa7:	c1 e0 04             	shl    $0x4,%eax
f0118aaa:	89 c2                	mov    %eax,%edx
f0118aac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118ab2:	01 d0                	add    %edx,%eax
f0118ab4:	48                   	dec    %eax
f0118ab5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118abb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118ac1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ac6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118acc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118ad2:	29 d0                	sub    %edx,%eax
f0118ad4:	01 d8                	add    %ebx,%eax
f0118ad6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118adb:	39 c1                	cmp    %eax,%ecx
f0118add:	74 14                	je     f0118af3 <test_kmalloc+0x6da>
f0118adf:	83 ec 04             	sub    $0x4,%esp
f0118ae2:	68 d4 92 13 f0       	push   $0xf01392d4
f0118ae7:	6a 71                	push   $0x71
f0118ae9:	68 ee 91 13 f0       	push   $0xf01391ee
f0118aee:	e8 bd 76 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118af3:	e8 6e bb fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118af8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118afb:	74 14                	je     f0118b11 <test_kmalloc+0x6f8>
f0118afd:	83 ec 04             	sub    $0x4,%esp
f0118b00:	68 08 92 13 f0       	push   $0xf0139208
f0118b05:	6a 72                	push   $0x72
f0118b07:	68 ee 91 13 f0       	push   $0xf01391ee
f0118b0c:	e8 9f 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b11:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118b14:	e8 a7 3e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118b19:	29 c3                	sub    %eax,%ebx
f0118b1b:	89 d8                	mov    %ebx,%eax
f0118b1d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118b22:	74 14                	je     f0118b38 <test_kmalloc+0x71f>
f0118b24:	83 ec 04             	sub    $0x4,%esp
f0118b27:	68 70 92 13 f0       	push   $0xf0139270
f0118b2c:	6a 73                	push   $0x73
f0118b2e:	68 ee 91 13 f0       	push   $0xf01391ee
f0118b33:	e8 78 76 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118b38:	e8 83 3e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118b3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b40:	e8 21 bb fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118b45:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118b48:	83 ec 0c             	sub    $0xc,%esp
f0118b4b:	68 00 fc 5f 00       	push   $0x5ffc00
f0118b50:	e8 ec f3 fe ff       	call   f0107f41 <kmalloc>
f0118b55:	83 c4 10             	add    $0x10,%esp
f0118b58:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b5e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118b64:	89 c1                	mov    %eax,%ecx
f0118b66:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118b6d:	10 00 00 
f0118b70:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118b75:	0f b6 d0             	movzbl %al,%edx
f0118b78:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118b7e:	01 d0                	add    %edx,%eax
f0118b80:	48                   	dec    %eax
f0118b81:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118b87:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118b8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b92:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118b98:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118b9e:	29 d0                	sub    %edx,%eax
f0118ba0:	89 c3                	mov    %eax,%ebx
f0118ba2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118ba9:	10 00 00 
f0118bac:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118bb1:	0f b6 c0             	movzbl %al,%eax
f0118bb4:	c1 e0 04             	shl    $0x4,%eax
f0118bb7:	89 c2                	mov    %eax,%edx
f0118bb9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118bbf:	01 d0                	add    %edx,%eax
f0118bc1:	48                   	dec    %eax
f0118bc2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118bc8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118bce:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bd3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118bd9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118bdf:	29 d0                	sub    %edx,%eax
f0118be1:	01 d8                	add    %ebx,%eax
f0118be3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118be8:	39 c1                	cmp    %eax,%ecx
f0118bea:	74 14                	je     f0118c00 <test_kmalloc+0x7e7>
f0118bec:	83 ec 04             	sub    $0x4,%esp
f0118bef:	68 d4 92 13 f0       	push   $0xf01392d4
f0118bf4:	6a 79                	push   $0x79
f0118bf6:	68 ee 91 13 f0       	push   $0xf01391ee
f0118bfb:	e8 b0 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c00:	e8 61 ba fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118c05:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118c08:	74 14                	je     f0118c1e <test_kmalloc+0x805>
f0118c0a:	83 ec 04             	sub    $0x4,%esp
f0118c0d:	68 08 92 13 f0       	push   $0xf0139208
f0118c12:	6a 7a                	push   $0x7a
f0118c14:	68 ee 91 13 f0       	push   $0xf01391ee
f0118c19:	e8 92 75 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c1e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118c21:	e8 9a 3d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118c26:	29 c3                	sub    %eax,%ebx
f0118c28:	89 d8                	mov    %ebx,%eax
f0118c2a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118c2f:	74 14                	je     f0118c45 <test_kmalloc+0x82c>
f0118c31:	83 ec 04             	sub    $0x4,%esp
f0118c34:	68 70 92 13 f0       	push   $0xf0139270
f0118c39:	6a 7b                	push   $0x7b
f0118c3b:	68 ee 91 13 f0       	push   $0xf01391ee
f0118c40:	e8 6b 75 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118c45:	e8 76 3d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118c4a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c4d:	e8 14 ba fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118c52:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118c55:	83 ec 0c             	sub    $0xc,%esp
f0118c58:	68 00 38 00 00       	push   $0x3800
f0118c5d:	e8 df f2 fe ff       	call   f0107f41 <kmalloc>
f0118c62:	83 c4 10             	add    $0x10,%esp
f0118c65:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c6b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118c71:	89 c1                	mov    %eax,%ecx
f0118c73:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118c7a:	10 00 00 
f0118c7d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118c82:	0f b6 d0             	movzbl %al,%edx
f0118c85:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118c8b:	01 d0                	add    %edx,%eax
f0118c8d:	48                   	dec    %eax
f0118c8e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118c94:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118c9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c9f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118ca5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118cab:	29 d0                	sub    %edx,%eax
f0118cad:	89 c3                	mov    %eax,%ebx
f0118caf:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118cb6:	10 00 00 
f0118cb9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118cbe:	0f b6 c0             	movzbl %al,%eax
f0118cc1:	c1 e0 04             	shl    $0x4,%eax
f0118cc4:	89 c2                	mov    %eax,%edx
f0118cc6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118ccc:	01 d0                	add    %edx,%eax
f0118cce:	48                   	dec    %eax
f0118ccf:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118cd5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118cdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ce0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118ce6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118cec:	29 d0                	sub    %edx,%eax
f0118cee:	01 d8                	add    %ebx,%eax
f0118cf0:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118cf5:	39 c1                	cmp    %eax,%ecx
f0118cf7:	74 17                	je     f0118d10 <test_kmalloc+0x8f7>
f0118cf9:	83 ec 04             	sub    $0x4,%esp
f0118cfc:	68 d4 92 13 f0       	push   $0xf01392d4
f0118d01:	68 81 00 00 00       	push   $0x81
f0118d06:	68 ee 91 13 f0       	push   $0xf01391ee
f0118d0b:	e8 a0 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d10:	e8 51 b9 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118d15:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118d18:	74 17                	je     f0118d31 <test_kmalloc+0x918>
f0118d1a:	83 ec 04             	sub    $0x4,%esp
f0118d1d:	68 08 92 13 f0       	push   $0xf0139208
f0118d22:	68 82 00 00 00       	push   $0x82
f0118d27:	68 ee 91 13 f0       	push   $0xf01391ee
f0118d2c:	e8 7f 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d31:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118d34:	e8 87 3c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118d39:	29 c3                	sub    %eax,%ebx
f0118d3b:	89 d8                	mov    %ebx,%eax
f0118d3d:	83 f8 04             	cmp    $0x4,%eax
f0118d40:	74 17                	je     f0118d59 <test_kmalloc+0x940>
f0118d42:	83 ec 04             	sub    $0x4,%esp
f0118d45:	68 70 92 13 f0       	push   $0xf0139270
f0118d4a:	68 83 00 00 00       	push   $0x83
f0118d4f:	68 ee 91 13 f0       	push   $0xf01391ee
f0118d54:	e8 57 74 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f0118d59:	83 ec 0c             	sub    $0xc,%esp
f0118d5c:	68 3a 93 13 f0       	push   $0xf013933a
f0118d61:	e8 cb 80 fe ff       	call   f0100e31 <cprintf>
f0118d66:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118d69:	e8 52 3c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0118d6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118d71:	e8 f0 b8 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0118d76:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118d79:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0118d80:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118d83:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118d89:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0118d8f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118d95:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118d98:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118d9a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118da0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118da6:	01 c2                	add    %eax,%edx
f0118da8:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118dab:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118dad:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118db3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118db9:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118dc0:	fd 0f 00 
			shortArr[0] = minShort;
f0118dc3:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118dc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118dcc:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118dcf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118dd5:	01 c0                	add    %eax,%eax
f0118dd7:	89 c2                	mov    %eax,%edx
f0118dd9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118ddf:	01 c2                	add    %eax,%edx
f0118de1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118de5:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118de8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118dee:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118df4:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0118dfb:	01 00 00 
			intArr[0] = minInt;
f0118dfe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e04:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118e07:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118e09:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118e0f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118e16:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e1c:	01 c2                	add    %eax,%edx
f0118e1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118e21:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118e23:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118e29:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118e2f:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0118e36:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118e39:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e3f:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118e42:	88 10                	mov    %dl,(%eax)
f0118e44:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0118e4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118e4d:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118e51:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e57:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118e5a:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118e5d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e63:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e6a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e70:	01 c2                	add    %eax,%edx
f0118e72:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118e75:	88 02                	mov    %al,(%edx)
f0118e77:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e7d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e84:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e8a:	01 c2                	add    %eax,%edx
f0118e8c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118e90:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118e94:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ea1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ea7:	01 c2                	add    %eax,%edx
f0118ea9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118eac:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118eaf:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0118eb6:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118eb9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118ebf:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0118ec5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ecb:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118ece:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118ed0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118ed6:	89 c2                	mov    %eax,%edx
f0118ed8:	c1 ea 1f             	shr    $0x1f,%edx
f0118edb:	01 d0                	add    %edx,%eax
f0118edd:	d1 f8                	sar    %eax
f0118edf:	89 c2                	mov    %eax,%edx
f0118ee1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ee7:	01 c2                	add    %eax,%edx
f0118ee9:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118eec:	88 c1                	mov    %al,%cl
f0118eee:	c0 e9 07             	shr    $0x7,%cl
f0118ef1:	01 c8                	add    %ecx,%eax
f0118ef3:	d0 f8                	sar    %al
f0118ef5:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118ef7:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118efd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f03:	01 c2                	add    %eax,%edx
f0118f05:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118f08:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118f0a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f10:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118f16:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f0118f1d:	1b 00 00 
			shortArr2[0] = minShort;
f0118f20:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0118f26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118f29:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118f2c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118f32:	01 c0                	add    %eax,%eax
f0118f34:	89 c2                	mov    %eax,%edx
f0118f36:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118f3c:	01 c2                	add    %eax,%edx
f0118f3e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118f42:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118f45:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f4b:	8a 00                	mov    (%eax),%al
f0118f4d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118f50:	75 15                	jne    f0118f67 <test_kmalloc+0xb4e>
f0118f52:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118f58:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f5e:	01 d0                	add    %edx,%eax
f0118f60:	8a 00                	mov    (%eax),%al
f0118f62:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118f65:	74 17                	je     f0118f7e <test_kmalloc+0xb65>
f0118f67:	83 ec 04             	sub    $0x4,%esp
f0118f6a:	68 44 93 13 f0       	push   $0xf0139344
f0118f6f:	68 b2 00 00 00       	push   $0xb2
f0118f74:	68 ee 91 13 f0       	push   $0xf01391ee
f0118f79:	e8 32 72 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118f7e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118f84:	66 8b 00             	mov    (%eax),%ax
f0118f87:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118f8b:	75 1b                	jne    f0118fa8 <test_kmalloc+0xb8f>
f0118f8d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118f93:	01 c0                	add    %eax,%eax
f0118f95:	89 c2                	mov    %eax,%edx
f0118f97:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118f9d:	01 d0                	add    %edx,%eax
f0118f9f:	66 8b 00             	mov    (%eax),%ax
f0118fa2:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118fa6:	74 17                	je     f0118fbf <test_kmalloc+0xba6>
f0118fa8:	83 ec 04             	sub    $0x4,%esp
f0118fab:	68 44 93 13 f0       	push   $0xf0139344
f0118fb0:	68 b3 00 00 00       	push   $0xb3
f0118fb5:	68 ee 91 13 f0       	push   $0xf01391ee
f0118fba:	e8 f1 71 fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118fbf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118fc5:	8b 00                	mov    (%eax),%eax
f0118fc7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118fca:	75 1c                	jne    f0118fe8 <test_kmalloc+0xbcf>
f0118fcc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118fd2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118fd9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118fdf:	01 d0                	add    %edx,%eax
f0118fe1:	8b 00                	mov    (%eax),%eax
f0118fe3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118fe6:	74 17                	je     f0118fff <test_kmalloc+0xbe6>
f0118fe8:	83 ec 04             	sub    $0x4,%esp
f0118feb:	68 44 93 13 f0       	push   $0xf0139344
f0118ff0:	68 b4 00 00 00       	push   $0xb4
f0118ff5:	68 ee 91 13 f0       	push   $0xf01391ee
f0118ffa:	e8 b1 71 fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118fff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119005:	8a 00                	mov    (%eax),%al
f0119007:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011900a:	75 1c                	jne    f0119028 <test_kmalloc+0xc0f>
f011900c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119012:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119019:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011901f:	01 d0                	add    %edx,%eax
f0119021:	8a 00                	mov    (%eax),%al
f0119023:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119026:	74 17                	je     f011903f <test_kmalloc+0xc26>
f0119028:	83 ec 04             	sub    $0x4,%esp
f011902b:	68 44 93 13 f0       	push   $0xf0139344
f0119030:	68 b6 00 00 00       	push   $0xb6
f0119035:	68 ee 91 13 f0       	push   $0xf01391ee
f011903a:	e8 71 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011903f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119045:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119049:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011904d:	75 1f                	jne    f011906e <test_kmalloc+0xc55>
f011904f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119055:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011905c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119062:	01 d0                	add    %edx,%eax
f0119064:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119068:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011906c:	74 17                	je     f0119085 <test_kmalloc+0xc6c>
f011906e:	83 ec 04             	sub    $0x4,%esp
f0119071:	68 44 93 13 f0       	push   $0xf0139344
f0119076:	68 b7 00 00 00       	push   $0xb7
f011907b:	68 ee 91 13 f0       	push   $0xf01391ee
f0119080:	e8 2b 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0119085:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011908b:	8b 40 04             	mov    0x4(%eax),%eax
f011908e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119091:	75 1d                	jne    f01190b0 <test_kmalloc+0xc97>
f0119093:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119099:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01190a0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190a6:	01 d0                	add    %edx,%eax
f01190a8:	8b 40 04             	mov    0x4(%eax),%eax
f01190ab:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01190ae:	74 17                	je     f01190c7 <test_kmalloc+0xcae>
f01190b0:	83 ec 04             	sub    $0x4,%esp
f01190b3:	68 44 93 13 f0       	push   $0xf0139344
f01190b8:	68 b8 00 00 00       	push   $0xb8
f01190bd:	68 ee 91 13 f0       	push   $0xf01391ee
f01190c2:	e8 e9 70 fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01190c7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190cd:	8a 00                	mov    (%eax),%al
f01190cf:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01190d2:	75 40                	jne    f0119114 <test_kmalloc+0xcfb>
f01190d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01190da:	89 c2                	mov    %eax,%edx
f01190dc:	c1 ea 1f             	shr    $0x1f,%edx
f01190df:	01 d0                	add    %edx,%eax
f01190e1:	d1 f8                	sar    %eax
f01190e3:	89 c2                	mov    %eax,%edx
f01190e5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190eb:	01 d0                	add    %edx,%eax
f01190ed:	8a 10                	mov    (%eax),%dl
f01190ef:	8a 45 f2             	mov    -0xe(%ebp),%al
f01190f2:	88 c1                	mov    %al,%cl
f01190f4:	c0 e9 07             	shr    $0x7,%cl
f01190f7:	01 c8                	add    %ecx,%eax
f01190f9:	d0 f8                	sar    %al
f01190fb:	38 c2                	cmp    %al,%dl
f01190fd:	75 15                	jne    f0119114 <test_kmalloc+0xcfb>
f01190ff:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0119105:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011910b:	01 d0                	add    %edx,%eax
f011910d:	8a 00                	mov    (%eax),%al
f011910f:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119112:	74 17                	je     f011912b <test_kmalloc+0xd12>
f0119114:	83 ec 04             	sub    $0x4,%esp
f0119117:	68 44 93 13 f0       	push   $0xf0139344
f011911c:	68 ba 00 00 00       	push   $0xba
f0119121:	68 ee 91 13 f0       	push   $0xf01391ee
f0119126:	e8 85 70 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011912b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119131:	66 8b 00             	mov    (%eax),%ax
f0119134:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0119138:	75 1b                	jne    f0119155 <test_kmalloc+0xd3c>
f011913a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119140:	01 c0                	add    %eax,%eax
f0119142:	89 c2                	mov    %eax,%edx
f0119144:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011914a:	01 d0                	add    %edx,%eax
f011914c:	66 8b 00             	mov    (%eax),%ax
f011914f:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0119153:	74 17                	je     f011916c <test_kmalloc+0xd53>
f0119155:	83 ec 04             	sub    $0x4,%esp
f0119158:	68 44 93 13 f0       	push   $0xf0139344
f011915d:	68 bb 00 00 00       	push   $0xbb
f0119162:	68 ee 91 13 f0       	push   $0xf01391ee
f0119167:	e8 44 70 fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011916c:	e8 4f 38 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119171:	89 c2                	mov    %eax,%edx
f0119173:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119176:	39 c2                	cmp    %eax,%edx
f0119178:	74 17                	je     f0119191 <test_kmalloc+0xd78>
f011917a:	83 ec 04             	sub    $0x4,%esp
f011917d:	68 70 92 13 f0       	push   $0xf0139270
f0119182:	68 bd 00 00 00       	push   $0xbd
f0119187:	68 ee 91 13 f0       	push   $0xf01391ee
f011918c:	e8 1f 70 fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119191:	e8 d0 b4 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119196:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119199:	74 17                	je     f01191b2 <test_kmalloc+0xd99>
f011919b:	83 ec 04             	sub    $0x4,%esp
f011919e:	68 08 92 13 f0       	push   $0xf0139208
f01191a3:	68 be 00 00 00       	push   $0xbe
f01191a8:	68 ee 91 13 f0       	push   $0xf01391ee
f01191ad:	e8 fe 6f fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f01191b2:	83 ec 0c             	sub    $0xc,%esp
f01191b5:	68 79 93 13 f0       	push   $0xf0139379
f01191ba:	e8 72 7c fe ff       	call   f0100e31 <cprintf>
f01191bf:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f01191c2:	e8 f9 37 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01191c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01191ca:	e8 97 b4 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01191cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f01191d2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01191d9:	10 00 00 
f01191dc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01191e1:	0f b6 d0             	movzbl %al,%edx
f01191e4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01191ea:	01 d0                	add    %edx,%eax
f01191ec:	48                   	dec    %eax
f01191ed:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01191f3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01191f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01191fe:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119204:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011920a:	29 d0                	sub    %edx,%eax
f011920c:	89 c1                	mov    %eax,%ecx
f011920e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119215:	10 00 00 
f0119218:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011921d:	0f b6 c0             	movzbl %al,%eax
f0119220:	c1 e0 04             	shl    $0x4,%eax
f0119223:	89 c2                	mov    %eax,%edx
f0119225:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011922b:	01 d0                	add    %edx,%eax
f011922d:	48                   	dec    %eax
f011922e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119234:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011923a:	ba 00 00 00 00       	mov    $0x0,%edx
f011923f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119245:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011924b:	29 d0                	sub    %edx,%eax
f011924d:	01 c8                	add    %ecx,%eax
f011924f:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0119254:	29 c2                	sub    %eax,%edx
f0119256:	89 d0                	mov    %edx,%eax
f0119258:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011925e:	83 ec 0c             	sub    $0xc,%esp
f0119261:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0119267:	e8 d5 ec fe ff       	call   f0107f41 <kmalloc>
f011926c:	83 c4 10             	add    $0x10,%esp
f011926f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0119275:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011927b:	85 c0                	test   %eax,%eax
f011927d:	74 17                	je     f0119296 <test_kmalloc+0xe7d>
f011927f:	83 ec 04             	sub    $0x4,%esp
f0119282:	68 bc 91 13 f0       	push   $0xf01391bc
f0119287:	68 c8 00 00 00       	push   $0xc8
f011928c:	68 ee 91 13 f0       	push   $0xf01391ee
f0119291:	e8 1a 6f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119296:	e8 cb b3 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011929b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011929e:	74 17                	je     f01192b7 <test_kmalloc+0xe9e>
f01192a0:	83 ec 04             	sub    $0x4,%esp
f01192a3:	68 08 92 13 f0       	push   $0xf0139208
f01192a8:	68 c9 00 00 00       	push   $0xc9
f01192ad:	68 ee 91 13 f0       	push   $0xf01391ee
f01192b2:	e8 f9 6e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01192b7:	e8 04 37 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01192bc:	89 c2                	mov    %eax,%edx
f01192be:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01192c1:	39 c2                	cmp    %eax,%edx
f01192c3:	74 17                	je     f01192dc <test_kmalloc+0xec3>
f01192c5:	83 ec 04             	sub    $0x4,%esp
f01192c8:	68 70 92 13 f0       	push   $0xf0139270
f01192cd:	68 ca 00 00 00       	push   $0xca
f01192d2:	68 ee 91 13 f0       	push   $0xf01391ee
f01192d7:	e8 d4 6e fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f01192dc:	83 ec 0c             	sub    $0xc,%esp
f01192df:	68 80 93 13 f0       	push   $0xf0139380
f01192e4:	e8 48 7b fe ff       	call   f0100e31 <cprintf>
f01192e9:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01192ec:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01192f2:	05 00 40 00 00       	add    $0x4000,%eax
f01192f7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01192fd:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119304:	10 00 00 
f0119307:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011930c:	0f b6 d0             	movzbl %al,%edx
f011930f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119315:	01 d0                	add    %edx,%eax
f0119317:	48                   	dec    %eax
f0119318:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011931e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119324:	ba 00 00 00 00       	mov    $0x0,%edx
f0119329:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011932f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119335:	29 d0                	sub    %edx,%eax
f0119337:	89 c1                	mov    %eax,%ecx
f0119339:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119340:	10 00 00 
f0119343:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119348:	0f b6 c0             	movzbl %al,%eax
f011934b:	c1 e0 04             	shl    $0x4,%eax
f011934e:	89 c2                	mov    %eax,%edx
f0119350:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119356:	01 d0                	add    %edx,%eax
f0119358:	48                   	dec    %eax
f0119359:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011935f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119365:	ba 00 00 00 00       	mov    $0x0,%edx
f011936a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119370:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119376:	29 d0                	sub    %edx,%eax
f0119378:	01 c8                	add    %ecx,%eax
f011937a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011937f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119382:	eb 6a                	jmp    f01193ee <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119384:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0119389:	83 ec 04             	sub    $0x4,%esp
f011938c:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f0119392:	52                   	push   %edx
f0119393:	ff 75 f4             	pushl  -0xc(%ebp)
f0119396:	50                   	push   %eax
f0119397:	e8 2d e1 fe ff       	call   f01074c9 <get_page_table>
f011939c:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011939f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01193a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01193a8:	c1 ea 0c             	shr    $0xc,%edx
f01193ab:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01193b1:	c1 e2 02             	shl    $0x2,%edx
f01193b4:	01 d0                	add    %edx,%eax
f01193b6:	8b 00                	mov    (%eax),%eax
f01193b8:	25 ff 0f 00 00       	and    $0xfff,%eax
f01193bd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01193c3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01193c9:	83 e0 04             	and    $0x4,%eax
f01193cc:	85 c0                	test   %eax,%eax
f01193ce:	74 17                	je     f01193e7 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01193d0:	83 ec 04             	sub    $0x4,%esp
f01193d3:	68 88 93 13 f0       	push   $0xf0139388
f01193d8:	68 d7 00 00 00       	push   $0xd7
f01193dd:	68 ee 91 13 f0       	push   $0xf01391ee
f01193e2:	e8 c9 6d fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01193e7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01193ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01193f1:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f01193f7:	72 8b                	jb     f0119384 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01193f9:	83 ec 0c             	sub    $0xc,%esp
f01193fc:	68 d2 93 13 f0       	push   $0xf01393d2
f0119401:	e8 2b 7a fe ff       	call   f0100e31 <cprintf>
f0119406:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119409:	83 ec 0c             	sub    $0xc,%esp
f011940c:	68 dc 93 13 f0       	push   $0xf01393dc
f0119411:	e8 1b 7a fe ff       	call   f0100e31 <cprintf>
f0119416:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119419:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011941e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119421:	5b                   	pop    %ebx
f0119422:	5f                   	pop    %edi
f0119423:	5d                   	pop    %ebp
f0119424:	c3                   	ret    

f0119425 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119425:	55                   	push   %ebp
f0119426:	89 e5                	mov    %esp,%ebp
f0119428:	57                   	push   %edi
f0119429:	53                   	push   %ebx
f011942a:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f0119430:	83 ec 0c             	sub    $0xc,%esp
f0119433:	68 30 91 13 f0       	push   $0xf0139130
f0119438:	e8 f4 79 fe ff       	call   f0100e31 <cprintf>
f011943d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119440:	83 ec 0c             	sub    $0xc,%esp
f0119443:	68 60 91 13 f0       	push   $0xf0139160
f0119448:	e8 e4 79 fe ff       	call   f0100e31 <cprintf>
f011944d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119450:	83 ec 0c             	sub    $0xc,%esp
f0119453:	68 30 91 13 f0       	push   $0xf0139130
f0119458:	e8 d4 79 fe ff       	call   f0100e31 <cprintf>
f011945d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0119460:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119466:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011946b:	b8 00 00 00 00       	mov    $0x0,%eax
f0119470:	89 d7                	mov    %edx,%edi
f0119472:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119474:	83 ec 0c             	sub    $0xc,%esp
f0119477:	68 18 94 13 f0       	push   $0xf0139418
f011947c:	e8 b0 79 fe ff       	call   f0100e31 <cprintf>
f0119481:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119484:	e8 37 35 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119489:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011948c:	e8 d5 b1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119491:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119494:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011949b:	eb 1f                	jmp    f01194bc <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011949d:	83 ec 0c             	sub    $0xc,%esp
f01194a0:	68 00 00 20 00       	push   $0x200000
f01194a5:	e8 97 ea fe ff       	call   f0107f41 <kmalloc>
f01194aa:	83 c4 10             	add    $0x10,%esp
f01194ad:	89 c2                	mov    %eax,%edx
f01194af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01194b2:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01194b9:	ff 45 f4             	incl   -0xc(%ebp)
f01194bc:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01194c0:	7e db                	jle    f011949d <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01194c2:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01194c9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01194ce:	0f b6 d0             	movzbl %al,%edx
f01194d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01194d4:	01 d0                	add    %edx,%eax
f01194d6:	48                   	dec    %eax
f01194d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01194da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01194dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01194e2:	f7 75 e8             	divl   -0x18(%ebp)
f01194e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01194e8:	29 d0                	sub    %edx,%eax
f01194ea:	89 c1                	mov    %eax,%ecx
f01194ec:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01194f3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01194f8:	0f b6 c0             	movzbl %al,%eax
f01194fb:	c1 e0 04             	shl    $0x4,%eax
f01194fe:	89 c2                	mov    %eax,%edx
f0119500:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119503:	01 d0                	add    %edx,%eax
f0119505:	48                   	dec    %eax
f0119506:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119509:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011950c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119511:	f7 75 e0             	divl   -0x20(%ebp)
f0119514:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119517:	29 d0                	sub    %edx,%eax
f0119519:	01 c8                	add    %ecx,%eax
f011951b:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0119520:	29 c2                	sub    %eax,%edx
f0119522:	89 d0                	mov    %edx,%eax
f0119524:	83 ec 0c             	sub    $0xc,%esp
f0119527:	50                   	push   %eax
f0119528:	e8 14 ea fe ff       	call   f0107f41 <kmalloc>
f011952d:	83 c4 10             	add    $0x10,%esp
f0119530:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119536:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011953c:	89 c1                	mov    %eax,%ecx
f011953e:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119545:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011954a:	0f b6 d0             	movzbl %al,%edx
f011954d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119550:	01 d0                	add    %edx,%eax
f0119552:	48                   	dec    %eax
f0119553:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119556:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119559:	ba 00 00 00 00       	mov    $0x0,%edx
f011955e:	f7 75 d8             	divl   -0x28(%ebp)
f0119561:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119564:	29 d0                	sub    %edx,%eax
f0119566:	89 c3                	mov    %eax,%ebx
f0119568:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011956f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119574:	0f b6 c0             	movzbl %al,%eax
f0119577:	c1 e0 04             	shl    $0x4,%eax
f011957a:	89 c2                	mov    %eax,%edx
f011957c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011957f:	01 d0                	add    %edx,%eax
f0119581:	48                   	dec    %eax
f0119582:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119585:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119588:	ba 00 00 00 00       	mov    $0x0,%edx
f011958d:	f7 75 d0             	divl   -0x30(%ebp)
f0119590:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119593:	29 d0                	sub    %edx,%eax
f0119595:	01 d8                	add    %ebx,%eax
f0119597:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011959c:	39 c1                	cmp    %eax,%ecx
f011959e:	0f 85 4f 03 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01195a4:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01195aa:	89 c1                	mov    %eax,%ecx
f01195ac:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01195b3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01195b8:	0f b6 d0             	movzbl %al,%edx
f01195bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01195be:	01 d0                	add    %edx,%eax
f01195c0:	48                   	dec    %eax
f01195c1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01195c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01195c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01195cc:	f7 75 c8             	divl   -0x38(%ebp)
f01195cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01195d2:	29 d0                	sub    %edx,%eax
f01195d4:	89 c3                	mov    %eax,%ebx
f01195d6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01195dd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01195e2:	0f b6 c0             	movzbl %al,%eax
f01195e5:	c1 e0 04             	shl    $0x4,%eax
f01195e8:	89 c2                	mov    %eax,%edx
f01195ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01195ed:	01 d0                	add    %edx,%eax
f01195ef:	48                   	dec    %eax
f01195f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01195f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01195f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01195fb:	f7 75 c0             	divl   -0x40(%ebp)
f01195fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119601:	29 d0                	sub    %edx,%eax
f0119603:	01 d8                	add    %ebx,%eax
f0119605:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011960a:	39 c1                	cmp    %eax,%ecx
f011960c:	0f 85 e1 02 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119612:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f0119618:	89 c1                	mov    %eax,%ecx
f011961a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119621:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119626:	0f b6 d0             	movzbl %al,%edx
f0119629:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011962c:	01 d0                	add    %edx,%eax
f011962e:	48                   	dec    %eax
f011962f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119632:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119635:	ba 00 00 00 00       	mov    $0x0,%edx
f011963a:	f7 75 b8             	divl   -0x48(%ebp)
f011963d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119640:	29 d0                	sub    %edx,%eax
f0119642:	89 c3                	mov    %eax,%ebx
f0119644:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011964b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119650:	0f b6 c0             	movzbl %al,%eax
f0119653:	c1 e0 04             	shl    $0x4,%eax
f0119656:	89 c2                	mov    %eax,%edx
f0119658:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011965b:	01 d0                	add    %edx,%eax
f011965d:	48                   	dec    %eax
f011965e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119661:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119664:	ba 00 00 00 00       	mov    $0x0,%edx
f0119669:	f7 75 b0             	divl   -0x50(%ebp)
f011966c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011966f:	29 d0                	sub    %edx,%eax
f0119671:	01 d8                	add    %ebx,%eax
f0119673:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119678:	39 c1                	cmp    %eax,%ecx
f011967a:	0f 85 73 02 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119680:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119686:	89 c1                	mov    %eax,%ecx
f0119688:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011968f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119694:	0f b6 d0             	movzbl %al,%edx
f0119697:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011969a:	01 d0                	add    %edx,%eax
f011969c:	48                   	dec    %eax
f011969d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01196a0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01196a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01196a8:	f7 75 a8             	divl   -0x58(%ebp)
f01196ab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01196ae:	29 d0                	sub    %edx,%eax
f01196b0:	89 c3                	mov    %eax,%ebx
f01196b2:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01196b9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01196be:	0f b6 c0             	movzbl %al,%eax
f01196c1:	c1 e0 04             	shl    $0x4,%eax
f01196c4:	89 c2                	mov    %eax,%edx
f01196c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01196c9:	01 d0                	add    %edx,%eax
f01196cb:	48                   	dec    %eax
f01196cc:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01196cf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01196d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01196d7:	f7 75 a0             	divl   -0x60(%ebp)
f01196da:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01196dd:	29 d0                	sub    %edx,%eax
f01196df:	01 d8                	add    %ebx,%eax
f01196e1:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01196e6:	39 c1                	cmp    %eax,%ecx
f01196e8:	0f 85 05 02 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01196ee:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f01196f4:	89 c1                	mov    %eax,%ecx
f01196f6:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01196fd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119702:	0f b6 d0             	movzbl %al,%edx
f0119705:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119708:	01 d0                	add    %edx,%eax
f011970a:	48                   	dec    %eax
f011970b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011970e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119711:	ba 00 00 00 00       	mov    $0x0,%edx
f0119716:	f7 75 98             	divl   -0x68(%ebp)
f0119719:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011971c:	29 d0                	sub    %edx,%eax
f011971e:	89 c3                	mov    %eax,%ebx
f0119720:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119727:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011972c:	0f b6 c0             	movzbl %al,%eax
f011972f:	c1 e0 04             	shl    $0x4,%eax
f0119732:	89 c2                	mov    %eax,%edx
f0119734:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119737:	01 d0                	add    %edx,%eax
f0119739:	48                   	dec    %eax
f011973a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011973d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119740:	ba 00 00 00 00       	mov    $0x0,%edx
f0119745:	f7 75 90             	divl   -0x70(%ebp)
f0119748:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011974b:	29 d0                	sub    %edx,%eax
f011974d:	01 d8                	add    %ebx,%eax
f011974f:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119754:	39 c1                	cmp    %eax,%ecx
f0119756:	0f 85 97 01 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011975c:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119762:	89 c1                	mov    %eax,%ecx
f0119764:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011976b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119770:	0f b6 d0             	movzbl %al,%edx
f0119773:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119776:	01 d0                	add    %edx,%eax
f0119778:	48                   	dec    %eax
f0119779:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011977c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011977f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119784:	f7 75 88             	divl   -0x78(%ebp)
f0119787:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011978a:	29 d0                	sub    %edx,%eax
f011978c:	89 c3                	mov    %eax,%ebx
f011978e:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119795:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011979a:	0f b6 c0             	movzbl %al,%eax
f011979d:	c1 e0 04             	shl    $0x4,%eax
f01197a0:	89 c2                	mov    %eax,%edx
f01197a2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01197a5:	01 d0                	add    %edx,%eax
f01197a7:	48                   	dec    %eax
f01197a8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01197ae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01197b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01197b9:	f7 75 80             	divl   -0x80(%ebp)
f01197bc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01197c2:	29 d0                	sub    %edx,%eax
f01197c4:	01 d8                	add    %ebx,%eax
f01197c6:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01197cb:	39 c1                	cmp    %eax,%ecx
f01197cd:	0f 85 20 01 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01197d3:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f01197d9:	89 c1                	mov    %eax,%ecx
f01197db:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01197e2:	10 00 00 
f01197e5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01197ea:	0f b6 d0             	movzbl %al,%edx
f01197ed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01197f3:	01 d0                	add    %edx,%eax
f01197f5:	48                   	dec    %eax
f01197f6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01197fc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119802:	ba 00 00 00 00       	mov    $0x0,%edx
f0119807:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011980d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119813:	29 d0                	sub    %edx,%eax
f0119815:	89 c3                	mov    %eax,%ebx
f0119817:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011981e:	10 00 00 
f0119821:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119826:	0f b6 c0             	movzbl %al,%eax
f0119829:	c1 e0 04             	shl    $0x4,%eax
f011982c:	89 c2                	mov    %eax,%edx
f011982e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119834:	01 d0                	add    %edx,%eax
f0119836:	48                   	dec    %eax
f0119837:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011983d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119843:	ba 00 00 00 00       	mov    $0x0,%edx
f0119848:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011984e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119854:	29 d0                	sub    %edx,%eax
f0119856:	01 d8                	add    %ebx,%eax
f0119858:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011985d:	39 c1                	cmp    %eax,%ecx
f011985f:	0f 85 8e 00 00 00    	jne    f01198f3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119865:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011986b:	89 c1                	mov    %eax,%ecx
f011986d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119874:	10 00 00 
f0119877:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011987c:	0f b6 d0             	movzbl %al,%edx
f011987f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119885:	01 d0                	add    %edx,%eax
f0119887:	48                   	dec    %eax
f0119888:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011988e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119894:	ba 00 00 00 00       	mov    $0x0,%edx
f0119899:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011989f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01198a5:	29 d0                	sub    %edx,%eax
f01198a7:	89 c3                	mov    %eax,%ebx
f01198a9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01198b0:	10 00 00 
f01198b3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01198b8:	0f b6 c0             	movzbl %al,%eax
f01198bb:	c1 e0 04             	shl    $0x4,%eax
f01198be:	89 c2                	mov    %eax,%edx
f01198c0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01198c6:	01 d0                	add    %edx,%eax
f01198c8:	48                   	dec    %eax
f01198c9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01198cf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01198d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01198da:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01198e0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01198e6:	29 d0                	sub    %edx,%eax
f01198e8:	01 d8                	add    %ebx,%eax
f01198ea:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01198ef:	39 c1                	cmp    %eax,%ecx
f01198f1:	74 17                	je     f011990a <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01198f3:	83 ec 04             	sub    $0x4,%esp
f01198f6:	68 68 94 13 f0       	push   $0xf0139468
f01198fb:	68 03 01 00 00       	push   $0x103
f0119900:	68 ee 91 13 f0       	push   $0xf01391ee
f0119905:	e8 a6 68 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011990a:	e8 57 ad fe ff       	call   f0104666 <pf_calculate_free_frames>
f011990f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119912:	74 17                	je     f011992b <test_kmalloc_nextfit+0x506>
f0119914:	83 ec 04             	sub    $0x4,%esp
f0119917:	68 08 92 13 f0       	push   $0xf0139208
f011991c:	68 05 01 00 00       	push   $0x105
f0119921:	68 ee 91 13 f0       	push   $0xf01391ee
f0119926:	e8 85 68 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f011992b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011992e:	e8 8d 30 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119933:	29 c3                	sub    %eax,%ebx
f0119935:	89 d9                	mov    %ebx,%ecx
f0119937:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011993e:	10 00 00 
f0119941:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119946:	0f b6 d0             	movzbl %al,%edx
f0119949:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011994f:	01 d0                	add    %edx,%eax
f0119951:	48                   	dec    %eax
f0119952:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119958:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011995e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119963:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119969:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011996f:	29 d0                	sub    %edx,%eax
f0119971:	89 c3                	mov    %eax,%ebx
f0119973:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011997a:	10 00 00 
f011997d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119982:	0f b6 c0             	movzbl %al,%eax
f0119985:	c1 e0 04             	shl    $0x4,%eax
f0119988:	89 c2                	mov    %eax,%edx
f011998a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119990:	01 d0                	add    %edx,%eax
f0119992:	48                   	dec    %eax
f0119993:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119999:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011999f:	ba 00 00 00 00       	mov    $0x0,%edx
f01199a4:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01199aa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01199b0:	29 d0                	sub    %edx,%eax
f01199b2:	01 d8                	add    %ebx,%eax
f01199b4:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01199b9:	29 c2                	sub    %eax,%edx
f01199bb:	89 d0                	mov    %edx,%eax
f01199bd:	c1 e8 0c             	shr    $0xc,%eax
f01199c0:	39 c1                	cmp    %eax,%ecx
f01199c2:	74 17                	je     f01199db <test_kmalloc_nextfit+0x5b6>
f01199c4:	83 ec 04             	sub    $0x4,%esp
f01199c7:	68 ab 94 13 f0       	push   $0xf01394ab
f01199cc:	68 06 01 00 00       	push   $0x106
f01199d1:	68 ee 91 13 f0       	push   $0xf01391ee
f01199d6:	e8 d5 67 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01199db:	e8 86 ac fe ff       	call   f0104666 <pf_calculate_free_frames>
f01199e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01199e3:	e8 d8 2f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f01199e8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01199eb:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f01199f1:	83 ec 0c             	sub    $0xc,%esp
f01199f4:	50                   	push   %eax
f01199f5:	e8 61 e5 fe ff       	call   f0107f5b <kfree>
f01199fa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01199fd:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119a03:	83 ec 0c             	sub    $0xc,%esp
f0119a06:	50                   	push   %eax
f0119a07:	e8 4f e5 fe ff       	call   f0107f5b <kfree>
f0119a0c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119a0f:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0119a15:	83 ec 0c             	sub    $0xc,%esp
f0119a18:	50                   	push   %eax
f0119a19:	e8 3d e5 fe ff       	call   f0107f5b <kfree>
f0119a1e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119a21:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0119a27:	83 ec 0c             	sub    $0xc,%esp
f0119a2a:	50                   	push   %eax
f0119a2b:	e8 2b e5 fe ff       	call   f0107f5b <kfree>
f0119a30:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119a33:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119a39:	83 ec 0c             	sub    $0xc,%esp
f0119a3c:	50                   	push   %eax
f0119a3d:	e8 19 e5 fe ff       	call   f0107f5b <kfree>
f0119a42:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119a45:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f0119a4b:	83 ec 0c             	sub    $0xc,%esp
f0119a4e:	50                   	push   %eax
f0119a4f:	e8 07 e5 fe ff       	call   f0107f5b <kfree>
f0119a54:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119a57:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0119a5d:	83 ec 0c             	sub    $0xc,%esp
f0119a60:	50                   	push   %eax
f0119a61:	e8 f5 e4 fe ff       	call   f0107f5b <kfree>
f0119a66:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119a69:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119a6f:	83 ec 0c             	sub    $0xc,%esp
f0119a72:	50                   	push   %eax
f0119a73:	e8 e3 e4 fe ff       	call   f0107f5b <kfree>
f0119a78:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119a7b:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119a81:	83 ec 0c             	sub    $0xc,%esp
f0119a84:	50                   	push   %eax
f0119a85:	e8 d1 e4 fe ff       	call   f0107f5b <kfree>
f0119a8a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119a8d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119a93:	83 ec 0c             	sub    $0xc,%esp
f0119a96:	50                   	push   %eax
f0119a97:	e8 bf e4 fe ff       	call   f0107f5b <kfree>
f0119a9c:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a9f:	e8 c2 ab fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119aa4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119aa7:	74 17                	je     f0119ac0 <test_kmalloc_nextfit+0x69b>
f0119aa9:	83 ec 04             	sub    $0x4,%esp
f0119aac:	68 08 92 13 f0       	push   $0xf0139208
f0119ab1:	68 17 01 00 00       	push   $0x117
f0119ab6:	68 ee 91 13 f0       	push   $0xf01391ee
f0119abb:	e8 f0 66 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119ac0:	e8 fb 2e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119ac5:	89 c2                	mov    %eax,%edx
f0119ac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119aca:	89 d1                	mov    %edx,%ecx
f0119acc:	29 c1                	sub    %eax,%ecx
f0119ace:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119ad5:	10 00 00 
f0119ad8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119add:	0f b6 d0             	movzbl %al,%edx
f0119ae0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119ae6:	01 d0                	add    %edx,%eax
f0119ae8:	48                   	dec    %eax
f0119ae9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119aef:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119af5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119afa:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119b00:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119b06:	29 d0                	sub    %edx,%eax
f0119b08:	89 c3                	mov    %eax,%ebx
f0119b0a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119b11:	10 00 00 
f0119b14:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119b19:	0f b6 c0             	movzbl %al,%eax
f0119b1c:	c1 e0 04             	shl    $0x4,%eax
f0119b1f:	89 c2                	mov    %eax,%edx
f0119b21:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119b27:	01 d0                	add    %edx,%eax
f0119b29:	48                   	dec    %eax
f0119b2a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119b30:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b3b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119b41:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b47:	29 d0                	sub    %edx,%eax
f0119b49:	01 d8                	add    %ebx,%eax
f0119b4b:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119b50:	29 c2                	sub    %eax,%edx
f0119b52:	89 d0                	mov    %edx,%eax
f0119b54:	c1 e8 0c             	shr    $0xc,%eax
f0119b57:	39 c1                	cmp    %eax,%ecx
f0119b59:	74 17                	je     f0119b72 <test_kmalloc_nextfit+0x74d>
f0119b5b:	83 ec 04             	sub    $0x4,%esp
f0119b5e:	68 bc 94 13 f0       	push   $0xf01394bc
f0119b63:	68 18 01 00 00       	push   $0x118
f0119b68:	68 ee 91 13 f0       	push   $0xf01391ee
f0119b6d:	e8 3e 66 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119b72:	e8 ef aa fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119b77:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b7a:	e8 41 2e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119b7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119b82:	83 ec 0c             	sub    $0xc,%esp
f0119b85:	68 00 fc 0f 00       	push   $0xffc00
f0119b8a:	e8 b2 e3 fe ff       	call   f0107f41 <kmalloc>
f0119b8f:	83 c4 10             	add    $0x10,%esp
f0119b92:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119b98:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119b9f:	10 00 00 
f0119ba2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119ba7:	0f b6 d0             	movzbl %al,%edx
f0119baa:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119bb0:	01 d0                	add    %edx,%eax
f0119bb2:	48                   	dec    %eax
f0119bb3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119bb9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119bbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bc4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119bca:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119bd0:	29 d0                	sub    %edx,%eax
f0119bd2:	89 c1                	mov    %eax,%ecx
f0119bd4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119bdb:	10 00 00 
f0119bde:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119be3:	0f b6 c0             	movzbl %al,%eax
f0119be6:	c1 e0 04             	shl    $0x4,%eax
f0119be9:	89 c2                	mov    %eax,%edx
f0119beb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119bf1:	01 d0                	add    %edx,%eax
f0119bf3:	48                   	dec    %eax
f0119bf4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119bfa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c00:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c05:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119c0b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c11:	29 d0                	sub    %edx,%eax
f0119c13:	01 c8                	add    %ecx,%eax
f0119c15:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119c1b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119c21:	39 c2                	cmp    %eax,%edx
f0119c23:	74 17                	je     f0119c3c <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119c25:	83 ec 04             	sub    $0x4,%esp
f0119c28:	68 fc 94 13 f0       	push   $0xf01394fc
f0119c2d:	68 1f 01 00 00       	push   $0x11f
f0119c32:	68 ee 91 13 f0       	push   $0xf01391ee
f0119c37:	e8 74 65 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c3c:	e8 25 aa fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119c41:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c44:	74 17                	je     f0119c5d <test_kmalloc_nextfit+0x838>
f0119c46:	83 ec 04             	sub    $0x4,%esp
f0119c49:	68 08 92 13 f0       	push   $0xf0139208
f0119c4e:	68 20 01 00 00       	push   $0x120
f0119c53:	68 ee 91 13 f0       	push   $0xf01391ee
f0119c58:	e8 53 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c5d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c60:	e8 5b 2d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119c65:	29 c3                	sub    %eax,%ebx
f0119c67:	89 d8                	mov    %ebx,%eax
f0119c69:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c6e:	74 17                	je     f0119c87 <test_kmalloc_nextfit+0x862>
f0119c70:	83 ec 04             	sub    $0x4,%esp
f0119c73:	68 ab 94 13 f0       	push   $0xf01394ab
f0119c78:	68 21 01 00 00       	push   $0x121
f0119c7d:	68 ee 91 13 f0       	push   $0xf01391ee
f0119c82:	e8 29 65 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c87:	e8 da a9 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119c8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c8f:	e8 2c 2d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119c97:	83 ec 0c             	sub    $0xc,%esp
f0119c9a:	68 00 04 00 00       	push   $0x400
f0119c9f:	e8 9d e2 fe ff       	call   f0107f41 <kmalloc>
f0119ca4:	83 c4 10             	add    $0x10,%esp
f0119ca7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119cad:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119cb4:	10 00 00 
f0119cb7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119cbc:	0f b6 d0             	movzbl %al,%edx
f0119cbf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119cc5:	01 d0                	add    %edx,%eax
f0119cc7:	48                   	dec    %eax
f0119cc8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119cce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cd9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119cdf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119ce5:	29 d0                	sub    %edx,%eax
f0119ce7:	89 c1                	mov    %eax,%ecx
f0119ce9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119cf0:	10 00 00 
f0119cf3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119cf8:	0f b6 c0             	movzbl %al,%eax
f0119cfb:	c1 e0 04             	shl    $0x4,%eax
f0119cfe:	89 c2                	mov    %eax,%edx
f0119d00:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119d06:	01 d0                	add    %edx,%eax
f0119d08:	48                   	dec    %eax
f0119d09:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119d0f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d1a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119d20:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119d26:	29 d0                	sub    %edx,%eax
f0119d28:	01 c8                	add    %ecx,%eax
f0119d2a:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119d30:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d36:	39 c2                	cmp    %eax,%edx
f0119d38:	74 17                	je     f0119d51 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f0119d3a:	83 ec 04             	sub    $0x4,%esp
f0119d3d:	68 fc 94 13 f0       	push   $0xf01394fc
f0119d42:	68 27 01 00 00       	push   $0x127
f0119d47:	68 ee 91 13 f0       	push   $0xf01391ee
f0119d4c:	e8 5f 64 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d51:	e8 10 a9 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119d56:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d59:	74 17                	je     f0119d72 <test_kmalloc_nextfit+0x94d>
f0119d5b:	83 ec 04             	sub    $0x4,%esp
f0119d5e:	68 08 92 13 f0       	push   $0xf0139208
f0119d63:	68 28 01 00 00       	push   $0x128
f0119d68:	68 ee 91 13 f0       	push   $0xf01391ee
f0119d6d:	e8 3e 64 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d72:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d75:	e8 46 2c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119d7a:	29 c3                	sub    %eax,%ebx
f0119d7c:	89 d8                	mov    %ebx,%eax
f0119d7e:	83 f8 01             	cmp    $0x1,%eax
f0119d81:	74 17                	je     f0119d9a <test_kmalloc_nextfit+0x975>
f0119d83:	83 ec 04             	sub    $0x4,%esp
f0119d86:	68 ab 94 13 f0       	push   $0xf01394ab
f0119d8b:	68 29 01 00 00       	push   $0x129
f0119d90:	68 ee 91 13 f0       	push   $0xf01391ee
f0119d95:	e8 16 64 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d9a:	e8 c7 a8 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119d9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119da2:	e8 19 2c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119da7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119daa:	83 ec 0c             	sub    $0xc,%esp
f0119dad:	68 00 00 50 00       	push   $0x500000
f0119db2:	e8 8a e1 fe ff       	call   f0107f41 <kmalloc>
f0119db7:	83 c4 10             	add    $0x10,%esp
f0119dba:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119dc0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119dc7:	10 00 00 
f0119dca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119dcf:	0f b6 d0             	movzbl %al,%edx
f0119dd2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119dd8:	01 d0                	add    %edx,%eax
f0119dda:	48                   	dec    %eax
f0119ddb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119de1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119de7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dec:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119df2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119df8:	29 d0                	sub    %edx,%eax
f0119dfa:	89 c1                	mov    %eax,%ecx
f0119dfc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119e03:	10 00 00 
f0119e06:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119e0b:	0f b6 c0             	movzbl %al,%eax
f0119e0e:	c1 e0 04             	shl    $0x4,%eax
f0119e11:	89 c2                	mov    %eax,%edx
f0119e13:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119e19:	01 d0                	add    %edx,%eax
f0119e1b:	48                   	dec    %eax
f0119e1c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119e22:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119e28:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e2d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119e33:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119e39:	29 d0                	sub    %edx,%eax
f0119e3b:	01 c8                	add    %ecx,%eax
f0119e3d:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e43:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e49:	39 c2                	cmp    %eax,%edx
f0119e4b:	74 17                	je     f0119e64 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f0119e4d:	83 ec 04             	sub    $0x4,%esp
f0119e50:	68 fc 94 13 f0       	push   $0xf01394fc
f0119e55:	68 2f 01 00 00       	push   $0x12f
f0119e5a:	68 ee 91 13 f0       	push   $0xf01391ee
f0119e5f:	e8 4c 63 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e64:	e8 fd a7 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119e69:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e6c:	74 17                	je     f0119e85 <test_kmalloc_nextfit+0xa60>
f0119e6e:	83 ec 04             	sub    $0x4,%esp
f0119e71:	68 08 92 13 f0       	push   $0xf0139208
f0119e76:	68 30 01 00 00       	push   $0x130
f0119e7b:	68 ee 91 13 f0       	push   $0xf01391ee
f0119e80:	e8 2b 63 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119e85:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e88:	e8 33 2b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119e8d:	29 c3                	sub    %eax,%ebx
f0119e8f:	89 d8                	mov    %ebx,%eax
f0119e91:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119e96:	74 17                	je     f0119eaf <test_kmalloc_nextfit+0xa8a>
f0119e98:	83 ec 04             	sub    $0x4,%esp
f0119e9b:	68 ab 94 13 f0       	push   $0xf01394ab
f0119ea0:	68 31 01 00 00       	push   $0x131
f0119ea5:	68 ee 91 13 f0       	push   $0xf01391ee
f0119eaa:	e8 01 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119eaf:	e8 b2 a7 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119eb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119eb7:	e8 04 2b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119ebf:	83 ec 0c             	sub    $0xc,%esp
f0119ec2:	68 00 00 10 00       	push   $0x100000
f0119ec7:	e8 75 e0 fe ff       	call   f0107f41 <kmalloc>
f0119ecc:	83 c4 10             	add    $0x10,%esp
f0119ecf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119ed5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119edc:	10 00 00 
f0119edf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119ee4:	0f b6 d0             	movzbl %al,%edx
f0119ee7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119eed:	01 d0                	add    %edx,%eax
f0119eef:	48                   	dec    %eax
f0119ef0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119ef6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119efc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f01:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119f07:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119f0d:	29 d0                	sub    %edx,%eax
f0119f0f:	89 c1                	mov    %eax,%ecx
f0119f11:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119f18:	10 00 00 
f0119f1b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119f20:	0f b6 c0             	movzbl %al,%eax
f0119f23:	c1 e0 04             	shl    $0x4,%eax
f0119f26:	89 c2                	mov    %eax,%edx
f0119f28:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119f2e:	01 d0                	add    %edx,%eax
f0119f30:	48                   	dec    %eax
f0119f31:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119f37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f42:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119f48:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f4e:	29 d0                	sub    %edx,%eax
f0119f50:	01 c8                	add    %ecx,%eax
f0119f52:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119f58:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119f5e:	39 c2                	cmp    %eax,%edx
f0119f60:	74 17                	je     f0119f79 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f0119f62:	83 ec 04             	sub    $0x4,%esp
f0119f65:	68 fc 94 13 f0       	push   $0xf01394fc
f0119f6a:	68 37 01 00 00       	push   $0x137
f0119f6f:	68 ee 91 13 f0       	push   $0xf01391ee
f0119f74:	e8 37 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f79:	e8 e8 a6 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119f7e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f81:	74 17                	je     f0119f9a <test_kmalloc_nextfit+0xb75>
f0119f83:	83 ec 04             	sub    $0x4,%esp
f0119f86:	68 08 92 13 f0       	push   $0xf0139208
f0119f8b:	68 38 01 00 00       	push   $0x138
f0119f90:	68 ee 91 13 f0       	push   $0xf01391ee
f0119f95:	e8 16 62 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119f9a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f9d:	e8 1e 2a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119fa2:	29 c3                	sub    %eax,%ebx
f0119fa4:	89 d8                	mov    %ebx,%eax
f0119fa6:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fab:	74 17                	je     f0119fc4 <test_kmalloc_nextfit+0xb9f>
f0119fad:	83 ec 04             	sub    $0x4,%esp
f0119fb0:	68 ab 94 13 f0       	push   $0xf01394ab
f0119fb5:	68 39 01 00 00       	push   $0x139
f0119fba:	68 ee 91 13 f0       	push   $0xf01391ee
f0119fbf:	e8 ec 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119fc4:	e8 9d a6 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119fc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119fcc:	e8 ef 29 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f0119fd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119fd4:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119fda:	83 ec 0c             	sub    $0xc,%esp
f0119fdd:	50                   	push   %eax
f0119fde:	e8 78 df fe ff       	call   f0107f5b <kfree>
f0119fe3:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fe6:	e8 7b a6 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0119feb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fee:	74 17                	je     f011a007 <test_kmalloc_nextfit+0xbe2>
f0119ff0:	83 ec 04             	sub    $0x4,%esp
f0119ff3:	68 08 92 13 f0       	push   $0xf0139208
f0119ff8:	68 3e 01 00 00       	push   $0x13e
f0119ffd:	68 ee 91 13 f0       	push   $0xf01391ee
f011a002:	e8 a9 61 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a007:	e8 b4 29 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a00c:	89 c2                	mov    %eax,%edx
f011a00e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a011:	29 c2                	sub    %eax,%edx
f011a013:	89 d0                	mov    %edx,%eax
f011a015:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a01a:	74 17                	je     f011a033 <test_kmalloc_nextfit+0xc0e>
f011a01c:	83 ec 04             	sub    $0x4,%esp
f011a01f:	68 bc 94 13 f0       	push   $0xf01394bc
f011a024:	68 3f 01 00 00       	push   $0x13f
f011a029:	68 ee 91 13 f0       	push   $0xf01391ee
f011a02e:	e8 7d 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a033:	e8 2e a6 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a038:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a03b:	e8 80 29 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a040:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a043:	83 ec 0c             	sub    $0xc,%esp
f011a046:	68 00 04 00 00       	push   $0x400
f011a04b:	e8 f1 de fe ff       	call   f0107f41 <kmalloc>
f011a050:	83 c4 10             	add    $0x10,%esp
f011a053:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a059:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a060:	10 00 00 
f011a063:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a068:	0f b6 d0             	movzbl %al,%edx
f011a06b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a071:	01 d0                	add    %edx,%eax
f011a073:	48                   	dec    %eax
f011a074:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a07a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a080:	ba 00 00 00 00       	mov    $0x0,%edx
f011a085:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a08b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a091:	29 d0                	sub    %edx,%eax
f011a093:	89 c1                	mov    %eax,%ecx
f011a095:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a09c:	10 00 00 
f011a09f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a0a4:	0f b6 c0             	movzbl %al,%eax
f011a0a7:	c1 e0 04             	shl    $0x4,%eax
f011a0aa:	89 c2                	mov    %eax,%edx
f011a0ac:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a0b2:	01 d0                	add    %edx,%eax
f011a0b4:	48                   	dec    %eax
f011a0b5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a0bb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a0c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0c6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a0cc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a0d2:	29 d0                	sub    %edx,%eax
f011a0d4:	01 c8                	add    %ecx,%eax
f011a0d6:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a0dc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a0e2:	39 c2                	cmp    %eax,%edx
f011a0e4:	74 17                	je     f011a0fd <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a0e6:	83 ec 04             	sub    $0x4,%esp
f011a0e9:	68 fc 94 13 f0       	push   $0xf01394fc
f011a0ee:	68 45 01 00 00       	push   $0x145
f011a0f3:	68 ee 91 13 f0       	push   $0xf01391ee
f011a0f8:	e8 b3 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0fd:	e8 64 a5 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a102:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a105:	74 17                	je     f011a11e <test_kmalloc_nextfit+0xcf9>
f011a107:	83 ec 04             	sub    $0x4,%esp
f011a10a:	68 08 92 13 f0       	push   $0xf0139208
f011a10f:	68 46 01 00 00       	push   $0x146
f011a114:	68 ee 91 13 f0       	push   $0xf01391ee
f011a119:	e8 92 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a11e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a121:	e8 9a 28 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a126:	29 c3                	sub    %eax,%ebx
f011a128:	89 d8                	mov    %ebx,%eax
f011a12a:	83 f8 01             	cmp    $0x1,%eax
f011a12d:	74 17                	je     f011a146 <test_kmalloc_nextfit+0xd21>
f011a12f:	83 ec 04             	sub    $0x4,%esp
f011a132:	68 ab 94 13 f0       	push   $0xf01394ab
f011a137:	68 47 01 00 00       	push   $0x147
f011a13c:	68 ee 91 13 f0       	push   $0xf01391ee
f011a141:	e8 6a 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a146:	e8 1b a5 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a14b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a14e:	e8 6d 28 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a153:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a156:	83 ec 0c             	sub    $0xc,%esp
f011a159:	68 00 e0 1f 00       	push   $0x1fe000
f011a15e:	e8 de dd fe ff       	call   f0107f41 <kmalloc>
f011a163:	83 c4 10             	add    $0x10,%esp
f011a166:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a16c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a173:	10 00 00 
f011a176:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a17b:	0f b6 d0             	movzbl %al,%edx
f011a17e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a184:	01 d0                	add    %edx,%eax
f011a186:	48                   	dec    %eax
f011a187:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a18d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a193:	ba 00 00 00 00       	mov    $0x0,%edx
f011a198:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a19e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1a4:	29 d0                	sub    %edx,%eax
f011a1a6:	89 c1                	mov    %eax,%ecx
f011a1a8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a1af:	10 00 00 
f011a1b2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a1b7:	0f b6 c0             	movzbl %al,%eax
f011a1ba:	c1 e0 04             	shl    $0x4,%eax
f011a1bd:	89 c2                	mov    %eax,%edx
f011a1bf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a1c5:	01 d0                	add    %edx,%eax
f011a1c7:	48                   	dec    %eax
f011a1c8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a1ce:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a1d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1d9:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a1df:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a1e5:	29 d0                	sub    %edx,%eax
f011a1e7:	01 c8                	add    %ecx,%eax
f011a1e9:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a1ef:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a1f5:	39 c2                	cmp    %eax,%edx
f011a1f7:	74 17                	je     f011a210 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a1f9:	83 ec 04             	sub    $0x4,%esp
f011a1fc:	68 fc 94 13 f0       	push   $0xf01394fc
f011a201:	68 4d 01 00 00       	push   $0x14d
f011a206:	68 ee 91 13 f0       	push   $0xf01391ee
f011a20b:	e8 a0 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a210:	e8 51 a4 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a215:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a218:	74 17                	je     f011a231 <test_kmalloc_nextfit+0xe0c>
f011a21a:	83 ec 04             	sub    $0x4,%esp
f011a21d:	68 08 92 13 f0       	push   $0xf0139208
f011a222:	68 4e 01 00 00       	push   $0x14e
f011a227:	68 ee 91 13 f0       	push   $0xf01391ee
f011a22c:	e8 7f 5f fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a231:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a234:	e8 87 27 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a239:	29 c3                	sub    %eax,%ebx
f011a23b:	89 d8                	mov    %ebx,%eax
f011a23d:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a242:	74 17                	je     f011a25b <test_kmalloc_nextfit+0xe36>
f011a244:	83 ec 04             	sub    $0x4,%esp
f011a247:	68 ab 94 13 f0       	push   $0xf01394ab
f011a24c:	68 50 01 00 00       	push   $0x150
f011a251:	68 ee 91 13 f0       	push   $0xf01391ee
f011a256:	e8 55 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a25b:	e8 06 a4 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a260:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a263:	e8 58 27 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a268:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a26b:	83 ec 0c             	sub    $0xc,%esp
f011a26e:	68 00 00 08 00       	push   $0x80000
f011a273:	e8 c9 dc fe ff       	call   f0107f41 <kmalloc>
f011a278:	83 c4 10             	add    $0x10,%esp
f011a27b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a281:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a288:	10 00 00 
f011a28b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a290:	0f b6 d0             	movzbl %al,%edx
f011a293:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a299:	01 d0                	add    %edx,%eax
f011a29b:	48                   	dec    %eax
f011a29c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a2a2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2ad:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a2b3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2b9:	29 d0                	sub    %edx,%eax
f011a2bb:	89 c1                	mov    %eax,%ecx
f011a2bd:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a2c4:	10 00 00 
f011a2c7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a2cc:	0f b6 c0             	movzbl %al,%eax
f011a2cf:	c1 e0 04             	shl    $0x4,%eax
f011a2d2:	89 c2                	mov    %eax,%edx
f011a2d4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a2da:	01 d0                	add    %edx,%eax
f011a2dc:	48                   	dec    %eax
f011a2dd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a2e3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a2e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2ee:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a2f4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a2fa:	29 d0                	sub    %edx,%eax
f011a2fc:	01 c8                	add    %ecx,%eax
f011a2fe:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a304:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a30a:	39 c2                	cmp    %eax,%edx
f011a30c:	74 17                	je     f011a325 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a30e:	83 ec 04             	sub    $0x4,%esp
f011a311:	68 fc 94 13 f0       	push   $0xf01394fc
f011a316:	68 56 01 00 00       	push   $0x156
f011a31b:	68 ee 91 13 f0       	push   $0xf01391ee
f011a320:	e8 8b 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a325:	e8 3c a3 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a32a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a32d:	74 17                	je     f011a346 <test_kmalloc_nextfit+0xf21>
f011a32f:	83 ec 04             	sub    $0x4,%esp
f011a332:	68 08 92 13 f0       	push   $0xf0139208
f011a337:	68 57 01 00 00       	push   $0x157
f011a33c:	68 ee 91 13 f0       	push   $0xf01391ee
f011a341:	e8 6a 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a346:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a349:	e8 72 26 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a34e:	29 c3                	sub    %eax,%ebx
f011a350:	89 d8                	mov    %ebx,%eax
f011a352:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a357:	74 17                	je     f011a370 <test_kmalloc_nextfit+0xf4b>
f011a359:	83 ec 04             	sub    $0x4,%esp
f011a35c:	68 ab 94 13 f0       	push   $0xf01394ab
f011a361:	68 58 01 00 00       	push   $0x158
f011a366:	68 ee 91 13 f0       	push   $0xf01391ee
f011a36b:	e8 40 5e fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a370:	83 ec 0c             	sub    $0xc,%esp
f011a373:	68 1c 95 13 f0       	push   $0xf013951c
f011a378:	e8 b4 6a fe ff       	call   f0100e31 <cprintf>
f011a37d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a380:	e8 e1 a2 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a385:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a388:	e8 33 26 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a38d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a390:	83 ec 0c             	sub    $0xc,%esp
f011a393:	68 00 00 38 00       	push   $0x380000
f011a398:	e8 a4 db fe ff       	call   f0107f41 <kmalloc>
f011a39d:	83 c4 10             	add    $0x10,%esp
f011a3a0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a3a6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a3ad:	10 00 00 
f011a3b0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a3b5:	0f b6 d0             	movzbl %al,%edx
f011a3b8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a3be:	01 d0                	add    %edx,%eax
f011a3c0:	48                   	dec    %eax
f011a3c1:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a3c7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a3cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3d2:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a3d8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a3de:	29 d0                	sub    %edx,%eax
f011a3e0:	89 c1                	mov    %eax,%ecx
f011a3e2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a3e9:	10 00 00 
f011a3ec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a3f1:	0f b6 c0             	movzbl %al,%eax
f011a3f4:	c1 e0 04             	shl    $0x4,%eax
f011a3f7:	89 c2                	mov    %eax,%edx
f011a3f9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a3ff:	01 d0                	add    %edx,%eax
f011a401:	48                   	dec    %eax
f011a402:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a408:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a40e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a413:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a419:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a41f:	29 d0                	sub    %edx,%eax
f011a421:	01 c8                	add    %ecx,%eax
f011a423:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a429:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a42f:	39 c2                	cmp    %eax,%edx
f011a431:	74 17                	je     f011a44a <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a433:	83 ec 04             	sub    $0x4,%esp
f011a436:	68 fc 94 13 f0       	push   $0xf01394fc
f011a43b:	68 62 01 00 00       	push   $0x162
f011a440:	68 ee 91 13 f0       	push   $0xf01391ee
f011a445:	e8 66 5d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a44a:	e8 17 a2 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a44f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a452:	74 17                	je     f011a46b <test_kmalloc_nextfit+0x1046>
f011a454:	83 ec 04             	sub    $0x4,%esp
f011a457:	68 08 92 13 f0       	push   $0xf0139208
f011a45c:	68 63 01 00 00       	push   $0x163
f011a461:	68 ee 91 13 f0       	push   $0xf01391ee
f011a466:	e8 45 5d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a46b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a46e:	e8 4d 25 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a473:	29 c3                	sub    %eax,%ebx
f011a475:	89 d8                	mov    %ebx,%eax
f011a477:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a47c:	74 17                	je     f011a495 <test_kmalloc_nextfit+0x1070>
f011a47e:	83 ec 04             	sub    $0x4,%esp
f011a481:	68 ab 94 13 f0       	push   $0xf01394ab
f011a486:	68 64 01 00 00       	push   $0x164
f011a48b:	68 ee 91 13 f0       	push   $0xf01391ee
f011a490:	e8 1b 5d fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a495:	e8 cc a1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a49a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a49d:	e8 1e 25 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a4a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a4a5:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a4ab:	83 ec 0c             	sub    $0xc,%esp
f011a4ae:	50                   	push   %eax
f011a4af:	e8 a7 da fe ff       	call   f0107f5b <kfree>
f011a4b4:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4b7:	e8 aa a1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a4bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a4bf:	74 17                	je     f011a4d8 <test_kmalloc_nextfit+0x10b3>
f011a4c1:	83 ec 04             	sub    $0x4,%esp
f011a4c4:	68 08 92 13 f0       	push   $0xf0139208
f011a4c9:	68 69 01 00 00       	push   $0x169
f011a4ce:	68 ee 91 13 f0       	push   $0xf01391ee
f011a4d3:	e8 d8 5c fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a4d8:	e8 e3 24 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a4dd:	89 c2                	mov    %eax,%edx
f011a4df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a4e2:	29 c2                	sub    %eax,%edx
f011a4e4:	89 d0                	mov    %edx,%eax
f011a4e6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a4eb:	74 17                	je     f011a504 <test_kmalloc_nextfit+0x10df>
f011a4ed:	83 ec 04             	sub    $0x4,%esp
f011a4f0:	68 bc 94 13 f0       	push   $0xf01394bc
f011a4f5:	68 6a 01 00 00       	push   $0x16a
f011a4fa:	68 ee 91 13 f0       	push   $0xf01391ee
f011a4ff:	e8 ac 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a504:	e8 5d a1 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a509:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a50c:	e8 af 24 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a511:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a514:	83 ec 0c             	sub    $0xc,%esp
f011a517:	68 00 fc 3f 00       	push   $0x3ffc00
f011a51c:	e8 20 da fe ff       	call   f0107f41 <kmalloc>
f011a521:	83 c4 10             	add    $0x10,%esp
f011a524:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a52a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a531:	10 00 00 
f011a534:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a539:	0f b6 d0             	movzbl %al,%edx
f011a53c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a542:	01 d0                	add    %edx,%eax
f011a544:	48                   	dec    %eax
f011a545:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a54b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a551:	ba 00 00 00 00       	mov    $0x0,%edx
f011a556:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a55c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a562:	29 d0                	sub    %edx,%eax
f011a564:	89 c1                	mov    %eax,%ecx
f011a566:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a56d:	10 00 00 
f011a570:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a575:	0f b6 c0             	movzbl %al,%eax
f011a578:	c1 e0 04             	shl    $0x4,%eax
f011a57b:	89 c2                	mov    %eax,%edx
f011a57d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a583:	01 d0                	add    %edx,%eax
f011a585:	48                   	dec    %eax
f011a586:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a58c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a592:	ba 00 00 00 00       	mov    $0x0,%edx
f011a597:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a59d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a5a3:	29 d0                	sub    %edx,%eax
f011a5a5:	01 c8                	add    %ecx,%eax
f011a5a7:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a5ad:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a5b3:	39 c2                	cmp    %eax,%edx
f011a5b5:	74 17                	je     f011a5ce <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a5b7:	83 ec 04             	sub    $0x4,%esp
f011a5ba:	68 fc 94 13 f0       	push   $0xf01394fc
f011a5bf:	68 70 01 00 00       	push   $0x170
f011a5c4:	68 ee 91 13 f0       	push   $0xf01391ee
f011a5c9:	e8 e2 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5ce:	e8 93 a0 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a5d3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5d6:	74 17                	je     f011a5ef <test_kmalloc_nextfit+0x11ca>
f011a5d8:	83 ec 04             	sub    $0x4,%esp
f011a5db:	68 08 92 13 f0       	push   $0xf0139208
f011a5e0:	68 71 01 00 00       	push   $0x171
f011a5e5:	68 ee 91 13 f0       	push   $0xf01391ee
f011a5ea:	e8 c1 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a5ef:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a5f2:	e8 c9 23 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a5f7:	29 c3                	sub    %eax,%ebx
f011a5f9:	89 d8                	mov    %ebx,%eax
f011a5fb:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a600:	74 17                	je     f011a619 <test_kmalloc_nextfit+0x11f4>
f011a602:	83 ec 04             	sub    $0x4,%esp
f011a605:	68 ab 94 13 f0       	push   $0xf01394ab
f011a60a:	68 72 01 00 00       	push   $0x172
f011a60f:	68 ee 91 13 f0       	push   $0xf01391ee
f011a614:	e8 97 5b fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a619:	83 ec 0c             	sub    $0xc,%esp
f011a61c:	68 58 95 13 f0       	push   $0xf0139558
f011a621:	e8 0b 68 fe ff       	call   f0100e31 <cprintf>
f011a626:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a629:	e8 38 a0 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a62e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a631:	e8 8a 23 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a636:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a639:	83 ec 0c             	sub    $0xc,%esp
f011a63c:	68 00 00 60 00       	push   $0x600000
f011a641:	e8 fb d8 fe ff       	call   f0107f41 <kmalloc>
f011a646:	83 c4 10             	add    $0x10,%esp
f011a649:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a64f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a655:	85 c0                	test   %eax,%eax
f011a657:	74 17                	je     f011a670 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a659:	83 ec 04             	sub    $0x4,%esp
f011a65c:	68 fc 94 13 f0       	push   $0xf01394fc
f011a661:	68 7c 01 00 00       	push   $0x17c
f011a666:	68 ee 91 13 f0       	push   $0xf01391ee
f011a66b:	e8 40 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a670:	e8 f1 9f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a675:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a678:	74 17                	je     f011a691 <test_kmalloc_nextfit+0x126c>
f011a67a:	83 ec 04             	sub    $0x4,%esp
f011a67d:	68 08 92 13 f0       	push   $0xf0139208
f011a682:	68 7d 01 00 00       	push   $0x17d
f011a687:	68 ee 91 13 f0       	push   $0xf01391ee
f011a68c:	e8 1f 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a691:	e8 2a 23 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a696:	89 c2                	mov    %eax,%edx
f011a698:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a69b:	39 c2                	cmp    %eax,%edx
f011a69d:	74 17                	je     f011a6b6 <test_kmalloc_nextfit+0x1291>
f011a69f:	83 ec 04             	sub    $0x4,%esp
f011a6a2:	68 ab 94 13 f0       	push   $0xf01394ab
f011a6a7:	68 7e 01 00 00       	push   $0x17e
f011a6ac:	68 ee 91 13 f0       	push   $0xf01391ee
f011a6b1:	e8 fa 5a fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a6b6:	83 ec 0c             	sub    $0xc,%esp
f011a6b9:	68 90 95 13 f0       	push   $0xf0139590
f011a6be:	e8 6e 67 fe ff       	call   f0100e31 <cprintf>
f011a6c3:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a6c6:	83 ec 0c             	sub    $0xc,%esp
f011a6c9:	68 cc 95 13 f0       	push   $0xf01395cc
f011a6ce:	e8 5e 67 fe ff       	call   f0100e31 <cprintf>
f011a6d3:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a6d6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a6db:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a6de:	5b                   	pop    %ebx
f011a6df:	5f                   	pop    %edi
f011a6e0:	5d                   	pop    %ebp
f011a6e1:	c3                   	ret    

f011a6e2 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a6e2:	55                   	push   %ebp
f011a6e3:	89 e5                	mov    %esp,%ebp
f011a6e5:	57                   	push   %edi
f011a6e6:	53                   	push   %ebx
f011a6e7:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a6ed:	83 ec 0c             	sub    $0xc,%esp
f011a6f0:	68 30 91 13 f0       	push   $0xf0139130
f011a6f5:	e8 37 67 fe ff       	call   f0100e31 <cprintf>
f011a6fa:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a6fd:	83 ec 0c             	sub    $0xc,%esp
f011a700:	68 60 91 13 f0       	push   $0xf0139160
f011a705:	e8 27 67 fe ff       	call   f0100e31 <cprintf>
f011a70a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a70d:	83 ec 0c             	sub    $0xc,%esp
f011a710:	68 30 91 13 f0       	push   $0xf0139130
f011a715:	e8 17 67 fe ff       	call   f0100e31 <cprintf>
f011a71a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a71d:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a723:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a728:	b8 00 00 00 00       	mov    $0x0,%eax
f011a72d:	89 d7                	mov    %edx,%edi
f011a72f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a731:	e8 8a 22 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a736:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a739:	e8 28 9f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a73e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a741:	83 ec 0c             	sub    $0xc,%esp
f011a744:	68 00 fc 2f 00       	push   $0x2ffc00
f011a749:	e8 f3 d7 fe ff       	call   f0107f41 <kmalloc>
f011a74e:	83 c4 10             	add    $0x10,%esp
f011a751:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a757:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a75d:	89 c1                	mov    %eax,%ecx
f011a75f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a766:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a76b:	0f b6 d0             	movzbl %al,%edx
f011a76e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a771:	01 d0                	add    %edx,%eax
f011a773:	48                   	dec    %eax
f011a774:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a777:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a77a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a77f:	f7 75 ec             	divl   -0x14(%ebp)
f011a782:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a785:	29 d0                	sub    %edx,%eax
f011a787:	89 c3                	mov    %eax,%ebx
f011a789:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a790:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a795:	0f b6 c0             	movzbl %al,%eax
f011a798:	c1 e0 04             	shl    $0x4,%eax
f011a79b:	89 c2                	mov    %eax,%edx
f011a79d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a7a0:	01 d0                	add    %edx,%eax
f011a7a2:	48                   	dec    %eax
f011a7a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a7a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7ae:	f7 75 e4             	divl   -0x1c(%ebp)
f011a7b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7b4:	29 d0                	sub    %edx,%eax
f011a7b6:	01 d8                	add    %ebx,%eax
f011a7b8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a7bd:	39 c1                	cmp    %eax,%ecx
f011a7bf:	74 17                	je     f011a7d8 <test_kmalloc_bestfit1+0xf6>
f011a7c1:	83 ec 04             	sub    $0x4,%esp
f011a7c4:	68 08 96 13 f0       	push   $0xf0139608
f011a7c9:	68 98 01 00 00       	push   $0x198
f011a7ce:	68 ee 91 13 f0       	push   $0xf01391ee
f011a7d3:	e8 d8 59 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7d8:	e8 89 9e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a7dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7e0:	74 17                	je     f011a7f9 <test_kmalloc_bestfit1+0x117>
f011a7e2:	83 ec 04             	sub    $0x4,%esp
f011a7e5:	68 08 92 13 f0       	push   $0xf0139208
f011a7ea:	68 99 01 00 00       	push   $0x199
f011a7ef:	68 ee 91 13 f0       	push   $0xf01391ee
f011a7f4:	e8 b7 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a7f9:	e8 c2 21 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a7fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a801:	29 c2                	sub    %eax,%edx
f011a803:	89 d0                	mov    %edx,%eax
f011a805:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a80a:	74 17                	je     f011a823 <test_kmalloc_bestfit1+0x141>
f011a80c:	83 ec 04             	sub    $0x4,%esp
f011a80f:	68 38 96 13 f0       	push   $0xf0139638
f011a814:	68 9a 01 00 00       	push   $0x19a
f011a819:	68 ee 91 13 f0       	push   $0xf01391ee
f011a81e:	e8 8d 59 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a823:	e8 98 21 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a828:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a82b:	e8 36 9e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a830:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a833:	83 ec 0c             	sub    $0xc,%esp
f011a836:	68 00 fc 2f 00       	push   $0x2ffc00
f011a83b:	e8 01 d7 fe ff       	call   f0107f41 <kmalloc>
f011a840:	83 c4 10             	add    $0x10,%esp
f011a843:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a849:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a84f:	89 c1                	mov    %eax,%ecx
f011a851:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a858:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a85d:	0f b6 d0             	movzbl %al,%edx
f011a860:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a863:	01 d0                	add    %edx,%eax
f011a865:	48                   	dec    %eax
f011a866:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a869:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a86c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a871:	f7 75 dc             	divl   -0x24(%ebp)
f011a874:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a877:	29 d0                	sub    %edx,%eax
f011a879:	89 c3                	mov    %eax,%ebx
f011a87b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a882:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a887:	0f b6 c0             	movzbl %al,%eax
f011a88a:	c1 e0 04             	shl    $0x4,%eax
f011a88d:	89 c2                	mov    %eax,%edx
f011a88f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a892:	01 d0                	add    %edx,%eax
f011a894:	48                   	dec    %eax
f011a895:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a898:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a89b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8a0:	f7 75 d4             	divl   -0x2c(%ebp)
f011a8a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8a6:	29 d0                	sub    %edx,%eax
f011a8a8:	01 d8                	add    %ebx,%eax
f011a8aa:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a8af:	39 c1                	cmp    %eax,%ecx
f011a8b1:	74 17                	je     f011a8ca <test_kmalloc_bestfit1+0x1e8>
f011a8b3:	83 ec 04             	sub    $0x4,%esp
f011a8b6:	68 08 96 13 f0       	push   $0xf0139608
f011a8bb:	68 a0 01 00 00       	push   $0x1a0
f011a8c0:	68 ee 91 13 f0       	push   $0xf01391ee
f011a8c5:	e8 e6 58 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8ca:	e8 97 9d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a8cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8d2:	74 17                	je     f011a8eb <test_kmalloc_bestfit1+0x209>
f011a8d4:	83 ec 04             	sub    $0x4,%esp
f011a8d7:	68 08 92 13 f0       	push   $0xf0139208
f011a8dc:	68 a1 01 00 00       	push   $0x1a1
f011a8e1:	68 ee 91 13 f0       	push   $0xf01391ee
f011a8e6:	e8 c5 58 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a8eb:	e8 d0 20 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a8f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8f3:	29 c2                	sub    %eax,%edx
f011a8f5:	89 d0                	mov    %edx,%eax
f011a8f7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a8fc:	74 17                	je     f011a915 <test_kmalloc_bestfit1+0x233>
f011a8fe:	83 ec 04             	sub    $0x4,%esp
f011a901:	68 38 96 13 f0       	push   $0xf0139638
f011a906:	68 a2 01 00 00       	push   $0x1a2
f011a90b:	68 ee 91 13 f0       	push   $0xf01391ee
f011a910:	e8 9b 58 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a915:	e8 a6 20 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a91a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a91d:	e8 44 9d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a922:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a925:	83 ec 0c             	sub    $0xc,%esp
f011a928:	68 00 fc 1f 00       	push   $0x1ffc00
f011a92d:	e8 0f d6 fe ff       	call   f0107f41 <kmalloc>
f011a932:	83 c4 10             	add    $0x10,%esp
f011a935:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a93b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a941:	89 c1                	mov    %eax,%ecx
f011a943:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a94a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a94f:	0f b6 d0             	movzbl %al,%edx
f011a952:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a955:	01 d0                	add    %edx,%eax
f011a957:	48                   	dec    %eax
f011a958:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a95b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a95e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a963:	f7 75 cc             	divl   -0x34(%ebp)
f011a966:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a969:	29 d0                	sub    %edx,%eax
f011a96b:	89 c3                	mov    %eax,%ebx
f011a96d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a974:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a979:	0f b6 c0             	movzbl %al,%eax
f011a97c:	c1 e0 04             	shl    $0x4,%eax
f011a97f:	89 c2                	mov    %eax,%edx
f011a981:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a984:	01 d0                	add    %edx,%eax
f011a986:	48                   	dec    %eax
f011a987:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a98a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a98d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a992:	f7 75 c4             	divl   -0x3c(%ebp)
f011a995:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a998:	29 d0                	sub    %edx,%eax
f011a99a:	01 d8                	add    %ebx,%eax
f011a99c:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a9a1:	39 c1                	cmp    %eax,%ecx
f011a9a3:	74 17                	je     f011a9bc <test_kmalloc_bestfit1+0x2da>
f011a9a5:	83 ec 04             	sub    $0x4,%esp
f011a9a8:	68 08 96 13 f0       	push   $0xf0139608
f011a9ad:	68 a8 01 00 00       	push   $0x1a8
f011a9b2:	68 ee 91 13 f0       	push   $0xf01391ee
f011a9b7:	e8 f4 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9bc:	e8 a5 9c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011a9c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9c4:	74 17                	je     f011a9dd <test_kmalloc_bestfit1+0x2fb>
f011a9c6:	83 ec 04             	sub    $0x4,%esp
f011a9c9:	68 08 92 13 f0       	push   $0xf0139208
f011a9ce:	68 a9 01 00 00       	push   $0x1a9
f011a9d3:	68 ee 91 13 f0       	push   $0xf01391ee
f011a9d8:	e8 d3 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a9dd:	e8 de 1f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011a9e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9e5:	29 c2                	sub    %eax,%edx
f011a9e7:	89 d0                	mov    %edx,%eax
f011a9e9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a9ee:	74 17                	je     f011aa07 <test_kmalloc_bestfit1+0x325>
f011a9f0:	83 ec 04             	sub    $0x4,%esp
f011a9f3:	68 38 96 13 f0       	push   $0xf0139638
f011a9f8:	68 aa 01 00 00       	push   $0x1aa
f011a9fd:	68 ee 91 13 f0       	push   $0xf01391ee
f011aa02:	e8 a9 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa07:	e8 b4 1f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011aa0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa0f:	e8 52 9c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011aa14:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011aa17:	83 ec 0c             	sub    $0xc,%esp
f011aa1a:	68 00 fc 1f 00       	push   $0x1ffc00
f011aa1f:	e8 1d d5 fe ff       	call   f0107f41 <kmalloc>
f011aa24:	83 c4 10             	add    $0x10,%esp
f011aa27:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011aa2d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aa33:	89 c1                	mov    %eax,%ecx
f011aa35:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aa3c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011aa41:	0f b6 d0             	movzbl %al,%edx
f011aa44:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aa47:	01 d0                	add    %edx,%eax
f011aa49:	48                   	dec    %eax
f011aa4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aa4d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa50:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa55:	f7 75 bc             	divl   -0x44(%ebp)
f011aa58:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa5b:	29 d0                	sub    %edx,%eax
f011aa5d:	89 c3                	mov    %eax,%ebx
f011aa5f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011aa66:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011aa6b:	0f b6 c0             	movzbl %al,%eax
f011aa6e:	c1 e0 04             	shl    $0x4,%eax
f011aa71:	89 c2                	mov    %eax,%edx
f011aa73:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011aa76:	01 d0                	add    %edx,%eax
f011aa78:	48                   	dec    %eax
f011aa79:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011aa7c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa84:	f7 75 b4             	divl   -0x4c(%ebp)
f011aa87:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa8a:	29 d0                	sub    %edx,%eax
f011aa8c:	01 d8                	add    %ebx,%eax
f011aa8e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011aa93:	39 c1                	cmp    %eax,%ecx
f011aa95:	74 17                	je     f011aaae <test_kmalloc_bestfit1+0x3cc>
f011aa97:	83 ec 04             	sub    $0x4,%esp
f011aa9a:	68 08 96 13 f0       	push   $0xf0139608
f011aa9f:	68 b0 01 00 00       	push   $0x1b0
f011aaa4:	68 ee 91 13 f0       	push   $0xf01391ee
f011aaa9:	e8 02 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aaae:	e8 b3 9b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011aab3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aab6:	74 17                	je     f011aacf <test_kmalloc_bestfit1+0x3ed>
f011aab8:	83 ec 04             	sub    $0x4,%esp
f011aabb:	68 08 92 13 f0       	push   $0xf0139208
f011aac0:	68 b1 01 00 00       	push   $0x1b1
f011aac5:	68 ee 91 13 f0       	push   $0xf01391ee
f011aaca:	e8 e1 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aacf:	e8 ec 1e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011aad4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aad7:	29 c2                	sub    %eax,%edx
f011aad9:	89 d0                	mov    %edx,%eax
f011aadb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aae0:	74 17                	je     f011aaf9 <test_kmalloc_bestfit1+0x417>
f011aae2:	83 ec 04             	sub    $0x4,%esp
f011aae5:	68 38 96 13 f0       	push   $0xf0139638
f011aaea:	68 b2 01 00 00       	push   $0x1b2
f011aaef:	68 ee 91 13 f0       	push   $0xf01391ee
f011aaf4:	e8 b7 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aaf9:	e8 c2 1e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011aafe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab01:	e8 60 9b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ab06:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011ab09:	83 ec 0c             	sub    $0xc,%esp
f011ab0c:	68 00 fc 0f 00       	push   $0xffc00
f011ab11:	e8 2b d4 fe ff       	call   f0107f41 <kmalloc>
f011ab16:	83 c4 10             	add    $0x10,%esp
f011ab19:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ab1f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ab25:	89 c1                	mov    %eax,%ecx
f011ab27:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ab2e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ab33:	0f b6 d0             	movzbl %al,%edx
f011ab36:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ab39:	01 d0                	add    %edx,%eax
f011ab3b:	48                   	dec    %eax
f011ab3c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ab3f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab42:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab47:	f7 75 ac             	divl   -0x54(%ebp)
f011ab4a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab4d:	29 d0                	sub    %edx,%eax
f011ab4f:	89 c3                	mov    %eax,%ebx
f011ab51:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ab58:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ab5d:	0f b6 c0             	movzbl %al,%eax
f011ab60:	c1 e0 04             	shl    $0x4,%eax
f011ab63:	89 c2                	mov    %eax,%edx
f011ab65:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ab68:	01 d0                	add    %edx,%eax
f011ab6a:	48                   	dec    %eax
f011ab6b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ab6e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab71:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab76:	f7 75 a4             	divl   -0x5c(%ebp)
f011ab79:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab7c:	29 d0                	sub    %edx,%eax
f011ab7e:	01 d8                	add    %ebx,%eax
f011ab80:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ab85:	39 c1                	cmp    %eax,%ecx
f011ab87:	74 17                	je     f011aba0 <test_kmalloc_bestfit1+0x4be>
f011ab89:	83 ec 04             	sub    $0x4,%esp
f011ab8c:	68 08 96 13 f0       	push   $0xf0139608
f011ab91:	68 b8 01 00 00       	push   $0x1b8
f011ab96:	68 ee 91 13 f0       	push   $0xf01391ee
f011ab9b:	e8 10 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aba0:	e8 c1 9a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011aba5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aba8:	74 17                	je     f011abc1 <test_kmalloc_bestfit1+0x4df>
f011abaa:	83 ec 04             	sub    $0x4,%esp
f011abad:	68 08 92 13 f0       	push   $0xf0139208
f011abb2:	68 b9 01 00 00       	push   $0x1b9
f011abb7:	68 ee 91 13 f0       	push   $0xf01391ee
f011abbc:	e8 ef 55 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011abc1:	e8 fa 1d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011abc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abc9:	29 c2                	sub    %eax,%edx
f011abcb:	89 d0                	mov    %edx,%eax
f011abcd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011abd2:	74 17                	je     f011abeb <test_kmalloc_bestfit1+0x509>
f011abd4:	83 ec 04             	sub    $0x4,%esp
f011abd7:	68 38 96 13 f0       	push   $0xf0139638
f011abdc:	68 ba 01 00 00       	push   $0x1ba
f011abe1:	68 ee 91 13 f0       	push   $0xf01391ee
f011abe6:	e8 c5 55 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011abeb:	e8 d0 1d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011abf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abf3:	e8 6e 9a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011abf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011abfb:	83 ec 0c             	sub    $0xc,%esp
f011abfe:	68 00 fc 0f 00       	push   $0xffc00
f011ac03:	e8 39 d3 fe ff       	call   f0107f41 <kmalloc>
f011ac08:	83 c4 10             	add    $0x10,%esp
f011ac0b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ac11:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac17:	89 c1                	mov    %eax,%ecx
f011ac19:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac20:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ac25:	0f b6 d0             	movzbl %al,%edx
f011ac28:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac2b:	01 d0                	add    %edx,%eax
f011ac2d:	48                   	dec    %eax
f011ac2e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ac31:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac34:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac39:	f7 75 9c             	divl   -0x64(%ebp)
f011ac3c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac3f:	29 d0                	sub    %edx,%eax
f011ac41:	89 c3                	mov    %eax,%ebx
f011ac43:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac4a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ac4f:	0f b6 c0             	movzbl %al,%eax
f011ac52:	c1 e0 04             	shl    $0x4,%eax
f011ac55:	89 c2                	mov    %eax,%edx
f011ac57:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ac5a:	01 d0                	add    %edx,%eax
f011ac5c:	48                   	dec    %eax
f011ac5d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ac60:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac63:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac68:	f7 75 94             	divl   -0x6c(%ebp)
f011ac6b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac6e:	29 d0                	sub    %edx,%eax
f011ac70:	01 d8                	add    %ebx,%eax
f011ac72:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ac77:	39 c1                	cmp    %eax,%ecx
f011ac79:	74 17                	je     f011ac92 <test_kmalloc_bestfit1+0x5b0>
f011ac7b:	83 ec 04             	sub    $0x4,%esp
f011ac7e:	68 08 96 13 f0       	push   $0xf0139608
f011ac83:	68 c0 01 00 00       	push   $0x1c0
f011ac88:	68 ee 91 13 f0       	push   $0xf01391ee
f011ac8d:	e8 1e 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac92:	e8 cf 99 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ac97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac9a:	74 17                	je     f011acb3 <test_kmalloc_bestfit1+0x5d1>
f011ac9c:	83 ec 04             	sub    $0x4,%esp
f011ac9f:	68 08 92 13 f0       	push   $0xf0139208
f011aca4:	68 c1 01 00 00       	push   $0x1c1
f011aca9:	68 ee 91 13 f0       	push   $0xf01391ee
f011acae:	e8 fd 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011acb3:	e8 08 1d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011acb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011acbb:	29 c2                	sub    %eax,%edx
f011acbd:	89 d0                	mov    %edx,%eax
f011acbf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011acc4:	74 17                	je     f011acdd <test_kmalloc_bestfit1+0x5fb>
f011acc6:	83 ec 04             	sub    $0x4,%esp
f011acc9:	68 38 96 13 f0       	push   $0xf0139638
f011acce:	68 c2 01 00 00       	push   $0x1c2
f011acd3:	68 ee 91 13 f0       	push   $0xf01391ee
f011acd8:	e8 d3 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acdd:	e8 de 1c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ace2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ace5:	e8 7c 99 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011acea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011aced:	83 ec 0c             	sub    $0xc,%esp
f011acf0:	68 00 fc 0f 00       	push   $0xffc00
f011acf5:	e8 47 d2 fe ff       	call   f0107f41 <kmalloc>
f011acfa:	83 c4 10             	add    $0x10,%esp
f011acfd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ad03:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ad09:	89 c1                	mov    %eax,%ecx
f011ad0b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ad12:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ad17:	0f b6 d0             	movzbl %al,%edx
f011ad1a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad1d:	01 d0                	add    %edx,%eax
f011ad1f:	48                   	dec    %eax
f011ad20:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ad23:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad26:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad2b:	f7 75 8c             	divl   -0x74(%ebp)
f011ad2e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad31:	29 d0                	sub    %edx,%eax
f011ad33:	89 c3                	mov    %eax,%ebx
f011ad35:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ad3c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ad41:	0f b6 c0             	movzbl %al,%eax
f011ad44:	c1 e0 04             	shl    $0x4,%eax
f011ad47:	89 c2                	mov    %eax,%edx
f011ad49:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad4c:	01 d0                	add    %edx,%eax
f011ad4e:	48                   	dec    %eax
f011ad4f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad52:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad55:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad5a:	f7 75 84             	divl   -0x7c(%ebp)
f011ad5d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad60:	29 d0                	sub    %edx,%eax
f011ad62:	01 d8                	add    %ebx,%eax
f011ad64:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011ad69:	39 c1                	cmp    %eax,%ecx
f011ad6b:	74 17                	je     f011ad84 <test_kmalloc_bestfit1+0x6a2>
f011ad6d:	83 ec 04             	sub    $0x4,%esp
f011ad70:	68 08 96 13 f0       	push   $0xf0139608
f011ad75:	68 c8 01 00 00       	push   $0x1c8
f011ad7a:	68 ee 91 13 f0       	push   $0xf01391ee
f011ad7f:	e8 2c 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad84:	e8 dd 98 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ad89:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad8c:	74 17                	je     f011ada5 <test_kmalloc_bestfit1+0x6c3>
f011ad8e:	83 ec 04             	sub    $0x4,%esp
f011ad91:	68 08 92 13 f0       	push   $0xf0139208
f011ad96:	68 c9 01 00 00       	push   $0x1c9
f011ad9b:	68 ee 91 13 f0       	push   $0xf01391ee
f011ada0:	e8 0b 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ada5:	e8 16 1c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011adaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adad:	29 c2                	sub    %eax,%edx
f011adaf:	89 d0                	mov    %edx,%eax
f011adb1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011adb6:	74 17                	je     f011adcf <test_kmalloc_bestfit1+0x6ed>
f011adb8:	83 ec 04             	sub    $0x4,%esp
f011adbb:	68 38 96 13 f0       	push   $0xf0139638
f011adc0:	68 ca 01 00 00       	push   $0x1ca
f011adc5:	68 ee 91 13 f0       	push   $0xf01391ee
f011adca:	e8 e1 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011adcf:	e8 ec 1b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011add4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011add7:	e8 8a 98 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011addc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011addf:	83 ec 0c             	sub    $0xc,%esp
f011ade2:	68 00 fc 0f 00       	push   $0xffc00
f011ade7:	e8 55 d1 fe ff       	call   f0107f41 <kmalloc>
f011adec:	83 c4 10             	add    $0x10,%esp
f011adef:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011adf5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011adfb:	89 c1                	mov    %eax,%ecx
f011adfd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ae04:	10 00 00 
f011ae07:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ae0c:	0f b6 d0             	movzbl %al,%edx
f011ae0f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ae15:	01 d0                	add    %edx,%eax
f011ae17:	48                   	dec    %eax
f011ae18:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ae1e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae24:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae29:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ae2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae35:	29 d0                	sub    %edx,%eax
f011ae37:	89 c3                	mov    %eax,%ebx
f011ae39:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae40:	10 00 00 
f011ae43:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ae48:	0f b6 c0             	movzbl %al,%eax
f011ae4b:	c1 e0 04             	shl    $0x4,%eax
f011ae4e:	89 c2                	mov    %eax,%edx
f011ae50:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae56:	01 d0                	add    %edx,%eax
f011ae58:	48                   	dec    %eax
f011ae59:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae5f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae65:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae6a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ae70:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae76:	29 d0                	sub    %edx,%eax
f011ae78:	01 d8                	add    %ebx,%eax
f011ae7a:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ae7f:	39 c1                	cmp    %eax,%ecx
f011ae81:	74 17                	je     f011ae9a <test_kmalloc_bestfit1+0x7b8>
f011ae83:	83 ec 04             	sub    $0x4,%esp
f011ae86:	68 08 96 13 f0       	push   $0xf0139608
f011ae8b:	68 d0 01 00 00       	push   $0x1d0
f011ae90:	68 ee 91 13 f0       	push   $0xf01391ee
f011ae95:	e8 16 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae9a:	e8 c7 97 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ae9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aea2:	74 17                	je     f011aebb <test_kmalloc_bestfit1+0x7d9>
f011aea4:	83 ec 04             	sub    $0x4,%esp
f011aea7:	68 08 92 13 f0       	push   $0xf0139208
f011aeac:	68 d1 01 00 00       	push   $0x1d1
f011aeb1:	68 ee 91 13 f0       	push   $0xf01391ee
f011aeb6:	e8 f5 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aebb:	e8 00 1b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011aec0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aec3:	29 c2                	sub    %eax,%edx
f011aec5:	89 d0                	mov    %edx,%eax
f011aec7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aecc:	74 17                	je     f011aee5 <test_kmalloc_bestfit1+0x803>
f011aece:	83 ec 04             	sub    $0x4,%esp
f011aed1:	68 38 96 13 f0       	push   $0xf0139638
f011aed6:	68 d2 01 00 00       	push   $0x1d2
f011aedb:	68 ee 91 13 f0       	push   $0xf01391ee
f011aee0:	e8 cb 52 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aee5:	e8 d6 1a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011aeea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aeed:	e8 74 97 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011aef2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011aef5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aefb:	83 ec 0c             	sub    $0xc,%esp
f011aefe:	50                   	push   %eax
f011aeff:	e8 57 d0 fe ff       	call   f0107f5b <kfree>
f011af04:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af07:	e8 5a 97 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011af0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af0f:	74 17                	je     f011af28 <test_kmalloc_bestfit1+0x846>
f011af11:	83 ec 04             	sub    $0x4,%esp
f011af14:	68 08 92 13 f0       	push   $0xf0139208
f011af19:	68 db 01 00 00       	push   $0x1db
f011af1e:	68 ee 91 13 f0       	push   $0xf01391ee
f011af23:	e8 88 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011af28:	e8 93 1a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011af2d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af30:	3d 00 03 00 00       	cmp    $0x300,%eax
f011af35:	74 17                	je     f011af4e <test_kmalloc_bestfit1+0x86c>
f011af37:	83 ec 04             	sub    $0x4,%esp
f011af3a:	68 4b 96 13 f0       	push   $0xf013964b
f011af3f:	68 dc 01 00 00       	push   $0x1dc
f011af44:	68 ee 91 13 f0       	push   $0xf01391ee
f011af49:	e8 62 52 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af4e:	e8 6d 1a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011af53:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af56:	e8 0b 97 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011af5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011af5e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011af64:	83 ec 0c             	sub    $0xc,%esp
f011af67:	50                   	push   %eax
f011af68:	e8 ee cf fe ff       	call   f0107f5b <kfree>
f011af6d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af70:	e8 f1 96 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011af75:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af78:	74 17                	je     f011af91 <test_kmalloc_bestfit1+0x8af>
f011af7a:	83 ec 04             	sub    $0x4,%esp
f011af7d:	68 08 92 13 f0       	push   $0xf0139208
f011af82:	68 e2 01 00 00       	push   $0x1e2
f011af87:	68 ee 91 13 f0       	push   $0xf01391ee
f011af8c:	e8 1f 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011af91:	e8 2a 1a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011af96:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af99:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af9e:	74 17                	je     f011afb7 <test_kmalloc_bestfit1+0x8d5>
f011afa0:	83 ec 04             	sub    $0x4,%esp
f011afa3:	68 4b 96 13 f0       	push   $0xf013964b
f011afa8:	68 e3 01 00 00       	push   $0x1e3
f011afad:	68 ee 91 13 f0       	push   $0xf01391ee
f011afb2:	e8 f9 51 fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011afb7:	e8 04 1a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011afbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afbf:	e8 a2 96 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011afc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011afc7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011afcd:	83 ec 0c             	sub    $0xc,%esp
f011afd0:	50                   	push   %eax
f011afd1:	e8 85 cf fe ff       	call   f0107f5b <kfree>
f011afd6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011afd9:	e8 88 96 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011afde:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afe1:	74 17                	je     f011affa <test_kmalloc_bestfit1+0x918>
f011afe3:	83 ec 04             	sub    $0x4,%esp
f011afe6:	68 08 92 13 f0       	push   $0xf0139208
f011afeb:	68 e9 01 00 00       	push   $0x1e9
f011aff0:	68 ee 91 13 f0       	push   $0xf01391ee
f011aff5:	e8 b6 51 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011affa:	e8 c1 19 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011afff:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b002:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b007:	74 17                	je     f011b020 <test_kmalloc_bestfit1+0x93e>
f011b009:	83 ec 04             	sub    $0x4,%esp
f011b00c:	68 4b 96 13 f0       	push   $0xf013964b
f011b011:	68 ea 01 00 00       	push   $0x1ea
f011b016:	68 ee 91 13 f0       	push   $0xf01391ee
f011b01b:	e8 90 51 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b020:	e8 9b 19 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b025:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b028:	e8 39 96 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b02d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b030:	83 ec 0c             	sub    $0xc,%esp
f011b033:	68 00 00 08 00       	push   $0x80000
f011b038:	e8 04 cf fe ff       	call   f0107f41 <kmalloc>
f011b03d:	83 c4 10             	add    $0x10,%esp
f011b040:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b046:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b04c:	89 c1                	mov    %eax,%ecx
f011b04e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b055:	10 00 00 
f011b058:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b05d:	0f b6 d0             	movzbl %al,%edx
f011b060:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b066:	01 d0                	add    %edx,%eax
f011b068:	48                   	dec    %eax
f011b069:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b06f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b075:	ba 00 00 00 00       	mov    $0x0,%edx
f011b07a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b080:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b086:	29 d0                	sub    %edx,%eax
f011b088:	89 c3                	mov    %eax,%ebx
f011b08a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b091:	10 00 00 
f011b094:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b099:	0f b6 c0             	movzbl %al,%eax
f011b09c:	c1 e0 04             	shl    $0x4,%eax
f011b09f:	89 c2                	mov    %eax,%edx
f011b0a1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b0a7:	01 d0                	add    %edx,%eax
f011b0a9:	48                   	dec    %eax
f011b0aa:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b0b0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b0b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0bb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b0c1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b0c7:	29 d0                	sub    %edx,%eax
f011b0c9:	01 d8                	add    %ebx,%eax
f011b0cb:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b0d0:	39 c1                	cmp    %eax,%ecx
f011b0d2:	74 17                	je     f011b0eb <test_kmalloc_bestfit1+0xa09>
f011b0d4:	83 ec 04             	sub    $0x4,%esp
f011b0d7:	68 08 96 13 f0       	push   $0xf0139608
f011b0dc:	68 f3 01 00 00       	push   $0x1f3
f011b0e1:	68 ee 91 13 f0       	push   $0xf01391ee
f011b0e6:	e8 c5 50 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0eb:	e8 76 95 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b0f0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0f3:	74 17                	je     f011b10c <test_kmalloc_bestfit1+0xa2a>
f011b0f5:	83 ec 04             	sub    $0x4,%esp
f011b0f8:	68 08 92 13 f0       	push   $0xf0139208
f011b0fd:	68 f4 01 00 00       	push   $0x1f4
f011b102:	68 ee 91 13 f0       	push   $0xf01391ee
f011b107:	e8 a4 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b10c:	e8 af 18 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b111:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b114:	29 c2                	sub    %eax,%edx
f011b116:	89 d0                	mov    %edx,%eax
f011b118:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b11d:	74 17                	je     f011b136 <test_kmalloc_bestfit1+0xa54>
f011b11f:	83 ec 04             	sub    $0x4,%esp
f011b122:	68 38 96 13 f0       	push   $0xf0139638
f011b127:	68 f5 01 00 00       	push   $0x1f5
f011b12c:	68 ee 91 13 f0       	push   $0xf01391ee
f011b131:	e8 7a 50 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b136:	e8 85 18 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b13b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b13e:	e8 23 95 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b143:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b146:	83 ec 0c             	sub    $0xc,%esp
f011b149:	68 00 fc 0f 00       	push   $0xffc00
f011b14e:	e8 ee cd fe ff       	call   f0107f41 <kmalloc>
f011b153:	83 c4 10             	add    $0x10,%esp
f011b156:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b15c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b162:	89 c1                	mov    %eax,%ecx
f011b164:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b16b:	10 00 00 
f011b16e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b173:	0f b6 d0             	movzbl %al,%edx
f011b176:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b17c:	01 d0                	add    %edx,%eax
f011b17e:	48                   	dec    %eax
f011b17f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b185:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b18b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b190:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b196:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b19c:	29 d0                	sub    %edx,%eax
f011b19e:	89 c3                	mov    %eax,%ebx
f011b1a0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b1a7:	10 00 00 
f011b1aa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b1af:	0f b6 c0             	movzbl %al,%eax
f011b1b2:	c1 e0 04             	shl    $0x4,%eax
f011b1b5:	89 c2                	mov    %eax,%edx
f011b1b7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b1bd:	01 d0                	add    %edx,%eax
f011b1bf:	48                   	dec    %eax
f011b1c0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b1c6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b1cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1d1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b1d7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b1dd:	29 d0                	sub    %edx,%eax
f011b1df:	01 d8                	add    %ebx,%eax
f011b1e1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b1e6:	39 c1                	cmp    %eax,%ecx
f011b1e8:	74 17                	je     f011b201 <test_kmalloc_bestfit1+0xb1f>
f011b1ea:	83 ec 04             	sub    $0x4,%esp
f011b1ed:	68 08 96 13 f0       	push   $0xf0139608
f011b1f2:	68 fb 01 00 00       	push   $0x1fb
f011b1f7:	68 ee 91 13 f0       	push   $0xf01391ee
f011b1fc:	e8 af 4f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b201:	e8 60 94 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b206:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b209:	74 17                	je     f011b222 <test_kmalloc_bestfit1+0xb40>
f011b20b:	83 ec 04             	sub    $0x4,%esp
f011b20e:	68 08 92 13 f0       	push   $0xf0139208
f011b213:	68 fc 01 00 00       	push   $0x1fc
f011b218:	68 ee 91 13 f0       	push   $0xf01391ee
f011b21d:	e8 8e 4f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b222:	e8 99 17 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b227:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b22a:	29 c2                	sub    %eax,%edx
f011b22c:	89 d0                	mov    %edx,%eax
f011b22e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b233:	74 17                	je     f011b24c <test_kmalloc_bestfit1+0xb6a>
f011b235:	83 ec 04             	sub    $0x4,%esp
f011b238:	68 38 96 13 f0       	push   $0xf0139638
f011b23d:	68 fd 01 00 00       	push   $0x1fd
f011b242:	68 ee 91 13 f0       	push   $0xf01391ee
f011b247:	e8 64 4f fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b24c:	e8 6f 17 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b251:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b254:	e8 0d 94 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b259:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b25c:	83 ec 0c             	sub    $0xc,%esp
f011b25f:	68 00 fc 03 00       	push   $0x3fc00
f011b264:	e8 d8 cc fe ff       	call   f0107f41 <kmalloc>
f011b269:	83 c4 10             	add    $0x10,%esp
f011b26c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b272:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b278:	89 c1                	mov    %eax,%ecx
f011b27a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b281:	10 00 00 
f011b284:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b289:	0f b6 d0             	movzbl %al,%edx
f011b28c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b292:	01 d0                	add    %edx,%eax
f011b294:	48                   	dec    %eax
f011b295:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b29b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2a6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b2ac:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2b2:	29 d0                	sub    %edx,%eax
f011b2b4:	89 c3                	mov    %eax,%ebx
f011b2b6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b2bd:	10 00 00 
f011b2c0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b2c5:	0f b6 c0             	movzbl %al,%eax
f011b2c8:	c1 e0 04             	shl    $0x4,%eax
f011b2cb:	89 c2                	mov    %eax,%edx
f011b2cd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b2d3:	01 d0                	add    %edx,%eax
f011b2d5:	48                   	dec    %eax
f011b2d6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b2dc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b2e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2e7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b2ed:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b2f3:	29 d0                	sub    %edx,%eax
f011b2f5:	01 d8                	add    %ebx,%eax
f011b2f7:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b2fc:	39 c1                	cmp    %eax,%ecx
f011b2fe:	74 17                	je     f011b317 <test_kmalloc_bestfit1+0xc35>
f011b300:	83 ec 04             	sub    $0x4,%esp
f011b303:	68 08 96 13 f0       	push   $0xf0139608
f011b308:	68 03 02 00 00       	push   $0x203
f011b30d:	68 ee 91 13 f0       	push   $0xf01391ee
f011b312:	e8 99 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b317:	e8 4a 93 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b31c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b31f:	74 17                	je     f011b338 <test_kmalloc_bestfit1+0xc56>
f011b321:	83 ec 04             	sub    $0x4,%esp
f011b324:	68 08 92 13 f0       	push   $0xf0139208
f011b329:	68 04 02 00 00       	push   $0x204
f011b32e:	68 ee 91 13 f0       	push   $0xf01391ee
f011b333:	e8 78 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b338:	e8 83 16 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b33d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b340:	29 c2                	sub    %eax,%edx
f011b342:	89 d0                	mov    %edx,%eax
f011b344:	83 f8 40             	cmp    $0x40,%eax
f011b347:	74 17                	je     f011b360 <test_kmalloc_bestfit1+0xc7e>
f011b349:	83 ec 04             	sub    $0x4,%esp
f011b34c:	68 38 96 13 f0       	push   $0xf0139638
f011b351:	68 05 02 00 00       	push   $0x205
f011b356:	68 ee 91 13 f0       	push   $0xf01391ee
f011b35b:	e8 50 4e fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b360:	e8 5b 16 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b365:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b368:	e8 f9 92 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b36d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b370:	83 ec 0c             	sub    $0xc,%esp
f011b373:	68 00 fc 3f 00       	push   $0x3ffc00
f011b378:	e8 c4 cb fe ff       	call   f0107f41 <kmalloc>
f011b37d:	83 c4 10             	add    $0x10,%esp
f011b380:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b386:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b38c:	89 c1                	mov    %eax,%ecx
f011b38e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b395:	10 00 00 
f011b398:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b39d:	0f b6 d0             	movzbl %al,%edx
f011b3a0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b3a6:	01 d0                	add    %edx,%eax
f011b3a8:	48                   	dec    %eax
f011b3a9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b3af:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b3b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3ba:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b3c0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b3c6:	29 d0                	sub    %edx,%eax
f011b3c8:	89 c3                	mov    %eax,%ebx
f011b3ca:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b3d1:	10 00 00 
f011b3d4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b3d9:	0f b6 c0             	movzbl %al,%eax
f011b3dc:	c1 e0 04             	shl    $0x4,%eax
f011b3df:	89 c2                	mov    %eax,%edx
f011b3e1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b3e7:	01 d0                	add    %edx,%eax
f011b3e9:	48                   	dec    %eax
f011b3ea:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b3f0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b3f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3fb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b401:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b407:	29 d0                	sub    %edx,%eax
f011b409:	01 d8                	add    %ebx,%eax
f011b40b:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b410:	39 c1                	cmp    %eax,%ecx
f011b412:	74 17                	je     f011b42b <test_kmalloc_bestfit1+0xd49>
f011b414:	83 ec 04             	sub    $0x4,%esp
f011b417:	68 08 96 13 f0       	push   $0xf0139608
f011b41c:	68 0b 02 00 00       	push   $0x20b
f011b421:	68 ee 91 13 f0       	push   $0xf01391ee
f011b426:	e8 85 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b42b:	e8 36 92 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b430:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b433:	74 17                	je     f011b44c <test_kmalloc_bestfit1+0xd6a>
f011b435:	83 ec 04             	sub    $0x4,%esp
f011b438:	68 08 92 13 f0       	push   $0xf0139208
f011b43d:	68 0c 02 00 00       	push   $0x20c
f011b442:	68 ee 91 13 f0       	push   $0xf01391ee
f011b447:	e8 64 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b44c:	e8 6f 15 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b451:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b454:	29 c2                	sub    %eax,%edx
f011b456:	89 d0                	mov    %edx,%eax
f011b458:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b45d:	74 17                	je     f011b476 <test_kmalloc_bestfit1+0xd94>
f011b45f:	83 ec 04             	sub    $0x4,%esp
f011b462:	68 38 96 13 f0       	push   $0xf0139638
f011b467:	68 0d 02 00 00       	push   $0x20d
f011b46c:	68 ee 91 13 f0       	push   $0xf01391ee
f011b471:	e8 3a 4d fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b476:	e8 45 15 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b47b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b47e:	e8 e3 91 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b483:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b486:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b48c:	83 ec 0c             	sub    $0xc,%esp
f011b48f:	50                   	push   %eax
f011b490:	e8 c6 ca fe ff       	call   f0107f5b <kfree>
f011b495:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b498:	e8 c9 91 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b49d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4a0:	74 17                	je     f011b4b9 <test_kmalloc_bestfit1+0xdd7>
f011b4a2:	83 ec 04             	sub    $0x4,%esp
f011b4a5:	68 08 92 13 f0       	push   $0xf0139208
f011b4aa:	68 16 02 00 00       	push   $0x216
f011b4af:	68 ee 91 13 f0       	push   $0xf01391ee
f011b4b4:	e8 f7 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b4b9:	e8 02 15 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b4be:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b4c1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b4c6:	74 17                	je     f011b4df <test_kmalloc_bestfit1+0xdfd>
f011b4c8:	83 ec 04             	sub    $0x4,%esp
f011b4cb:	68 4b 96 13 f0       	push   $0xf013964b
f011b4d0:	68 17 02 00 00       	push   $0x217
f011b4d5:	68 ee 91 13 f0       	push   $0xf01391ee
f011b4da:	e8 d1 4c fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b4df:	e8 dc 14 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b4e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4e7:	e8 7a 91 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b4ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b4ef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b4f5:	83 ec 0c             	sub    $0xc,%esp
f011b4f8:	50                   	push   %eax
f011b4f9:	e8 5d ca fe ff       	call   f0107f5b <kfree>
f011b4fe:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b501:	e8 60 91 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b506:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b509:	74 17                	je     f011b522 <test_kmalloc_bestfit1+0xe40>
f011b50b:	83 ec 04             	sub    $0x4,%esp
f011b50e:	68 08 92 13 f0       	push   $0xf0139208
f011b513:	68 1d 02 00 00       	push   $0x21d
f011b518:	68 ee 91 13 f0       	push   $0xf01391ee
f011b51d:	e8 8e 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b522:	e8 99 14 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b527:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b52a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b52f:	74 17                	je     f011b548 <test_kmalloc_bestfit1+0xe66>
f011b531:	83 ec 04             	sub    $0x4,%esp
f011b534:	68 4b 96 13 f0       	push   $0xf013964b
f011b539:	68 1e 02 00 00       	push   $0x21e
f011b53e:	68 ee 91 13 f0       	push   $0xf01391ee
f011b543:	e8 68 4c fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b548:	e8 73 14 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b54d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b550:	e8 11 91 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b555:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b558:	83 ec 0c             	sub    $0xc,%esp
f011b55b:	68 00 fc 1f 00       	push   $0x1ffc00
f011b560:	e8 dc c9 fe ff       	call   f0107f41 <kmalloc>
f011b565:	83 c4 10             	add    $0x10,%esp
f011b568:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b56e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b574:	89 c1                	mov    %eax,%ecx
f011b576:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b57d:	10 00 00 
f011b580:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b585:	0f b6 d0             	movzbl %al,%edx
f011b588:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b58e:	01 d0                	add    %edx,%eax
f011b590:	48                   	dec    %eax
f011b591:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b597:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b59d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5a2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b5a8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b5ae:	29 d0                	sub    %edx,%eax
f011b5b0:	89 c3                	mov    %eax,%ebx
f011b5b2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b5b9:	10 00 00 
f011b5bc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b5c1:	0f b6 c0             	movzbl %al,%eax
f011b5c4:	c1 e0 04             	shl    $0x4,%eax
f011b5c7:	89 c2                	mov    %eax,%edx
f011b5c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b5cf:	01 d0                	add    %edx,%eax
f011b5d1:	48                   	dec    %eax
f011b5d2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b5d8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b5de:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5e3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b5e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b5ef:	29 d0                	sub    %edx,%eax
f011b5f1:	01 d8                	add    %ebx,%eax
f011b5f3:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b5f8:	39 c1                	cmp    %eax,%ecx
f011b5fa:	74 17                	je     f011b613 <test_kmalloc_bestfit1+0xf31>
f011b5fc:	83 ec 04             	sub    $0x4,%esp
f011b5ff:	68 08 96 13 f0       	push   $0xf0139608
f011b604:	68 27 02 00 00       	push   $0x227
f011b609:	68 ee 91 13 f0       	push   $0xf01391ee
f011b60e:	e8 9d 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b613:	e8 4e 90 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b618:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b61b:	74 17                	je     f011b634 <test_kmalloc_bestfit1+0xf52>
f011b61d:	83 ec 04             	sub    $0x4,%esp
f011b620:	68 08 92 13 f0       	push   $0xf0139208
f011b625:	68 28 02 00 00       	push   $0x228
f011b62a:	68 ee 91 13 f0       	push   $0xf01391ee
f011b62f:	e8 7c 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b634:	e8 87 13 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b639:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b63c:	29 c2                	sub    %eax,%edx
f011b63e:	89 d0                	mov    %edx,%eax
f011b640:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b645:	74 17                	je     f011b65e <test_kmalloc_bestfit1+0xf7c>
f011b647:	83 ec 04             	sub    $0x4,%esp
f011b64a:	68 38 96 13 f0       	push   $0xf0139638
f011b64f:	68 29 02 00 00       	push   $0x229
f011b654:	68 ee 91 13 f0       	push   $0xf01391ee
f011b659:	e8 52 4b fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b65e:	83 ec 0c             	sub    $0xc,%esp
f011b661:	68 58 96 13 f0       	push   $0xf0139658
f011b666:	e8 c6 57 fe ff       	call   f0100e31 <cprintf>
f011b66b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b66e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b673:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b676:	5b                   	pop    %ebx
f011b677:	5f                   	pop    %edi
f011b678:	5d                   	pop    %ebp
f011b679:	c3                   	ret    

f011b67a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b67a:	55                   	push   %ebp
f011b67b:	89 e5                	mov    %esp,%ebp
f011b67d:	57                   	push   %edi
f011b67e:	53                   	push   %ebx
f011b67f:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b685:	83 ec 0c             	sub    $0xc,%esp
f011b688:	68 30 91 13 f0       	push   $0xf0139130
f011b68d:	e8 9f 57 fe ff       	call   f0100e31 <cprintf>
f011b692:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b695:	83 ec 0c             	sub    $0xc,%esp
f011b698:	68 60 91 13 f0       	push   $0xf0139160
f011b69d:	e8 8f 57 fe ff       	call   f0100e31 <cprintf>
f011b6a2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b6a5:	83 ec 0c             	sub    $0xc,%esp
f011b6a8:	68 30 91 13 f0       	push   $0xf0139130
f011b6ad:	e8 7f 57 fe ff       	call   f0100e31 <cprintf>
f011b6b2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b6b5:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b6bb:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b6c0:	b8 00 00 00 00       	mov    $0x0,%eax
f011b6c5:	89 d7                	mov    %edx,%edi
f011b6c7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b6c9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b6d0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b6d5:	0f b6 d0             	movzbl %al,%edx
f011b6d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b6db:	01 d0                	add    %edx,%eax
f011b6dd:	48                   	dec    %eax
f011b6de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b6e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6e9:	f7 75 f4             	divl   -0xc(%ebp)
f011b6ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6ef:	29 d0                	sub    %edx,%eax
f011b6f1:	89 c1                	mov    %eax,%ecx
f011b6f3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b6fa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b6ff:	0f b6 c0             	movzbl %al,%eax
f011b702:	c1 e0 04             	shl    $0x4,%eax
f011b705:	89 c2                	mov    %eax,%edx
f011b707:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b70a:	01 d0                	add    %edx,%eax
f011b70c:	48                   	dec    %eax
f011b70d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b710:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b713:	ba 00 00 00 00       	mov    $0x0,%edx
f011b718:	f7 75 ec             	divl   -0x14(%ebp)
f011b71b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b71e:	29 d0                	sub    %edx,%eax
f011b720:	01 c8                	add    %ecx,%eax
f011b722:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b727:	29 c2                	sub    %eax,%edx
f011b729:	89 d0                	mov    %edx,%eax
f011b72b:	83 ec 0c             	sub    $0xc,%esp
f011b72e:	50                   	push   %eax
f011b72f:	e8 0d c8 fe ff       	call   f0107f41 <kmalloc>
f011b734:	83 c4 10             	add    $0x10,%esp
f011b737:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b73d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b743:	85 c0                	test   %eax,%eax
f011b745:	74 17                	je     f011b75e <test_kmalloc_bestfit2+0xe4>
f011b747:	83 ec 04             	sub    $0x4,%esp
f011b74a:	68 a0 96 13 f0       	push   $0xf01396a0
f011b74f:	68 3f 02 00 00       	push   $0x23f
f011b754:	68 ee 91 13 f0       	push   $0xf01391ee
f011b759:	e8 52 4a fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b75e:	e8 5d 12 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b763:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b766:	e8 fb 8e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b76b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b76e:	83 ec 0c             	sub    $0xc,%esp
f011b771:	68 00 fc 1f 00       	push   $0x1ffc00
f011b776:	e8 c6 c7 fe ff       	call   f0107f41 <kmalloc>
f011b77b:	83 c4 10             	add    $0x10,%esp
f011b77e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b784:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b78a:	89 c1                	mov    %eax,%ecx
f011b78c:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b793:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b798:	0f b6 d0             	movzbl %al,%edx
f011b79b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b79e:	01 d0                	add    %edx,%eax
f011b7a0:	48                   	dec    %eax
f011b7a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b7a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b7a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7ac:	f7 75 dc             	divl   -0x24(%ebp)
f011b7af:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b7b2:	29 d0                	sub    %edx,%eax
f011b7b4:	89 c3                	mov    %eax,%ebx
f011b7b6:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b7bd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b7c2:	0f b6 c0             	movzbl %al,%eax
f011b7c5:	c1 e0 04             	shl    $0x4,%eax
f011b7c8:	89 c2                	mov    %eax,%edx
f011b7ca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b7cd:	01 d0                	add    %edx,%eax
f011b7cf:	48                   	dec    %eax
f011b7d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b7d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7db:	f7 75 d4             	divl   -0x2c(%ebp)
f011b7de:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7e1:	29 d0                	sub    %edx,%eax
f011b7e3:	01 d8                	add    %ebx,%eax
f011b7e5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b7ea:	39 c1                	cmp    %eax,%ecx
f011b7ec:	74 17                	je     f011b805 <test_kmalloc_bestfit2+0x18b>
f011b7ee:	83 ec 04             	sub    $0x4,%esp
f011b7f1:	68 08 96 13 f0       	push   $0xf0139608
f011b7f6:	68 49 02 00 00       	push   $0x249
f011b7fb:	68 ee 91 13 f0       	push   $0xf01391ee
f011b800:	e8 ab 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b805:	e8 5c 8e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b80a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b80d:	74 17                	je     f011b826 <test_kmalloc_bestfit2+0x1ac>
f011b80f:	83 ec 04             	sub    $0x4,%esp
f011b812:	68 08 92 13 f0       	push   $0xf0139208
f011b817:	68 4a 02 00 00       	push   $0x24a
f011b81c:	68 ee 91 13 f0       	push   $0xf01391ee
f011b821:	e8 8a 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b826:	e8 95 11 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b82b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b82e:	29 c2                	sub    %eax,%edx
f011b830:	89 d0                	mov    %edx,%eax
f011b832:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b837:	74 17                	je     f011b850 <test_kmalloc_bestfit2+0x1d6>
f011b839:	83 ec 04             	sub    $0x4,%esp
f011b83c:	68 38 96 13 f0       	push   $0xf0139638
f011b841:	68 4b 02 00 00       	push   $0x24b
f011b846:	68 ee 91 13 f0       	push   $0xf01391ee
f011b84b:	e8 60 49 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b850:	e8 6b 11 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b855:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b858:	e8 09 8e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b85d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b860:	83 ec 0c             	sub    $0xc,%esp
f011b863:	68 00 fc 1f 00       	push   $0x1ffc00
f011b868:	e8 d4 c6 fe ff       	call   f0107f41 <kmalloc>
f011b86d:	83 c4 10             	add    $0x10,%esp
f011b870:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b876:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b87c:	89 c1                	mov    %eax,%ecx
f011b87e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b885:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b88a:	0f b6 d0             	movzbl %al,%edx
f011b88d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b890:	01 d0                	add    %edx,%eax
f011b892:	48                   	dec    %eax
f011b893:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b896:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b899:	ba 00 00 00 00       	mov    $0x0,%edx
f011b89e:	f7 75 cc             	divl   -0x34(%ebp)
f011b8a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8a4:	29 d0                	sub    %edx,%eax
f011b8a6:	89 c3                	mov    %eax,%ebx
f011b8a8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b8af:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b8b4:	0f b6 c0             	movzbl %al,%eax
f011b8b7:	c1 e0 04             	shl    $0x4,%eax
f011b8ba:	89 c2                	mov    %eax,%edx
f011b8bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b8bf:	01 d0                	add    %edx,%eax
f011b8c1:	48                   	dec    %eax
f011b8c2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b8c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8cd:	f7 75 c4             	divl   -0x3c(%ebp)
f011b8d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8d3:	29 d0                	sub    %edx,%eax
f011b8d5:	01 d8                	add    %ebx,%eax
f011b8d7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b8dc:	39 c1                	cmp    %eax,%ecx
f011b8de:	74 17                	je     f011b8f7 <test_kmalloc_bestfit2+0x27d>
f011b8e0:	83 ec 04             	sub    $0x4,%esp
f011b8e3:	68 08 96 13 f0       	push   $0xf0139608
f011b8e8:	68 51 02 00 00       	push   $0x251
f011b8ed:	68 ee 91 13 f0       	push   $0xf01391ee
f011b8f2:	e8 b9 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8f7:	e8 6a 8d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b8fc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b8ff:	74 17                	je     f011b918 <test_kmalloc_bestfit2+0x29e>
f011b901:	83 ec 04             	sub    $0x4,%esp
f011b904:	68 08 92 13 f0       	push   $0xf0139208
f011b909:	68 52 02 00 00       	push   $0x252
f011b90e:	68 ee 91 13 f0       	push   $0xf01391ee
f011b913:	e8 98 48 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b918:	e8 a3 10 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b91d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b920:	29 c2                	sub    %eax,%edx
f011b922:	89 d0                	mov    %edx,%eax
f011b924:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b929:	74 17                	je     f011b942 <test_kmalloc_bestfit2+0x2c8>
f011b92b:	83 ec 04             	sub    $0x4,%esp
f011b92e:	68 38 96 13 f0       	push   $0xf0139638
f011b933:	68 53 02 00 00       	push   $0x253
f011b938:	68 ee 91 13 f0       	push   $0xf01391ee
f011b93d:	e8 6e 48 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b942:	e8 79 10 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011b947:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b94a:	e8 17 8d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b94f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b952:	83 ec 0c             	sub    $0xc,%esp
f011b955:	68 00 08 00 00       	push   $0x800
f011b95a:	e8 e2 c5 fe ff       	call   f0107f41 <kmalloc>
f011b95f:	83 c4 10             	add    $0x10,%esp
f011b962:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b968:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b96e:	89 c1                	mov    %eax,%ecx
f011b970:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b977:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b97c:	0f b6 d0             	movzbl %al,%edx
f011b97f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b982:	01 d0                	add    %edx,%eax
f011b984:	48                   	dec    %eax
f011b985:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b988:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b98b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b990:	f7 75 bc             	divl   -0x44(%ebp)
f011b993:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b996:	29 d0                	sub    %edx,%eax
f011b998:	89 c3                	mov    %eax,%ebx
f011b99a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b9a1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b9a6:	0f b6 c0             	movzbl %al,%eax
f011b9a9:	c1 e0 04             	shl    $0x4,%eax
f011b9ac:	89 c2                	mov    %eax,%edx
f011b9ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b9b1:	01 d0                	add    %edx,%eax
f011b9b3:	48                   	dec    %eax
f011b9b4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b9b7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b9ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9bf:	f7 75 b4             	divl   -0x4c(%ebp)
f011b9c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b9c5:	29 d0                	sub    %edx,%eax
f011b9c7:	01 d8                	add    %ebx,%eax
f011b9c9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b9ce:	39 c1                	cmp    %eax,%ecx
f011b9d0:	74 17                	je     f011b9e9 <test_kmalloc_bestfit2+0x36f>
f011b9d2:	83 ec 04             	sub    $0x4,%esp
f011b9d5:	68 08 96 13 f0       	push   $0xf0139608
f011b9da:	68 59 02 00 00       	push   $0x259
f011b9df:	68 ee 91 13 f0       	push   $0xf01391ee
f011b9e4:	e8 c7 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9e9:	e8 78 8c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011b9ee:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b9f1:	74 17                	je     f011ba0a <test_kmalloc_bestfit2+0x390>
f011b9f3:	83 ec 04             	sub    $0x4,%esp
f011b9f6:	68 08 92 13 f0       	push   $0xf0139208
f011b9fb:	68 5a 02 00 00       	push   $0x25a
f011ba00:	68 ee 91 13 f0       	push   $0xf01391ee
f011ba05:	e8 a6 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ba0a:	e8 b1 0f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ba0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ba12:	29 c2                	sub    %eax,%edx
f011ba14:	89 d0                	mov    %edx,%eax
f011ba16:	83 f8 01             	cmp    $0x1,%eax
f011ba19:	74 17                	je     f011ba32 <test_kmalloc_bestfit2+0x3b8>
f011ba1b:	83 ec 04             	sub    $0x4,%esp
f011ba1e:	68 38 96 13 f0       	push   $0xf0139638
f011ba23:	68 5b 02 00 00       	push   $0x25b
f011ba28:	68 ee 91 13 f0       	push   $0xf01391ee
f011ba2d:	e8 7e 47 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba32:	e8 89 0f ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ba37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba3a:	e8 27 8c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ba3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ba42:	83 ec 0c             	sub    $0xc,%esp
f011ba45:	68 00 08 00 00       	push   $0x800
f011ba4a:	e8 f2 c4 fe ff       	call   f0107f41 <kmalloc>
f011ba4f:	83 c4 10             	add    $0x10,%esp
f011ba52:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ba58:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ba5e:	89 c1                	mov    %eax,%ecx
f011ba60:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ba67:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ba6c:	0f b6 d0             	movzbl %al,%edx
f011ba6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ba72:	01 d0                	add    %edx,%eax
f011ba74:	48                   	dec    %eax
f011ba75:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ba78:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba80:	f7 75 ac             	divl   -0x54(%ebp)
f011ba83:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba86:	29 d0                	sub    %edx,%eax
f011ba88:	89 c3                	mov    %eax,%ebx
f011ba8a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ba91:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ba96:	0f b6 c0             	movzbl %al,%eax
f011ba99:	c1 e0 04             	shl    $0x4,%eax
f011ba9c:	89 c2                	mov    %eax,%edx
f011ba9e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011baa1:	01 d0                	add    %edx,%eax
f011baa3:	48                   	dec    %eax
f011baa4:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011baa7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011baaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011baaf:	f7 75 a4             	divl   -0x5c(%ebp)
f011bab2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bab5:	29 d0                	sub    %edx,%eax
f011bab7:	01 d8                	add    %ebx,%eax
f011bab9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011babe:	39 c1                	cmp    %eax,%ecx
f011bac0:	74 17                	je     f011bad9 <test_kmalloc_bestfit2+0x45f>
f011bac2:	83 ec 04             	sub    $0x4,%esp
f011bac5:	68 08 96 13 f0       	push   $0xf0139608
f011baca:	68 61 02 00 00       	push   $0x261
f011bacf:	68 ee 91 13 f0       	push   $0xf01391ee
f011bad4:	e8 d7 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bad9:	e8 88 8b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bade:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bae1:	74 17                	je     f011bafa <test_kmalloc_bestfit2+0x480>
f011bae3:	83 ec 04             	sub    $0x4,%esp
f011bae6:	68 08 92 13 f0       	push   $0xf0139208
f011baeb:	68 62 02 00 00       	push   $0x262
f011baf0:	68 ee 91 13 f0       	push   $0xf01391ee
f011baf5:	e8 b6 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bafa:	e8 c1 0e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011baff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bb02:	29 c2                	sub    %eax,%edx
f011bb04:	89 d0                	mov    %edx,%eax
f011bb06:	83 f8 01             	cmp    $0x1,%eax
f011bb09:	74 17                	je     f011bb22 <test_kmalloc_bestfit2+0x4a8>
f011bb0b:	83 ec 04             	sub    $0x4,%esp
f011bb0e:	68 38 96 13 f0       	push   $0xf0139638
f011bb13:	68 63 02 00 00       	push   $0x263
f011bb18:	68 ee 91 13 f0       	push   $0xf01391ee
f011bb1d:	e8 8e 46 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bb22:	e8 99 0e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bb27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb2a:	e8 37 8b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bb2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011bb32:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bb38:	83 ec 0c             	sub    $0xc,%esp
f011bb3b:	50                   	push   %eax
f011bb3c:	e8 1a c4 fe ff       	call   f0107f5b <kfree>
f011bb41:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb44:	e8 1d 8b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bb49:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb4c:	74 17                	je     f011bb65 <test_kmalloc_bestfit2+0x4eb>
f011bb4e:	83 ec 04             	sub    $0x4,%esp
f011bb51:	68 08 92 13 f0       	push   $0xf0139208
f011bb56:	68 69 02 00 00       	push   $0x269
f011bb5b:	68 ee 91 13 f0       	push   $0xf01391ee
f011bb60:	e8 4b 46 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bb65:	e8 56 0e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bb6a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bb6d:	83 f8 01             	cmp    $0x1,%eax
f011bb70:	74 17                	je     f011bb89 <test_kmalloc_bestfit2+0x50f>
f011bb72:	83 ec 04             	sub    $0x4,%esp
f011bb75:	68 38 96 13 f0       	push   $0xf0139638
f011bb7a:	68 6a 02 00 00       	push   $0x26a
f011bb7f:	68 ee 91 13 f0       	push   $0xf01391ee
f011bb84:	e8 27 46 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bb89:	e8 32 0e ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bb8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb91:	e8 d0 8a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bb96:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bb99:	83 ec 0c             	sub    $0xc,%esp
f011bb9c:	68 00 1c 00 00       	push   $0x1c00
f011bba1:	e8 9b c3 fe ff       	call   f0107f41 <kmalloc>
f011bba6:	83 c4 10             	add    $0x10,%esp
f011bba9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bbaf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bbb5:	89 c1                	mov    %eax,%ecx
f011bbb7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bbbe:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bbc3:	0f b6 d0             	movzbl %al,%edx
f011bbc6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bbc9:	01 d0                	add    %edx,%eax
f011bbcb:	48                   	dec    %eax
f011bbcc:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bbcf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bbd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbd7:	f7 75 9c             	divl   -0x64(%ebp)
f011bbda:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bbdd:	29 d0                	sub    %edx,%eax
f011bbdf:	89 c3                	mov    %eax,%ebx
f011bbe1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bbe8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bbed:	0f b6 c0             	movzbl %al,%eax
f011bbf0:	c1 e0 04             	shl    $0x4,%eax
f011bbf3:	89 c2                	mov    %eax,%edx
f011bbf5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bbf8:	01 d0                	add    %edx,%eax
f011bbfa:	48                   	dec    %eax
f011bbfb:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bbfe:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bc01:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc06:	f7 75 94             	divl   -0x6c(%ebp)
f011bc09:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bc0c:	29 d0                	sub    %edx,%eax
f011bc0e:	01 d8                	add    %ebx,%eax
f011bc10:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bc15:	39 c1                	cmp    %eax,%ecx
f011bc17:	74 17                	je     f011bc30 <test_kmalloc_bestfit2+0x5b6>
f011bc19:	83 ec 04             	sub    $0x4,%esp
f011bc1c:	68 08 96 13 f0       	push   $0xf0139608
f011bc21:	68 70 02 00 00       	push   $0x270
f011bc26:	68 ee 91 13 f0       	push   $0xf01391ee
f011bc2b:	e8 80 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc30:	e8 31 8a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bc35:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc38:	74 17                	je     f011bc51 <test_kmalloc_bestfit2+0x5d7>
f011bc3a:	83 ec 04             	sub    $0x4,%esp
f011bc3d:	68 08 92 13 f0       	push   $0xf0139208
f011bc42:	68 71 02 00 00       	push   $0x271
f011bc47:	68 ee 91 13 f0       	push   $0xf01391ee
f011bc4c:	e8 5f 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bc51:	e8 6a 0d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bc56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bc59:	29 c2                	sub    %eax,%edx
f011bc5b:	89 d0                	mov    %edx,%eax
f011bc5d:	83 f8 02             	cmp    $0x2,%eax
f011bc60:	74 17                	je     f011bc79 <test_kmalloc_bestfit2+0x5ff>
f011bc62:	83 ec 04             	sub    $0x4,%esp
f011bc65:	68 38 96 13 f0       	push   $0xf0139638
f011bc6a:	68 72 02 00 00       	push   $0x272
f011bc6f:	68 ee 91 13 f0       	push   $0xf01391ee
f011bc74:	e8 37 45 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc79:	e8 42 0d ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bc7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc81:	e8 e0 89 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bc86:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011bc89:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bc8f:	83 ec 0c             	sub    $0xc,%esp
f011bc92:	50                   	push   %eax
f011bc93:	e8 c3 c2 fe ff       	call   f0107f5b <kfree>
f011bc98:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc9b:	e8 c6 89 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bca0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bca3:	74 17                	je     f011bcbc <test_kmalloc_bestfit2+0x642>
f011bca5:	83 ec 04             	sub    $0x4,%esp
f011bca8:	68 08 92 13 f0       	push   $0xf0139208
f011bcad:	68 78 02 00 00       	push   $0x278
f011bcb2:	68 ee 91 13 f0       	push   $0xf01391ee
f011bcb7:	e8 f4 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bcbc:	e8 ff 0c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bcc1:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bcc4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bcc9:	74 17                	je     f011bce2 <test_kmalloc_bestfit2+0x668>
f011bccb:	83 ec 04             	sub    $0x4,%esp
f011bcce:	68 bc 94 13 f0       	push   $0xf01394bc
f011bcd3:	68 79 02 00 00       	push   $0x279
f011bcd8:	68 ee 91 13 f0       	push   $0xf01391ee
f011bcdd:	e8 ce 44 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bce2:	e8 d9 0c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bce7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcea:	e8 77 89 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bcef:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bcf2:	83 ec 0c             	sub    $0xc,%esp
f011bcf5:	68 00 fc 2f 00       	push   $0x2ffc00
f011bcfa:	e8 42 c2 fe ff       	call   f0107f41 <kmalloc>
f011bcff:	83 c4 10             	add    $0x10,%esp
f011bd02:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd08:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bd0e:	89 c1                	mov    %eax,%ecx
f011bd10:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bd17:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bd1c:	0f b6 d0             	movzbl %al,%edx
f011bd1f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bd22:	01 d0                	add    %edx,%eax
f011bd24:	48                   	dec    %eax
f011bd25:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bd28:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bd2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd30:	f7 75 8c             	divl   -0x74(%ebp)
f011bd33:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bd36:	29 d0                	sub    %edx,%eax
f011bd38:	89 c3                	mov    %eax,%ebx
f011bd3a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bd41:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bd46:	0f b6 c0             	movzbl %al,%eax
f011bd49:	c1 e0 04             	shl    $0x4,%eax
f011bd4c:	89 c2                	mov    %eax,%edx
f011bd4e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bd51:	01 d0                	add    %edx,%eax
f011bd53:	48                   	dec    %eax
f011bd54:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bd57:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bd5a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd5f:	f7 75 84             	divl   -0x7c(%ebp)
f011bd62:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bd65:	29 d0                	sub    %edx,%eax
f011bd67:	01 d8                	add    %ebx,%eax
f011bd69:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bd6e:	39 c1                	cmp    %eax,%ecx
f011bd70:	74 17                	je     f011bd89 <test_kmalloc_bestfit2+0x70f>
f011bd72:	83 ec 04             	sub    $0x4,%esp
f011bd75:	68 08 96 13 f0       	push   $0xf0139608
f011bd7a:	68 7f 02 00 00       	push   $0x27f
f011bd7f:	68 ee 91 13 f0       	push   $0xf01391ee
f011bd84:	e8 27 44 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd89:	e8 d8 88 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bd8e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bd91:	74 17                	je     f011bdaa <test_kmalloc_bestfit2+0x730>
f011bd93:	83 ec 04             	sub    $0x4,%esp
f011bd96:	68 08 92 13 f0       	push   $0xf0139208
f011bd9b:	68 80 02 00 00       	push   $0x280
f011bda0:	68 ee 91 13 f0       	push   $0xf01391ee
f011bda5:	e8 06 44 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bdaa:	e8 11 0c ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bdaf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bdb2:	29 c2                	sub    %eax,%edx
f011bdb4:	89 d0                	mov    %edx,%eax
f011bdb6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bdbb:	74 17                	je     f011bdd4 <test_kmalloc_bestfit2+0x75a>
f011bdbd:	83 ec 04             	sub    $0x4,%esp
f011bdc0:	68 38 96 13 f0       	push   $0xf0139638
f011bdc5:	68 81 02 00 00       	push   $0x281
f011bdca:	68 ee 91 13 f0       	push   $0xf01391ee
f011bdcf:	e8 dc 43 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdd4:	e8 e7 0b ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bdd9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bddc:	e8 85 88 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bde1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bde4:	83 ec 0c             	sub    $0xc,%esp
f011bde7:	68 00 18 20 00       	push   $0x201800
f011bdec:	e8 50 c1 fe ff       	call   f0107f41 <kmalloc>
f011bdf1:	83 c4 10             	add    $0x10,%esp
f011bdf4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bdfa:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011be00:	89 c1                	mov    %eax,%ecx
f011be02:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011be09:	10 00 00 
f011be0c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011be11:	0f b6 d0             	movzbl %al,%edx
f011be14:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011be1a:	01 d0                	add    %edx,%eax
f011be1c:	48                   	dec    %eax
f011be1d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011be23:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be29:	ba 00 00 00 00       	mov    $0x0,%edx
f011be2e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011be34:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be3a:	29 d0                	sub    %edx,%eax
f011be3c:	89 c3                	mov    %eax,%ebx
f011be3e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011be45:	10 00 00 
f011be48:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011be4d:	0f b6 c0             	movzbl %al,%eax
f011be50:	c1 e0 04             	shl    $0x4,%eax
f011be53:	89 c2                	mov    %eax,%edx
f011be55:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011be5b:	01 d0                	add    %edx,%eax
f011be5d:	48                   	dec    %eax
f011be5e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011be64:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011be6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011be6f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011be75:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011be7b:	29 d0                	sub    %edx,%eax
f011be7d:	01 d8                	add    %ebx,%eax
f011be7f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011be84:	39 c1                	cmp    %eax,%ecx
f011be86:	74 17                	je     f011be9f <test_kmalloc_bestfit2+0x825>
f011be88:	83 ec 04             	sub    $0x4,%esp
f011be8b:	68 08 96 13 f0       	push   $0xf0139608
f011be90:	68 87 02 00 00       	push   $0x287
f011be95:	68 ee 91 13 f0       	push   $0xf01391ee
f011be9a:	e8 11 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be9f:	e8 c2 87 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bea4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bea7:	74 17                	je     f011bec0 <test_kmalloc_bestfit2+0x846>
f011bea9:	83 ec 04             	sub    $0x4,%esp
f011beac:	68 08 92 13 f0       	push   $0xf0139208
f011beb1:	68 88 02 00 00       	push   $0x288
f011beb6:	68 ee 91 13 f0       	push   $0xf01391ee
f011bebb:	e8 f0 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bec0:	e8 fb 0a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bec5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bec8:	29 c2                	sub    %eax,%edx
f011beca:	89 d0                	mov    %edx,%eax
f011becc:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bed1:	74 17                	je     f011beea <test_kmalloc_bestfit2+0x870>
f011bed3:	83 ec 04             	sub    $0x4,%esp
f011bed6:	68 38 96 13 f0       	push   $0xf0139638
f011bedb:	68 89 02 00 00       	push   $0x289
f011bee0:	68 ee 91 13 f0       	push   $0xf01391ee
f011bee5:	e8 c6 42 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011beea:	e8 d1 0a ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011beef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bef2:	e8 6f 87 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bef7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011befa:	83 ec 0c             	sub    $0xc,%esp
f011befd:	68 00 fc 4f 00       	push   $0x4ffc00
f011bf02:	e8 3a c0 fe ff       	call   f0107f41 <kmalloc>
f011bf07:	83 c4 10             	add    $0x10,%esp
f011bf0a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bf10:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bf16:	89 c1                	mov    %eax,%ecx
f011bf18:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bf1f:	10 00 00 
f011bf22:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bf27:	0f b6 d0             	movzbl %al,%edx
f011bf2a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bf30:	01 d0                	add    %edx,%eax
f011bf32:	48                   	dec    %eax
f011bf33:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bf39:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf44:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bf4a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf50:	29 d0                	sub    %edx,%eax
f011bf52:	89 c3                	mov    %eax,%ebx
f011bf54:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bf5b:	10 00 00 
f011bf5e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bf63:	0f b6 c0             	movzbl %al,%eax
f011bf66:	c1 e0 04             	shl    $0x4,%eax
f011bf69:	89 c2                	mov    %eax,%edx
f011bf6b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bf71:	01 d0                	add    %edx,%eax
f011bf73:	48                   	dec    %eax
f011bf74:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bf7a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bf80:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf85:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bf8b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bf91:	29 d0                	sub    %edx,%eax
f011bf93:	01 d8                	add    %ebx,%eax
f011bf95:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bf9a:	39 c1                	cmp    %eax,%ecx
f011bf9c:	74 17                	je     f011bfb5 <test_kmalloc_bestfit2+0x93b>
f011bf9e:	83 ec 04             	sub    $0x4,%esp
f011bfa1:	68 08 96 13 f0       	push   $0xf0139608
f011bfa6:	68 8f 02 00 00       	push   $0x28f
f011bfab:	68 ee 91 13 f0       	push   $0xf01391ee
f011bfb0:	e8 fb 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfb5:	e8 ac 86 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011bfba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bfbd:	74 17                	je     f011bfd6 <test_kmalloc_bestfit2+0x95c>
f011bfbf:	83 ec 04             	sub    $0x4,%esp
f011bfc2:	68 08 92 13 f0       	push   $0xf0139208
f011bfc7:	68 90 02 00 00       	push   $0x290
f011bfcc:	68 ee 91 13 f0       	push   $0xf01391ee
f011bfd1:	e8 da 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bfd6:	e8 e5 09 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011bfdb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bfde:	29 c2                	sub    %eax,%edx
f011bfe0:	89 d0                	mov    %edx,%eax
f011bfe2:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bfe7:	74 17                	je     f011c000 <test_kmalloc_bestfit2+0x986>
f011bfe9:	83 ec 04             	sub    $0x4,%esp
f011bfec:	68 38 96 13 f0       	push   $0xf0139638
f011bff1:	68 91 02 00 00       	push   $0x291
f011bff6:	68 ee 91 13 f0       	push   $0xf01391ee
f011bffb:	e8 b0 41 fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c000:	e8 bb 09 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c005:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c008:	e8 59 86 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c00d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011c010:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c016:	83 ec 0c             	sub    $0xc,%esp
f011c019:	50                   	push   %eax
f011c01a:	e8 3c bf fe ff       	call   f0107f5b <kfree>
f011c01f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c022:	e8 3f 86 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c027:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c02a:	74 17                	je     f011c043 <test_kmalloc_bestfit2+0x9c9>
f011c02c:	83 ec 04             	sub    $0x4,%esp
f011c02f:	68 08 92 13 f0       	push   $0xf0139208
f011c034:	68 97 02 00 00       	push   $0x297
f011c039:	68 ee 91 13 f0       	push   $0xf01391ee
f011c03e:	e8 6d 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c043:	e8 78 09 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c048:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c04b:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c050:	74 17                	je     f011c069 <test_kmalloc_bestfit2+0x9ef>
f011c052:	83 ec 04             	sub    $0x4,%esp
f011c055:	68 bc 94 13 f0       	push   $0xf01394bc
f011c05a:	68 98 02 00 00       	push   $0x298
f011c05f:	68 ee 91 13 f0       	push   $0xf01391ee
f011c064:	e8 47 41 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c069:	e8 52 09 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c06e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c071:	e8 f0 85 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c076:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c079:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c07f:	83 ec 0c             	sub    $0xc,%esp
f011c082:	50                   	push   %eax
f011c083:	e8 d3 be fe ff       	call   f0107f5b <kfree>
f011c088:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c08b:	e8 d6 85 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c090:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c093:	74 17                	je     f011c0ac <test_kmalloc_bestfit2+0xa32>
f011c095:	83 ec 04             	sub    $0x4,%esp
f011c098:	68 08 92 13 f0       	push   $0xf0139208
f011c09d:	68 9e 02 00 00       	push   $0x29e
f011c0a2:	68 ee 91 13 f0       	push   $0xf01391ee
f011c0a7:	e8 04 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c0ac:	e8 0f 09 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c0b1:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c0b4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c0b9:	74 17                	je     f011c0d2 <test_kmalloc_bestfit2+0xa58>
f011c0bb:	83 ec 04             	sub    $0x4,%esp
f011c0be:	68 e8 96 13 f0       	push   $0xf01396e8
f011c0c3:	68 9f 02 00 00       	push   $0x29f
f011c0c8:	68 ee 91 13 f0       	push   $0xf01391ee
f011c0cd:	e8 de 40 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0d2:	e8 e9 08 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c0d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0da:	e8 87 85 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c0df:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c0e2:	83 ec 0c             	sub    $0xc,%esp
f011c0e5:	68 00 fc 1f 00       	push   $0x1ffc00
f011c0ea:	e8 52 be fe ff       	call   f0107f41 <kmalloc>
f011c0ef:	83 c4 10             	add    $0x10,%esp
f011c0f2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c0f8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c0fe:	89 c1                	mov    %eax,%ecx
f011c100:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c107:	10 00 00 
f011c10a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c10f:	0f b6 d0             	movzbl %al,%edx
f011c112:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c118:	01 d0                	add    %edx,%eax
f011c11a:	48                   	dec    %eax
f011c11b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c121:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c127:	ba 00 00 00 00       	mov    $0x0,%edx
f011c12c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c132:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c138:	29 d0                	sub    %edx,%eax
f011c13a:	89 c3                	mov    %eax,%ebx
f011c13c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c143:	10 00 00 
f011c146:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c14b:	0f b6 c0             	movzbl %al,%eax
f011c14e:	c1 e0 04             	shl    $0x4,%eax
f011c151:	89 c2                	mov    %eax,%edx
f011c153:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c159:	01 d0                	add    %edx,%eax
f011c15b:	48                   	dec    %eax
f011c15c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c162:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c168:	ba 00 00 00 00       	mov    $0x0,%edx
f011c16d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c173:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c179:	29 d0                	sub    %edx,%eax
f011c17b:	01 d8                	add    %ebx,%eax
f011c17d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c182:	39 c1                	cmp    %eax,%ecx
f011c184:	74 17                	je     f011c19d <test_kmalloc_bestfit2+0xb23>
f011c186:	83 ec 04             	sub    $0x4,%esp
f011c189:	68 08 96 13 f0       	push   $0xf0139608
f011c18e:	68 a5 02 00 00       	push   $0x2a5
f011c193:	68 ee 91 13 f0       	push   $0xf01391ee
f011c198:	e8 13 40 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c19d:	e8 c4 84 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c1a2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1a5:	74 17                	je     f011c1be <test_kmalloc_bestfit2+0xb44>
f011c1a7:	83 ec 04             	sub    $0x4,%esp
f011c1aa:	68 08 92 13 f0       	push   $0xf0139208
f011c1af:	68 a6 02 00 00       	push   $0x2a6
f011c1b4:	68 ee 91 13 f0       	push   $0xf01391ee
f011c1b9:	e8 f2 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c1be:	e8 fd 07 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c1c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c1c6:	29 c2                	sub    %eax,%edx
f011c1c8:	89 d0                	mov    %edx,%eax
f011c1ca:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c1cf:	74 17                	je     f011c1e8 <test_kmalloc_bestfit2+0xb6e>
f011c1d1:	83 ec 04             	sub    $0x4,%esp
f011c1d4:	68 26 97 13 f0       	push   $0xf0139726
f011c1d9:	68 a7 02 00 00       	push   $0x2a7
f011c1de:	68 ee 91 13 f0       	push   $0xf01391ee
f011c1e3:	e8 c8 3f fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c1e8:	e8 d3 07 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c1ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1f0:	e8 71 84 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c1f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c1f8:	83 ec 0c             	sub    $0xc,%esp
f011c1fb:	68 00 18 00 00       	push   $0x1800
f011c200:	e8 3c bd fe ff       	call   f0107f41 <kmalloc>
f011c205:	83 c4 10             	add    $0x10,%esp
f011c208:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c20e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c214:	89 c1                	mov    %eax,%ecx
f011c216:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c21d:	10 00 00 
f011c220:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c225:	0f b6 d0             	movzbl %al,%edx
f011c228:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c22e:	01 d0                	add    %edx,%eax
f011c230:	48                   	dec    %eax
f011c231:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c237:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c23d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c242:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c248:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c24e:	29 d0                	sub    %edx,%eax
f011c250:	89 c3                	mov    %eax,%ebx
f011c252:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c259:	10 00 00 
f011c25c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c261:	0f b6 c0             	movzbl %al,%eax
f011c264:	c1 e0 04             	shl    $0x4,%eax
f011c267:	89 c2                	mov    %eax,%edx
f011c269:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c26f:	01 d0                	add    %edx,%eax
f011c271:	48                   	dec    %eax
f011c272:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c278:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c27e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c283:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c289:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c28f:	29 d0                	sub    %edx,%eax
f011c291:	01 d8                	add    %ebx,%eax
f011c293:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c298:	39 c1                	cmp    %eax,%ecx
f011c29a:	74 17                	je     f011c2b3 <test_kmalloc_bestfit2+0xc39>
f011c29c:	83 ec 04             	sub    $0x4,%esp
f011c29f:	68 08 96 13 f0       	push   $0xf0139608
f011c2a4:	68 ad 02 00 00       	push   $0x2ad
f011c2a9:	68 ee 91 13 f0       	push   $0xf01391ee
f011c2ae:	e8 fd 3e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2b3:	e8 ae 83 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c2b8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c2bb:	74 17                	je     f011c2d4 <test_kmalloc_bestfit2+0xc5a>
f011c2bd:	83 ec 04             	sub    $0x4,%esp
f011c2c0:	68 08 92 13 f0       	push   $0xf0139208
f011c2c5:	68 ae 02 00 00       	push   $0x2ae
f011c2ca:	68 ee 91 13 f0       	push   $0xf01391ee
f011c2cf:	e8 dc 3e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c2d4:	e8 e7 06 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c2d9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c2dc:	29 c2                	sub    %eax,%edx
f011c2de:	89 d0                	mov    %edx,%eax
f011c2e0:	83 f8 02             	cmp    $0x2,%eax
f011c2e3:	74 17                	je     f011c2fc <test_kmalloc_bestfit2+0xc82>
f011c2e5:	83 ec 04             	sub    $0x4,%esp
f011c2e8:	68 26 97 13 f0       	push   $0xf0139726
f011c2ed:	68 af 02 00 00       	push   $0x2af
f011c2f2:	68 ee 91 13 f0       	push   $0xf01391ee
f011c2f7:	e8 b4 3e fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c2fc:	e8 bf 06 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c301:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c304:	e8 5d 83 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c309:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c30c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c312:	83 ec 0c             	sub    $0xc,%esp
f011c315:	50                   	push   %eax
f011c316:	e8 40 bc fe ff       	call   f0107f5b <kfree>
f011c31b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c31e:	e8 43 83 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c323:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c326:	74 17                	je     f011c33f <test_kmalloc_bestfit2+0xcc5>
f011c328:	83 ec 04             	sub    $0x4,%esp
f011c32b:	68 08 92 13 f0       	push   $0xf0139208
f011c330:	68 b5 02 00 00       	push   $0x2b5
f011c335:	68 ee 91 13 f0       	push   $0xf01391ee
f011c33a:	e8 71 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c33f:	e8 7c 06 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c344:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c347:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c34c:	74 17                	je     f011c365 <test_kmalloc_bestfit2+0xceb>
f011c34e:	83 ec 04             	sub    $0x4,%esp
f011c351:	68 e8 96 13 f0       	push   $0xf01396e8
f011c356:	68 b6 02 00 00       	push   $0x2b6
f011c35b:	68 ee 91 13 f0       	push   $0xf01391ee
f011c360:	e8 4b 3e fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c365:	e8 56 06 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c36a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c36d:	e8 f4 82 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c372:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c375:	83 ec 0c             	sub    $0xc,%esp
f011c378:	68 00 fc 2f 00       	push   $0x2ffc00
f011c37d:	e8 bf bb fe ff       	call   f0107f41 <kmalloc>
f011c382:	83 c4 10             	add    $0x10,%esp
f011c385:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c38b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c391:	89 c1                	mov    %eax,%ecx
f011c393:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c39a:	10 00 00 
f011c39d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c3a2:	0f b6 d0             	movzbl %al,%edx
f011c3a5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c3ab:	01 d0                	add    %edx,%eax
f011c3ad:	48                   	dec    %eax
f011c3ae:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c3b4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3bf:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c3c5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3cb:	29 d0                	sub    %edx,%eax
f011c3cd:	89 c3                	mov    %eax,%ebx
f011c3cf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c3d6:	10 00 00 
f011c3d9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c3de:	0f b6 c0             	movzbl %al,%eax
f011c3e1:	c1 e0 04             	shl    $0x4,%eax
f011c3e4:	89 c2                	mov    %eax,%edx
f011c3e6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c3ec:	01 d0                	add    %edx,%eax
f011c3ee:	48                   	dec    %eax
f011c3ef:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c3f5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c3fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c400:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c406:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c40c:	29 d0                	sub    %edx,%eax
f011c40e:	01 d8                	add    %ebx,%eax
f011c410:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c415:	39 c1                	cmp    %eax,%ecx
f011c417:	74 17                	je     f011c430 <test_kmalloc_bestfit2+0xdb6>
f011c419:	83 ec 04             	sub    $0x4,%esp
f011c41c:	68 08 96 13 f0       	push   $0xf0139608
f011c421:	68 bc 02 00 00       	push   $0x2bc
f011c426:	68 ee 91 13 f0       	push   $0xf01391ee
f011c42b:	e8 80 3d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c430:	e8 31 82 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c435:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c438:	74 17                	je     f011c451 <test_kmalloc_bestfit2+0xdd7>
f011c43a:	83 ec 04             	sub    $0x4,%esp
f011c43d:	68 08 92 13 f0       	push   $0xf0139208
f011c442:	68 bd 02 00 00       	push   $0x2bd
f011c447:	68 ee 91 13 f0       	push   $0xf01391ee
f011c44c:	e8 5f 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c451:	e8 6a 05 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c456:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c459:	29 c2                	sub    %eax,%edx
f011c45b:	89 d0                	mov    %edx,%eax
f011c45d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c462:	74 17                	je     f011c47b <test_kmalloc_bestfit2+0xe01>
f011c464:	83 ec 04             	sub    $0x4,%esp
f011c467:	68 e8 96 13 f0       	push   $0xf01396e8
f011c46c:	68 be 02 00 00       	push   $0x2be
f011c471:	68 ee 91 13 f0       	push   $0xf01391ee
f011c476:	e8 35 3d fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c47b:	e8 40 05 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c480:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c483:	e8 de 81 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c488:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c48b:	83 ec 0c             	sub    $0xc,%esp
f011c48e:	68 00 fc 3f 00       	push   $0x3ffc00
f011c493:	e8 a9 ba fe ff       	call   f0107f41 <kmalloc>
f011c498:	83 c4 10             	add    $0x10,%esp
f011c49b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c4a1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c4a7:	89 c1                	mov    %eax,%ecx
f011c4a9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4b0:	10 00 00 
f011c4b3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c4b8:	0f b6 d0             	movzbl %al,%edx
f011c4bb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4c1:	01 d0                	add    %edx,%eax
f011c4c3:	48                   	dec    %eax
f011c4c4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c4ca:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4d5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c4db:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4e1:	29 d0                	sub    %edx,%eax
f011c4e3:	89 c3                	mov    %eax,%ebx
f011c4e5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c4ec:	10 00 00 
f011c4ef:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c4f4:	0f b6 c0             	movzbl %al,%eax
f011c4f7:	c1 e0 04             	shl    $0x4,%eax
f011c4fa:	89 c2                	mov    %eax,%edx
f011c4fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c502:	01 d0                	add    %edx,%eax
f011c504:	48                   	dec    %eax
f011c505:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c50b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c511:	ba 00 00 00 00       	mov    $0x0,%edx
f011c516:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c51c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c522:	29 d0                	sub    %edx,%eax
f011c524:	01 d8                	add    %ebx,%eax
f011c526:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c52b:	39 c1                	cmp    %eax,%ecx
f011c52d:	74 17                	je     f011c546 <test_kmalloc_bestfit2+0xecc>
f011c52f:	83 ec 04             	sub    $0x4,%esp
f011c532:	68 08 96 13 f0       	push   $0xf0139608
f011c537:	68 c4 02 00 00       	push   $0x2c4
f011c53c:	68 ee 91 13 f0       	push   $0xf01391ee
f011c541:	e8 6a 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c546:	e8 1b 81 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c54b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c54e:	74 17                	je     f011c567 <test_kmalloc_bestfit2+0xeed>
f011c550:	83 ec 04             	sub    $0x4,%esp
f011c553:	68 08 92 13 f0       	push   $0xf0139208
f011c558:	68 c5 02 00 00       	push   $0x2c5
f011c55d:	68 ee 91 13 f0       	push   $0xf01391ee
f011c562:	e8 49 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c567:	e8 54 04 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c56c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c56f:	29 c2                	sub    %eax,%edx
f011c571:	89 d0                	mov    %edx,%eax
f011c573:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c578:	74 17                	je     f011c591 <test_kmalloc_bestfit2+0xf17>
f011c57a:	83 ec 04             	sub    $0x4,%esp
f011c57d:	68 e8 96 13 f0       	push   $0xf01396e8
f011c582:	68 c6 02 00 00       	push   $0x2c6
f011c587:	68 ee 91 13 f0       	push   $0xf01391ee
f011c58c:	e8 1f 3c fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c591:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c598:	10 00 00 
f011c59b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c5a0:	0f b6 d0             	movzbl %al,%edx
f011c5a3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c5a9:	01 d0                	add    %edx,%eax
f011c5ab:	48                   	dec    %eax
f011c5ac:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c5b2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c5b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5bd:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c5c3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c5c9:	29 d0                	sub    %edx,%eax
f011c5cb:	89 c1                	mov    %eax,%ecx
f011c5cd:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c5d4:	10 00 00 
f011c5d7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c5dc:	0f b6 c0             	movzbl %al,%eax
f011c5df:	c1 e0 04             	shl    $0x4,%eax
f011c5e2:	89 c2                	mov    %eax,%edx
f011c5e4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c5ea:	01 d0                	add    %edx,%eax
f011c5ec:	48                   	dec    %eax
f011c5ed:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c5f3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c5f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5fe:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c604:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c60a:	29 d0                	sub    %edx,%eax
f011c60c:	01 c8                	add    %ecx,%eax
f011c60e:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c613:	29 c2                	sub    %eax,%edx
f011c615:	89 d0                	mov    %edx,%eax
f011c617:	83 ec 0c             	sub    $0xc,%esp
f011c61a:	50                   	push   %eax
f011c61b:	e8 21 b9 fe ff       	call   f0107f41 <kmalloc>
f011c620:	83 c4 10             	add    $0x10,%esp
f011c623:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c629:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c62f:	85 c0                	test   %eax,%eax
f011c631:	74 17                	je     f011c64a <test_kmalloc_bestfit2+0xfd0>
f011c633:	83 ec 04             	sub    $0x4,%esp
f011c636:	68 38 97 13 f0       	push   $0xf0139738
f011c63b:	68 ce 02 00 00       	push   $0x2ce
f011c640:	68 ee 91 13 f0       	push   $0xf01391ee
f011c645:	e8 66 3b fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c64a:	83 ec 0c             	sub    $0xc,%esp
f011c64d:	68 9c 97 13 f0       	push   $0xf013979c
f011c652:	e8 da 47 fe ff       	call   f0100e31 <cprintf>
f011c657:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c65a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c65f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c662:	5b                   	pop    %ebx
f011c663:	5f                   	pop    %edi
f011c664:	5d                   	pop    %ebp
f011c665:	c3                   	ret    

f011c666 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c666:	55                   	push   %ebp
f011c667:	89 e5                	mov    %esp,%ebp
f011c669:	57                   	push   %edi
f011c66a:	53                   	push   %ebx
f011c66b:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c671:	83 ec 0c             	sub    $0xc,%esp
f011c674:	68 30 91 13 f0       	push   $0xf0139130
f011c679:	e8 b3 47 fe ff       	call   f0100e31 <cprintf>
f011c67e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c681:	83 ec 0c             	sub    $0xc,%esp
f011c684:	68 60 91 13 f0       	push   $0xf0139160
f011c689:	e8 a3 47 fe ff       	call   f0100e31 <cprintf>
f011c68e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c691:	83 ec 0c             	sub    $0xc,%esp
f011c694:	68 30 91 13 f0       	push   $0xf0139130
f011c699:	e8 93 47 fe ff       	call   f0100e31 <cprintf>
f011c69e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c6a1:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c6a7:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c6ac:	b8 00 00 00 00       	mov    $0x0,%eax
f011c6b1:	89 d7                	mov    %edx,%edi
f011c6b3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6b5:	e8 06 03 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c6ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6bd:	e8 a4 7f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c6c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c6c5:	83 ec 0c             	sub    $0xc,%esp
f011c6c8:	68 00 fc 0f 00       	push   $0xffc00
f011c6cd:	e8 6f b8 fe ff       	call   f0107f41 <kmalloc>
f011c6d2:	83 c4 10             	add    $0x10,%esp
f011c6d5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c6db:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6e1:	89 c1                	mov    %eax,%ecx
f011c6e3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c6ea:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c6ef:	0f b6 d0             	movzbl %al,%edx
f011c6f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c6f5:	01 d0                	add    %edx,%eax
f011c6f7:	48                   	dec    %eax
f011c6f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c6fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c6fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011c703:	f7 75 ec             	divl   -0x14(%ebp)
f011c706:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c709:	29 d0                	sub    %edx,%eax
f011c70b:	89 c3                	mov    %eax,%ebx
f011c70d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c714:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c719:	0f b6 c0             	movzbl %al,%eax
f011c71c:	c1 e0 04             	shl    $0x4,%eax
f011c71f:	89 c2                	mov    %eax,%edx
f011c721:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c724:	01 d0                	add    %edx,%eax
f011c726:	48                   	dec    %eax
f011c727:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c72a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c72d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c732:	f7 75 e4             	divl   -0x1c(%ebp)
f011c735:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c738:	29 d0                	sub    %edx,%eax
f011c73a:	01 d8                	add    %ebx,%eax
f011c73c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c741:	39 c1                	cmp    %eax,%ecx
f011c743:	74 17                	je     f011c75c <test_kmalloc_firstfit1+0xf6>
f011c745:	83 ec 04             	sub    $0x4,%esp
f011c748:	68 08 96 13 f0       	push   $0xf0139608
f011c74d:	68 e6 02 00 00       	push   $0x2e6
f011c752:	68 ee 91 13 f0       	push   $0xf01391ee
f011c757:	e8 54 3a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c75c:	e8 05 7f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c761:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c764:	74 17                	je     f011c77d <test_kmalloc_firstfit1+0x117>
f011c766:	83 ec 04             	sub    $0x4,%esp
f011c769:	68 08 92 13 f0       	push   $0xf0139208
f011c76e:	68 e7 02 00 00       	push   $0x2e7
f011c773:	68 ee 91 13 f0       	push   $0xf01391ee
f011c778:	e8 33 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c77d:	e8 3e 02 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c785:	29 c2                	sub    %eax,%edx
f011c787:	89 d0                	mov    %edx,%eax
f011c789:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c78e:	74 17                	je     f011c7a7 <test_kmalloc_firstfit1+0x141>
f011c790:	83 ec 04             	sub    $0x4,%esp
f011c793:	68 38 96 13 f0       	push   $0xf0139638
f011c798:	68 e8 02 00 00       	push   $0x2e8
f011c79d:	68 ee 91 13 f0       	push   $0xf01391ee
f011c7a2:	e8 09 3a fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7a7:	e8 14 02 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c7ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7af:	e8 b2 7e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c7b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c7b7:	83 ec 0c             	sub    $0xc,%esp
f011c7ba:	68 00 fc 0f 00       	push   $0xffc00
f011c7bf:	e8 7d b7 fe ff       	call   f0107f41 <kmalloc>
f011c7c4:	83 c4 10             	add    $0x10,%esp
f011c7c7:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c7cd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c7d3:	89 c1                	mov    %eax,%ecx
f011c7d5:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c7dc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c7e1:	0f b6 d0             	movzbl %al,%edx
f011c7e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c7e7:	01 d0                	add    %edx,%eax
f011c7e9:	48                   	dec    %eax
f011c7ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c7ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c7f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7f5:	f7 75 dc             	divl   -0x24(%ebp)
f011c7f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c7fb:	29 d0                	sub    %edx,%eax
f011c7fd:	89 c3                	mov    %eax,%ebx
f011c7ff:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c806:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c80b:	0f b6 c0             	movzbl %al,%eax
f011c80e:	c1 e0 04             	shl    $0x4,%eax
f011c811:	89 c2                	mov    %eax,%edx
f011c813:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c816:	01 d0                	add    %edx,%eax
f011c818:	48                   	dec    %eax
f011c819:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c81c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c81f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c824:	f7 75 d4             	divl   -0x2c(%ebp)
f011c827:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c82a:	29 d0                	sub    %edx,%eax
f011c82c:	01 d8                	add    %ebx,%eax
f011c82e:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c833:	39 c1                	cmp    %eax,%ecx
f011c835:	74 17                	je     f011c84e <test_kmalloc_firstfit1+0x1e8>
f011c837:	83 ec 04             	sub    $0x4,%esp
f011c83a:	68 08 96 13 f0       	push   $0xf0139608
f011c83f:	68 ee 02 00 00       	push   $0x2ee
f011c844:	68 ee 91 13 f0       	push   $0xf01391ee
f011c849:	e8 62 39 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c84e:	e8 13 7e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c853:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c856:	74 17                	je     f011c86f <test_kmalloc_firstfit1+0x209>
f011c858:	83 ec 04             	sub    $0x4,%esp
f011c85b:	68 08 92 13 f0       	push   $0xf0139208
f011c860:	68 ef 02 00 00       	push   $0x2ef
f011c865:	68 ee 91 13 f0       	push   $0xf01391ee
f011c86a:	e8 41 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c86f:	e8 4c 01 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c874:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c877:	29 c2                	sub    %eax,%edx
f011c879:	89 d0                	mov    %edx,%eax
f011c87b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c880:	74 17                	je     f011c899 <test_kmalloc_firstfit1+0x233>
f011c882:	83 ec 04             	sub    $0x4,%esp
f011c885:	68 38 96 13 f0       	push   $0xf0139638
f011c88a:	68 f0 02 00 00       	push   $0x2f0
f011c88f:	68 ee 91 13 f0       	push   $0xf01391ee
f011c894:	e8 17 39 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c899:	e8 22 01 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c89e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8a1:	e8 c0 7d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c8a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c8a9:	83 ec 0c             	sub    $0xc,%esp
f011c8ac:	68 00 fc 0f 00       	push   $0xffc00
f011c8b1:	e8 8b b6 fe ff       	call   f0107f41 <kmalloc>
f011c8b6:	83 c4 10             	add    $0x10,%esp
f011c8b9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c8bf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c8c5:	89 c1                	mov    %eax,%ecx
f011c8c7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c8ce:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c8d3:	0f b6 d0             	movzbl %al,%edx
f011c8d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c8d9:	01 d0                	add    %edx,%eax
f011c8db:	48                   	dec    %eax
f011c8dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c8df:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c8e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8e7:	f7 75 cc             	divl   -0x34(%ebp)
f011c8ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c8ed:	29 d0                	sub    %edx,%eax
f011c8ef:	89 c3                	mov    %eax,%ebx
f011c8f1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c8f8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c8fd:	0f b6 c0             	movzbl %al,%eax
f011c900:	c1 e0 04             	shl    $0x4,%eax
f011c903:	89 c2                	mov    %eax,%edx
f011c905:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c908:	01 d0                	add    %edx,%eax
f011c90a:	48                   	dec    %eax
f011c90b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c90e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c911:	ba 00 00 00 00       	mov    $0x0,%edx
f011c916:	f7 75 c4             	divl   -0x3c(%ebp)
f011c919:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c91c:	29 d0                	sub    %edx,%eax
f011c91e:	01 d8                	add    %ebx,%eax
f011c920:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c925:	39 c1                	cmp    %eax,%ecx
f011c927:	74 17                	je     f011c940 <test_kmalloc_firstfit1+0x2da>
f011c929:	83 ec 04             	sub    $0x4,%esp
f011c92c:	68 08 96 13 f0       	push   $0xf0139608
f011c931:	68 f6 02 00 00       	push   $0x2f6
f011c936:	68 ee 91 13 f0       	push   $0xf01391ee
f011c93b:	e8 70 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c940:	e8 21 7d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c945:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c948:	74 17                	je     f011c961 <test_kmalloc_firstfit1+0x2fb>
f011c94a:	83 ec 04             	sub    $0x4,%esp
f011c94d:	68 08 92 13 f0       	push   $0xf0139208
f011c952:	68 f7 02 00 00       	push   $0x2f7
f011c957:	68 ee 91 13 f0       	push   $0xf01391ee
f011c95c:	e8 4f 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c961:	e8 5a 00 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c966:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c969:	29 c2                	sub    %eax,%edx
f011c96b:	89 d0                	mov    %edx,%eax
f011c96d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c972:	74 17                	je     f011c98b <test_kmalloc_firstfit1+0x325>
f011c974:	83 ec 04             	sub    $0x4,%esp
f011c977:	68 38 96 13 f0       	push   $0xf0139638
f011c97c:	68 f8 02 00 00       	push   $0x2f8
f011c981:	68 ee 91 13 f0       	push   $0xf01391ee
f011c986:	e8 25 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c98b:	e8 30 00 ff ff       	call   f010c9c0 <sys_calculate_free_frames>
f011c990:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c993:	e8 ce 7c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011c998:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c99b:	83 ec 0c             	sub    $0xc,%esp
f011c99e:	68 00 fc 0f 00       	push   $0xffc00
f011c9a3:	e8 99 b5 fe ff       	call   f0107f41 <kmalloc>
f011c9a8:	83 c4 10             	add    $0x10,%esp
f011c9ab:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c9b1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c9b7:	89 c1                	mov    %eax,%ecx
f011c9b9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c9c0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c9c5:	0f b6 d0             	movzbl %al,%edx
f011c9c8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c9cb:	01 d0                	add    %edx,%eax
f011c9cd:	48                   	dec    %eax
f011c9ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c9d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c9d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9d9:	f7 75 bc             	divl   -0x44(%ebp)
f011c9dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c9df:	29 d0                	sub    %edx,%eax
f011c9e1:	89 c3                	mov    %eax,%ebx
f011c9e3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c9ea:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c9ef:	0f b6 c0             	movzbl %al,%eax
f011c9f2:	c1 e0 04             	shl    $0x4,%eax
f011c9f5:	89 c2                	mov    %eax,%edx
f011c9f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c9fa:	01 d0                	add    %edx,%eax
f011c9fc:	48                   	dec    %eax
f011c9fd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ca00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ca03:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca08:	f7 75 b4             	divl   -0x4c(%ebp)
f011ca0b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ca0e:	29 d0                	sub    %edx,%eax
f011ca10:	01 d8                	add    %ebx,%eax
f011ca12:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ca17:	39 c1                	cmp    %eax,%ecx
f011ca19:	74 17                	je     f011ca32 <test_kmalloc_firstfit1+0x3cc>
f011ca1b:	83 ec 04             	sub    $0x4,%esp
f011ca1e:	68 08 96 13 f0       	push   $0xf0139608
f011ca23:	68 fe 02 00 00       	push   $0x2fe
f011ca28:	68 ee 91 13 f0       	push   $0xf01391ee
f011ca2d:	e8 7e 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca32:	e8 2f 7c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ca37:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca3a:	74 17                	je     f011ca53 <test_kmalloc_firstfit1+0x3ed>
f011ca3c:	83 ec 04             	sub    $0x4,%esp
f011ca3f:	68 08 92 13 f0       	push   $0xf0139208
f011ca44:	68 ff 02 00 00       	push   $0x2ff
f011ca49:	68 ee 91 13 f0       	push   $0xf01391ee
f011ca4e:	e8 5d 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca53:	e8 68 ff fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ca58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca5b:	29 c2                	sub    %eax,%edx
f011ca5d:	89 d0                	mov    %edx,%eax
f011ca5f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca64:	74 17                	je     f011ca7d <test_kmalloc_firstfit1+0x417>
f011ca66:	83 ec 04             	sub    $0x4,%esp
f011ca69:	68 38 96 13 f0       	push   $0xf0139638
f011ca6e:	68 00 03 00 00       	push   $0x300
f011ca73:	68 ee 91 13 f0       	push   $0xf01391ee
f011ca78:	e8 33 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca7d:	e8 3e ff fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ca82:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca85:	e8 dc 7b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ca8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ca8d:	83 ec 0c             	sub    $0xc,%esp
f011ca90:	68 00 fc 1f 00       	push   $0x1ffc00
f011ca95:	e8 a7 b4 fe ff       	call   f0107f41 <kmalloc>
f011ca9a:	83 c4 10             	add    $0x10,%esp
f011ca9d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011caa3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011caa9:	89 c1                	mov    %eax,%ecx
f011caab:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cab2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cab7:	0f b6 d0             	movzbl %al,%edx
f011caba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cabd:	01 d0                	add    %edx,%eax
f011cabf:	48                   	dec    %eax
f011cac0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cac3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cac6:	ba 00 00 00 00       	mov    $0x0,%edx
f011cacb:	f7 75 ac             	divl   -0x54(%ebp)
f011cace:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cad1:	29 d0                	sub    %edx,%eax
f011cad3:	89 c3                	mov    %eax,%ebx
f011cad5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cadc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cae1:	0f b6 c0             	movzbl %al,%eax
f011cae4:	c1 e0 04             	shl    $0x4,%eax
f011cae7:	89 c2                	mov    %eax,%edx
f011cae9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011caec:	01 d0                	add    %edx,%eax
f011caee:	48                   	dec    %eax
f011caef:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011caf2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011caf5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cafa:	f7 75 a4             	divl   -0x5c(%ebp)
f011cafd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cb00:	29 d0                	sub    %edx,%eax
f011cb02:	01 d8                	add    %ebx,%eax
f011cb04:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cb09:	39 c1                	cmp    %eax,%ecx
f011cb0b:	74 17                	je     f011cb24 <test_kmalloc_firstfit1+0x4be>
f011cb0d:	83 ec 04             	sub    $0x4,%esp
f011cb10:	68 08 96 13 f0       	push   $0xf0139608
f011cb15:	68 06 03 00 00       	push   $0x306
f011cb1a:	68 ee 91 13 f0       	push   $0xf01391ee
f011cb1f:	e8 8c 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb24:	e8 3d 7b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cb29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb2c:	74 17                	je     f011cb45 <test_kmalloc_firstfit1+0x4df>
f011cb2e:	83 ec 04             	sub    $0x4,%esp
f011cb31:	68 08 92 13 f0       	push   $0xf0139208
f011cb36:	68 07 03 00 00       	push   $0x307
f011cb3b:	68 ee 91 13 f0       	push   $0xf01391ee
f011cb40:	e8 6b 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb45:	e8 76 fe fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cb4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb4d:	29 c2                	sub    %eax,%edx
f011cb4f:	89 d0                	mov    %edx,%eax
f011cb51:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb56:	74 17                	je     f011cb6f <test_kmalloc_firstfit1+0x509>
f011cb58:	83 ec 04             	sub    $0x4,%esp
f011cb5b:	68 38 96 13 f0       	push   $0xf0139638
f011cb60:	68 08 03 00 00       	push   $0x308
f011cb65:	68 ee 91 13 f0       	push   $0xf01391ee
f011cb6a:	e8 41 36 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb6f:	e8 4c fe fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cb74:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb77:	e8 ea 7a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cb7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cb7f:	83 ec 0c             	sub    $0xc,%esp
f011cb82:	68 00 fc 1f 00       	push   $0x1ffc00
f011cb87:	e8 b5 b3 fe ff       	call   f0107f41 <kmalloc>
f011cb8c:	83 c4 10             	add    $0x10,%esp
f011cb8f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cb95:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cb9b:	89 c1                	mov    %eax,%ecx
f011cb9d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cba4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cba9:	0f b6 d0             	movzbl %al,%edx
f011cbac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cbaf:	01 d0                	add    %edx,%eax
f011cbb1:	48                   	dec    %eax
f011cbb2:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cbb5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cbb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbbd:	f7 75 9c             	divl   -0x64(%ebp)
f011cbc0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cbc3:	29 d0                	sub    %edx,%eax
f011cbc5:	89 c3                	mov    %eax,%ebx
f011cbc7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cbce:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cbd3:	0f b6 c0             	movzbl %al,%eax
f011cbd6:	c1 e0 04             	shl    $0x4,%eax
f011cbd9:	89 c2                	mov    %eax,%edx
f011cbdb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cbde:	01 d0                	add    %edx,%eax
f011cbe0:	48                   	dec    %eax
f011cbe1:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cbe4:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cbe7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbec:	f7 75 94             	divl   -0x6c(%ebp)
f011cbef:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cbf2:	29 d0                	sub    %edx,%eax
f011cbf4:	01 d8                	add    %ebx,%eax
f011cbf6:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cbfb:	39 c1                	cmp    %eax,%ecx
f011cbfd:	74 17                	je     f011cc16 <test_kmalloc_firstfit1+0x5b0>
f011cbff:	83 ec 04             	sub    $0x4,%esp
f011cc02:	68 08 96 13 f0       	push   $0xf0139608
f011cc07:	68 0e 03 00 00       	push   $0x30e
f011cc0c:	68 ee 91 13 f0       	push   $0xf01391ee
f011cc11:	e8 9a 35 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc16:	e8 4b 7a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cc1b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc1e:	74 17                	je     f011cc37 <test_kmalloc_firstfit1+0x5d1>
f011cc20:	83 ec 04             	sub    $0x4,%esp
f011cc23:	68 08 92 13 f0       	push   $0xf0139208
f011cc28:	68 0f 03 00 00       	push   $0x30f
f011cc2d:	68 ee 91 13 f0       	push   $0xf01391ee
f011cc32:	e8 79 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cc37:	e8 84 fd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cc3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc3f:	29 c2                	sub    %eax,%edx
f011cc41:	89 d0                	mov    %edx,%eax
f011cc43:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cc48:	74 17                	je     f011cc61 <test_kmalloc_firstfit1+0x5fb>
f011cc4a:	83 ec 04             	sub    $0x4,%esp
f011cc4d:	68 38 96 13 f0       	push   $0xf0139638
f011cc52:	68 10 03 00 00       	push   $0x310
f011cc57:	68 ee 91 13 f0       	push   $0xf01391ee
f011cc5c:	e8 4f 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cc61:	e8 5a fd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cc66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc69:	e8 f8 79 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cc6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cc71:	83 ec 0c             	sub    $0xc,%esp
f011cc74:	68 00 fc 2f 00       	push   $0x2ffc00
f011cc79:	e8 c3 b2 fe ff       	call   f0107f41 <kmalloc>
f011cc7e:	83 c4 10             	add    $0x10,%esp
f011cc81:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cc87:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cc8d:	89 c1                	mov    %eax,%ecx
f011cc8f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cc96:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cc9b:	0f b6 d0             	movzbl %al,%edx
f011cc9e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cca1:	01 d0                	add    %edx,%eax
f011cca3:	48                   	dec    %eax
f011cca4:	89 45 88             	mov    %eax,-0x78(%ebp)
f011cca7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccaf:	f7 75 8c             	divl   -0x74(%ebp)
f011ccb2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccb5:	29 d0                	sub    %edx,%eax
f011ccb7:	89 c3                	mov    %eax,%ebx
f011ccb9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ccc0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ccc5:	0f b6 c0             	movzbl %al,%eax
f011ccc8:	c1 e0 04             	shl    $0x4,%eax
f011cccb:	89 c2                	mov    %eax,%edx
f011cccd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ccd0:	01 d0                	add    %edx,%eax
f011ccd2:	48                   	dec    %eax
f011ccd3:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ccd6:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ccd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccde:	f7 75 84             	divl   -0x7c(%ebp)
f011cce1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cce4:	29 d0                	sub    %edx,%eax
f011cce6:	01 d8                	add    %ebx,%eax
f011cce8:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cced:	39 c1                	cmp    %eax,%ecx
f011ccef:	74 17                	je     f011cd08 <test_kmalloc_firstfit1+0x6a2>
f011ccf1:	83 ec 04             	sub    $0x4,%esp
f011ccf4:	68 08 96 13 f0       	push   $0xf0139608
f011ccf9:	68 16 03 00 00       	push   $0x316
f011ccfe:	68 ee 91 13 f0       	push   $0xf01391ee
f011cd03:	e8 a8 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd08:	e8 59 79 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cd0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd10:	74 17                	je     f011cd29 <test_kmalloc_firstfit1+0x6c3>
f011cd12:	83 ec 04             	sub    $0x4,%esp
f011cd15:	68 08 92 13 f0       	push   $0xf0139208
f011cd1a:	68 17 03 00 00       	push   $0x317
f011cd1f:	68 ee 91 13 f0       	push   $0xf01391ee
f011cd24:	e8 87 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cd29:	e8 92 fc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cd2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd31:	29 c2                	sub    %eax,%edx
f011cd33:	89 d0                	mov    %edx,%eax
f011cd35:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cd3a:	74 17                	je     f011cd53 <test_kmalloc_firstfit1+0x6ed>
f011cd3c:	83 ec 04             	sub    $0x4,%esp
f011cd3f:	68 38 96 13 f0       	push   $0xf0139638
f011cd44:	68 18 03 00 00       	push   $0x318
f011cd49:	68 ee 91 13 f0       	push   $0xf01391ee
f011cd4e:	e8 5d 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd53:	e8 68 fc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cd58:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd5b:	e8 06 79 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cd60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cd63:	83 ec 0c             	sub    $0xc,%esp
f011cd66:	68 00 fc 2f 00       	push   $0x2ffc00
f011cd6b:	e8 d1 b1 fe ff       	call   f0107f41 <kmalloc>
f011cd70:	83 c4 10             	add    $0x10,%esp
f011cd73:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cd79:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cd7f:	89 c1                	mov    %eax,%ecx
f011cd81:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cd88:	10 00 00 
f011cd8b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cd90:	0f b6 d0             	movzbl %al,%edx
f011cd93:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cd99:	01 d0                	add    %edx,%eax
f011cd9b:	48                   	dec    %eax
f011cd9c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cda2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cda8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdad:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cdb3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cdb9:	29 d0                	sub    %edx,%eax
f011cdbb:	89 c3                	mov    %eax,%ebx
f011cdbd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cdc4:	10 00 00 
f011cdc7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cdcc:	0f b6 c0             	movzbl %al,%eax
f011cdcf:	c1 e0 04             	shl    $0x4,%eax
f011cdd2:	89 c2                	mov    %eax,%edx
f011cdd4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cdda:	01 d0                	add    %edx,%eax
f011cddc:	48                   	dec    %eax
f011cddd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cde3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cde9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdee:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cdf4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cdfa:	29 d0                	sub    %edx,%eax
f011cdfc:	01 d8                	add    %ebx,%eax
f011cdfe:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ce03:	39 c1                	cmp    %eax,%ecx
f011ce05:	74 17                	je     f011ce1e <test_kmalloc_firstfit1+0x7b8>
f011ce07:	83 ec 04             	sub    $0x4,%esp
f011ce0a:	68 08 96 13 f0       	push   $0xf0139608
f011ce0f:	68 1e 03 00 00       	push   $0x31e
f011ce14:	68 ee 91 13 f0       	push   $0xf01391ee
f011ce19:	e8 92 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce1e:	e8 43 78 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ce23:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce26:	74 17                	je     f011ce3f <test_kmalloc_firstfit1+0x7d9>
f011ce28:	83 ec 04             	sub    $0x4,%esp
f011ce2b:	68 08 92 13 f0       	push   $0xf0139208
f011ce30:	68 1f 03 00 00       	push   $0x31f
f011ce35:	68 ee 91 13 f0       	push   $0xf01391ee
f011ce3a:	e8 71 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ce3f:	e8 7c fb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ce44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce47:	29 c2                	sub    %eax,%edx
f011ce49:	89 d0                	mov    %edx,%eax
f011ce4b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ce50:	74 17                	je     f011ce69 <test_kmalloc_firstfit1+0x803>
f011ce52:	83 ec 04             	sub    $0x4,%esp
f011ce55:	68 38 96 13 f0       	push   $0xf0139638
f011ce5a:	68 20 03 00 00       	push   $0x320
f011ce5f:	68 ee 91 13 f0       	push   $0xf01391ee
f011ce64:	e8 47 33 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ce69:	e8 52 fb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ce6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce71:	e8 f0 77 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ce76:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ce79:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ce7f:	83 ec 0c             	sub    $0xc,%esp
f011ce82:	50                   	push   %eax
f011ce83:	e8 d3 b0 fe ff       	call   f0107f5b <kfree>
f011ce88:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce8b:	e8 d6 77 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ce90:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce93:	74 17                	je     f011ceac <test_kmalloc_firstfit1+0x846>
f011ce95:	83 ec 04             	sub    $0x4,%esp
f011ce98:	68 08 92 13 f0       	push   $0xf0139208
f011ce9d:	68 29 03 00 00       	push   $0x329
f011cea2:	68 ee 91 13 f0       	push   $0xf01391ee
f011cea7:	e8 04 33 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ceac:	e8 0f fb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ceb1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ceb4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ceb9:	74 17                	je     f011ced2 <test_kmalloc_firstfit1+0x86c>
f011cebb:	83 ec 04             	sub    $0x4,%esp
f011cebe:	68 4b 96 13 f0       	push   $0xf013964b
f011cec3:	68 2a 03 00 00       	push   $0x32a
f011cec8:	68 ee 91 13 f0       	push   $0xf01391ee
f011cecd:	e8 de 32 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ced2:	e8 e9 fa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ced7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceda:	e8 87 77 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cedf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cee2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cee8:	83 ec 0c             	sub    $0xc,%esp
f011ceeb:	50                   	push   %eax
f011ceec:	e8 6a b0 fe ff       	call   f0107f5b <kfree>
f011cef1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cef4:	e8 6d 77 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cef9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cefc:	74 17                	je     f011cf15 <test_kmalloc_firstfit1+0x8af>
f011cefe:	83 ec 04             	sub    $0x4,%esp
f011cf01:	68 08 92 13 f0       	push   $0xf0139208
f011cf06:	68 30 03 00 00       	push   $0x330
f011cf0b:	68 ee 91 13 f0       	push   $0xf01391ee
f011cf10:	e8 9b 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cf15:	e8 a6 fa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cf1a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf1d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf22:	74 17                	je     f011cf3b <test_kmalloc_firstfit1+0x8d5>
f011cf24:	83 ec 04             	sub    $0x4,%esp
f011cf27:	68 4b 96 13 f0       	push   $0xf013964b
f011cf2c:	68 31 03 00 00       	push   $0x331
f011cf31:	68 ee 91 13 f0       	push   $0xf01391ee
f011cf36:	e8 75 32 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf3b:	e8 80 fa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cf40:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf43:	e8 1e 77 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cf48:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cf4b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf51:	83 ec 0c             	sub    $0xc,%esp
f011cf54:	50                   	push   %eax
f011cf55:	e8 01 b0 fe ff       	call   f0107f5b <kfree>
f011cf5a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf5d:	e8 04 77 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cf62:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf65:	74 17                	je     f011cf7e <test_kmalloc_firstfit1+0x918>
f011cf67:	83 ec 04             	sub    $0x4,%esp
f011cf6a:	68 08 92 13 f0       	push   $0xf0139208
f011cf6f:	68 37 03 00 00       	push   $0x337
f011cf74:	68 ee 91 13 f0       	push   $0xf01391ee
f011cf79:	e8 32 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cf7e:	e8 3d fa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cf83:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf86:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cf8b:	74 17                	je     f011cfa4 <test_kmalloc_firstfit1+0x93e>
f011cf8d:	83 ec 04             	sub    $0x4,%esp
f011cf90:	68 4b 96 13 f0       	push   $0xf013964b
f011cf95:	68 38 03 00 00       	push   $0x338
f011cf9a:	68 ee 91 13 f0       	push   $0xf01391ee
f011cf9f:	e8 0c 32 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cfa4:	e8 17 fa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011cfa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfac:	e8 b5 76 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011cfb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cfb4:	83 ec 0c             	sub    $0xc,%esp
f011cfb7:	68 00 fc 07 00       	push   $0x7fc00
f011cfbc:	e8 80 af fe ff       	call   f0107f41 <kmalloc>
f011cfc1:	83 c4 10             	add    $0x10,%esp
f011cfc4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cfca:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cfd0:	89 c1                	mov    %eax,%ecx
f011cfd2:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cfd9:	10 00 00 
f011cfdc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cfe1:	0f b6 d0             	movzbl %al,%edx
f011cfe4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cfea:	01 d0                	add    %edx,%eax
f011cfec:	48                   	dec    %eax
f011cfed:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cff3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cff9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cffe:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d004:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d00a:	29 d0                	sub    %edx,%eax
f011d00c:	89 c3                	mov    %eax,%ebx
f011d00e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d015:	10 00 00 
f011d018:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d01d:	0f b6 c0             	movzbl %al,%eax
f011d020:	c1 e0 04             	shl    $0x4,%eax
f011d023:	89 c2                	mov    %eax,%edx
f011d025:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d02b:	01 d0                	add    %edx,%eax
f011d02d:	48                   	dec    %eax
f011d02e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d034:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d03a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d03f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d045:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d04b:	29 d0                	sub    %edx,%eax
f011d04d:	01 d8                	add    %ebx,%eax
f011d04f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d054:	39 c1                	cmp    %eax,%ecx
f011d056:	74 17                	je     f011d06f <test_kmalloc_firstfit1+0xa09>
f011d058:	83 ec 04             	sub    $0x4,%esp
f011d05b:	68 08 96 13 f0       	push   $0xf0139608
f011d060:	68 41 03 00 00       	push   $0x341
f011d065:	68 ee 91 13 f0       	push   $0xf01391ee
f011d06a:	e8 41 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d06f:	e8 f2 75 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d074:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d077:	74 17                	je     f011d090 <test_kmalloc_firstfit1+0xa2a>
f011d079:	83 ec 04             	sub    $0x4,%esp
f011d07c:	68 08 92 13 f0       	push   $0xf0139208
f011d081:	68 42 03 00 00       	push   $0x342
f011d086:	68 ee 91 13 f0       	push   $0xf01391ee
f011d08b:	e8 20 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d090:	e8 2b f9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d095:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d098:	29 c2                	sub    %eax,%edx
f011d09a:	89 d0                	mov    %edx,%eax
f011d09c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d0a1:	74 17                	je     f011d0ba <test_kmalloc_firstfit1+0xa54>
f011d0a3:	83 ec 04             	sub    $0x4,%esp
f011d0a6:	68 38 96 13 f0       	push   $0xf0139638
f011d0ab:	68 43 03 00 00       	push   $0x343
f011d0b0:	68 ee 91 13 f0       	push   $0xf01391ee
f011d0b5:	e8 f6 30 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d0ba:	e8 01 f9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d0bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0c2:	e8 9f 75 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d0c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d0ca:	83 ec 0c             	sub    $0xc,%esp
f011d0cd:	68 00 fc 0f 00       	push   $0xffc00
f011d0d2:	e8 6a ae fe ff       	call   f0107f41 <kmalloc>
f011d0d7:	83 c4 10             	add    $0x10,%esp
f011d0da:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d0e0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d0e6:	89 c1                	mov    %eax,%ecx
f011d0e8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d0ef:	10 00 00 
f011d0f2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d0f7:	0f b6 d0             	movzbl %al,%edx
f011d0fa:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d100:	01 d0                	add    %edx,%eax
f011d102:	48                   	dec    %eax
f011d103:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d109:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d10f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d114:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d11a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d120:	29 d0                	sub    %edx,%eax
f011d122:	89 c3                	mov    %eax,%ebx
f011d124:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d12b:	10 00 00 
f011d12e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d133:	0f b6 c0             	movzbl %al,%eax
f011d136:	c1 e0 04             	shl    $0x4,%eax
f011d139:	89 c2                	mov    %eax,%edx
f011d13b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d141:	01 d0                	add    %edx,%eax
f011d143:	48                   	dec    %eax
f011d144:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d14a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d150:	ba 00 00 00 00       	mov    $0x0,%edx
f011d155:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d15b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d161:	29 d0                	sub    %edx,%eax
f011d163:	01 d8                	add    %ebx,%eax
f011d165:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d16a:	39 c1                	cmp    %eax,%ecx
f011d16c:	74 17                	je     f011d185 <test_kmalloc_firstfit1+0xb1f>
f011d16e:	83 ec 04             	sub    $0x4,%esp
f011d171:	68 08 96 13 f0       	push   $0xf0139608
f011d176:	68 49 03 00 00       	push   $0x349
f011d17b:	68 ee 91 13 f0       	push   $0xf01391ee
f011d180:	e8 2b 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d185:	e8 dc 74 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d18a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d18d:	74 17                	je     f011d1a6 <test_kmalloc_firstfit1+0xb40>
f011d18f:	83 ec 04             	sub    $0x4,%esp
f011d192:	68 08 92 13 f0       	push   $0xf0139208
f011d197:	68 4a 03 00 00       	push   $0x34a
f011d19c:	68 ee 91 13 f0       	push   $0xf01391ee
f011d1a1:	e8 0a 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1a6:	e8 15 f8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d1ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1ae:	29 c2                	sub    %eax,%edx
f011d1b0:	89 d0                	mov    %edx,%eax
f011d1b2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1b7:	74 17                	je     f011d1d0 <test_kmalloc_firstfit1+0xb6a>
f011d1b9:	83 ec 04             	sub    $0x4,%esp
f011d1bc:	68 38 96 13 f0       	push   $0xf0139638
f011d1c1:	68 4b 03 00 00       	push   $0x34b
f011d1c6:	68 ee 91 13 f0       	push   $0xf01391ee
f011d1cb:	e8 e0 2f fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d1d0:	e8 eb f7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d1d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1d8:	e8 89 74 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d1dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d1e0:	83 ec 0c             	sub    $0xc,%esp
f011d1e3:	68 00 fc 03 00       	push   $0x3fc00
f011d1e8:	e8 54 ad fe ff       	call   f0107f41 <kmalloc>
f011d1ed:	83 c4 10             	add    $0x10,%esp
f011d1f0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d1f6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d1fc:	89 c1                	mov    %eax,%ecx
f011d1fe:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d205:	10 00 00 
f011d208:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d20d:	0f b6 d0             	movzbl %al,%edx
f011d210:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d216:	01 d0                	add    %edx,%eax
f011d218:	48                   	dec    %eax
f011d219:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d21f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d225:	ba 00 00 00 00       	mov    $0x0,%edx
f011d22a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d230:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d236:	29 d0                	sub    %edx,%eax
f011d238:	89 c3                	mov    %eax,%ebx
f011d23a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d241:	10 00 00 
f011d244:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d249:	0f b6 c0             	movzbl %al,%eax
f011d24c:	c1 e0 04             	shl    $0x4,%eax
f011d24f:	89 c2                	mov    %eax,%edx
f011d251:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d257:	01 d0                	add    %edx,%eax
f011d259:	48                   	dec    %eax
f011d25a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d260:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d266:	ba 00 00 00 00       	mov    $0x0,%edx
f011d26b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d271:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d277:	29 d0                	sub    %edx,%eax
f011d279:	01 d8                	add    %ebx,%eax
f011d27b:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d280:	39 c1                	cmp    %eax,%ecx
f011d282:	74 17                	je     f011d29b <test_kmalloc_firstfit1+0xc35>
f011d284:	83 ec 04             	sub    $0x4,%esp
f011d287:	68 08 96 13 f0       	push   $0xf0139608
f011d28c:	68 52 03 00 00       	push   $0x352
f011d291:	68 ee 91 13 f0       	push   $0xf01391ee
f011d296:	e8 15 2f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d29b:	e8 c6 73 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d2a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2a3:	74 17                	je     f011d2bc <test_kmalloc_firstfit1+0xc56>
f011d2a5:	83 ec 04             	sub    $0x4,%esp
f011d2a8:	68 08 92 13 f0       	push   $0xf0139208
f011d2ad:	68 53 03 00 00       	push   $0x353
f011d2b2:	68 ee 91 13 f0       	push   $0xf01391ee
f011d2b7:	e8 f4 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d2bc:	e8 ff f6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d2c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2c4:	29 c2                	sub    %eax,%edx
f011d2c6:	89 d0                	mov    %edx,%eax
f011d2c8:	83 f8 40             	cmp    $0x40,%eax
f011d2cb:	74 17                	je     f011d2e4 <test_kmalloc_firstfit1+0xc7e>
f011d2cd:	83 ec 04             	sub    $0x4,%esp
f011d2d0:	68 38 96 13 f0       	push   $0xf0139638
f011d2d5:	68 54 03 00 00       	push   $0x354
f011d2da:	68 ee 91 13 f0       	push   $0xf01391ee
f011d2df:	e8 cc 2e fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d2e4:	e8 d7 f6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d2e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2ec:	e8 75 73 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d2f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d2f4:	83 ec 0c             	sub    $0xc,%esp
f011d2f7:	68 00 00 20 00       	push   $0x200000
f011d2fc:	e8 40 ac fe ff       	call   f0107f41 <kmalloc>
f011d301:	83 c4 10             	add    $0x10,%esp
f011d304:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d30a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d310:	89 c1                	mov    %eax,%ecx
f011d312:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d319:	10 00 00 
f011d31c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d321:	0f b6 d0             	movzbl %al,%edx
f011d324:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d32a:	01 d0                	add    %edx,%eax
f011d32c:	48                   	dec    %eax
f011d32d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d333:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d339:	ba 00 00 00 00       	mov    $0x0,%edx
f011d33e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d344:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d34a:	29 d0                	sub    %edx,%eax
f011d34c:	89 c3                	mov    %eax,%ebx
f011d34e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d355:	10 00 00 
f011d358:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d35d:	0f b6 c0             	movzbl %al,%eax
f011d360:	c1 e0 04             	shl    $0x4,%eax
f011d363:	89 c2                	mov    %eax,%edx
f011d365:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d36b:	01 d0                	add    %edx,%eax
f011d36d:	48                   	dec    %eax
f011d36e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d374:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d37a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d37f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d385:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d38b:	29 d0                	sub    %edx,%eax
f011d38d:	01 d8                	add    %ebx,%eax
f011d38f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d394:	39 c1                	cmp    %eax,%ecx
f011d396:	74 17                	je     f011d3af <test_kmalloc_firstfit1+0xd49>
f011d398:	83 ec 04             	sub    $0x4,%esp
f011d39b:	68 08 96 13 f0       	push   $0xf0139608
f011d3a0:	68 5a 03 00 00       	push   $0x35a
f011d3a5:	68 ee 91 13 f0       	push   $0xf01391ee
f011d3aa:	e8 01 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d3af:	e8 0c f6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d3b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3b7:	29 c2                	sub    %eax,%edx
f011d3b9:	89 d0                	mov    %edx,%eax
f011d3bb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d3c0:	74 17                	je     f011d3d9 <test_kmalloc_firstfit1+0xd73>
f011d3c2:	83 ec 04             	sub    $0x4,%esp
f011d3c5:	68 38 96 13 f0       	push   $0xf0139638
f011d3ca:	68 5b 03 00 00       	push   $0x35b
f011d3cf:	68 ee 91 13 f0       	push   $0xf01391ee
f011d3d4:	e8 d7 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3d9:	e8 88 72 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d3de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3e1:	74 17                	je     f011d3fa <test_kmalloc_firstfit1+0xd94>
f011d3e3:	83 ec 04             	sub    $0x4,%esp
f011d3e6:	68 08 92 13 f0       	push   $0xf0139208
f011d3eb:	68 5c 03 00 00       	push   $0x35c
f011d3f0:	68 ee 91 13 f0       	push   $0xf01391ee
f011d3f5:	e8 b6 2d fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d3fa:	e8 c1 f5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d3ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d402:	e8 5f 72 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d407:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d40a:	83 ec 0c             	sub    $0xc,%esp
f011d40d:	68 00 fc 3f 00       	push   $0x3ffc00
f011d412:	e8 2a ab fe ff       	call   f0107f41 <kmalloc>
f011d417:	83 c4 10             	add    $0x10,%esp
f011d41a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d420:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d426:	89 c1                	mov    %eax,%ecx
f011d428:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d42f:	10 00 00 
f011d432:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d437:	0f b6 d0             	movzbl %al,%edx
f011d43a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d440:	01 d0                	add    %edx,%eax
f011d442:	48                   	dec    %eax
f011d443:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d449:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d44f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d454:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d45a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d460:	29 d0                	sub    %edx,%eax
f011d462:	89 c3                	mov    %eax,%ebx
f011d464:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d46b:	10 00 00 
f011d46e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d473:	0f b6 c0             	movzbl %al,%eax
f011d476:	c1 e0 04             	shl    $0x4,%eax
f011d479:	89 c2                	mov    %eax,%edx
f011d47b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d481:	01 d0                	add    %edx,%eax
f011d483:	48                   	dec    %eax
f011d484:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d48a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d490:	ba 00 00 00 00       	mov    $0x0,%edx
f011d495:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d49b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4a1:	29 d0                	sub    %edx,%eax
f011d4a3:	01 d8                	add    %ebx,%eax
f011d4a5:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d4aa:	39 c1                	cmp    %eax,%ecx
f011d4ac:	74 17                	je     f011d4c5 <test_kmalloc_firstfit1+0xe5f>
f011d4ae:	83 ec 04             	sub    $0x4,%esp
f011d4b1:	68 08 96 13 f0       	push   $0xf0139608
f011d4b6:	68 63 03 00 00       	push   $0x363
f011d4bb:	68 ee 91 13 f0       	push   $0xf01391ee
f011d4c0:	e8 eb 2c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4c5:	e8 9c 71 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d4ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4cd:	74 17                	je     f011d4e6 <test_kmalloc_firstfit1+0xe80>
f011d4cf:	83 ec 04             	sub    $0x4,%esp
f011d4d2:	68 08 92 13 f0       	push   $0xf0139208
f011d4d7:	68 64 03 00 00       	push   $0x364
f011d4dc:	68 ee 91 13 f0       	push   $0xf01391ee
f011d4e1:	e8 ca 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d4e6:	e8 d5 f4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d4eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4ee:	29 c2                	sub    %eax,%edx
f011d4f0:	89 d0                	mov    %edx,%eax
f011d4f2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d4f7:	74 17                	je     f011d510 <test_kmalloc_firstfit1+0xeaa>
f011d4f9:	83 ec 04             	sub    $0x4,%esp
f011d4fc:	68 38 96 13 f0       	push   $0xf0139638
f011d501:	68 65 03 00 00       	push   $0x365
f011d506:	68 ee 91 13 f0       	push   $0xf01391ee
f011d50b:	e8 a0 2c fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d510:	e8 ab f4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d515:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d518:	e8 49 71 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d51d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d520:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d526:	83 ec 0c             	sub    $0xc,%esp
f011d529:	50                   	push   %eax
f011d52a:	e8 2c aa fe ff       	call   f0107f5b <kfree>
f011d52f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d532:	e8 2f 71 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d537:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d53a:	74 17                	je     f011d553 <test_kmalloc_firstfit1+0xeed>
f011d53c:	83 ec 04             	sub    $0x4,%esp
f011d53f:	68 08 92 13 f0       	push   $0xf0139208
f011d544:	68 6e 03 00 00       	push   $0x36e
f011d549:	68 ee 91 13 f0       	push   $0xf01391ee
f011d54e:	e8 5d 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d553:	e8 68 f4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d558:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d55b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d560:	74 17                	je     f011d579 <test_kmalloc_firstfit1+0xf13>
f011d562:	83 ec 04             	sub    $0x4,%esp
f011d565:	68 4b 96 13 f0       	push   $0xf013964b
f011d56a:	68 6f 03 00 00       	push   $0x36f
f011d56f:	68 ee 91 13 f0       	push   $0xf01391ee
f011d574:	e8 37 2c fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d579:	e8 42 f4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d57e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d581:	e8 e0 70 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d586:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d589:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d58f:	83 ec 0c             	sub    $0xc,%esp
f011d592:	50                   	push   %eax
f011d593:	e8 c3 a9 fe ff       	call   f0107f5b <kfree>
f011d598:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d59b:	e8 c6 70 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d5a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5a3:	74 17                	je     f011d5bc <test_kmalloc_firstfit1+0xf56>
f011d5a5:	83 ec 04             	sub    $0x4,%esp
f011d5a8:	68 08 92 13 f0       	push   $0xf0139208
f011d5ad:	68 75 03 00 00       	push   $0x375
f011d5b2:	68 ee 91 13 f0       	push   $0xf01391ee
f011d5b7:	e8 f4 2b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d5bc:	e8 ff f3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d5c1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d5c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d5c9:	74 17                	je     f011d5e2 <test_kmalloc_firstfit1+0xf7c>
f011d5cb:	83 ec 04             	sub    $0x4,%esp
f011d5ce:	68 4b 96 13 f0       	push   $0xf013964b
f011d5d3:	68 76 03 00 00       	push   $0x376
f011d5d8:	68 ee 91 13 f0       	push   $0xf01391ee
f011d5dd:	e8 ce 2b fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d5e2:	e8 d9 f3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d5e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5ea:	e8 77 70 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d5ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d5f2:	83 ec 0c             	sub    $0xc,%esp
f011d5f5:	68 00 00 10 00       	push   $0x100000
f011d5fa:	e8 42 a9 fe ff       	call   f0107f41 <kmalloc>
f011d5ff:	83 c4 10             	add    $0x10,%esp
f011d602:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d608:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d60e:	89 c1                	mov    %eax,%ecx
f011d610:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d617:	10 00 00 
f011d61a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d61f:	0f b6 d0             	movzbl %al,%edx
f011d622:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d628:	01 d0                	add    %edx,%eax
f011d62a:	48                   	dec    %eax
f011d62b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d631:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d637:	ba 00 00 00 00       	mov    $0x0,%edx
f011d63c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d642:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d648:	29 d0                	sub    %edx,%eax
f011d64a:	89 c3                	mov    %eax,%ebx
f011d64c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d653:	10 00 00 
f011d656:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d65b:	0f b6 c0             	movzbl %al,%eax
f011d65e:	c1 e0 04             	shl    $0x4,%eax
f011d661:	89 c2                	mov    %eax,%edx
f011d663:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d669:	01 d0                	add    %edx,%eax
f011d66b:	48                   	dec    %eax
f011d66c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d672:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d678:	ba 00 00 00 00       	mov    $0x0,%edx
f011d67d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d683:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d689:	29 d0                	sub    %edx,%eax
f011d68b:	01 d8                	add    %ebx,%eax
f011d68d:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d692:	39 c1                	cmp    %eax,%ecx
f011d694:	74 17                	je     f011d6ad <test_kmalloc_firstfit1+0x1047>
f011d696:	83 ec 04             	sub    $0x4,%esp
f011d699:	68 08 96 13 f0       	push   $0xf0139608
f011d69e:	68 80 03 00 00       	push   $0x380
f011d6a3:	68 ee 91 13 f0       	push   $0xf01391ee
f011d6a8:	e8 03 2b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6ad:	e8 b4 6f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d6b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6b5:	74 17                	je     f011d6ce <test_kmalloc_firstfit1+0x1068>
f011d6b7:	83 ec 04             	sub    $0x4,%esp
f011d6ba:	68 08 92 13 f0       	push   $0xf0139208
f011d6bf:	68 81 03 00 00       	push   $0x381
f011d6c4:	68 ee 91 13 f0       	push   $0xf01391ee
f011d6c9:	e8 e2 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d6ce:	e8 ed f2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d6d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6d6:	29 c2                	sub    %eax,%edx
f011d6d8:	89 d0                	mov    %edx,%eax
f011d6da:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d6df:	74 17                	je     f011d6f8 <test_kmalloc_firstfit1+0x1092>
f011d6e1:	83 ec 04             	sub    $0x4,%esp
f011d6e4:	68 38 96 13 f0       	push   $0xf0139638
f011d6e9:	68 82 03 00 00       	push   $0x382
f011d6ee:	68 ee 91 13 f0       	push   $0xf01391ee
f011d6f3:	e8 b8 2a fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d6f8:	83 ec 0c             	sub    $0xc,%esp
f011d6fb:	68 e4 97 13 f0       	push   $0xf01397e4
f011d700:	e8 2c 37 fe ff       	call   f0100e31 <cprintf>
f011d705:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d708:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d70d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d710:	5b                   	pop    %ebx
f011d711:	5f                   	pop    %edi
f011d712:	5d                   	pop    %ebp
f011d713:	c3                   	ret    

f011d714 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d714:	55                   	push   %ebp
f011d715:	89 e5                	mov    %esp,%ebp
f011d717:	57                   	push   %edi
f011d718:	53                   	push   %ebx
f011d719:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d71f:	83 ec 0c             	sub    $0xc,%esp
f011d722:	68 30 91 13 f0       	push   $0xf0139130
f011d727:	e8 05 37 fe ff       	call   f0100e31 <cprintf>
f011d72c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d72f:	83 ec 0c             	sub    $0xc,%esp
f011d732:	68 60 91 13 f0       	push   $0xf0139160
f011d737:	e8 f5 36 fe ff       	call   f0100e31 <cprintf>
f011d73c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d73f:	83 ec 0c             	sub    $0xc,%esp
f011d742:	68 30 91 13 f0       	push   $0xf0139130
f011d747:	e8 e5 36 fe ff       	call   f0100e31 <cprintf>
f011d74c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d74f:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d755:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d75a:	b8 00 00 00 00       	mov    $0x0,%eax
f011d75f:	89 d7                	mov    %edx,%edi
f011d761:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d763:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d76a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d76f:	0f b6 d0             	movzbl %al,%edx
f011d772:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d775:	01 d0                	add    %edx,%eax
f011d777:	48                   	dec    %eax
f011d778:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d77b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d77e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d783:	f7 75 f4             	divl   -0xc(%ebp)
f011d786:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d789:	29 d0                	sub    %edx,%eax
f011d78b:	89 c1                	mov    %eax,%ecx
f011d78d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d794:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d799:	0f b6 c0             	movzbl %al,%eax
f011d79c:	c1 e0 04             	shl    $0x4,%eax
f011d79f:	89 c2                	mov    %eax,%edx
f011d7a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d7a4:	01 d0                	add    %edx,%eax
f011d7a6:	48                   	dec    %eax
f011d7a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d7aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d7ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7b2:	f7 75 ec             	divl   -0x14(%ebp)
f011d7b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d7b8:	29 d0                	sub    %edx,%eax
f011d7ba:	01 c8                	add    %ecx,%eax
f011d7bc:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d7c1:	29 c2                	sub    %eax,%edx
f011d7c3:	89 d0                	mov    %edx,%eax
f011d7c5:	83 ec 0c             	sub    $0xc,%esp
f011d7c8:	50                   	push   %eax
f011d7c9:	e8 73 a7 fe ff       	call   f0107f41 <kmalloc>
f011d7ce:	83 c4 10             	add    $0x10,%esp
f011d7d1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d7d7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d7dd:	85 c0                	test   %eax,%eax
f011d7df:	74 17                	je     f011d7f8 <test_kmalloc_firstfit2+0xe4>
f011d7e1:	83 ec 04             	sub    $0x4,%esp
f011d7e4:	68 30 98 13 f0       	push   $0xf0139830
f011d7e9:	68 97 03 00 00       	push   $0x397
f011d7ee:	68 ee 91 13 f0       	push   $0xf01391ee
f011d7f3:	e8 b8 29 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d7f8:	e8 c3 f1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d7fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d800:	e8 61 6e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d805:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d808:	83 ec 0c             	sub    $0xc,%esp
f011d80b:	68 00 fc 1f 00       	push   $0x1ffc00
f011d810:	e8 2c a7 fe ff       	call   f0107f41 <kmalloc>
f011d815:	83 c4 10             	add    $0x10,%esp
f011d818:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d81e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d824:	89 c1                	mov    %eax,%ecx
f011d826:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d82d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d832:	0f b6 d0             	movzbl %al,%edx
f011d835:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d838:	01 d0                	add    %edx,%eax
f011d83a:	48                   	dec    %eax
f011d83b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d83e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d841:	ba 00 00 00 00       	mov    $0x0,%edx
f011d846:	f7 75 dc             	divl   -0x24(%ebp)
f011d849:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d84c:	29 d0                	sub    %edx,%eax
f011d84e:	89 c3                	mov    %eax,%ebx
f011d850:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d857:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d85c:	0f b6 c0             	movzbl %al,%eax
f011d85f:	c1 e0 04             	shl    $0x4,%eax
f011d862:	89 c2                	mov    %eax,%edx
f011d864:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d867:	01 d0                	add    %edx,%eax
f011d869:	48                   	dec    %eax
f011d86a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d86d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d870:	ba 00 00 00 00       	mov    $0x0,%edx
f011d875:	f7 75 d4             	divl   -0x2c(%ebp)
f011d878:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d87b:	29 d0                	sub    %edx,%eax
f011d87d:	01 d8                	add    %ebx,%eax
f011d87f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d884:	39 c1                	cmp    %eax,%ecx
f011d886:	74 17                	je     f011d89f <test_kmalloc_firstfit2+0x18b>
f011d888:	83 ec 04             	sub    $0x4,%esp
f011d88b:	68 08 96 13 f0       	push   $0xf0139608
f011d890:	68 a1 03 00 00       	push   $0x3a1
f011d895:	68 ee 91 13 f0       	push   $0xf01391ee
f011d89a:	e8 11 29 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d89f:	e8 c2 6d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d8a4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d8a7:	74 17                	je     f011d8c0 <test_kmalloc_firstfit2+0x1ac>
f011d8a9:	83 ec 04             	sub    $0x4,%esp
f011d8ac:	68 08 92 13 f0       	push   $0xf0139208
f011d8b1:	68 a2 03 00 00       	push   $0x3a2
f011d8b6:	68 ee 91 13 f0       	push   $0xf01391ee
f011d8bb:	e8 f0 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d8c0:	e8 fb f0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d8c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d8c8:	29 c2                	sub    %eax,%edx
f011d8ca:	89 d0                	mov    %edx,%eax
f011d8cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d8d1:	74 17                	je     f011d8ea <test_kmalloc_firstfit2+0x1d6>
f011d8d3:	83 ec 04             	sub    $0x4,%esp
f011d8d6:	68 38 96 13 f0       	push   $0xf0139638
f011d8db:	68 a3 03 00 00       	push   $0x3a3
f011d8e0:	68 ee 91 13 f0       	push   $0xf01391ee
f011d8e5:	e8 c6 28 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d8ea:	e8 d1 f0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d8ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8f2:	e8 6f 6d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d8f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d8fa:	83 ec 0c             	sub    $0xc,%esp
f011d8fd:	68 00 fc 1f 00       	push   $0x1ffc00
f011d902:	e8 3a a6 fe ff       	call   f0107f41 <kmalloc>
f011d907:	83 c4 10             	add    $0x10,%esp
f011d90a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d910:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d916:	89 c1                	mov    %eax,%ecx
f011d918:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d91f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d924:	0f b6 d0             	movzbl %al,%edx
f011d927:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d92a:	01 d0                	add    %edx,%eax
f011d92c:	48                   	dec    %eax
f011d92d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d930:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d933:	ba 00 00 00 00       	mov    $0x0,%edx
f011d938:	f7 75 cc             	divl   -0x34(%ebp)
f011d93b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d93e:	29 d0                	sub    %edx,%eax
f011d940:	89 c3                	mov    %eax,%ebx
f011d942:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d949:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d94e:	0f b6 c0             	movzbl %al,%eax
f011d951:	c1 e0 04             	shl    $0x4,%eax
f011d954:	89 c2                	mov    %eax,%edx
f011d956:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d959:	01 d0                	add    %edx,%eax
f011d95b:	48                   	dec    %eax
f011d95c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d95f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d962:	ba 00 00 00 00       	mov    $0x0,%edx
f011d967:	f7 75 c4             	divl   -0x3c(%ebp)
f011d96a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d96d:	29 d0                	sub    %edx,%eax
f011d96f:	01 d8                	add    %ebx,%eax
f011d971:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d976:	39 c1                	cmp    %eax,%ecx
f011d978:	74 17                	je     f011d991 <test_kmalloc_firstfit2+0x27d>
f011d97a:	83 ec 04             	sub    $0x4,%esp
f011d97d:	68 08 96 13 f0       	push   $0xf0139608
f011d982:	68 a9 03 00 00       	push   $0x3a9
f011d987:	68 ee 91 13 f0       	push   $0xf01391ee
f011d98c:	e8 1f 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d991:	e8 d0 6c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d996:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d999:	74 17                	je     f011d9b2 <test_kmalloc_firstfit2+0x29e>
f011d99b:	83 ec 04             	sub    $0x4,%esp
f011d99e:	68 08 92 13 f0       	push   $0xf0139208
f011d9a3:	68 aa 03 00 00       	push   $0x3aa
f011d9a8:	68 ee 91 13 f0       	push   $0xf01391ee
f011d9ad:	e8 fe 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d9b2:	e8 09 f0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d9b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d9ba:	29 c2                	sub    %eax,%edx
f011d9bc:	89 d0                	mov    %edx,%eax
f011d9be:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d9c3:	74 17                	je     f011d9dc <test_kmalloc_firstfit2+0x2c8>
f011d9c5:	83 ec 04             	sub    $0x4,%esp
f011d9c8:	68 38 96 13 f0       	push   $0xf0139638
f011d9cd:	68 ab 03 00 00       	push   $0x3ab
f011d9d2:	68 ee 91 13 f0       	push   $0xf01391ee
f011d9d7:	e8 d4 27 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d9dc:	e8 df ef fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011d9e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9e4:	e8 7d 6c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011d9e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d9ec:	83 ec 0c             	sub    $0xc,%esp
f011d9ef:	68 00 08 00 00       	push   $0x800
f011d9f4:	e8 48 a5 fe ff       	call   f0107f41 <kmalloc>
f011d9f9:	83 c4 10             	add    $0x10,%esp
f011d9fc:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011da02:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011da08:	89 c1                	mov    %eax,%ecx
f011da0a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011da11:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011da16:	0f b6 d0             	movzbl %al,%edx
f011da19:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011da1c:	01 d0                	add    %edx,%eax
f011da1e:	48                   	dec    %eax
f011da1f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011da22:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da25:	ba 00 00 00 00       	mov    $0x0,%edx
f011da2a:	f7 75 bc             	divl   -0x44(%ebp)
f011da2d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da30:	29 d0                	sub    %edx,%eax
f011da32:	89 c3                	mov    %eax,%ebx
f011da34:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011da3b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011da40:	0f b6 c0             	movzbl %al,%eax
f011da43:	c1 e0 04             	shl    $0x4,%eax
f011da46:	89 c2                	mov    %eax,%edx
f011da48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011da4b:	01 d0                	add    %edx,%eax
f011da4d:	48                   	dec    %eax
f011da4e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011da51:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da54:	ba 00 00 00 00       	mov    $0x0,%edx
f011da59:	f7 75 b4             	divl   -0x4c(%ebp)
f011da5c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da5f:	29 d0                	sub    %edx,%eax
f011da61:	01 d8                	add    %ebx,%eax
f011da63:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011da68:	39 c1                	cmp    %eax,%ecx
f011da6a:	73 17                	jae    f011da83 <test_kmalloc_firstfit2+0x36f>
f011da6c:	83 ec 04             	sub    $0x4,%esp
f011da6f:	68 08 96 13 f0       	push   $0xf0139608
f011da74:	68 b1 03 00 00       	push   $0x3b1
f011da79:	68 ee 91 13 f0       	push   $0xf01391ee
f011da7e:	e8 2d 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da83:	e8 de 6b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011da88:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011da8b:	74 17                	je     f011daa4 <test_kmalloc_firstfit2+0x390>
f011da8d:	83 ec 04             	sub    $0x4,%esp
f011da90:	68 08 92 13 f0       	push   $0xf0139208
f011da95:	68 b2 03 00 00       	push   $0x3b2
f011da9a:	68 ee 91 13 f0       	push   $0xf01391ee
f011da9f:	e8 0c 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011daa4:	e8 17 ef fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011daa9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011daac:	29 c2                	sub    %eax,%edx
f011daae:	89 d0                	mov    %edx,%eax
f011dab0:	83 f8 01             	cmp    $0x1,%eax
f011dab3:	74 17                	je     f011dacc <test_kmalloc_firstfit2+0x3b8>
f011dab5:	83 ec 04             	sub    $0x4,%esp
f011dab8:	68 38 96 13 f0       	push   $0xf0139638
f011dabd:	68 b3 03 00 00       	push   $0x3b3
f011dac2:	68 ee 91 13 f0       	push   $0xf01391ee
f011dac7:	e8 e4 26 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dacc:	e8 ef ee fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dad1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dad4:	e8 8d 6b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dad9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dadc:	83 ec 0c             	sub    $0xc,%esp
f011dadf:	68 00 08 00 00       	push   $0x800
f011dae4:	e8 58 a4 fe ff       	call   f0107f41 <kmalloc>
f011dae9:	83 c4 10             	add    $0x10,%esp
f011daec:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011daf2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011daf8:	89 c1                	mov    %eax,%ecx
f011dafa:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011db01:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011db06:	0f b6 d0             	movzbl %al,%edx
f011db09:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011db0c:	01 d0                	add    %edx,%eax
f011db0e:	48                   	dec    %eax
f011db0f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011db12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011db15:	ba 00 00 00 00       	mov    $0x0,%edx
f011db1a:	f7 75 ac             	divl   -0x54(%ebp)
f011db1d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011db20:	29 d0                	sub    %edx,%eax
f011db22:	89 c3                	mov    %eax,%ebx
f011db24:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011db2b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011db30:	0f b6 c0             	movzbl %al,%eax
f011db33:	c1 e0 04             	shl    $0x4,%eax
f011db36:	89 c2                	mov    %eax,%edx
f011db38:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011db3b:	01 d0                	add    %edx,%eax
f011db3d:	48                   	dec    %eax
f011db3e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011db41:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db44:	ba 00 00 00 00       	mov    $0x0,%edx
f011db49:	f7 75 a4             	divl   -0x5c(%ebp)
f011db4c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db4f:	29 d0                	sub    %edx,%eax
f011db51:	01 d8                	add    %ebx,%eax
f011db53:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011db58:	39 c1                	cmp    %eax,%ecx
f011db5a:	74 17                	je     f011db73 <test_kmalloc_firstfit2+0x45f>
f011db5c:	83 ec 04             	sub    $0x4,%esp
f011db5f:	68 08 96 13 f0       	push   $0xf0139608
f011db64:	68 b9 03 00 00       	push   $0x3b9
f011db69:	68 ee 91 13 f0       	push   $0xf01391ee
f011db6e:	e8 3d 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db73:	e8 ee 6a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011db78:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011db7b:	74 17                	je     f011db94 <test_kmalloc_firstfit2+0x480>
f011db7d:	83 ec 04             	sub    $0x4,%esp
f011db80:	68 08 92 13 f0       	push   $0xf0139208
f011db85:	68 ba 03 00 00       	push   $0x3ba
f011db8a:	68 ee 91 13 f0       	push   $0xf01391ee
f011db8f:	e8 1c 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011db94:	e8 27 ee fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011db99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011db9c:	29 c2                	sub    %eax,%edx
f011db9e:	89 d0                	mov    %edx,%eax
f011dba0:	83 f8 01             	cmp    $0x1,%eax
f011dba3:	74 17                	je     f011dbbc <test_kmalloc_firstfit2+0x4a8>
f011dba5:	83 ec 04             	sub    $0x4,%esp
f011dba8:	68 38 96 13 f0       	push   $0xf0139638
f011dbad:	68 bb 03 00 00       	push   $0x3bb
f011dbb2:	68 ee 91 13 f0       	push   $0xf01391ee
f011dbb7:	e8 f4 25 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dbbc:	e8 ff ed fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dbc1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbc4:	e8 9d 6a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dbc9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011dbcc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dbd2:	83 ec 0c             	sub    $0xc,%esp
f011dbd5:	50                   	push   %eax
f011dbd6:	e8 80 a3 fe ff       	call   f0107f5b <kfree>
f011dbdb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbde:	e8 83 6a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dbe3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dbe6:	74 17                	je     f011dbff <test_kmalloc_firstfit2+0x4eb>
f011dbe8:	83 ec 04             	sub    $0x4,%esp
f011dbeb:	68 08 92 13 f0       	push   $0xf0139208
f011dbf0:	68 c1 03 00 00       	push   $0x3c1
f011dbf5:	68 ee 91 13 f0       	push   $0xf01391ee
f011dbfa:	e8 b1 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011dbff:	e8 bc ed fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dc04:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dc07:	83 f8 01             	cmp    $0x1,%eax
f011dc0a:	74 17                	je     f011dc23 <test_kmalloc_firstfit2+0x50f>
f011dc0c:	83 ec 04             	sub    $0x4,%esp
f011dc0f:	68 4b 96 13 f0       	push   $0xf013964b
f011dc14:	68 c2 03 00 00       	push   $0x3c2
f011dc19:	68 ee 91 13 f0       	push   $0xf01391ee
f011dc1e:	e8 8d 25 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc23:	e8 98 ed fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dc28:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc2b:	e8 36 6a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dc30:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011dc33:	83 ec 0c             	sub    $0xc,%esp
f011dc36:	68 00 1c 00 00       	push   $0x1c00
f011dc3b:	e8 01 a3 fe ff       	call   f0107f41 <kmalloc>
f011dc40:	83 c4 10             	add    $0x10,%esp
f011dc43:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011dc49:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dc4f:	89 c1                	mov    %eax,%ecx
f011dc51:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dc58:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dc5d:	0f b6 d0             	movzbl %al,%edx
f011dc60:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dc63:	01 d0                	add    %edx,%eax
f011dc65:	48                   	dec    %eax
f011dc66:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dc69:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc71:	f7 75 9c             	divl   -0x64(%ebp)
f011dc74:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc77:	29 d0                	sub    %edx,%eax
f011dc79:	89 c3                	mov    %eax,%ebx
f011dc7b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dc82:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dc87:	0f b6 c0             	movzbl %al,%eax
f011dc8a:	c1 e0 04             	shl    $0x4,%eax
f011dc8d:	89 c2                	mov    %eax,%edx
f011dc8f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dc92:	01 d0                	add    %edx,%eax
f011dc94:	48                   	dec    %eax
f011dc95:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dc98:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dc9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dca0:	f7 75 94             	divl   -0x6c(%ebp)
f011dca3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dca6:	29 d0                	sub    %edx,%eax
f011dca8:	01 d8                	add    %ebx,%eax
f011dcaa:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dcaf:	39 c1                	cmp    %eax,%ecx
f011dcb1:	74 17                	je     f011dcca <test_kmalloc_firstfit2+0x5b6>
f011dcb3:	83 ec 04             	sub    $0x4,%esp
f011dcb6:	68 08 96 13 f0       	push   $0xf0139608
f011dcbb:	68 c8 03 00 00       	push   $0x3c8
f011dcc0:	68 ee 91 13 f0       	push   $0xf01391ee
f011dcc5:	e8 e6 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcca:	e8 97 69 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dccf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dcd2:	74 17                	je     f011dceb <test_kmalloc_firstfit2+0x5d7>
f011dcd4:	83 ec 04             	sub    $0x4,%esp
f011dcd7:	68 08 92 13 f0       	push   $0xf0139208
f011dcdc:	68 c9 03 00 00       	push   $0x3c9
f011dce1:	68 ee 91 13 f0       	push   $0xf01391ee
f011dce6:	e8 c5 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011dceb:	e8 d0 ec fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dcf0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dcf3:	29 c2                	sub    %eax,%edx
f011dcf5:	89 d0                	mov    %edx,%eax
f011dcf7:	83 f8 02             	cmp    $0x2,%eax
f011dcfa:	74 17                	je     f011dd13 <test_kmalloc_firstfit2+0x5ff>
f011dcfc:	83 ec 04             	sub    $0x4,%esp
f011dcff:	68 38 96 13 f0       	push   $0xf0139638
f011dd04:	68 ca 03 00 00       	push   $0x3ca
f011dd09:	68 ee 91 13 f0       	push   $0xf01391ee
f011dd0e:	e8 9d 24 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dd13:	e8 a8 ec fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dd18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd1b:	e8 46 69 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dd20:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011dd23:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dd29:	83 ec 0c             	sub    $0xc,%esp
f011dd2c:	50                   	push   %eax
f011dd2d:	e8 29 a2 fe ff       	call   f0107f5b <kfree>
f011dd32:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd35:	e8 2c 69 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dd3a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd3d:	74 17                	je     f011dd56 <test_kmalloc_firstfit2+0x642>
f011dd3f:	83 ec 04             	sub    $0x4,%esp
f011dd42:	68 08 92 13 f0       	push   $0xf0139208
f011dd47:	68 d0 03 00 00       	push   $0x3d0
f011dd4c:	68 ee 91 13 f0       	push   $0xf01391ee
f011dd51:	e8 5a 24 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dd56:	e8 65 ec fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dd5b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dd5e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd63:	74 17                	je     f011dd7c <test_kmalloc_firstfit2+0x668>
f011dd65:	83 ec 04             	sub    $0x4,%esp
f011dd68:	68 4b 96 13 f0       	push   $0xf013964b
f011dd6d:	68 d1 03 00 00       	push   $0x3d1
f011dd72:	68 ee 91 13 f0       	push   $0xf01391ee
f011dd77:	e8 34 24 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dd7c:	e8 3f ec fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dd81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd84:	e8 dd 68 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dd89:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011dd8c:	83 ec 0c             	sub    $0xc,%esp
f011dd8f:	68 00 fc 2f 00       	push   $0x2ffc00
f011dd94:	e8 a8 a1 fe ff       	call   f0107f41 <kmalloc>
f011dd99:	83 c4 10             	add    $0x10,%esp
f011dd9c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dda2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dda8:	89 c1                	mov    %eax,%ecx
f011ddaa:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ddb1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ddb6:	0f b6 d0             	movzbl %al,%edx
f011ddb9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ddbc:	01 d0                	add    %edx,%eax
f011ddbe:	48                   	dec    %eax
f011ddbf:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ddc2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ddc5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddca:	f7 75 8c             	divl   -0x74(%ebp)
f011ddcd:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ddd0:	29 d0                	sub    %edx,%eax
f011ddd2:	89 c3                	mov    %eax,%ebx
f011ddd4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011dddb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dde0:	0f b6 c0             	movzbl %al,%eax
f011dde3:	c1 e0 04             	shl    $0x4,%eax
f011dde6:	89 c2                	mov    %eax,%edx
f011dde8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ddeb:	01 d0                	add    %edx,%eax
f011dded:	48                   	dec    %eax
f011ddee:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ddf1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ddf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddf9:	f7 75 84             	divl   -0x7c(%ebp)
f011ddfc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ddff:	29 d0                	sub    %edx,%eax
f011de01:	01 d8                	add    %ebx,%eax
f011de03:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011de08:	39 c1                	cmp    %eax,%ecx
f011de0a:	74 17                	je     f011de23 <test_kmalloc_firstfit2+0x70f>
f011de0c:	83 ec 04             	sub    $0x4,%esp
f011de0f:	68 08 96 13 f0       	push   $0xf0139608
f011de14:	68 d7 03 00 00       	push   $0x3d7
f011de19:	68 ee 91 13 f0       	push   $0xf01391ee
f011de1e:	e8 8d 23 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de23:	e8 3e 68 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011de28:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011de2b:	74 17                	je     f011de44 <test_kmalloc_firstfit2+0x730>
f011de2d:	83 ec 04             	sub    $0x4,%esp
f011de30:	68 08 92 13 f0       	push   $0xf0139208
f011de35:	68 d8 03 00 00       	push   $0x3d8
f011de3a:	68 ee 91 13 f0       	push   $0xf01391ee
f011de3f:	e8 6c 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011de44:	e8 77 eb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011de49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011de4c:	29 c2                	sub    %eax,%edx
f011de4e:	89 d0                	mov    %edx,%eax
f011de50:	3d 00 03 00 00       	cmp    $0x300,%eax
f011de55:	74 17                	je     f011de6e <test_kmalloc_firstfit2+0x75a>
f011de57:	83 ec 04             	sub    $0x4,%esp
f011de5a:	68 38 96 13 f0       	push   $0xf0139638
f011de5f:	68 d9 03 00 00       	push   $0x3d9
f011de64:	68 ee 91 13 f0       	push   $0xf01391ee
f011de69:	e8 42 23 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011de6e:	e8 4d eb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011de73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de76:	e8 eb 67 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011de7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011de7e:	83 ec 0c             	sub    $0xc,%esp
f011de81:	68 00 18 20 00       	push   $0x201800
f011de86:	e8 b6 a0 fe ff       	call   f0107f41 <kmalloc>
f011de8b:	83 c4 10             	add    $0x10,%esp
f011de8e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011de94:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011de9a:	89 c1                	mov    %eax,%ecx
f011de9c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011dea3:	10 00 00 
f011dea6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011deab:	0f b6 d0             	movzbl %al,%edx
f011deae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011deb4:	01 d0                	add    %edx,%eax
f011deb6:	48                   	dec    %eax
f011deb7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011debd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dec3:	ba 00 00 00 00       	mov    $0x0,%edx
f011dec8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011dece:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ded4:	29 d0                	sub    %edx,%eax
f011ded6:	89 c3                	mov    %eax,%ebx
f011ded8:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011dedf:	10 00 00 
f011dee2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dee7:	0f b6 c0             	movzbl %al,%eax
f011deea:	c1 e0 04             	shl    $0x4,%eax
f011deed:	89 c2                	mov    %eax,%edx
f011deef:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011def5:	01 d0                	add    %edx,%eax
f011def7:	48                   	dec    %eax
f011def8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011defe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df04:	ba 00 00 00 00       	mov    $0x0,%edx
f011df09:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011df0f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df15:	29 d0                	sub    %edx,%eax
f011df17:	01 d8                	add    %ebx,%eax
f011df19:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011df1e:	39 c1                	cmp    %eax,%ecx
f011df20:	74 17                	je     f011df39 <test_kmalloc_firstfit2+0x825>
f011df22:	83 ec 04             	sub    $0x4,%esp
f011df25:	68 08 96 13 f0       	push   $0xf0139608
f011df2a:	68 df 03 00 00       	push   $0x3df
f011df2f:	68 ee 91 13 f0       	push   $0xf01391ee
f011df34:	e8 77 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df39:	e8 28 67 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011df3e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df41:	74 17                	je     f011df5a <test_kmalloc_firstfit2+0x846>
f011df43:	83 ec 04             	sub    $0x4,%esp
f011df46:	68 08 92 13 f0       	push   $0xf0139208
f011df4b:	68 e0 03 00 00       	push   $0x3e0
f011df50:	68 ee 91 13 f0       	push   $0xf01391ee
f011df55:	e8 56 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011df5a:	e8 61 ea fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011df5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011df62:	29 c2                	sub    %eax,%edx
f011df64:	89 d0                	mov    %edx,%eax
f011df66:	3d 02 02 00 00       	cmp    $0x202,%eax
f011df6b:	74 17                	je     f011df84 <test_kmalloc_firstfit2+0x870>
f011df6d:	83 ec 04             	sub    $0x4,%esp
f011df70:	68 38 96 13 f0       	push   $0xf0139638
f011df75:	68 e1 03 00 00       	push   $0x3e1
f011df7a:	68 ee 91 13 f0       	push   $0xf01391ee
f011df7f:	e8 2c 22 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011df84:	e8 37 ea fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011df89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df8c:	e8 d5 66 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011df91:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011df94:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011df9a:	83 ec 0c             	sub    $0xc,%esp
f011df9d:	50                   	push   %eax
f011df9e:	e8 b8 9f fe ff       	call   f0107f5b <kfree>
f011dfa3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfa6:	e8 bb 66 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dfab:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dfae:	74 17                	je     f011dfc7 <test_kmalloc_firstfit2+0x8b3>
f011dfb0:	83 ec 04             	sub    $0x4,%esp
f011dfb3:	68 08 92 13 f0       	push   $0xf0139208
f011dfb8:	68 e7 03 00 00       	push   $0x3e7
f011dfbd:	68 ee 91 13 f0       	push   $0xf01391ee
f011dfc2:	e8 e9 21 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dfc7:	e8 f4 e9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dfcc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dfcf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dfd4:	74 17                	je     f011dfed <test_kmalloc_firstfit2+0x8d9>
f011dfd6:	83 ec 04             	sub    $0x4,%esp
f011dfd9:	68 4b 96 13 f0       	push   $0xf013964b
f011dfde:	68 e8 03 00 00       	push   $0x3e8
f011dfe3:	68 ee 91 13 f0       	push   $0xf01391ee
f011dfe8:	e8 c3 21 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dfed:	e8 ce e9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011dff2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dff5:	e8 6c 66 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011dffa:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011dffd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e003:	83 ec 0c             	sub    $0xc,%esp
f011e006:	50                   	push   %eax
f011e007:	e8 4f 9f fe ff       	call   f0107f5b <kfree>
f011e00c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e00f:	e8 ac e9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e014:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e017:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e01c:	74 17                	je     f011e035 <test_kmalloc_firstfit2+0x921>
f011e01e:	83 ec 04             	sub    $0x4,%esp
f011e021:	68 4b 96 13 f0       	push   $0xf013964b
f011e026:	68 ee 03 00 00       	push   $0x3ee
f011e02b:	68 ee 91 13 f0       	push   $0xf01391ee
f011e030:	e8 7b 21 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e035:	e8 2c 66 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e03a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e03d:	74 17                	je     f011e056 <test_kmalloc_firstfit2+0x942>
f011e03f:	83 ec 04             	sub    $0x4,%esp
f011e042:	68 08 92 13 f0       	push   $0xf0139208
f011e047:	68 ef 03 00 00       	push   $0x3ef
f011e04c:	68 ee 91 13 f0       	push   $0xf01391ee
f011e051:	e8 5a 21 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e056:	e8 65 e9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e05b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e05e:	e8 03 66 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e063:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e066:	83 ec 0c             	sub    $0xc,%esp
f011e069:	68 00 fc 4f 00       	push   $0x4ffc00
f011e06e:	e8 ce 9e fe ff       	call   f0107f41 <kmalloc>
f011e073:	83 c4 10             	add    $0x10,%esp
f011e076:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e07c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e082:	89 c1                	mov    %eax,%ecx
f011e084:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e08b:	10 00 00 
f011e08e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e093:	0f b6 d0             	movzbl %al,%edx
f011e096:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e09c:	01 d0                	add    %edx,%eax
f011e09e:	48                   	dec    %eax
f011e09f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e0a5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e0ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0b0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e0b6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e0bc:	29 d0                	sub    %edx,%eax
f011e0be:	89 c3                	mov    %eax,%ebx
f011e0c0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e0c7:	10 00 00 
f011e0ca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e0cf:	0f b6 c0             	movzbl %al,%eax
f011e0d2:	c1 e0 04             	shl    $0x4,%eax
f011e0d5:	89 c2                	mov    %eax,%edx
f011e0d7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e0dd:	01 d0                	add    %edx,%eax
f011e0df:	48                   	dec    %eax
f011e0e0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e0e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e0ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0f1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e0f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e0fd:	29 d0                	sub    %edx,%eax
f011e0ff:	01 d8                	add    %ebx,%eax
f011e101:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e106:	39 c1                	cmp    %eax,%ecx
f011e108:	74 17                	je     f011e121 <test_kmalloc_firstfit2+0xa0d>
f011e10a:	83 ec 04             	sub    $0x4,%esp
f011e10d:	68 08 96 13 f0       	push   $0xf0139608
f011e112:	68 f5 03 00 00       	push   $0x3f5
f011e117:	68 ee 91 13 f0       	push   $0xf01391ee
f011e11c:	e8 8f 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e121:	e8 40 65 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e126:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e129:	74 17                	je     f011e142 <test_kmalloc_firstfit2+0xa2e>
f011e12b:	83 ec 04             	sub    $0x4,%esp
f011e12e:	68 08 92 13 f0       	push   $0xf0139208
f011e133:	68 f6 03 00 00       	push   $0x3f6
f011e138:	68 ee 91 13 f0       	push   $0xf01391ee
f011e13d:	e8 6e 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e142:	e8 79 e8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e147:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e14a:	29 c2                	sub    %eax,%edx
f011e14c:	89 d0                	mov    %edx,%eax
f011e14e:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e153:	74 17                	je     f011e16c <test_kmalloc_firstfit2+0xa58>
f011e155:	83 ec 04             	sub    $0x4,%esp
f011e158:	68 38 96 13 f0       	push   $0xf0139638
f011e15d:	68 f7 03 00 00       	push   $0x3f7
f011e162:	68 ee 91 13 f0       	push   $0xf01391ee
f011e167:	e8 44 20 fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e16c:	e8 4f e8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e171:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e174:	e8 ed 64 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e179:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e17c:	83 ec 0c             	sub    $0xc,%esp
f011e17f:	68 00 fc 2f 00       	push   $0x2ffc00
f011e184:	e8 b8 9d fe ff       	call   f0107f41 <kmalloc>
f011e189:	83 c4 10             	add    $0x10,%esp
f011e18c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e192:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e198:	89 c1                	mov    %eax,%ecx
f011e19a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e1a1:	10 00 00 
f011e1a4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e1a9:	0f b6 d0             	movzbl %al,%edx
f011e1ac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e1b2:	01 d0                	add    %edx,%eax
f011e1b4:	48                   	dec    %eax
f011e1b5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e1bb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e1c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1c6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e1cc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e1d2:	29 d0                	sub    %edx,%eax
f011e1d4:	89 c3                	mov    %eax,%ebx
f011e1d6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e1dd:	10 00 00 
f011e1e0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e1e5:	0f b6 c0             	movzbl %al,%eax
f011e1e8:	c1 e0 04             	shl    $0x4,%eax
f011e1eb:	89 c2                	mov    %eax,%edx
f011e1ed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e1f3:	01 d0                	add    %edx,%eax
f011e1f5:	48                   	dec    %eax
f011e1f6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e1fc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e202:	ba 00 00 00 00       	mov    $0x0,%edx
f011e207:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e20d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e213:	29 d0                	sub    %edx,%eax
f011e215:	01 d8                	add    %ebx,%eax
f011e217:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e21c:	39 c1                	cmp    %eax,%ecx
f011e21e:	74 17                	je     f011e237 <test_kmalloc_firstfit2+0xb23>
f011e220:	83 ec 04             	sub    $0x4,%esp
f011e223:	68 08 96 13 f0       	push   $0xf0139608
f011e228:	68 05 04 00 00       	push   $0x405
f011e22d:	68 ee 91 13 f0       	push   $0xf01391ee
f011e232:	e8 79 1f fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e237:	e8 2a 64 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e23c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e23f:	74 17                	je     f011e258 <test_kmalloc_firstfit2+0xb44>
f011e241:	83 ec 04             	sub    $0x4,%esp
f011e244:	68 08 92 13 f0       	push   $0xf0139208
f011e249:	68 06 04 00 00       	push   $0x406
f011e24e:	68 ee 91 13 f0       	push   $0xf01391ee
f011e253:	e8 58 1f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e258:	e8 63 e7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e25d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e260:	29 c2                	sub    %eax,%edx
f011e262:	89 d0                	mov    %edx,%eax
f011e264:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e269:	74 17                	je     f011e282 <test_kmalloc_firstfit2+0xb6e>
f011e26b:	83 ec 04             	sub    $0x4,%esp
f011e26e:	68 38 96 13 f0       	push   $0xf0139638
f011e273:	68 07 04 00 00       	push   $0x407
f011e278:	68 ee 91 13 f0       	push   $0xf01391ee
f011e27d:	e8 2e 1f fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e282:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e289:	10 00 00 
f011e28c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e291:	0f b6 d0             	movzbl %al,%edx
f011e294:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e29a:	01 d0                	add    %edx,%eax
f011e29c:	48                   	dec    %eax
f011e29d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e2a3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e2a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2ae:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e2b4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e2ba:	29 d0                	sub    %edx,%eax
f011e2bc:	89 c1                	mov    %eax,%ecx
f011e2be:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e2c5:	10 00 00 
f011e2c8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e2cd:	0f b6 c0             	movzbl %al,%eax
f011e2d0:	c1 e0 04             	shl    $0x4,%eax
f011e2d3:	89 c2                	mov    %eax,%edx
f011e2d5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e2db:	01 d0                	add    %edx,%eax
f011e2dd:	48                   	dec    %eax
f011e2de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e2e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e2ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2ef:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e2f5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e2fb:	29 d0                	sub    %edx,%eax
f011e2fd:	01 c8                	add    %ecx,%eax
f011e2ff:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e304:	29 c2                	sub    %eax,%edx
f011e306:	89 d0                	mov    %edx,%eax
f011e308:	83 ec 0c             	sub    $0xc,%esp
f011e30b:	50                   	push   %eax
f011e30c:	e8 30 9c fe ff       	call   f0107f41 <kmalloc>
f011e311:	83 c4 10             	add    $0x10,%esp
f011e314:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e31a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e320:	85 c0                	test   %eax,%eax
f011e322:	74 17                	je     f011e33b <test_kmalloc_firstfit2+0xc27>
f011e324:	83 ec 04             	sub    $0x4,%esp
f011e327:	68 38 97 13 f0       	push   $0xf0139738
f011e32c:	68 0d 04 00 00       	push   $0x40d
f011e331:	68 ee 91 13 f0       	push   $0xf01391ee
f011e336:	e8 75 1e fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e33b:	83 ec 0c             	sub    $0xc,%esp
f011e33e:	68 78 98 13 f0       	push   $0xf0139878
f011e343:	e8 e9 2a fe ff       	call   f0100e31 <cprintf>
f011e348:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e34b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e350:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e353:	5b                   	pop    %ebx
f011e354:	5f                   	pop    %edi
f011e355:	5d                   	pop    %ebp
f011e356:	c3                   	ret    

f011e357 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e357:	55                   	push   %ebp
f011e358:	89 e5                	mov    %esp,%ebp
f011e35a:	57                   	push   %edi
f011e35b:	53                   	push   %ebx
f011e35c:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e362:	83 ec 0c             	sub    $0xc,%esp
f011e365:	68 30 91 13 f0       	push   $0xf0139130
f011e36a:	e8 c2 2a fe ff       	call   f0100e31 <cprintf>
f011e36f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e372:	83 ec 0c             	sub    $0xc,%esp
f011e375:	68 60 91 13 f0       	push   $0xf0139160
f011e37a:	e8 b2 2a fe ff       	call   f0100e31 <cprintf>
f011e37f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e382:	83 ec 0c             	sub    $0xc,%esp
f011e385:	68 30 91 13 f0       	push   $0xf0139130
f011e38a:	e8 a2 2a fe ff       	call   f0100e31 <cprintf>
f011e38f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e392:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e398:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e39d:	b8 00 00 00 00       	mov    $0x0,%eax
f011e3a2:	89 d7                	mov    %edx,%edi
f011e3a4:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e3a6:	e8 15 e6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e3ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e3ae:	e8 b3 62 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e3b3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e3b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e3bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e3c4:	eb 1f                	jmp    f011e3e5 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e3c6:	83 ec 0c             	sub    $0xc,%esp
f011e3c9:	68 00 00 20 00       	push   $0x200000
f011e3ce:	e8 6e 9b fe ff       	call   f0107f41 <kmalloc>
f011e3d3:	83 c4 10             	add    $0x10,%esp
f011e3d6:	89 c2                	mov    %eax,%edx
f011e3d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e3db:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e3e2:	ff 45 f4             	incl   -0xc(%ebp)
f011e3e5:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e3e9:	7e db                	jle    f011e3c6 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e3eb:	83 ec 0c             	sub    $0xc,%esp
f011e3ee:	68 00 b0 1f 00       	push   $0x1fb000
f011e3f3:	e8 49 9b fe ff       	call   f0107f41 <kmalloc>
f011e3f8:	83 c4 10             	add    $0x10,%esp
f011e3fb:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e401:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e407:	89 c1                	mov    %eax,%ecx
f011e409:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e410:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e415:	0f b6 d0             	movzbl %al,%edx
f011e418:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e41b:	01 d0                	add    %edx,%eax
f011e41d:	48                   	dec    %eax
f011e41e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e421:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e424:	ba 00 00 00 00       	mov    $0x0,%edx
f011e429:	f7 75 e4             	divl   -0x1c(%ebp)
f011e42c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e42f:	29 d0                	sub    %edx,%eax
f011e431:	89 c3                	mov    %eax,%ebx
f011e433:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e43a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e43f:	0f b6 c0             	movzbl %al,%eax
f011e442:	c1 e0 04             	shl    $0x4,%eax
f011e445:	89 c2                	mov    %eax,%edx
f011e447:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e44a:	01 d0                	add    %edx,%eax
f011e44c:	48                   	dec    %eax
f011e44d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e450:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e453:	ba 00 00 00 00       	mov    $0x0,%edx
f011e458:	f7 75 dc             	divl   -0x24(%ebp)
f011e45b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e45e:	29 d0                	sub    %edx,%eax
f011e460:	01 d8                	add    %ebx,%eax
f011e462:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e467:	39 c1                	cmp    %eax,%ecx
f011e469:	0f 85 34 03 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e46f:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e475:	89 c1                	mov    %eax,%ecx
f011e477:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e47e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e483:	0f b6 d0             	movzbl %al,%edx
f011e486:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e489:	01 d0                	add    %edx,%eax
f011e48b:	48                   	dec    %eax
f011e48c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e48f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e492:	ba 00 00 00 00       	mov    $0x0,%edx
f011e497:	f7 75 d4             	divl   -0x2c(%ebp)
f011e49a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e49d:	29 d0                	sub    %edx,%eax
f011e49f:	89 c3                	mov    %eax,%ebx
f011e4a1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e4a8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e4ad:	0f b6 c0             	movzbl %al,%eax
f011e4b0:	c1 e0 04             	shl    $0x4,%eax
f011e4b3:	89 c2                	mov    %eax,%edx
f011e4b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e4b8:	01 d0                	add    %edx,%eax
f011e4ba:	48                   	dec    %eax
f011e4bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e4be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e4c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4c6:	f7 75 cc             	divl   -0x34(%ebp)
f011e4c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e4cc:	29 d0                	sub    %edx,%eax
f011e4ce:	01 d8                	add    %ebx,%eax
f011e4d0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e4d5:	39 c1                	cmp    %eax,%ecx
f011e4d7:	0f 85 c6 02 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e4dd:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e4e3:	89 c1                	mov    %eax,%ecx
f011e4e5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e4ec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e4f1:	0f b6 d0             	movzbl %al,%edx
f011e4f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e4f7:	01 d0                	add    %edx,%eax
f011e4f9:	48                   	dec    %eax
f011e4fa:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e4fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e500:	ba 00 00 00 00       	mov    $0x0,%edx
f011e505:	f7 75 c4             	divl   -0x3c(%ebp)
f011e508:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e50b:	29 d0                	sub    %edx,%eax
f011e50d:	89 c3                	mov    %eax,%ebx
f011e50f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e516:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e51b:	0f b6 c0             	movzbl %al,%eax
f011e51e:	c1 e0 04             	shl    $0x4,%eax
f011e521:	89 c2                	mov    %eax,%edx
f011e523:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e526:	01 d0                	add    %edx,%eax
f011e528:	48                   	dec    %eax
f011e529:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e52c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e52f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e534:	f7 75 bc             	divl   -0x44(%ebp)
f011e537:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e53a:	29 d0                	sub    %edx,%eax
f011e53c:	01 d8                	add    %ebx,%eax
f011e53e:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e543:	39 c1                	cmp    %eax,%ecx
f011e545:	0f 85 58 02 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e54b:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e551:	89 c1                	mov    %eax,%ecx
f011e553:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e55a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e55f:	0f b6 d0             	movzbl %al,%edx
f011e562:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e565:	01 d0                	add    %edx,%eax
f011e567:	48                   	dec    %eax
f011e568:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e56b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e56e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e573:	f7 75 b4             	divl   -0x4c(%ebp)
f011e576:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e579:	29 d0                	sub    %edx,%eax
f011e57b:	89 c3                	mov    %eax,%ebx
f011e57d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e584:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e589:	0f b6 c0             	movzbl %al,%eax
f011e58c:	c1 e0 04             	shl    $0x4,%eax
f011e58f:	89 c2                	mov    %eax,%edx
f011e591:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e594:	01 d0                	add    %edx,%eax
f011e596:	48                   	dec    %eax
f011e597:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e59a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e59d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5a2:	f7 75 ac             	divl   -0x54(%ebp)
f011e5a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e5a8:	29 d0                	sub    %edx,%eax
f011e5aa:	01 d8                	add    %ebx,%eax
f011e5ac:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e5b1:	39 c1                	cmp    %eax,%ecx
f011e5b3:	0f 85 ea 01 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e5b9:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e5bf:	89 c1                	mov    %eax,%ecx
f011e5c1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e5c8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e5cd:	0f b6 d0             	movzbl %al,%edx
f011e5d0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e5d3:	01 d0                	add    %edx,%eax
f011e5d5:	48                   	dec    %eax
f011e5d6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e5d9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e5dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5e1:	f7 75 a4             	divl   -0x5c(%ebp)
f011e5e4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e5e7:	29 d0                	sub    %edx,%eax
f011e5e9:	89 c3                	mov    %eax,%ebx
f011e5eb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e5f2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e5f7:	0f b6 c0             	movzbl %al,%eax
f011e5fa:	c1 e0 04             	shl    $0x4,%eax
f011e5fd:	89 c2                	mov    %eax,%edx
f011e5ff:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e602:	01 d0                	add    %edx,%eax
f011e604:	48                   	dec    %eax
f011e605:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e608:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e60b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e610:	f7 75 9c             	divl   -0x64(%ebp)
f011e613:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e616:	29 d0                	sub    %edx,%eax
f011e618:	01 d8                	add    %ebx,%eax
f011e61a:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e61f:	39 c1                	cmp    %eax,%ecx
f011e621:	0f 85 7c 01 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e627:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e62d:	89 c1                	mov    %eax,%ecx
f011e62f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e636:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e63b:	0f b6 d0             	movzbl %al,%edx
f011e63e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e641:	01 d0                	add    %edx,%eax
f011e643:	48                   	dec    %eax
f011e644:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e647:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e64a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e64f:	f7 75 94             	divl   -0x6c(%ebp)
f011e652:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e655:	29 d0                	sub    %edx,%eax
f011e657:	89 c3                	mov    %eax,%ebx
f011e659:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e660:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e665:	0f b6 c0             	movzbl %al,%eax
f011e668:	c1 e0 04             	shl    $0x4,%eax
f011e66b:	89 c2                	mov    %eax,%edx
f011e66d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e670:	01 d0                	add    %edx,%eax
f011e672:	48                   	dec    %eax
f011e673:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e676:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e679:	ba 00 00 00 00       	mov    $0x0,%edx
f011e67e:	f7 75 8c             	divl   -0x74(%ebp)
f011e681:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e684:	29 d0                	sub    %edx,%eax
f011e686:	01 d8                	add    %ebx,%eax
f011e688:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e68d:	39 c1                	cmp    %eax,%ecx
f011e68f:	0f 85 0e 01 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e695:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e69b:	89 c1                	mov    %eax,%ecx
f011e69d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e6a4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e6a9:	0f b6 d0             	movzbl %al,%edx
f011e6ac:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e6af:	01 d0                	add    %edx,%eax
f011e6b1:	48                   	dec    %eax
f011e6b2:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e6b5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e6b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6bd:	f7 75 84             	divl   -0x7c(%ebp)
f011e6c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e6c3:	29 d0                	sub    %edx,%eax
f011e6c5:	89 c3                	mov    %eax,%ebx
f011e6c7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e6ce:	10 00 00 
f011e6d1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e6d6:	0f b6 c0             	movzbl %al,%eax
f011e6d9:	c1 e0 04             	shl    $0x4,%eax
f011e6dc:	89 c2                	mov    %eax,%edx
f011e6de:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e6e4:	01 d0                	add    %edx,%eax
f011e6e6:	48                   	dec    %eax
f011e6e7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e6ed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e6f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6f8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e6fe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e704:	29 d0                	sub    %edx,%eax
f011e706:	01 d8                	add    %ebx,%eax
f011e708:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e70d:	39 c1                	cmp    %eax,%ecx
f011e70f:	0f 85 8e 00 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e715:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e71b:	89 c1                	mov    %eax,%ecx
f011e71d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e724:	10 00 00 
f011e727:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e72c:	0f b6 d0             	movzbl %al,%edx
f011e72f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e735:	01 d0                	add    %edx,%eax
f011e737:	48                   	dec    %eax
f011e738:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e73e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e744:	ba 00 00 00 00       	mov    $0x0,%edx
f011e749:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e74f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e755:	29 d0                	sub    %edx,%eax
f011e757:	89 c3                	mov    %eax,%ebx
f011e759:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e760:	10 00 00 
f011e763:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e768:	0f b6 c0             	movzbl %al,%eax
f011e76b:	c1 e0 04             	shl    $0x4,%eax
f011e76e:	89 c2                	mov    %eax,%edx
f011e770:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e776:	01 d0                	add    %edx,%eax
f011e778:	48                   	dec    %eax
f011e779:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e77f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e785:	ba 00 00 00 00       	mov    $0x0,%edx
f011e78a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e790:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e796:	29 d0                	sub    %edx,%eax
f011e798:	01 d8                	add    %ebx,%eax
f011e79a:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e79f:	39 c1                	cmp    %eax,%ecx
f011e7a1:	74 17                	je     f011e7ba <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e7a3:	83 ec 04             	sub    $0x4,%esp
f011e7a6:	68 c4 98 13 f0       	push   $0xf01398c4
f011e7ab:	68 31 04 00 00       	push   $0x431
f011e7b0:	68 ee 91 13 f0       	push   $0xf01391ee
f011e7b5:	e8 f6 19 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7ba:	e8 a7 5e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e7bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7c2:	74 17                	je     f011e7db <test_kmalloc_worstfit+0x484>
f011e7c4:	83 ec 04             	sub    $0x4,%esp
f011e7c7:	68 08 92 13 f0       	push   $0xf0139208
f011e7cc:	68 33 04 00 00       	push   $0x433
f011e7d1:	68 ee 91 13 f0       	push   $0xf01391ee
f011e7d6:	e8 d5 19 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e7db:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7de:	e8 dd e1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e7e3:	29 c3                	sub    %eax,%ebx
f011e7e5:	89 d8                	mov    %ebx,%eax
f011e7e7:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e7ec:	74 17                	je     f011e805 <test_kmalloc_worstfit+0x4ae>
f011e7ee:	83 ec 04             	sub    $0x4,%esp
f011e7f1:	68 ab 94 13 f0       	push   $0xf01394ab
f011e7f6:	68 34 04 00 00       	push   $0x434
f011e7fb:	68 ee 91 13 f0       	push   $0xf01391ee
f011e800:	e8 ab 19 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e805:	e8 b6 e1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e80a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e80d:	e8 54 5e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e812:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e815:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e81b:	83 ec 0c             	sub    $0xc,%esp
f011e81e:	50                   	push   %eax
f011e81f:	e8 37 97 fe ff       	call   f0107f5b <kfree>
f011e824:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e827:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e82d:	83 ec 0c             	sub    $0xc,%esp
f011e830:	50                   	push   %eax
f011e831:	e8 25 97 fe ff       	call   f0107f5b <kfree>
f011e836:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e839:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011e83f:	83 ec 0c             	sub    $0xc,%esp
f011e842:	50                   	push   %eax
f011e843:	e8 13 97 fe ff       	call   f0107f5b <kfree>
f011e848:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e84b:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e851:	83 ec 0c             	sub    $0xc,%esp
f011e854:	50                   	push   %eax
f011e855:	e8 01 97 fe ff       	call   f0107f5b <kfree>
f011e85a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e85d:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011e863:	83 ec 0c             	sub    $0xc,%esp
f011e866:	50                   	push   %eax
f011e867:	e8 ef 96 fe ff       	call   f0107f5b <kfree>
f011e86c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e86f:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011e875:	83 ec 0c             	sub    $0xc,%esp
f011e878:	50                   	push   %eax
f011e879:	e8 dd 96 fe ff       	call   f0107f5b <kfree>
f011e87e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e881:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011e887:	83 ec 0c             	sub    $0xc,%esp
f011e88a:	50                   	push   %eax
f011e88b:	e8 cb 96 fe ff       	call   f0107f5b <kfree>
f011e890:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e893:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011e899:	83 ec 0c             	sub    $0xc,%esp
f011e89c:	50                   	push   %eax
f011e89d:	e8 b9 96 fe ff       	call   f0107f5b <kfree>
f011e8a2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e8a5:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011e8ab:	83 ec 0c             	sub    $0xc,%esp
f011e8ae:	50                   	push   %eax
f011e8af:	e8 a7 96 fe ff       	call   f0107f5b <kfree>
f011e8b4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e8b7:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011e8bd:	83 ec 0c             	sub    $0xc,%esp
f011e8c0:	50                   	push   %eax
f011e8c1:	e8 95 96 fe ff       	call   f0107f5b <kfree>
f011e8c6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e8c9:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e8cf:	83 ec 0c             	sub    $0xc,%esp
f011e8d2:	50                   	push   %eax
f011e8d3:	e8 83 96 fe ff       	call   f0107f5b <kfree>
f011e8d8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e8db:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e8e1:	83 ec 0c             	sub    $0xc,%esp
f011e8e4:	50                   	push   %eax
f011e8e5:	e8 71 96 fe ff       	call   f0107f5b <kfree>
f011e8ea:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e8ed:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011e8f3:	83 ec 0c             	sub    $0xc,%esp
f011e8f6:	50                   	push   %eax
f011e8f7:	e8 5f 96 fe ff       	call   f0107f5b <kfree>
f011e8fc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e8ff:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011e905:	83 ec 0c             	sub    $0xc,%esp
f011e908:	50                   	push   %eax
f011e909:	e8 4d 96 fe ff       	call   f0107f5b <kfree>
f011e90e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e911:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011e917:	83 ec 0c             	sub    $0xc,%esp
f011e91a:	50                   	push   %eax
f011e91b:	e8 3b 96 fe ff       	call   f0107f5b <kfree>
f011e920:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e923:	e8 3e 5d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e928:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e92b:	74 17                	je     f011e944 <test_kmalloc_worstfit+0x5ed>
f011e92d:	83 ec 04             	sub    $0x4,%esp
f011e930:	68 08 92 13 f0       	push   $0xf0139208
f011e935:	68 4a 04 00 00       	push   $0x44a
f011e93a:	68 ee 91 13 f0       	push   $0xf01391ee
f011e93f:	e8 6c 18 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e944:	e8 77 e0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e949:	89 c2                	mov    %eax,%edx
f011e94b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e94e:	29 c2                	sub    %eax,%edx
f011e950:	89 d0                	mov    %edx,%eax
f011e952:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e957:	74 17                	je     f011e970 <test_kmalloc_worstfit+0x619>
f011e959:	83 ec 04             	sub    $0x4,%esp
f011e95c:	68 bc 94 13 f0       	push   $0xf01394bc
f011e961:	68 4b 04 00 00       	push   $0x44b
f011e966:	68 ee 91 13 f0       	push   $0xf01391ee
f011e96b:	e8 40 18 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e970:	e8 4b e0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011e975:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e978:	e8 e9 5c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011e97d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e980:	83 ec 0c             	sub    $0xc,%esp
f011e983:	68 00 00 10 00       	push   $0x100000
f011e988:	e8 b4 95 fe ff       	call   f0107f41 <kmalloc>
f011e98d:	83 c4 10             	add    $0x10,%esp
f011e990:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e996:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011e99d:	10 00 00 
f011e9a0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e9a5:	0f b6 d0             	movzbl %al,%edx
f011e9a8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e9ae:	01 d0                	add    %edx,%eax
f011e9b0:	48                   	dec    %eax
f011e9b1:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011e9b7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e9bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9c2:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011e9c8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e9ce:	29 d0                	sub    %edx,%eax
f011e9d0:	89 c1                	mov    %eax,%ecx
f011e9d2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011e9d9:	10 00 00 
f011e9dc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e9e1:	0f b6 c0             	movzbl %al,%eax
f011e9e4:	c1 e0 04             	shl    $0x4,%eax
f011e9e7:	89 c2                	mov    %eax,%edx
f011e9e9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e9ef:	01 d0                	add    %edx,%eax
f011e9f1:	48                   	dec    %eax
f011e9f2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011e9f8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e9fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea03:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011ea09:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ea0f:	29 d0                	sub    %edx,%eax
f011ea11:	01 c8                	add    %ecx,%eax
f011ea13:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ea19:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ea1f:	39 c2                	cmp    %eax,%edx
f011ea21:	74 17                	je     f011ea3a <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011ea23:	83 ec 04             	sub    $0x4,%esp
f011ea26:	68 08 99 13 f0       	push   $0xf0139908
f011ea2b:	68 52 04 00 00       	push   $0x452
f011ea30:	68 ee 91 13 f0       	push   $0xf01391ee
f011ea35:	e8 76 17 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea3a:	e8 27 5c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ea3f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea42:	74 17                	je     f011ea5b <test_kmalloc_worstfit+0x704>
f011ea44:	83 ec 04             	sub    $0x4,%esp
f011ea47:	68 08 92 13 f0       	push   $0xf0139208
f011ea4c:	68 53 04 00 00       	push   $0x453
f011ea51:	68 ee 91 13 f0       	push   $0xf01391ee
f011ea56:	e8 55 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea5b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea5e:	e8 5d df fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ea63:	29 c3                	sub    %eax,%ebx
f011ea65:	89 d8                	mov    %ebx,%eax
f011ea67:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ea6c:	74 17                	je     f011ea85 <test_kmalloc_worstfit+0x72e>
f011ea6e:	83 ec 04             	sub    $0x4,%esp
f011ea71:	68 26 97 13 f0       	push   $0xf0139726
f011ea76:	68 54 04 00 00       	push   $0x454
f011ea7b:	68 ee 91 13 f0       	push   $0xf01391ee
f011ea80:	e8 2b 17 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ea85:	ff 45 e8             	incl   -0x18(%ebp)
f011ea88:	83 ec 08             	sub    $0x8,%esp
f011ea8b:	ff 75 e8             	pushl  -0x18(%ebp)
f011ea8e:	68 28 99 13 f0       	push   $0xf0139928
f011ea93:	e8 99 23 fe ff       	call   f0100e31 <cprintf>
f011ea98:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ea9b:	e8 20 df fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011eaa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eaa3:	e8 be 5b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011eaa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011eaab:	83 ec 0c             	sub    $0xc,%esp
f011eaae:	68 00 00 40 00       	push   $0x400000
f011eab3:	e8 89 94 fe ff       	call   f0107f41 <kmalloc>
f011eab8:	83 c4 10             	add    $0x10,%esp
f011eabb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011eac1:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011eac8:	10 00 00 
f011eacb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ead0:	0f b6 d0             	movzbl %al,%edx
f011ead3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ead9:	01 d0                	add    %edx,%eax
f011eadb:	48                   	dec    %eax
f011eadc:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011eae2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eae8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaed:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011eaf3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eaf9:	29 d0                	sub    %edx,%eax
f011eafb:	89 c1                	mov    %eax,%ecx
f011eafd:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011eb04:	10 00 00 
f011eb07:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011eb0c:	0f b6 c0             	movzbl %al,%eax
f011eb0f:	c1 e0 04             	shl    $0x4,%eax
f011eb12:	89 c2                	mov    %eax,%edx
f011eb14:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011eb1a:	01 d0                	add    %edx,%eax
f011eb1c:	48                   	dec    %eax
f011eb1d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011eb23:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eb29:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb2e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011eb34:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eb3a:	29 d0                	sub    %edx,%eax
f011eb3c:	01 c8                	add    %ecx,%eax
f011eb3e:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011eb44:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb4a:	39 c2                	cmp    %eax,%edx
f011eb4c:	74 17                	je     f011eb65 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011eb4e:	83 ec 04             	sub    $0x4,%esp
f011eb51:	68 08 99 13 f0       	push   $0xf0139908
f011eb56:	68 5b 04 00 00       	push   $0x45b
f011eb5b:	68 ee 91 13 f0       	push   $0xf01391ee
f011eb60:	e8 4b 16 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb65:	e8 fc 5a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011eb6a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb6d:	74 17                	je     f011eb86 <test_kmalloc_worstfit+0x82f>
f011eb6f:	83 ec 04             	sub    $0x4,%esp
f011eb72:	68 08 92 13 f0       	push   $0xf0139208
f011eb77:	68 5c 04 00 00       	push   $0x45c
f011eb7c:	68 ee 91 13 f0       	push   $0xf01391ee
f011eb81:	e8 2a 16 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eb86:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eb89:	e8 32 de fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011eb8e:	29 c3                	sub    %eax,%ebx
f011eb90:	89 d8                	mov    %ebx,%eax
f011eb92:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eb97:	74 17                	je     f011ebb0 <test_kmalloc_worstfit+0x859>
f011eb99:	83 ec 04             	sub    $0x4,%esp
f011eb9c:	68 26 97 13 f0       	push   $0xf0139726
f011eba1:	68 5d 04 00 00       	push   $0x45d
f011eba6:	68 ee 91 13 f0       	push   $0xf01391ee
f011ebab:	e8 00 16 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ebb0:	ff 45 e8             	incl   -0x18(%ebp)
f011ebb3:	83 ec 08             	sub    $0x8,%esp
f011ebb6:	ff 75 e8             	pushl  -0x18(%ebp)
f011ebb9:	68 28 99 13 f0       	push   $0xf0139928
f011ebbe:	e8 6e 22 fe ff       	call   f0100e31 <cprintf>
f011ebc3:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ebc6:	e8 f5 dd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ebcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ebce:	e8 93 5a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ebd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ebd6:	83 ec 0c             	sub    $0xc,%esp
f011ebd9:	68 00 00 60 00       	push   $0x600000
f011ebde:	e8 5e 93 fe ff       	call   f0107f41 <kmalloc>
f011ebe3:	83 c4 10             	add    $0x10,%esp
f011ebe6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ebec:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011ebf3:	10 00 00 
f011ebf6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ebfb:	0f b6 d0             	movzbl %al,%edx
f011ebfe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ec04:	01 d0                	add    %edx,%eax
f011ec06:	48                   	dec    %eax
f011ec07:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011ec0d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec13:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec18:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011ec1e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec24:	29 d0                	sub    %edx,%eax
f011ec26:	89 c1                	mov    %eax,%ecx
f011ec28:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011ec2f:	10 00 00 
f011ec32:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ec37:	0f b6 c0             	movzbl %al,%eax
f011ec3a:	c1 e0 04             	shl    $0x4,%eax
f011ec3d:	89 c2                	mov    %eax,%edx
f011ec3f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ec45:	01 d0                	add    %edx,%eax
f011ec47:	48                   	dec    %eax
f011ec48:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011ec4e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec59:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011ec5f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec65:	29 d0                	sub    %edx,%eax
f011ec67:	01 c8                	add    %ecx,%eax
f011ec69:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ec6f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec75:	39 c2                	cmp    %eax,%edx
f011ec77:	74 17                	je     f011ec90 <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011ec79:	83 ec 04             	sub    $0x4,%esp
f011ec7c:	68 08 99 13 f0       	push   $0xf0139908
f011ec81:	68 64 04 00 00       	push   $0x464
f011ec86:	68 ee 91 13 f0       	push   $0xf01391ee
f011ec8b:	e8 20 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec90:	e8 d1 59 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ec95:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec98:	74 17                	je     f011ecb1 <test_kmalloc_worstfit+0x95a>
f011ec9a:	83 ec 04             	sub    $0x4,%esp
f011ec9d:	68 08 92 13 f0       	push   $0xf0139208
f011eca2:	68 65 04 00 00       	push   $0x465
f011eca7:	68 ee 91 13 f0       	push   $0xf01391ee
f011ecac:	e8 ff 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ecb1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ecb4:	e8 07 dd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ecb9:	29 c3                	sub    %eax,%ebx
f011ecbb:	89 d8                	mov    %ebx,%eax
f011ecbd:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ecc2:	74 17                	je     f011ecdb <test_kmalloc_worstfit+0x984>
f011ecc4:	83 ec 04             	sub    $0x4,%esp
f011ecc7:	68 26 97 13 f0       	push   $0xf0139726
f011eccc:	68 66 04 00 00       	push   $0x466
f011ecd1:	68 ee 91 13 f0       	push   $0xf01391ee
f011ecd6:	e8 d5 14 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ecdb:	ff 45 e8             	incl   -0x18(%ebp)
f011ecde:	83 ec 08             	sub    $0x8,%esp
f011ece1:	ff 75 e8             	pushl  -0x18(%ebp)
f011ece4:	68 28 99 13 f0       	push   $0xf0139928
f011ece9:	e8 43 21 fe ff       	call   f0100e31 <cprintf>
f011ecee:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ecf1:	e8 ca dc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ecf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ecf9:	e8 68 59 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ecfe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ed01:	83 ec 0c             	sub    $0xc,%esp
f011ed04:	68 00 00 50 00       	push   $0x500000
f011ed09:	e8 33 92 fe ff       	call   f0107f41 <kmalloc>
f011ed0e:	83 c4 10             	add    $0x10,%esp
f011ed11:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ed17:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011ed1e:	10 00 00 
f011ed21:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ed26:	0f b6 d0             	movzbl %al,%edx
f011ed29:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ed2f:	01 d0                	add    %edx,%eax
f011ed31:	48                   	dec    %eax
f011ed32:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011ed38:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed43:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011ed49:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed4f:	29 d0                	sub    %edx,%eax
f011ed51:	89 c1                	mov    %eax,%ecx
f011ed53:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011ed5a:	10 00 00 
f011ed5d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ed62:	0f b6 c0             	movzbl %al,%eax
f011ed65:	c1 e0 04             	shl    $0x4,%eax
f011ed68:	89 c2                	mov    %eax,%edx
f011ed6a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ed70:	01 d0                	add    %edx,%eax
f011ed72:	48                   	dec    %eax
f011ed73:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011ed79:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed84:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011ed8a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed90:	29 d0                	sub    %edx,%eax
f011ed92:	01 c8                	add    %ecx,%eax
f011ed94:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ed9a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eda0:	39 c2                	cmp    %eax,%edx
f011eda2:	74 17                	je     f011edbb <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011eda4:	83 ec 04             	sub    $0x4,%esp
f011eda7:	68 08 99 13 f0       	push   $0xf0139908
f011edac:	68 6d 04 00 00       	push   $0x46d
f011edb1:	68 ee 91 13 f0       	push   $0xf01391ee
f011edb6:	e8 f5 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011edbb:	e8 a6 58 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011edc0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011edc3:	74 17                	je     f011eddc <test_kmalloc_worstfit+0xa85>
f011edc5:	83 ec 04             	sub    $0x4,%esp
f011edc8:	68 08 92 13 f0       	push   $0xf0139208
f011edcd:	68 6e 04 00 00       	push   $0x46e
f011edd2:	68 ee 91 13 f0       	push   $0xf01391ee
f011edd7:	e8 d4 13 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eddc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eddf:	e8 dc db fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ede4:	29 c3                	sub    %eax,%ebx
f011ede6:	89 d8                	mov    %ebx,%eax
f011ede8:	3d 00 05 00 00       	cmp    $0x500,%eax
f011eded:	74 17                	je     f011ee06 <test_kmalloc_worstfit+0xaaf>
f011edef:	83 ec 04             	sub    $0x4,%esp
f011edf2:	68 26 97 13 f0       	push   $0xf0139726
f011edf7:	68 6f 04 00 00       	push   $0x46f
f011edfc:	68 ee 91 13 f0       	push   $0xf01391ee
f011ee01:	e8 aa 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee06:	ff 45 e8             	incl   -0x18(%ebp)
f011ee09:	83 ec 08             	sub    $0x8,%esp
f011ee0c:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee0f:	68 28 99 13 f0       	push   $0xf0139928
f011ee14:	e8 18 20 fe ff       	call   f0100e31 <cprintf>
f011ee19:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ee1c:	e8 9f db fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ee21:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee24:	e8 3d 58 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ee29:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ee2c:	83 ec 0c             	sub    $0xc,%esp
f011ee2f:	68 00 00 40 00       	push   $0x400000
f011ee34:	e8 08 91 fe ff       	call   f0107f41 <kmalloc>
f011ee39:	83 c4 10             	add    $0x10,%esp
f011ee3c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ee42:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ee49:	10 00 00 
f011ee4c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ee51:	0f b6 d0             	movzbl %al,%edx
f011ee54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ee5a:	01 d0                	add    %edx,%eax
f011ee5c:	48                   	dec    %eax
f011ee5d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011ee63:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ee69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee6e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011ee74:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ee7a:	29 d0                	sub    %edx,%eax
f011ee7c:	89 c1                	mov    %eax,%ecx
f011ee7e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011ee85:	10 00 00 
f011ee88:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ee8d:	0f b6 c0             	movzbl %al,%eax
f011ee90:	c1 e0 04             	shl    $0x4,%eax
f011ee93:	89 c2                	mov    %eax,%edx
f011ee95:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ee9b:	01 d0                	add    %edx,%eax
f011ee9d:	48                   	dec    %eax
f011ee9e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011eea4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eeaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011eeaf:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011eeb5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eebb:	29 d0                	sub    %edx,%eax
f011eebd:	01 c8                	add    %ecx,%eax
f011eebf:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011eec5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eecb:	39 c2                	cmp    %eax,%edx
f011eecd:	74 17                	je     f011eee6 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011eecf:	83 ec 04             	sub    $0x4,%esp
f011eed2:	68 08 99 13 f0       	push   $0xf0139908
f011eed7:	68 76 04 00 00       	push   $0x476
f011eedc:	68 ee 91 13 f0       	push   $0xf01391ee
f011eee1:	e8 ca 12 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eee6:	e8 7b 57 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011eeeb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eeee:	74 17                	je     f011ef07 <test_kmalloc_worstfit+0xbb0>
f011eef0:	83 ec 04             	sub    $0x4,%esp
f011eef3:	68 08 92 13 f0       	push   $0xf0139208
f011eef8:	68 77 04 00 00       	push   $0x477
f011eefd:	68 ee 91 13 f0       	push   $0xf01391ee
f011ef02:	e8 a9 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ef07:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ef0a:	e8 b1 da fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ef0f:	29 c3                	sub    %eax,%ebx
f011ef11:	89 d8                	mov    %ebx,%eax
f011ef13:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ef18:	74 17                	je     f011ef31 <test_kmalloc_worstfit+0xbda>
f011ef1a:	83 ec 04             	sub    $0x4,%esp
f011ef1d:	68 26 97 13 f0       	push   $0xf0139726
f011ef22:	68 78 04 00 00       	push   $0x478
f011ef27:	68 ee 91 13 f0       	push   $0xf01391ee
f011ef2c:	e8 7f 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef31:	ff 45 e8             	incl   -0x18(%ebp)
f011ef34:	83 ec 08             	sub    $0x8,%esp
f011ef37:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef3a:	68 28 99 13 f0       	push   $0xf0139928
f011ef3f:	e8 ed 1e fe ff       	call   f0100e31 <cprintf>
f011ef44:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef47:	e8 74 da fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ef4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef4f:	e8 12 57 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ef54:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011ef57:	83 ec 0c             	sub    $0xc,%esp
f011ef5a:	68 00 00 20 00       	push   $0x200000
f011ef5f:	e8 dd 8f fe ff       	call   f0107f41 <kmalloc>
f011ef64:	83 c4 10             	add    $0x10,%esp
f011ef67:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011ef6d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ef74:	10 00 00 
f011ef77:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ef7c:	0f b6 d0             	movzbl %al,%edx
f011ef7f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ef85:	01 d0                	add    %edx,%eax
f011ef87:	48                   	dec    %eax
f011ef88:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ef8e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ef94:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef99:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ef9f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011efa5:	29 d0                	sub    %edx,%eax
f011efa7:	89 c1                	mov    %eax,%ecx
f011efa9:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011efb0:	10 00 00 
f011efb3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011efb8:	0f b6 c0             	movzbl %al,%eax
f011efbb:	c1 e0 04             	shl    $0x4,%eax
f011efbe:	89 c2                	mov    %eax,%edx
f011efc0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011efc6:	01 d0                	add    %edx,%eax
f011efc8:	48                   	dec    %eax
f011efc9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011efcf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011efd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011efda:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011efe0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011efe6:	29 d0                	sub    %edx,%eax
f011efe8:	01 c8                	add    %ecx,%eax
f011efea:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011eff0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eff6:	39 c2                	cmp    %eax,%edx
f011eff8:	74 17                	je     f011f011 <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011effa:	83 ec 04             	sub    $0x4,%esp
f011effd:	68 08 99 13 f0       	push   $0xf0139908
f011f002:	68 7f 04 00 00       	push   $0x47f
f011f007:	68 ee 91 13 f0       	push   $0xf01391ee
f011f00c:	e8 9f 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f011:	e8 50 56 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f016:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f019:	74 17                	je     f011f032 <test_kmalloc_worstfit+0xcdb>
f011f01b:	83 ec 04             	sub    $0x4,%esp
f011f01e:	68 08 92 13 f0       	push   $0xf0139208
f011f023:	68 80 04 00 00       	push   $0x480
f011f028:	68 ee 91 13 f0       	push   $0xf01391ee
f011f02d:	e8 7e 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f032:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f035:	e8 86 d9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f03a:	29 c3                	sub    %eax,%ebx
f011f03c:	89 d8                	mov    %ebx,%eax
f011f03e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f043:	74 17                	je     f011f05c <test_kmalloc_worstfit+0xd05>
f011f045:	83 ec 04             	sub    $0x4,%esp
f011f048:	68 26 97 13 f0       	push   $0xf0139726
f011f04d:	68 81 04 00 00       	push   $0x481
f011f052:	68 ee 91 13 f0       	push   $0xf01391ee
f011f057:	e8 54 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f05c:	ff 45 e8             	incl   -0x18(%ebp)
f011f05f:	83 ec 08             	sub    $0x8,%esp
f011f062:	ff 75 e8             	pushl  -0x18(%ebp)
f011f065:	68 28 99 13 f0       	push   $0xf0139928
f011f06a:	e8 c2 1d fe ff       	call   f0100e31 <cprintf>
f011f06f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f072:	e8 49 d9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f077:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f07a:	e8 e7 55 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f07f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f082:	83 ec 0c             	sub    $0xc,%esp
f011f085:	68 00 00 18 00       	push   $0x180000
f011f08a:	e8 b2 8e fe ff       	call   f0107f41 <kmalloc>
f011f08f:	83 c4 10             	add    $0x10,%esp
f011f092:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f098:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f09f:	10 00 00 
f011f0a2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f0a7:	0f b6 d0             	movzbl %al,%edx
f011f0aa:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f0b0:	01 d0                	add    %edx,%eax
f011f0b2:	48                   	dec    %eax
f011f0b3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f0b9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f0bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0c4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f0ca:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f0d0:	29 d0                	sub    %edx,%eax
f011f0d2:	89 c1                	mov    %eax,%ecx
f011f0d4:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f0db:	10 00 00 
f011f0de:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f0e3:	0f b6 c0             	movzbl %al,%eax
f011f0e6:	c1 e0 04             	shl    $0x4,%eax
f011f0e9:	89 c2                	mov    %eax,%edx
f011f0eb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f0f1:	01 d0                	add    %edx,%eax
f011f0f3:	48                   	dec    %eax
f011f0f4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f0fa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f100:	ba 00 00 00 00       	mov    $0x0,%edx
f011f105:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f10b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f111:	29 d0                	sub    %edx,%eax
f011f113:	01 c8                	add    %ecx,%eax
f011f115:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f11b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f121:	39 c2                	cmp    %eax,%edx
f011f123:	74 17                	je     f011f13c <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f125:	83 ec 04             	sub    $0x4,%esp
f011f128:	68 08 99 13 f0       	push   $0xf0139908
f011f12d:	68 88 04 00 00       	push   $0x488
f011f132:	68 ee 91 13 f0       	push   $0xf01391ee
f011f137:	e8 74 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f13c:	e8 25 55 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f141:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f144:	74 17                	je     f011f15d <test_kmalloc_worstfit+0xe06>
f011f146:	83 ec 04             	sub    $0x4,%esp
f011f149:	68 08 92 13 f0       	push   $0xf0139208
f011f14e:	68 89 04 00 00       	push   $0x489
f011f153:	68 ee 91 13 f0       	push   $0xf01391ee
f011f158:	e8 53 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f15d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f160:	e8 5b d8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f165:	29 c3                	sub    %eax,%ebx
f011f167:	89 d8                	mov    %ebx,%eax
f011f169:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f16e:	74 17                	je     f011f187 <test_kmalloc_worstfit+0xe30>
f011f170:	83 ec 04             	sub    $0x4,%esp
f011f173:	68 26 97 13 f0       	push   $0xf0139726
f011f178:	68 8a 04 00 00       	push   $0x48a
f011f17d:	68 ee 91 13 f0       	push   $0xf01391ee
f011f182:	e8 29 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f187:	ff 45 e8             	incl   -0x18(%ebp)
f011f18a:	83 ec 08             	sub    $0x8,%esp
f011f18d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f190:	68 28 99 13 f0       	push   $0xf0139928
f011f195:	e8 97 1c fe ff       	call   f0100e31 <cprintf>
f011f19a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f19d:	e8 1e d8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f1a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1a5:	e8 bc 54 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f1aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f1ad:	83 ec 0c             	sub    $0xc,%esp
f011f1b0:	68 00 00 08 00       	push   $0x80000
f011f1b5:	e8 87 8d fe ff       	call   f0107f41 <kmalloc>
f011f1ba:	83 c4 10             	add    $0x10,%esp
f011f1bd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f1c3:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f1ca:	10 00 00 
f011f1cd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f1d2:	0f b6 d0             	movzbl %al,%edx
f011f1d5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f1db:	01 d0                	add    %edx,%eax
f011f1dd:	48                   	dec    %eax
f011f1de:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f1e4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f1ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1ef:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f1f5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f1fb:	29 d0                	sub    %edx,%eax
f011f1fd:	89 c1                	mov    %eax,%ecx
f011f1ff:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f206:	10 00 00 
f011f209:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f20e:	0f b6 c0             	movzbl %al,%eax
f011f211:	c1 e0 04             	shl    $0x4,%eax
f011f214:	89 c2                	mov    %eax,%edx
f011f216:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f21c:	01 d0                	add    %edx,%eax
f011f21e:	48                   	dec    %eax
f011f21f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f225:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f22b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f230:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f236:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f23c:	29 d0                	sub    %edx,%eax
f011f23e:	01 c8                	add    %ecx,%eax
f011f240:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f246:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f24c:	39 c2                	cmp    %eax,%edx
f011f24e:	74 17                	je     f011f267 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f250:	83 ec 04             	sub    $0x4,%esp
f011f253:	68 08 99 13 f0       	push   $0xf0139908
f011f258:	68 91 04 00 00       	push   $0x491
f011f25d:	68 ee 91 13 f0       	push   $0xf01391ee
f011f262:	e8 49 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f267:	e8 fa 53 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f26c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f26f:	74 17                	je     f011f288 <test_kmalloc_worstfit+0xf31>
f011f271:	83 ec 04             	sub    $0x4,%esp
f011f274:	68 08 92 13 f0       	push   $0xf0139208
f011f279:	68 92 04 00 00       	push   $0x492
f011f27e:	68 ee 91 13 f0       	push   $0xf01391ee
f011f283:	e8 28 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f288:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f28b:	e8 30 d7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f290:	29 c3                	sub    %eax,%ebx
f011f292:	89 d8                	mov    %ebx,%eax
f011f294:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f299:	74 17                	je     f011f2b2 <test_kmalloc_worstfit+0xf5b>
f011f29b:	83 ec 04             	sub    $0x4,%esp
f011f29e:	68 26 97 13 f0       	push   $0xf0139726
f011f2a3:	68 93 04 00 00       	push   $0x493
f011f2a8:	68 ee 91 13 f0       	push   $0xf01391ee
f011f2ad:	e8 fe 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f2b2:	ff 45 e8             	incl   -0x18(%ebp)
f011f2b5:	83 ec 08             	sub    $0x8,%esp
f011f2b8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f2bb:	68 28 99 13 f0       	push   $0xf0139928
f011f2c0:	e8 6c 1b fe ff       	call   f0100e31 <cprintf>
f011f2c5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f2c8:	e8 f3 d6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f2cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f2d0:	e8 91 53 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f2d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f2d8:	83 ec 0c             	sub    $0xc,%esp
f011f2db:	68 00 04 00 00       	push   $0x400
f011f2e0:	e8 5c 8c fe ff       	call   f0107f41 <kmalloc>
f011f2e5:	83 c4 10             	add    $0x10,%esp
f011f2e8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f2ee:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f2f5:	10 00 00 
f011f2f8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f2fd:	0f b6 d0             	movzbl %al,%edx
f011f300:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f306:	01 d0                	add    %edx,%eax
f011f308:	48                   	dec    %eax
f011f309:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f30f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f315:	ba 00 00 00 00       	mov    $0x0,%edx
f011f31a:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f320:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f326:	29 d0                	sub    %edx,%eax
f011f328:	89 c1                	mov    %eax,%ecx
f011f32a:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f331:	10 00 00 
f011f334:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f339:	0f b6 c0             	movzbl %al,%eax
f011f33c:	c1 e0 04             	shl    $0x4,%eax
f011f33f:	89 c2                	mov    %eax,%edx
f011f341:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f347:	01 d0                	add    %edx,%eax
f011f349:	48                   	dec    %eax
f011f34a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f350:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f356:	ba 00 00 00 00       	mov    $0x0,%edx
f011f35b:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f361:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f367:	29 d0                	sub    %edx,%eax
f011f369:	01 c8                	add    %ecx,%eax
f011f36b:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f371:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f377:	39 c2                	cmp    %eax,%edx
f011f379:	74 17                	je     f011f392 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f37b:	83 ec 04             	sub    $0x4,%esp
f011f37e:	68 08 99 13 f0       	push   $0xf0139908
f011f383:	68 9a 04 00 00       	push   $0x49a
f011f388:	68 ee 91 13 f0       	push   $0xf01391ee
f011f38d:	e8 1e 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f392:	e8 cf 52 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f397:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f39a:	74 17                	je     f011f3b3 <test_kmalloc_worstfit+0x105c>
f011f39c:	83 ec 04             	sub    $0x4,%esp
f011f39f:	68 08 92 13 f0       	push   $0xf0139208
f011f3a4:	68 9b 04 00 00       	push   $0x49b
f011f3a9:	68 ee 91 13 f0       	push   $0xf01391ee
f011f3ae:	e8 fd 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f3b3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f3b6:	e8 05 d6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f3bb:	29 c3                	sub    %eax,%ebx
f011f3bd:	89 d8                	mov    %ebx,%eax
f011f3bf:	83 f8 01             	cmp    $0x1,%eax
f011f3c2:	74 17                	je     f011f3db <test_kmalloc_worstfit+0x1084>
f011f3c4:	83 ec 04             	sub    $0x4,%esp
f011f3c7:	68 26 97 13 f0       	push   $0xf0139726
f011f3cc:	68 9c 04 00 00       	push   $0x49c
f011f3d1:	68 ee 91 13 f0       	push   $0xf01391ee
f011f3d6:	e8 d5 0d fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f3db:	ff 45 e8             	incl   -0x18(%ebp)
f011f3de:	83 ec 08             	sub    $0x8,%esp
f011f3e1:	ff 75 e8             	pushl  -0x18(%ebp)
f011f3e4:	68 28 99 13 f0       	push   $0xf0139928
f011f3e9:	e8 43 1a fe ff       	call   f0100e31 <cprintf>
f011f3ee:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f3f1:	e8 ca d5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f3f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f3f9:	e8 68 52 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f3fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f401:	83 ec 0c             	sub    $0xc,%esp
f011f404:	68 00 f0 1f 00       	push   $0x1ff000
f011f409:	e8 33 8b fe ff       	call   f0107f41 <kmalloc>
f011f40e:	83 c4 10             	add    $0x10,%esp
f011f411:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f417:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f41e:	10 00 00 
f011f421:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f426:	0f b6 d0             	movzbl %al,%edx
f011f429:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f42f:	01 d0                	add    %edx,%eax
f011f431:	48                   	dec    %eax
f011f432:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f438:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f43e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f443:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f449:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f44f:	29 d0                	sub    %edx,%eax
f011f451:	89 c1                	mov    %eax,%ecx
f011f453:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f45a:	10 00 00 
f011f45d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f462:	0f b6 c0             	movzbl %al,%eax
f011f465:	c1 e0 04             	shl    $0x4,%eax
f011f468:	89 c2                	mov    %eax,%edx
f011f46a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f470:	01 d0                	add    %edx,%eax
f011f472:	48                   	dec    %eax
f011f473:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f479:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f47f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f484:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f48a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f490:	29 d0                	sub    %edx,%eax
f011f492:	01 c8                	add    %ecx,%eax
f011f494:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f49a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f4a0:	39 c2                	cmp    %eax,%edx
f011f4a2:	74 17                	je     f011f4bb <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f4a4:	83 ec 04             	sub    $0x4,%esp
f011f4a7:	68 08 99 13 f0       	push   $0xf0139908
f011f4ac:	68 a3 04 00 00       	push   $0x4a3
f011f4b1:	68 ee 91 13 f0       	push   $0xf01391ee
f011f4b6:	e8 f5 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4bb:	e8 a6 51 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f4c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f4c3:	74 17                	je     f011f4dc <test_kmalloc_worstfit+0x1185>
f011f4c5:	83 ec 04             	sub    $0x4,%esp
f011f4c8:	68 08 92 13 f0       	push   $0xf0139208
f011f4cd:	68 a4 04 00 00       	push   $0x4a4
f011f4d2:	68 ee 91 13 f0       	push   $0xf01391ee
f011f4d7:	e8 d4 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f4dc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f4df:	e8 dc d4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f4e4:	29 c3                	sub    %eax,%ebx
f011f4e6:	89 d8                	mov    %ebx,%eax
f011f4e8:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f4ed:	74 17                	je     f011f506 <test_kmalloc_worstfit+0x11af>
f011f4ef:	83 ec 04             	sub    $0x4,%esp
f011f4f2:	68 26 97 13 f0       	push   $0xf0139726
f011f4f7:	68 a5 04 00 00       	push   $0x4a5
f011f4fc:	68 ee 91 13 f0       	push   $0xf01391ee
f011f501:	e8 aa 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f506:	ff 45 e8             	incl   -0x18(%ebp)
f011f509:	83 ec 08             	sub    $0x8,%esp
f011f50c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f50f:	68 28 99 13 f0       	push   $0xf0139928
f011f514:	e8 18 19 fe ff       	call   f0100e31 <cprintf>
f011f519:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f51c:	e8 9f d4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f521:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f524:	e8 3d 51 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f529:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f52c:	83 ec 0c             	sub    $0xc,%esp
f011f52f:	68 00 00 40 00       	push   $0x400000
f011f534:	e8 08 8a fe ff       	call   f0107f41 <kmalloc>
f011f539:	83 c4 10             	add    $0x10,%esp
f011f53c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f542:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f548:	85 c0                	test   %eax,%eax
f011f54a:	74 17                	je     f011f563 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f54c:	83 ec 04             	sub    $0x4,%esp
f011f54f:	68 08 99 13 f0       	push   $0xf0139908
f011f554:	68 ad 04 00 00       	push   $0x4ad
f011f559:	68 ee 91 13 f0       	push   $0xf01391ee
f011f55e:	e8 4d 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f563:	e8 fe 50 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f568:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f56b:	74 17                	je     f011f584 <test_kmalloc_worstfit+0x122d>
f011f56d:	83 ec 04             	sub    $0x4,%esp
f011f570:	68 08 92 13 f0       	push   $0xf0139208
f011f575:	68 ae 04 00 00       	push   $0x4ae
f011f57a:	68 ee 91 13 f0       	push   $0xf01391ee
f011f57f:	e8 2c 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f584:	e8 37 d4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f589:	89 c2                	mov    %eax,%edx
f011f58b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f58e:	39 c2                	cmp    %eax,%edx
f011f590:	74 17                	je     f011f5a9 <test_kmalloc_worstfit+0x1252>
f011f592:	83 ec 04             	sub    $0x4,%esp
f011f595:	68 26 97 13 f0       	push   $0xf0139726
f011f59a:	68 af 04 00 00       	push   $0x4af
f011f59f:	68 ee 91 13 f0       	push   $0xf01391ee
f011f5a4:	e8 07 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5a9:	ff 45 e8             	incl   -0x18(%ebp)
f011f5ac:	83 ec 08             	sub    $0x8,%esp
f011f5af:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5b2:	68 28 99 13 f0       	push   $0xf0139928
f011f5b7:	e8 75 18 fe ff       	call   f0100e31 <cprintf>
f011f5bc:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f5bf:	83 ec 0c             	sub    $0xc,%esp
f011f5c2:	68 3c 99 13 f0       	push   $0xf013993c
f011f5c7:	e8 65 18 fe ff       	call   f0100e31 <cprintf>
f011f5cc:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f5cf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f5d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f5d7:	5b                   	pop    %ebx
f011f5d8:	5f                   	pop    %edi
f011f5d9:	5d                   	pop    %ebp
f011f5da:	c3                   	ret    

f011f5db <test_kfree>:

int test_kfree()
{
f011f5db:	55                   	push   %ebp
f011f5dc:	89 e5                	mov    %esp,%ebp
f011f5de:	57                   	push   %edi
f011f5df:	53                   	push   %ebx
f011f5e0:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f5e6:	83 ec 0c             	sub    $0xc,%esp
f011f5e9:	68 30 91 13 f0       	push   $0xf0139130
f011f5ee:	e8 3e 18 fe ff       	call   f0100e31 <cprintf>
f011f5f3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f5f6:	83 ec 0c             	sub    $0xc,%esp
f011f5f9:	68 60 91 13 f0       	push   $0xf0139160
f011f5fe:	e8 2e 18 fe ff       	call   f0100e31 <cprintf>
f011f603:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f606:	83 ec 0c             	sub    $0xc,%esp
f011f609:	68 30 91 13 f0       	push   $0xf0139130
f011f60e:	e8 1e 18 fe ff       	call   f0100e31 <cprintf>
f011f613:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f616:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f61a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f61e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f624:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f62a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f631:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f638:	e8 83 d3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f63d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f640:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f646:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f64b:	b8 00 00 00 00       	mov    $0x0,%eax
f011f650:	89 d7                	mov    %edx,%edi
f011f652:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f654:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f65a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f65f:	b8 00 00 00 00       	mov    $0x0,%eax
f011f664:	89 d7                	mov    %edx,%edi
f011f666:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f668:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f66e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f673:	b8 00 00 00 00       	mov    $0x0,%eax
f011f678:	89 d7                	mov    %edx,%edi
f011f67a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f67c:	e8 3f d3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f681:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f684:	e8 dd 4f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f689:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f68c:	83 ec 0c             	sub    $0xc,%esp
f011f68f:	68 00 fc 1f 00       	push   $0x1ffc00
f011f694:	e8 a8 88 fe ff       	call   f0107f41 <kmalloc>
f011f699:	83 c4 10             	add    $0x10,%esp
f011f69c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f6a2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f6a8:	89 c1                	mov    %eax,%ecx
f011f6aa:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f6b1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f6b6:	0f b6 d0             	movzbl %al,%edx
f011f6b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f6bc:	01 d0                	add    %edx,%eax
f011f6be:	48                   	dec    %eax
f011f6bf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f6c2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f6c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6ca:	f7 75 c8             	divl   -0x38(%ebp)
f011f6cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f6d0:	29 d0                	sub    %edx,%eax
f011f6d2:	89 c3                	mov    %eax,%ebx
f011f6d4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f6db:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f6e0:	0f b6 c0             	movzbl %al,%eax
f011f6e3:	c1 e0 04             	shl    $0x4,%eax
f011f6e6:	89 c2                	mov    %eax,%edx
f011f6e8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f6eb:	01 d0                	add    %edx,%eax
f011f6ed:	48                   	dec    %eax
f011f6ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f6f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f6f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6f9:	f7 75 c0             	divl   -0x40(%ebp)
f011f6fc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f6ff:	29 d0                	sub    %edx,%eax
f011f701:	01 d8                	add    %ebx,%eax
f011f703:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f708:	39 c1                	cmp    %eax,%ecx
f011f70a:	74 17                	je     f011f723 <test_kfree+0x148>
f011f70c:	83 ec 04             	sub    $0x4,%esp
f011f70f:	68 d4 92 13 f0       	push   $0xf01392d4
f011f714:	68 d7 04 00 00       	push   $0x4d7
f011f719:	68 ee 91 13 f0       	push   $0xf01391ee
f011f71e:	e8 8d 0a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f723:	e8 3e 4f fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f728:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f72b:	74 17                	je     f011f744 <test_kfree+0x169>
f011f72d:	83 ec 04             	sub    $0x4,%esp
f011f730:	68 08 92 13 f0       	push   $0xf0139208
f011f735:	68 d8 04 00 00       	push   $0x4d8
f011f73a:	68 ee 91 13 f0       	push   $0xf01391ee
f011f73f:	e8 6c 0a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f744:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f747:	e8 74 d2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f74c:	29 c3                	sub    %eax,%ebx
f011f74e:	89 d8                	mov    %ebx,%eax
f011f750:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f755:	74 17                	je     f011f76e <test_kfree+0x193>
f011f757:	83 ec 04             	sub    $0x4,%esp
f011f75a:	68 70 92 13 f0       	push   $0xf0139270
f011f75f:	68 d9 04 00 00       	push   $0x4d9
f011f764:	68 ee 91 13 f0       	push   $0xf01391ee
f011f769:	e8 42 0a fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f76e:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f775:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f778:	e8 43 d2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f77d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f780:	e8 e1 4e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f785:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f788:	83 ec 0c             	sub    $0xc,%esp
f011f78b:	68 00 fc 1f 00       	push   $0x1ffc00
f011f790:	e8 ac 87 fe ff       	call   f0107f41 <kmalloc>
f011f795:	83 c4 10             	add    $0x10,%esp
f011f798:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f79e:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f7a4:	89 c1                	mov    %eax,%ecx
f011f7a6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f7ad:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f7b2:	0f b6 d0             	movzbl %al,%edx
f011f7b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f7b8:	01 d0                	add    %edx,%eax
f011f7ba:	48                   	dec    %eax
f011f7bb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f7be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f7c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7c6:	f7 75 b8             	divl   -0x48(%ebp)
f011f7c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f7cc:	29 d0                	sub    %edx,%eax
f011f7ce:	89 c3                	mov    %eax,%ebx
f011f7d0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f7d7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f7dc:	0f b6 c0             	movzbl %al,%eax
f011f7df:	c1 e0 04             	shl    $0x4,%eax
f011f7e2:	89 c2                	mov    %eax,%edx
f011f7e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f7e7:	01 d0                	add    %edx,%eax
f011f7e9:	48                   	dec    %eax
f011f7ea:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f7ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f7f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7f5:	f7 75 b0             	divl   -0x50(%ebp)
f011f7f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f7fb:	29 d0                	sub    %edx,%eax
f011f7fd:	01 d8                	add    %ebx,%eax
f011f7ff:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f804:	39 c1                	cmp    %eax,%ecx
f011f806:	74 17                	je     f011f81f <test_kfree+0x244>
f011f808:	83 ec 04             	sub    $0x4,%esp
f011f80b:	68 d4 92 13 f0       	push   $0xf01392d4
f011f810:	68 e0 04 00 00       	push   $0x4e0
f011f815:	68 ee 91 13 f0       	push   $0xf01391ee
f011f81a:	e8 91 09 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f81f:	e8 42 4e fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f824:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f827:	74 17                	je     f011f840 <test_kfree+0x265>
f011f829:	83 ec 04             	sub    $0x4,%esp
f011f82c:	68 08 92 13 f0       	push   $0xf0139208
f011f831:	68 e1 04 00 00       	push   $0x4e1
f011f836:	68 ee 91 13 f0       	push   $0xf01391ee
f011f83b:	e8 70 09 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f843:	e8 78 d1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f848:	29 c3                	sub    %eax,%ebx
f011f84a:	89 d8                	mov    %ebx,%eax
f011f84c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f851:	74 17                	je     f011f86a <test_kfree+0x28f>
f011f853:	83 ec 04             	sub    $0x4,%esp
f011f856:	68 70 92 13 f0       	push   $0xf0139270
f011f85b:	68 e2 04 00 00       	push   $0x4e2
f011f860:	68 ee 91 13 f0       	push   $0xf01391ee
f011f865:	e8 46 09 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f86a:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011f871:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f874:	e8 47 d1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f879:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f87c:	e8 e5 4d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f881:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f884:	83 ec 0c             	sub    $0xc,%esp
f011f887:	68 00 08 00 00       	push   $0x800
f011f88c:	e8 b0 86 fe ff       	call   f0107f41 <kmalloc>
f011f891:	83 c4 10             	add    $0x10,%esp
f011f894:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f89a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f8a0:	89 c1                	mov    %eax,%ecx
f011f8a2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f8a9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f8ae:	0f b6 d0             	movzbl %al,%edx
f011f8b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f8b4:	01 d0                	add    %edx,%eax
f011f8b6:	48                   	dec    %eax
f011f8b7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f8ba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f8bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8c2:	f7 75 a8             	divl   -0x58(%ebp)
f011f8c5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f8c8:	29 d0                	sub    %edx,%eax
f011f8ca:	89 c3                	mov    %eax,%ebx
f011f8cc:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f8d3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f8d8:	0f b6 c0             	movzbl %al,%eax
f011f8db:	c1 e0 04             	shl    $0x4,%eax
f011f8de:	89 c2                	mov    %eax,%edx
f011f8e0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f8e3:	01 d0                	add    %edx,%eax
f011f8e5:	48                   	dec    %eax
f011f8e6:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f8e9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f8ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8f1:	f7 75 a0             	divl   -0x60(%ebp)
f011f8f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f8f7:	29 d0                	sub    %edx,%eax
f011f8f9:	01 d8                	add    %ebx,%eax
f011f8fb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f900:	39 c1                	cmp    %eax,%ecx
f011f902:	74 17                	je     f011f91b <test_kfree+0x340>
f011f904:	83 ec 04             	sub    $0x4,%esp
f011f907:	68 d4 92 13 f0       	push   $0xf01392d4
f011f90c:	68 e9 04 00 00       	push   $0x4e9
f011f911:	68 ee 91 13 f0       	push   $0xf01391ee
f011f916:	e8 95 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f91b:	e8 46 4d fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f920:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f923:	74 17                	je     f011f93c <test_kfree+0x361>
f011f925:	83 ec 04             	sub    $0x4,%esp
f011f928:	68 08 92 13 f0       	push   $0xf0139208
f011f92d:	68 ea 04 00 00       	push   $0x4ea
f011f932:	68 ee 91 13 f0       	push   $0xf01391ee
f011f937:	e8 74 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f93c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f93f:	e8 7c d0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f944:	29 c3                	sub    %eax,%ebx
f011f946:	89 d8                	mov    %ebx,%eax
f011f948:	83 f8 01             	cmp    $0x1,%eax
f011f94b:	74 17                	je     f011f964 <test_kfree+0x389>
f011f94d:	83 ec 04             	sub    $0x4,%esp
f011f950:	68 70 92 13 f0       	push   $0xf0139270
f011f955:	68 eb 04 00 00       	push   $0x4eb
f011f95a:	68 ee 91 13 f0       	push   $0xf01391ee
f011f95f:	e8 4c 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f964:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011f96b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f96e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f974:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f977:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f97e:	eb 0e                	jmp    f011f98e <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011f980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f983:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f986:	01 d0                	add    %edx,%eax
f011f988:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f98b:	ff 45 f4             	incl   -0xc(%ebp)
f011f98e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f994:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f997:	7f e7                	jg     f011f980 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f999:	e8 22 d0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011f99e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f9a1:	e8 c0 4c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011f9a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f9a9:	83 ec 0c             	sub    $0xc,%esp
f011f9ac:	68 00 08 00 00       	push   $0x800
f011f9b1:	e8 8b 85 fe ff       	call   f0107f41 <kmalloc>
f011f9b6:	83 c4 10             	add    $0x10,%esp
f011f9b9:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9bf:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f9c5:	89 c1                	mov    %eax,%ecx
f011f9c7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f9ce:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f9d3:	0f b6 d0             	movzbl %al,%edx
f011f9d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f9d9:	01 d0                	add    %edx,%eax
f011f9db:	48                   	dec    %eax
f011f9dc:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f9df:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f9e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9e7:	f7 75 94             	divl   -0x6c(%ebp)
f011f9ea:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f9ed:	29 d0                	sub    %edx,%eax
f011f9ef:	89 c3                	mov    %eax,%ebx
f011f9f1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f9f8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f9fd:	0f b6 c0             	movzbl %al,%eax
f011fa00:	c1 e0 04             	shl    $0x4,%eax
f011fa03:	89 c2                	mov    %eax,%edx
f011fa05:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fa08:	01 d0                	add    %edx,%eax
f011fa0a:	48                   	dec    %eax
f011fa0b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011fa0e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fa11:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa16:	f7 75 8c             	divl   -0x74(%ebp)
f011fa19:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fa1c:	29 d0                	sub    %edx,%eax
f011fa1e:	01 d8                	add    %ebx,%eax
f011fa20:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fa25:	39 c1                	cmp    %eax,%ecx
f011fa27:	74 17                	je     f011fa40 <test_kfree+0x465>
f011fa29:	83 ec 04             	sub    $0x4,%esp
f011fa2c:	68 d4 92 13 f0       	push   $0xf01392d4
f011fa31:	68 f7 04 00 00       	push   $0x4f7
f011fa36:	68 ee 91 13 f0       	push   $0xf01391ee
f011fa3b:	e8 70 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa40:	e8 21 4c fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fa45:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa48:	74 17                	je     f011fa61 <test_kfree+0x486>
f011fa4a:	83 ec 04             	sub    $0x4,%esp
f011fa4d:	68 08 92 13 f0       	push   $0xf0139208
f011fa52:	68 f8 04 00 00       	push   $0x4f8
f011fa57:	68 ee 91 13 f0       	push   $0xf01391ee
f011fa5c:	e8 4f 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa61:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa64:	e8 57 cf fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fa69:	29 c3                	sub    %eax,%ebx
f011fa6b:	89 d8                	mov    %ebx,%eax
f011fa6d:	83 f8 01             	cmp    $0x1,%eax
f011fa70:	74 17                	je     f011fa89 <test_kfree+0x4ae>
f011fa72:	83 ec 04             	sub    $0x4,%esp
f011fa75:	68 70 92 13 f0       	push   $0xf0139270
f011fa7a:	68 f9 04 00 00       	push   $0x4f9
f011fa7f:	68 ee 91 13 f0       	push   $0xf01391ee
f011fa84:	e8 27 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fa89:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011fa90:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fa93:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fa99:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fa9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011faa3:	eb 0e                	jmp    f011fab3 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011faa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011faa8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011faab:	01 d0                	add    %edx,%eax
f011faad:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fab0:	ff 45 f4             	incl   -0xc(%ebp)
f011fab3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fab9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fabc:	7f e7                	jg     f011faa5 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fabe:	e8 fd ce fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fac3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fac6:	e8 9b 4b fe ff       	call   f0104666 <pf_calculate_free_frames>
f011facb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011face:	83 ec 0c             	sub    $0xc,%esp
f011fad1:	68 00 1c 00 00       	push   $0x1c00
f011fad6:	e8 66 84 fe ff       	call   f0107f41 <kmalloc>
f011fadb:	83 c4 10             	add    $0x10,%esp
f011fade:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fae4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011faea:	89 c1                	mov    %eax,%ecx
f011faec:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011faf3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011faf8:	0f b6 d0             	movzbl %al,%edx
f011fafb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fafe:	01 d0                	add    %edx,%eax
f011fb00:	48                   	dec    %eax
f011fb01:	89 45 80             	mov    %eax,-0x80(%ebp)
f011fb04:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fb07:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb0c:	f7 75 84             	divl   -0x7c(%ebp)
f011fb0f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fb12:	29 d0                	sub    %edx,%eax
f011fb14:	89 c3                	mov    %eax,%ebx
f011fb16:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fb1d:	10 00 00 
f011fb20:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fb25:	0f b6 c0             	movzbl %al,%eax
f011fb28:	c1 e0 04             	shl    $0x4,%eax
f011fb2b:	89 c2                	mov    %eax,%edx
f011fb2d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fb33:	01 d0                	add    %edx,%eax
f011fb35:	48                   	dec    %eax
f011fb36:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fb3c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb42:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb47:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fb4d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb53:	29 d0                	sub    %edx,%eax
f011fb55:	01 d8                	add    %ebx,%eax
f011fb57:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fb5c:	39 c1                	cmp    %eax,%ecx
f011fb5e:	74 17                	je     f011fb77 <test_kfree+0x59c>
f011fb60:	83 ec 04             	sub    $0x4,%esp
f011fb63:	68 d4 92 13 f0       	push   $0xf01392d4
f011fb68:	68 05 05 00 00       	push   $0x505
f011fb6d:	68 ee 91 13 f0       	push   $0xf01391ee
f011fb72:	e8 39 06 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb77:	e8 ea 4a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fb7c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb7f:	74 17                	je     f011fb98 <test_kfree+0x5bd>
f011fb81:	83 ec 04             	sub    $0x4,%esp
f011fb84:	68 08 92 13 f0       	push   $0xf0139208
f011fb89:	68 06 05 00 00       	push   $0x506
f011fb8e:	68 ee 91 13 f0       	push   $0xf01391ee
f011fb93:	e8 18 06 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb98:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fb9b:	e8 20 ce fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fba0:	29 c3                	sub    %eax,%ebx
f011fba2:	89 d8                	mov    %ebx,%eax
f011fba4:	83 f8 02             	cmp    $0x2,%eax
f011fba7:	74 17                	je     f011fbc0 <test_kfree+0x5e5>
f011fba9:	83 ec 04             	sub    $0x4,%esp
f011fbac:	68 70 92 13 f0       	push   $0xf0139270
f011fbb1:	68 07 05 00 00       	push   $0x507
f011fbb6:	68 ee 91 13 f0       	push   $0xf01391ee
f011fbbb:	e8 f0 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fbc0:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011fbc7:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fbca:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fbd0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fbd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fbda:	eb 0e                	jmp    f011fbea <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011fbdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fbdf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fbe2:	01 d0                	add    %edx,%eax
f011fbe4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fbe7:	ff 45 f4             	incl   -0xc(%ebp)
f011fbea:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fbf0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fbf3:	7f e7                	jg     f011fbdc <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fbf5:	e8 c6 cd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fbfa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fbfd:	e8 64 4a fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fc02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fc05:	83 ec 0c             	sub    $0xc,%esp
f011fc08:	68 00 fc 2f 00       	push   $0x2ffc00
f011fc0d:	e8 2f 83 fe ff       	call   f0107f41 <kmalloc>
f011fc12:	83 c4 10             	add    $0x10,%esp
f011fc15:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc1b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fc21:	89 c1                	mov    %eax,%ecx
f011fc23:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fc2a:	10 00 00 
f011fc2d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fc32:	0f b6 d0             	movzbl %al,%edx
f011fc35:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fc3b:	01 d0                	add    %edx,%eax
f011fc3d:	48                   	dec    %eax
f011fc3e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fc44:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc4f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fc55:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc5b:	29 d0                	sub    %edx,%eax
f011fc5d:	89 c3                	mov    %eax,%ebx
f011fc5f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fc66:	10 00 00 
f011fc69:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fc6e:	0f b6 c0             	movzbl %al,%eax
f011fc71:	c1 e0 04             	shl    $0x4,%eax
f011fc74:	89 c2                	mov    %eax,%edx
f011fc76:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fc7c:	01 d0                	add    %edx,%eax
f011fc7e:	48                   	dec    %eax
f011fc7f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fc85:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fc8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc90:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fc96:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fc9c:	29 d0                	sub    %edx,%eax
f011fc9e:	01 d8                	add    %ebx,%eax
f011fca0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fca5:	39 c1                	cmp    %eax,%ecx
f011fca7:	74 17                	je     f011fcc0 <test_kfree+0x6e5>
f011fca9:	83 ec 04             	sub    $0x4,%esp
f011fcac:	68 d4 92 13 f0       	push   $0xf01392d4
f011fcb1:	68 13 05 00 00       	push   $0x513
f011fcb6:	68 ee 91 13 f0       	push   $0xf01391ee
f011fcbb:	e8 f0 04 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcc0:	e8 a1 49 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fcc5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fcc8:	74 17                	je     f011fce1 <test_kfree+0x706>
f011fcca:	83 ec 04             	sub    $0x4,%esp
f011fccd:	68 08 92 13 f0       	push   $0xf0139208
f011fcd2:	68 14 05 00 00       	push   $0x514
f011fcd7:	68 ee 91 13 f0       	push   $0xf01391ee
f011fcdc:	e8 cf 04 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fce1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fce4:	e8 d7 cc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fce9:	29 c3                	sub    %eax,%ebx
f011fceb:	89 d8                	mov    %ebx,%eax
f011fced:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fcf2:	74 17                	je     f011fd0b <test_kfree+0x730>
f011fcf4:	83 ec 04             	sub    $0x4,%esp
f011fcf7:	68 70 92 13 f0       	push   $0xf0139270
f011fcfc:	68 15 05 00 00       	push   $0x515
f011fd01:	68 ee 91 13 f0       	push   $0xf01391ee
f011fd06:	e8 a5 04 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011fd0b:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011fd12:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fd15:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fd1b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fd1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd25:	eb 0e                	jmp    f011fd35 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011fd27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd2a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fd2d:	01 d0                	add    %edx,%eax
f011fd2f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fd32:	ff 45 f4             	incl   -0xc(%ebp)
f011fd35:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fd3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd3e:	7f e7                	jg     f011fd27 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd40:	e8 7b cc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fd45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd48:	e8 19 49 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fd4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fd50:	83 ec 0c             	sub    $0xc,%esp
f011fd53:	68 00 fc 5f 00       	push   $0x5ffc00
f011fd58:	e8 e4 81 fe ff       	call   f0107f41 <kmalloc>
f011fd5d:	83 c4 10             	add    $0x10,%esp
f011fd60:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fd66:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fd6c:	89 c1                	mov    %eax,%ecx
f011fd6e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fd75:	10 00 00 
f011fd78:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fd7d:	0f b6 d0             	movzbl %al,%edx
f011fd80:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fd86:	01 d0                	add    %edx,%eax
f011fd88:	48                   	dec    %eax
f011fd89:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fd8f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fd95:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd9a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fda0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fda6:	29 d0                	sub    %edx,%eax
f011fda8:	89 c3                	mov    %eax,%ebx
f011fdaa:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fdb1:	10 00 00 
f011fdb4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fdb9:	0f b6 c0             	movzbl %al,%eax
f011fdbc:	c1 e0 04             	shl    $0x4,%eax
f011fdbf:	89 c2                	mov    %eax,%edx
f011fdc1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fdc7:	01 d0                	add    %edx,%eax
f011fdc9:	48                   	dec    %eax
f011fdca:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fdd0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fdd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fddb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fde1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fde7:	29 d0                	sub    %edx,%eax
f011fde9:	01 d8                	add    %ebx,%eax
f011fdeb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fdf0:	39 c1                	cmp    %eax,%ecx
f011fdf2:	74 17                	je     f011fe0b <test_kfree+0x830>
f011fdf4:	83 ec 04             	sub    $0x4,%esp
f011fdf7:	68 d4 92 13 f0       	push   $0xf01392d4
f011fdfc:	68 21 05 00 00       	push   $0x521
f011fe01:	68 ee 91 13 f0       	push   $0xf01391ee
f011fe06:	e8 a5 03 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe0b:	e8 56 48 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fe10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe13:	74 17                	je     f011fe2c <test_kfree+0x851>
f011fe15:	83 ec 04             	sub    $0x4,%esp
f011fe18:	68 08 92 13 f0       	push   $0xf0139208
f011fe1d:	68 22 05 00 00       	push   $0x522
f011fe22:	68 ee 91 13 f0       	push   $0xf01391ee
f011fe27:	e8 84 03 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fe2c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fe2f:	e8 8c cb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fe34:	29 c3                	sub    %eax,%ebx
f011fe36:	89 d8                	mov    %ebx,%eax
f011fe38:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fe3d:	74 17                	je     f011fe56 <test_kfree+0x87b>
f011fe3f:	83 ec 04             	sub    $0x4,%esp
f011fe42:	68 70 92 13 f0       	push   $0xf0139270
f011fe47:	68 23 05 00 00       	push   $0x523
f011fe4c:	68 ee 91 13 f0       	push   $0xf01391ee
f011fe51:	e8 5a 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011fe56:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011fe5d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fe60:	e8 5b cb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fe65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe68:	e8 f9 47 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011fe6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fe70:	83 ec 0c             	sub    $0xc,%esp
f011fe73:	68 00 38 00 00       	push   $0x3800
f011fe78:	e8 c4 80 fe ff       	call   f0107f41 <kmalloc>
f011fe7d:	83 c4 10             	add    $0x10,%esp
f011fe80:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe86:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fe8c:	89 c1                	mov    %eax,%ecx
f011fe8e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fe95:	10 00 00 
f011fe98:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fe9d:	0f b6 d0             	movzbl %al,%edx
f011fea0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fea6:	01 d0                	add    %edx,%eax
f011fea8:	48                   	dec    %eax
f011fea9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011feaf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011feb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011feba:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fec0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fec6:	29 d0                	sub    %edx,%eax
f011fec8:	89 c3                	mov    %eax,%ebx
f011feca:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011fed1:	10 00 00 
f011fed4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fed9:	0f b6 c0             	movzbl %al,%eax
f011fedc:	c1 e0 04             	shl    $0x4,%eax
f011fedf:	89 c2                	mov    %eax,%edx
f011fee1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fee7:	01 d0                	add    %edx,%eax
f011fee9:	48                   	dec    %eax
f011feea:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011fef0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fef6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fefb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ff01:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff07:	29 d0                	sub    %edx,%eax
f011ff09:	01 d8                	add    %ebx,%eax
f011ff0b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011ff10:	39 c1                	cmp    %eax,%ecx
f011ff12:	74 17                	je     f011ff2b <test_kfree+0x950>
f011ff14:	83 ec 04             	sub    $0x4,%esp
f011ff17:	68 d4 92 13 f0       	push   $0xf01392d4
f011ff1c:	68 2a 05 00 00       	push   $0x52a
f011ff21:	68 ee 91 13 f0       	push   $0xf01391ee
f011ff26:	e8 85 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff2b:	e8 36 47 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ff30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff33:	74 17                	je     f011ff4c <test_kfree+0x971>
f011ff35:	83 ec 04             	sub    $0x4,%esp
f011ff38:	68 08 92 13 f0       	push   $0xf0139208
f011ff3d:	68 2b 05 00 00       	push   $0x52b
f011ff42:	68 ee 91 13 f0       	push   $0xf01391ee
f011ff47:	e8 64 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff4c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff4f:	e8 6c ca fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ff54:	29 c3                	sub    %eax,%ebx
f011ff56:	89 d8                	mov    %ebx,%eax
f011ff58:	83 f8 04             	cmp    $0x4,%eax
f011ff5b:	74 17                	je     f011ff74 <test_kfree+0x999>
f011ff5d:	83 ec 04             	sub    $0x4,%esp
f011ff60:	68 70 92 13 f0       	push   $0xf0139270
f011ff65:	68 2c 05 00 00       	push   $0x52c
f011ff6a:	68 ee 91 13 f0       	push   $0xf01391ee
f011ff6f:	e8 3c 02 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011ff74:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011ff7b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011ff7e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011ff84:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011ff87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff8e:	eb 0e                	jmp    f011ff9e <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011ff90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff93:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff96:	01 d0                	add    %edx,%eax
f011ff98:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011ff9b:	ff 45 f4             	incl   -0xc(%ebp)
f011ff9e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ffa4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ffa7:	7f e7                	jg     f011ff90 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011ffa9:	e8 12 ca fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011ffae:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011ffb4:	e8 ad 46 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ffb9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011ffbf:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011ffc5:	83 ec 0c             	sub    $0xc,%esp
f011ffc8:	50                   	push   %eax
f011ffc9:	e8 8d 7f fe ff       	call   f0107f5b <kfree>
f011ffce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ffd1:	e8 90 46 fe ff       	call   f0104666 <pf_calculate_free_frames>
f011ffd6:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011ffdc:	74 17                	je     f011fff5 <test_kfree+0xa1a>
f011ffde:	83 ec 04             	sub    $0x4,%esp
f011ffe1:	68 08 92 13 f0       	push   $0xf0139208
f011ffe6:	68 3b 05 00 00       	push   $0x53b
f011ffeb:	68 ee 91 13 f0       	push   $0xf01391ee
f011fff0:	e8 bb 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fff5:	e8 c6 c9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f011fffa:	89 c2                	mov    %eax,%edx
f011fffc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120002:	29 c2                	sub    %eax,%edx
f0120004:	89 d0                	mov    %edx,%eax
f0120006:	3d 00 02 00 00       	cmp    $0x200,%eax
f012000b:	74 17                	je     f0120024 <test_kfree+0xa49>
f012000d:	83 ec 04             	sub    $0x4,%esp
f0120010:	68 78 99 13 f0       	push   $0xf0139978
f0120015:	68 3c 05 00 00       	push   $0x53c
f012001a:	68 ee 91 13 f0       	push   $0xf01391ee
f012001f:	e8 8c 01 fe ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120024:	e8 97 c9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120029:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012002f:	e8 32 46 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120034:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f012003a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0120040:	83 ec 0c             	sub    $0xc,%esp
f0120043:	50                   	push   %eax
f0120044:	e8 12 7f fe ff       	call   f0107f5b <kfree>
f0120049:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012004c:	e8 15 46 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120051:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120057:	74 17                	je     f0120070 <test_kfree+0xa95>
f0120059:	83 ec 04             	sub    $0x4,%esp
f012005c:	68 08 92 13 f0       	push   $0xf0139208
f0120061:	68 42 05 00 00       	push   $0x542
f0120066:	68 ee 91 13 f0       	push   $0xf01391ee
f012006b:	e8 40 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120070:	e8 4b c9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120075:	89 c2                	mov    %eax,%edx
f0120077:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012007d:	29 c2                	sub    %eax,%edx
f012007f:	89 d0                	mov    %edx,%eax
f0120081:	83 f8 01             	cmp    $0x1,%eax
f0120084:	74 17                	je     f012009d <test_kfree+0xac2>
f0120086:	83 ec 04             	sub    $0x4,%esp
f0120089:	68 78 99 13 f0       	push   $0xf0139978
f012008e:	68 43 05 00 00       	push   $0x543
f0120093:	68 ee 91 13 f0       	push   $0xf01391ee
f0120098:	e8 13 01 fe ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012009d:	e8 1e c9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01200a2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200a8:	e8 b9 45 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01200ad:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01200b3:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01200b9:	83 ec 0c             	sub    $0xc,%esp
f01200bc:	50                   	push   %eax
f01200bd:	e8 99 7e fe ff       	call   f0107f5b <kfree>
f01200c2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200c5:	e8 9c 45 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01200ca:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01200d0:	74 17                	je     f01200e9 <test_kfree+0xb0e>
f01200d2:	83 ec 04             	sub    $0x4,%esp
f01200d5:	68 08 92 13 f0       	push   $0xf0139208
f01200da:	68 49 05 00 00       	push   $0x549
f01200df:	68 ee 91 13 f0       	push   $0xf01391ee
f01200e4:	e8 c7 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01200e9:	e8 d2 c8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01200ee:	89 c2                	mov    %eax,%edx
f01200f0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01200f6:	29 c2                	sub    %eax,%edx
f01200f8:	89 d0                	mov    %edx,%eax
f01200fa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01200ff:	74 17                	je     f0120118 <test_kfree+0xb3d>
f0120101:	83 ec 04             	sub    $0x4,%esp
f0120104:	68 78 99 13 f0       	push   $0xf0139978
f0120109:	68 4a 05 00 00       	push   $0x54a
f012010e:	68 ee 91 13 f0       	push   $0xf01391ee
f0120113:	e8 98 00 fe ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120118:	e8 a3 c8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012011d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120123:	e8 3e 45 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120128:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f012012e:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0120134:	83 ec 0c             	sub    $0xc,%esp
f0120137:	50                   	push   %eax
f0120138:	e8 1e 7e fe ff       	call   f0107f5b <kfree>
f012013d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120140:	e8 21 45 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120145:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012014b:	74 17                	je     f0120164 <test_kfree+0xb89>
f012014d:	83 ec 04             	sub    $0x4,%esp
f0120150:	68 08 92 13 f0       	push   $0xf0139208
f0120155:	68 50 05 00 00       	push   $0x550
f012015a:	68 ee 91 13 f0       	push   $0xf01391ee
f012015f:	e8 4c 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120164:	e8 57 c8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120169:	89 c2                	mov    %eax,%edx
f012016b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120171:	29 c2                	sub    %eax,%edx
f0120173:	89 d0                	mov    %edx,%eax
f0120175:	3d 00 06 00 00       	cmp    $0x600,%eax
f012017a:	74 17                	je     f0120193 <test_kfree+0xbb8>
f012017c:	83 ec 04             	sub    $0x4,%esp
f012017f:	68 78 99 13 f0       	push   $0xf0139978
f0120184:	68 51 05 00 00       	push   $0x551
f0120189:	68 ee 91 13 f0       	push   $0xf01391ee
f012018e:	e8 1d 00 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120193:	83 ec 0c             	sub    $0xc,%esp
f0120196:	68 b0 99 13 f0       	push   $0xf01399b0
f012019b:	e8 91 0c fe ff       	call   f0100e31 <cprintf>
f01201a0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01201a3:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01201a9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01201ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01201b3:	eb 1e                	jmp    f01201d3 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f01201b5:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01201bb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01201be:	8b 45 98             	mov    -0x68(%ebp),%eax
f01201c1:	01 c8                	add    %ecx,%eax
f01201c3:	8a 00                	mov    (%eax),%al
f01201c5:	0f be c0             	movsbl %al,%eax
f01201c8:	01 d0                	add    %edx,%eax
f01201ca:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01201d0:	ff 45 f4             	incl   -0xc(%ebp)
f01201d3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01201d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01201dc:	7f d7                	jg     f01201b5 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01201de:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01201e4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01201ea:	89 c1                	mov    %eax,%ecx
f01201ec:	01 c9                	add    %ecx,%ecx
f01201ee:	01 c8                	add    %ecx,%eax
f01201f0:	39 c2                	cmp    %eax,%edx
f01201f2:	74 17                	je     f012020b <test_kfree+0xc30>
f01201f4:	83 ec 04             	sub    $0x4,%esp
f01201f7:	68 d4 99 13 f0       	push   $0xf01399d4
f01201fc:	68 5e 05 00 00       	push   $0x55e
f0120201:	68 ee 91 13 f0       	push   $0xf01391ee
f0120206:	e8 a5 ff fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012020b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120211:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120214:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012021b:	eb 1e                	jmp    f012023b <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f012021d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0120223:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120226:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120229:	01 c8                	add    %ecx,%eax
f012022b:	8a 00                	mov    (%eax),%al
f012022d:	0f be c0             	movsbl %al,%eax
f0120230:	01 d0                	add    %edx,%eax
f0120232:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120238:	ff 45 f4             	incl   -0xc(%ebp)
f012023b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120241:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120244:	7f d7                	jg     f012021d <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120246:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012024c:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0120252:	c1 e2 02             	shl    $0x2,%edx
f0120255:	39 d0                	cmp    %edx,%eax
f0120257:	74 17                	je     f0120270 <test_kfree+0xc95>
f0120259:	83 ec 04             	sub    $0x4,%esp
f012025c:	68 d4 99 13 f0       	push   $0xf01399d4
f0120261:	68 66 05 00 00       	push   $0x566
f0120266:	68 ee 91 13 f0       	push   $0xf01391ee
f012026b:	e8 40 ff fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120270:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120276:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120279:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120280:	eb 1e                	jmp    f01202a0 <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f0120282:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0120288:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012028b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012028e:	01 c8                	add    %ecx,%eax
f0120290:	8a 00                	mov    (%eax),%al
f0120292:	0f be c0             	movsbl %al,%eax
f0120295:	01 d0                	add    %edx,%eax
f0120297:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012029d:	ff 45 f4             	incl   -0xc(%ebp)
f01202a0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01202a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202a9:	7f d7                	jg     f0120282 <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01202ab:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01202b1:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01202b7:	89 d0                	mov    %edx,%eax
f01202b9:	c1 e0 02             	shl    $0x2,%eax
f01202bc:	01 d0                	add    %edx,%eax
f01202be:	39 c1                	cmp    %eax,%ecx
f01202c0:	74 17                	je     f01202d9 <test_kfree+0xcfe>
f01202c2:	83 ec 04             	sub    $0x4,%esp
f01202c5:	68 d4 99 13 f0       	push   $0xf01399d4
f01202ca:	68 6e 05 00 00       	push   $0x56e
f01202cf:	68 ee 91 13 f0       	push   $0xf01391ee
f01202d4:	e8 d7 fe fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01202d9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01202df:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01202e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202e9:	eb 1e                	jmp    f0120309 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f01202eb:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01202f1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01202f4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01202f7:	01 c8                	add    %ecx,%eax
f01202f9:	8a 00                	mov    (%eax),%al
f01202fb:	0f be c0             	movsbl %al,%eax
f01202fe:	01 d0                	add    %edx,%eax
f0120300:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120306:	ff 45 f4             	incl   -0xc(%ebp)
f0120309:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012030f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120312:	7f d7                	jg     f01202eb <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120314:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012031a:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0120320:	89 d0                	mov    %edx,%eax
f0120322:	01 c0                	add    %eax,%eax
f0120324:	01 d0                	add    %edx,%eax
f0120326:	01 c0                	add    %eax,%eax
f0120328:	01 d0                	add    %edx,%eax
f012032a:	39 c1                	cmp    %eax,%ecx
f012032c:	74 17                	je     f0120345 <test_kfree+0xd6a>
f012032e:	83 ec 04             	sub    $0x4,%esp
f0120331:	68 d4 99 13 f0       	push   $0xf01399d4
f0120336:	68 76 05 00 00       	push   $0x576
f012033b:	68 ee 91 13 f0       	push   $0xf01391ee
f0120340:	e8 6b fe fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0120345:	83 ec 0c             	sub    $0xc,%esp
f0120348:	68 07 9a 13 f0       	push   $0xf0139a07
f012034d:	e8 df 0a fe ff       	call   f0100e31 <cprintf>
f0120352:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120355:	e8 66 c6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012035a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012035d:	e8 04 43 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120362:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120365:	83 ec 0c             	sub    $0xc,%esp
f0120368:	68 00 50 00 00       	push   $0x5000
f012036d:	e8 cf 7b fe ff       	call   f0107f41 <kmalloc>
f0120372:	83 c4 10             	add    $0x10,%esp
f0120375:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012037b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120381:	89 c1                	mov    %eax,%ecx
f0120383:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012038a:	10 00 00 
f012038d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120392:	0f b6 d0             	movzbl %al,%edx
f0120395:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012039b:	01 d0                	add    %edx,%eax
f012039d:	48                   	dec    %eax
f012039e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01203a4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01203aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01203af:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01203b5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01203bb:	29 d0                	sub    %edx,%eax
f01203bd:	89 c3                	mov    %eax,%ebx
f01203bf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01203c6:	10 00 00 
f01203c9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01203ce:	0f b6 c0             	movzbl %al,%eax
f01203d1:	c1 e0 04             	shl    $0x4,%eax
f01203d4:	89 c2                	mov    %eax,%edx
f01203d6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01203dc:	01 d0                	add    %edx,%eax
f01203de:	48                   	dec    %eax
f01203df:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01203e5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01203eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01203f0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01203f6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01203fc:	29 d0                	sub    %edx,%eax
f01203fe:	01 d8                	add    %ebx,%eax
f0120400:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120405:	39 c1                	cmp    %eax,%ecx
f0120407:	74 17                	je     f0120420 <test_kfree+0xe45>
f0120409:	83 ec 04             	sub    $0x4,%esp
f012040c:	68 d4 92 13 f0       	push   $0xf01392d4
f0120411:	68 80 05 00 00       	push   $0x580
f0120416:	68 ee 91 13 f0       	push   $0xf01391ee
f012041b:	e8 90 fd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120420:	e8 41 42 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120425:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120428:	74 17                	je     f0120441 <test_kfree+0xe66>
f012042a:	83 ec 04             	sub    $0x4,%esp
f012042d:	68 08 92 13 f0       	push   $0xf0139208
f0120432:	68 81 05 00 00       	push   $0x581
f0120437:	68 ee 91 13 f0       	push   $0xf01391ee
f012043c:	e8 6f fd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120441:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120444:	e8 77 c5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120449:	29 c3                	sub    %eax,%ebx
f012044b:	89 d8                	mov    %ebx,%eax
f012044d:	83 f8 05             	cmp    $0x5,%eax
f0120450:	74 17                	je     f0120469 <test_kfree+0xe8e>
f0120452:	83 ec 04             	sub    $0x4,%esp
f0120455:	68 70 92 13 f0       	push   $0xf0139270
f012045a:	68 82 05 00 00       	push   $0x582
f012045f:	68 ee 91 13 f0       	push   $0xf01391ee
f0120464:	e8 47 fd fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120469:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0120470:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120473:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120479:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012047c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120483:	eb 0e                	jmp    f0120493 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f0120485:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120488:	8b 45 98             	mov    -0x68(%ebp),%eax
f012048b:	01 d0                	add    %edx,%eax
f012048d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120490:	ff 45 f4             	incl   -0xc(%ebp)
f0120493:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120499:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012049c:	7f e7                	jg     f0120485 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012049e:	e8 1d c5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01204a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204a6:	e8 bb 41 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01204ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01204ae:	83 ec 0c             	sub    $0xc,%esp
f01204b1:	68 00 00 10 00       	push   $0x100000
f01204b6:	e8 86 7a fe ff       	call   f0107f41 <kmalloc>
f01204bb:	83 c4 10             	add    $0x10,%esp
f01204be:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204c4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01204ca:	89 c1                	mov    %eax,%ecx
f01204cc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01204d3:	10 00 00 
f01204d6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01204db:	0f b6 d0             	movzbl %al,%edx
f01204de:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01204e4:	01 d0                	add    %edx,%eax
f01204e6:	48                   	dec    %eax
f01204e7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01204ed:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01204f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01204f8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01204fe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120504:	29 d0                	sub    %edx,%eax
f0120506:	89 c3                	mov    %eax,%ebx
f0120508:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012050f:	10 00 00 
f0120512:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120517:	0f b6 c0             	movzbl %al,%eax
f012051a:	c1 e0 04             	shl    $0x4,%eax
f012051d:	89 c2                	mov    %eax,%edx
f012051f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120525:	01 d0                	add    %edx,%eax
f0120527:	48                   	dec    %eax
f0120528:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012052e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120534:	ba 00 00 00 00       	mov    $0x0,%edx
f0120539:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012053f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120545:	29 d0                	sub    %edx,%eax
f0120547:	01 d8                	add    %ebx,%eax
f0120549:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012054e:	39 c1                	cmp    %eax,%ecx
f0120550:	74 17                	je     f0120569 <test_kfree+0xf8e>
f0120552:	83 ec 04             	sub    $0x4,%esp
f0120555:	68 d4 92 13 f0       	push   $0xf01392d4
f012055a:	68 8e 05 00 00       	push   $0x58e
f012055f:	68 ee 91 13 f0       	push   $0xf01391ee
f0120564:	e8 47 fc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120569:	e8 f8 40 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012056e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120571:	74 17                	je     f012058a <test_kfree+0xfaf>
f0120573:	83 ec 04             	sub    $0x4,%esp
f0120576:	68 08 92 13 f0       	push   $0xf0139208
f012057b:	68 8f 05 00 00       	push   $0x58f
f0120580:	68 ee 91 13 f0       	push   $0xf01391ee
f0120585:	e8 26 fc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012058a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012058d:	e8 2e c4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120592:	29 c3                	sub    %eax,%ebx
f0120594:	89 d8                	mov    %ebx,%eax
f0120596:	3d 00 01 00 00       	cmp    $0x100,%eax
f012059b:	74 17                	je     f01205b4 <test_kfree+0xfd9>
f012059d:	83 ec 04             	sub    $0x4,%esp
f01205a0:	68 70 92 13 f0       	push   $0xf0139270
f01205a5:	68 90 05 00 00       	push   $0x590
f01205aa:	68 ee 91 13 f0       	push   $0xf01391ee
f01205af:	e8 fc fb fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01205b4:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01205bb:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01205be:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01205c4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01205c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205ce:	eb 0e                	jmp    f01205de <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f01205d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205d3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01205d6:	01 d0                	add    %edx,%eax
f01205d8:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01205db:	ff 45 f4             	incl   -0xc(%ebp)
f01205de:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01205e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205e7:	7f e7                	jg     f01205d0 <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01205e9:	e8 16 7e ff ff       	call   f0118404 <isKHeapPlacementStrategyNEXTFIT>
f01205ee:	84 c0                	test   %al,%al
f01205f0:	0f 84 9e 05 00 00    	je     f0120b94 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01205f6:	e8 c5 c3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01205fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01205fe:	e8 63 40 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120603:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120606:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012060d:	10 00 00 
f0120610:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120615:	0f b6 d0             	movzbl %al,%edx
f0120618:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012061e:	01 d0                	add    %edx,%eax
f0120620:	48                   	dec    %eax
f0120621:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120627:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012062d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120632:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120638:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012063e:	29 d0                	sub    %edx,%eax
f0120640:	89 c1                	mov    %eax,%ecx
f0120642:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120649:	10 00 00 
f012064c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120651:	0f b6 c0             	movzbl %al,%eax
f0120654:	c1 e0 04             	shl    $0x4,%eax
f0120657:	89 c2                	mov    %eax,%edx
f0120659:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012065f:	01 d0                	add    %edx,%eax
f0120661:	48                   	dec    %eax
f0120662:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120668:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012066e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120673:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120679:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012067f:	29 d0                	sub    %edx,%eax
f0120681:	01 c8                	add    %ecx,%eax
f0120683:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120688:	29 c2                	sub    %eax,%edx
f012068a:	89 d0                	mov    %edx,%eax
f012068c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120692:	83 ec 0c             	sub    $0xc,%esp
f0120695:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f012069b:	e8 a1 78 fe ff       	call   f0107f41 <kmalloc>
f01206a0:	83 c4 10             	add    $0x10,%esp
f01206a3:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206a9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01206af:	89 c1                	mov    %eax,%ecx
f01206b1:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01206b8:	10 00 00 
f01206bb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01206c0:	0f b6 d0             	movzbl %al,%edx
f01206c3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01206c9:	01 d0                	add    %edx,%eax
f01206cb:	48                   	dec    %eax
f01206cc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01206d2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01206d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01206dd:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01206e3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01206e9:	29 d0                	sub    %edx,%eax
f01206eb:	89 c3                	mov    %eax,%ebx
f01206ed:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01206f4:	10 00 00 
f01206f7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01206fc:	0f b6 c0             	movzbl %al,%eax
f01206ff:	c1 e0 04             	shl    $0x4,%eax
f0120702:	89 c2                	mov    %eax,%edx
f0120704:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012070a:	01 d0                	add    %edx,%eax
f012070c:	48                   	dec    %eax
f012070d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0120713:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120719:	ba 00 00 00 00       	mov    $0x0,%edx
f012071e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0120724:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012072a:	29 d0                	sub    %edx,%eax
f012072c:	01 d8                	add    %ebx,%eax
f012072e:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120733:	39 c1                	cmp    %eax,%ecx
f0120735:	74 17                	je     f012074e <test_kfree+0x1173>
f0120737:	83 ec 04             	sub    $0x4,%esp
f012073a:	68 d4 92 13 f0       	push   $0xf01392d4
f012073f:	68 9f 05 00 00       	push   $0x59f
f0120744:	68 ee 91 13 f0       	push   $0xf01391ee
f0120749:	e8 62 fa fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012074e:	e8 13 3f fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120753:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120756:	74 17                	je     f012076f <test_kfree+0x1194>
f0120758:	83 ec 04             	sub    $0x4,%esp
f012075b:	68 08 92 13 f0       	push   $0xf0139208
f0120760:	68 a0 05 00 00       	push   $0x5a0
f0120765:	68 ee 91 13 f0       	push   $0xf01391ee
f012076a:	e8 41 fa fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012076f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120772:	e8 49 c2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120777:	29 c3                	sub    %eax,%ebx
f0120779:	89 da                	mov    %ebx,%edx
f012077b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120781:	c1 e8 0c             	shr    $0xc,%eax
f0120784:	39 c2                	cmp    %eax,%edx
f0120786:	74 17                	je     f012079f <test_kfree+0x11c4>
f0120788:	83 ec 04             	sub    $0x4,%esp
f012078b:	68 70 92 13 f0       	push   $0xf0139270
f0120790:	68 a1 05 00 00       	push   $0x5a1
f0120795:	68 ee 91 13 f0       	push   $0xf01391ee
f012079a:	e8 11 fa fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f012079f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01207a5:	48                   	dec    %eax
f01207a6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f01207ac:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01207b2:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01207b5:	e8 06 c2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01207ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01207bd:	e8 a4 3e fe ff       	call   f0104666 <pf_calculate_free_frames>
f01207c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01207c5:	83 ec 0c             	sub    $0xc,%esp
f01207c8:	68 00 00 30 00       	push   $0x300000
f01207cd:	e8 6f 77 fe ff       	call   f0107f41 <kmalloc>
f01207d2:	83 c4 10             	add    $0x10,%esp
f01207d5:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207db:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01207e1:	89 c1                	mov    %eax,%ecx
f01207e3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01207ea:	10 00 00 
f01207ed:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01207f2:	0f b6 d0             	movzbl %al,%edx
f01207f5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01207fb:	01 d0                	add    %edx,%eax
f01207fd:	48                   	dec    %eax
f01207fe:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120804:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012080a:	ba 00 00 00 00       	mov    $0x0,%edx
f012080f:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120815:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012081b:	29 d0                	sub    %edx,%eax
f012081d:	89 c3                	mov    %eax,%ebx
f012081f:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120826:	10 00 00 
f0120829:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012082e:	0f b6 c0             	movzbl %al,%eax
f0120831:	c1 e0 04             	shl    $0x4,%eax
f0120834:	89 c2                	mov    %eax,%edx
f0120836:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012083c:	01 d0                	add    %edx,%eax
f012083e:	48                   	dec    %eax
f012083f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120845:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012084b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120850:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0120856:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012085c:	29 d0                	sub    %edx,%eax
f012085e:	01 d8                	add    %ebx,%eax
f0120860:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120865:	39 c1                	cmp    %eax,%ecx
f0120867:	74 17                	je     f0120880 <test_kfree+0x12a5>
f0120869:	83 ec 04             	sub    $0x4,%esp
f012086c:	68 d4 92 13 f0       	push   $0xf01392d4
f0120871:	68 ae 05 00 00       	push   $0x5ae
f0120876:	68 ee 91 13 f0       	push   $0xf01391ee
f012087b:	e8 30 f9 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120880:	e8 e1 3d fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120885:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120888:	74 17                	je     f01208a1 <test_kfree+0x12c6>
f012088a:	83 ec 04             	sub    $0x4,%esp
f012088d:	68 08 92 13 f0       	push   $0xf0139208
f0120892:	68 af 05 00 00       	push   $0x5af
f0120897:	68 ee 91 13 f0       	push   $0xf01391ee
f012089c:	e8 0f f9 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208a1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208a4:	e8 17 c1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01208a9:	29 c3                	sub    %eax,%ebx
f01208ab:	89 d8                	mov    %ebx,%eax
f01208ad:	3d 00 03 00 00       	cmp    $0x300,%eax
f01208b2:	74 17                	je     f01208cb <test_kfree+0x12f0>
f01208b4:	83 ec 04             	sub    $0x4,%esp
f01208b7:	68 70 92 13 f0       	push   $0xf0139270
f01208bc:	68 b0 05 00 00       	push   $0x5b0
f01208c1:	68 ee 91 13 f0       	push   $0xf01391ee
f01208c6:	e8 e5 f8 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f01208cb:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f01208d2:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f01208d5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01208db:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f01208de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208e5:	eb 0e                	jmp    f01208f5 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f01208e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01208ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01208ed:	01 d0                	add    %edx,%eax
f01208ef:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f01208f2:	ff 45 f4             	incl   -0xc(%ebp)
f01208f5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01208fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208fe:	7f e7                	jg     f01208e7 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120900:	e8 bb c0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120905:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120908:	e8 59 3d fe ff       	call   f0104666 <pf_calculate_free_frames>
f012090d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120910:	83 ec 0c             	sub    $0xc,%esp
f0120913:	68 00 08 00 00       	push   $0x800
f0120918:	e8 24 76 fe ff       	call   f0107f41 <kmalloc>
f012091d:	83 c4 10             	add    $0x10,%esp
f0120920:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120926:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012092c:	89 c1                	mov    %eax,%ecx
f012092e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120935:	10 00 00 
f0120938:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012093d:	0f b6 d0             	movzbl %al,%edx
f0120940:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120946:	01 d0                	add    %edx,%eax
f0120948:	48                   	dec    %eax
f0120949:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012094f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120955:	ba 00 00 00 00       	mov    $0x0,%edx
f012095a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0120960:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120966:	29 d0                	sub    %edx,%eax
f0120968:	89 c3                	mov    %eax,%ebx
f012096a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0120971:	10 00 00 
f0120974:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120979:	0f b6 c0             	movzbl %al,%eax
f012097c:	c1 e0 04             	shl    $0x4,%eax
f012097f:	89 c2                	mov    %eax,%edx
f0120981:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120987:	01 d0                	add    %edx,%eax
f0120989:	48                   	dec    %eax
f012098a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0120990:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120996:	ba 00 00 00 00       	mov    $0x0,%edx
f012099b:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01209a1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01209a7:	29 d0                	sub    %edx,%eax
f01209a9:	01 d8                	add    %ebx,%eax
f01209ab:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01209b0:	39 c1                	cmp    %eax,%ecx
f01209b2:	74 17                	je     f01209cb <test_kfree+0x13f0>
f01209b4:	83 ec 04             	sub    $0x4,%esp
f01209b7:	68 d4 92 13 f0       	push   $0xf01392d4
f01209bc:	68 bc 05 00 00       	push   $0x5bc
f01209c1:	68 ee 91 13 f0       	push   $0xf01391ee
f01209c6:	e8 e5 f7 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209cb:	e8 96 3c fe ff       	call   f0104666 <pf_calculate_free_frames>
f01209d0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209d3:	74 17                	je     f01209ec <test_kfree+0x1411>
f01209d5:	83 ec 04             	sub    $0x4,%esp
f01209d8:	68 08 92 13 f0       	push   $0xf0139208
f01209dd:	68 bd 05 00 00       	push   $0x5bd
f01209e2:	68 ee 91 13 f0       	push   $0xf01391ee
f01209e7:	e8 c4 f7 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209ec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209ef:	e8 cc bf fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01209f4:	29 c3                	sub    %eax,%ebx
f01209f6:	89 d8                	mov    %ebx,%eax
f01209f8:	83 f8 01             	cmp    $0x1,%eax
f01209fb:	74 17                	je     f0120a14 <test_kfree+0x1439>
f01209fd:	83 ec 04             	sub    $0x4,%esp
f0120a00:	68 70 92 13 f0       	push   $0xf0139270
f0120a05:	68 be 05 00 00       	push   $0x5be
f0120a0a:	68 ee 91 13 f0       	push   $0xf01391ee
f0120a0f:	e8 9c f7 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120a14:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f0120a1b:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120a1e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120a24:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120a27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a2e:	eb 0e                	jmp    f0120a3e <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f0120a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a33:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120a36:	01 d0                	add    %edx,%eax
f0120a38:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120a3b:	ff 45 f4             	incl   -0xc(%ebp)
f0120a3e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120a44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a47:	7f e7                	jg     f0120a30 <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120a49:	e8 72 bf fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120a4e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a51:	e8 10 3c fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120a56:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120a59:	83 ec 0c             	sub    $0xc,%esp
f0120a5c:	68 00 00 10 00       	push   $0x100000
f0120a61:	e8 db 74 fe ff       	call   f0107f41 <kmalloc>
f0120a66:	83 c4 10             	add    $0x10,%esp
f0120a69:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a6f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120a75:	89 c1                	mov    %eax,%ecx
f0120a77:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0120a7e:	10 00 00 
f0120a81:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120a86:	0f b6 d0             	movzbl %al,%edx
f0120a89:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120a8f:	01 d0                	add    %edx,%eax
f0120a91:	48                   	dec    %eax
f0120a92:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120a98:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aa3:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120aa9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120aaf:	29 d0                	sub    %edx,%eax
f0120ab1:	89 c3                	mov    %eax,%ebx
f0120ab3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120aba:	10 00 00 
f0120abd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120ac2:	0f b6 c0             	movzbl %al,%eax
f0120ac5:	c1 e0 04             	shl    $0x4,%eax
f0120ac8:	89 c2                	mov    %eax,%edx
f0120aca:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120ad0:	01 d0                	add    %edx,%eax
f0120ad2:	48                   	dec    %eax
f0120ad3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120ad9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ae4:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120aea:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120af0:	29 d0                	sub    %edx,%eax
f0120af2:	01 d8                	add    %ebx,%eax
f0120af4:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120af9:	39 c1                	cmp    %eax,%ecx
f0120afb:	74 17                	je     f0120b14 <test_kfree+0x1539>
f0120afd:	83 ec 04             	sub    $0x4,%esp
f0120b00:	68 d4 92 13 f0       	push   $0xf01392d4
f0120b05:	68 ca 05 00 00       	push   $0x5ca
f0120b0a:	68 ee 91 13 f0       	push   $0xf01391ee
f0120b0f:	e8 9c f6 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b14:	e8 4d 3b fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120b19:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b1c:	74 17                	je     f0120b35 <test_kfree+0x155a>
f0120b1e:	83 ec 04             	sub    $0x4,%esp
f0120b21:	68 08 92 13 f0       	push   $0xf0139208
f0120b26:	68 cb 05 00 00       	push   $0x5cb
f0120b2b:	68 ee 91 13 f0       	push   $0xf01391ee
f0120b30:	e8 7b f6 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b35:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b38:	e8 83 be fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120b3d:	29 c3                	sub    %eax,%ebx
f0120b3f:	89 d8                	mov    %ebx,%eax
f0120b41:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120b46:	74 17                	je     f0120b5f <test_kfree+0x1584>
f0120b48:	83 ec 04             	sub    $0x4,%esp
f0120b4b:	68 70 92 13 f0       	push   $0xf0139270
f0120b50:	68 cc 05 00 00       	push   $0x5cc
f0120b55:	68 ee 91 13 f0       	push   $0xf01391ee
f0120b5a:	e8 51 f6 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120b5f:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120b66:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120b69:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120b6f:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120b72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b79:	eb 0e                	jmp    f0120b89 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120b7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b7e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120b81:	01 d0                	add    %edx,%eax
f0120b83:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120b86:	ff 45 f4             	incl   -0xc(%ebp)
f0120b89:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120b8f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b92:	7f e7                	jg     f0120b7b <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120b94:	83 ec 0c             	sub    $0xc,%esp
f0120b97:	68 0e 9a 13 f0       	push   $0xf0139a0e
f0120b9c:	e8 90 02 fe ff       	call   f0100e31 <cprintf>
f0120ba1:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ba4:	e8 17 be fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120ba9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bac:	e8 b5 3a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120bb1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120bb4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120bba:	83 ec 0c             	sub    $0xc,%esp
f0120bbd:	50                   	push   %eax
f0120bbe:	e8 98 73 fe ff       	call   f0107f5b <kfree>
f0120bc3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bc6:	e8 9b 3a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120bcb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bce:	74 17                	je     f0120be7 <test_kfree+0x160c>
f0120bd0:	83 ec 04             	sub    $0x4,%esp
f0120bd3:	68 08 92 13 f0       	push   $0xf0139208
f0120bd8:	68 dd 05 00 00       	push   $0x5dd
f0120bdd:	68 ee 91 13 f0       	push   $0xf01391ee
f0120be2:	e8 c9 f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120be7:	e8 d4 bd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120bec:	89 c2                	mov    %eax,%edx
f0120bee:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120bf1:	29 c2                	sub    %eax,%edx
f0120bf3:	89 d0                	mov    %edx,%eax
f0120bf5:	83 f8 02             	cmp    $0x2,%eax
f0120bf8:	74 17                	je     f0120c11 <test_kfree+0x1636>
f0120bfa:	83 ec 04             	sub    $0x4,%esp
f0120bfd:	68 78 99 13 f0       	push   $0xf0139978
f0120c02:	68 de 05 00 00       	push   $0x5de
f0120c07:	68 ee 91 13 f0       	push   $0xf01391ee
f0120c0c:	e8 9f f5 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120c11:	e8 aa bd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120c16:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c19:	e8 48 3a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120c1e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120c21:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120c27:	83 ec 0c             	sub    $0xc,%esp
f0120c2a:	50                   	push   %eax
f0120c2b:	e8 2b 73 fe ff       	call   f0107f5b <kfree>
f0120c30:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c33:	e8 2e 3a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120c38:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c3b:	74 17                	je     f0120c54 <test_kfree+0x1679>
f0120c3d:	83 ec 04             	sub    $0x4,%esp
f0120c40:	68 08 92 13 f0       	push   $0xf0139208
f0120c45:	68 e4 05 00 00       	push   $0x5e4
f0120c4a:	68 ee 91 13 f0       	push   $0xf01391ee
f0120c4f:	e8 5c f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c54:	e8 67 bd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120c59:	89 c2                	mov    %eax,%edx
f0120c5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c5e:	29 c2                	sub    %eax,%edx
f0120c60:	89 d0                	mov    %edx,%eax
f0120c62:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120c67:	74 17                	je     f0120c80 <test_kfree+0x16a5>
f0120c69:	83 ec 04             	sub    $0x4,%esp
f0120c6c:	68 78 99 13 f0       	push   $0xf0139978
f0120c71:	68 e5 05 00 00       	push   $0x5e5
f0120c76:	68 ee 91 13 f0       	push   $0xf01391ee
f0120c7b:	e8 30 f5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c80:	e8 3b bd fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120c85:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c88:	e8 d9 39 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120c8d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120c90:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120c96:	83 ec 0c             	sub    $0xc,%esp
f0120c99:	50                   	push   %eax
f0120c9a:	e8 bc 72 fe ff       	call   f0107f5b <kfree>
f0120c9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ca2:	e8 bf 39 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120ca7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120caa:	74 17                	je     f0120cc3 <test_kfree+0x16e8>
f0120cac:	83 ec 04             	sub    $0x4,%esp
f0120caf:	68 08 92 13 f0       	push   $0xf0139208
f0120cb4:	68 eb 05 00 00       	push   $0x5eb
f0120cb9:	68 ee 91 13 f0       	push   $0xf01391ee
f0120cbe:	e8 ed f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cc3:	e8 f8 bc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120cc8:	89 c2                	mov    %eax,%edx
f0120cca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ccd:	29 c2                	sub    %eax,%edx
f0120ccf:	89 d0                	mov    %edx,%eax
f0120cd1:	83 f8 01             	cmp    $0x1,%eax
f0120cd4:	74 17                	je     f0120ced <test_kfree+0x1712>
f0120cd6:	83 ec 04             	sub    $0x4,%esp
f0120cd9:	68 78 99 13 f0       	push   $0xf0139978
f0120cde:	68 ec 05 00 00       	push   $0x5ec
f0120ce3:	68 ee 91 13 f0       	push   $0xf01391ee
f0120ce8:	e8 c3 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ced:	e8 ce bc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120cf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120cf5:	e8 6c 39 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120cfa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120cfd:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120d03:	83 ec 0c             	sub    $0xc,%esp
f0120d06:	50                   	push   %eax
f0120d07:	e8 4f 72 fe ff       	call   f0107f5b <kfree>
f0120d0c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d0f:	e8 52 39 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120d14:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d17:	74 17                	je     f0120d30 <test_kfree+0x1755>
f0120d19:	83 ec 04             	sub    $0x4,%esp
f0120d1c:	68 08 92 13 f0       	push   $0xf0139208
f0120d21:	68 f2 05 00 00       	push   $0x5f2
f0120d26:	68 ee 91 13 f0       	push   $0xf01391ee
f0120d2b:	e8 80 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d30:	e8 8b bc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120d35:	89 c2                	mov    %eax,%edx
f0120d37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d3a:	29 c2                	sub    %eax,%edx
f0120d3c:	89 d0                	mov    %edx,%eax
f0120d3e:	83 f8 04             	cmp    $0x4,%eax
f0120d41:	74 17                	je     f0120d5a <test_kfree+0x177f>
f0120d43:	83 ec 04             	sub    $0x4,%esp
f0120d46:	68 78 99 13 f0       	push   $0xf0139978
f0120d4b:	68 f3 05 00 00       	push   $0x5f3
f0120d50:	68 ee 91 13 f0       	push   $0xf01391ee
f0120d55:	e8 56 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d5a:	e8 61 bc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120d5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d62:	e8 ff 38 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120d67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120d6a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120d70:	83 ec 0c             	sub    $0xc,%esp
f0120d73:	50                   	push   %eax
f0120d74:	e8 e2 71 fe ff       	call   f0107f5b <kfree>
f0120d79:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d7c:	e8 e5 38 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120d81:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d84:	74 17                	je     f0120d9d <test_kfree+0x17c2>
f0120d86:	83 ec 04             	sub    $0x4,%esp
f0120d89:	68 08 92 13 f0       	push   $0xf0139208
f0120d8e:	68 f9 05 00 00       	push   $0x5f9
f0120d93:	68 ee 91 13 f0       	push   $0xf01391ee
f0120d98:	e8 13 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d9d:	e8 1e bc fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120da2:	89 c2                	mov    %eax,%edx
f0120da4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120da7:	29 c2                	sub    %eax,%edx
f0120da9:	89 d0                	mov    %edx,%eax
f0120dab:	83 f8 05             	cmp    $0x5,%eax
f0120dae:	74 17                	je     f0120dc7 <test_kfree+0x17ec>
f0120db0:	83 ec 04             	sub    $0x4,%esp
f0120db3:	68 78 99 13 f0       	push   $0xf0139978
f0120db8:	68 fa 05 00 00       	push   $0x5fa
f0120dbd:	68 ee 91 13 f0       	push   $0xf01391ee
f0120dc2:	e8 e9 f3 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120dc7:	e8 f4 bb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120dcc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dcf:	e8 92 38 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120dd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120dd7:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120ddd:	83 ec 0c             	sub    $0xc,%esp
f0120de0:	50                   	push   %eax
f0120de1:	e8 75 71 fe ff       	call   f0107f5b <kfree>
f0120de6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120de9:	e8 78 38 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120dee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120df1:	74 17                	je     f0120e0a <test_kfree+0x182f>
f0120df3:	83 ec 04             	sub    $0x4,%esp
f0120df6:	68 08 92 13 f0       	push   $0xf0139208
f0120dfb:	68 00 06 00 00       	push   $0x600
f0120e00:	68 ee 91 13 f0       	push   $0xf01391ee
f0120e05:	e8 a6 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e0a:	e8 b1 bb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120e0f:	89 c2                	mov    %eax,%edx
f0120e11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e14:	29 c2                	sub    %eax,%edx
f0120e16:	89 d0                	mov    %edx,%eax
f0120e18:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120e1d:	74 17                	je     f0120e36 <test_kfree+0x185b>
f0120e1f:	83 ec 04             	sub    $0x4,%esp
f0120e22:	68 78 99 13 f0       	push   $0xf0139978
f0120e27:	68 01 06 00 00       	push   $0x601
f0120e2c:	68 ee 91 13 f0       	push   $0xf01391ee
f0120e31:	e8 7a f3 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120e36:	e8 c9 75 ff ff       	call   f0118404 <isKHeapPlacementStrategyNEXTFIT>
f0120e3b:	84 c0                	test   %al,%al
f0120e3d:	0f 84 4a 02 00 00    	je     f012108d <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120e43:	e8 78 bb fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120e48:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120e4b:	e8 16 38 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120e50:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120e53:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120e59:	83 ec 0c             	sub    $0xc,%esp
f0120e5c:	50                   	push   %eax
f0120e5d:	e8 f9 70 fe ff       	call   f0107f5b <kfree>
f0120e62:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120e65:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0120e6c:	10 00 00 
f0120e6f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120e74:	0f b6 d0             	movzbl %al,%edx
f0120e77:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120e7d:	01 d0                	add    %edx,%eax
f0120e7f:	48                   	dec    %eax
f0120e80:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0120e86:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120e8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e91:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0120e97:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120e9d:	29 d0                	sub    %edx,%eax
f0120e9f:	89 c1                	mov    %eax,%ecx
f0120ea1:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0120ea8:	10 00 00 
f0120eab:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120eb0:	0f b6 c0             	movzbl %al,%eax
f0120eb3:	c1 e0 04             	shl    $0x4,%eax
f0120eb6:	89 c2                	mov    %eax,%edx
f0120eb8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120ebe:	01 d0                	add    %edx,%eax
f0120ec0:	48                   	dec    %eax
f0120ec1:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0120ec7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120ecd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ed2:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0120ed8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120ede:	29 d0                	sub    %edx,%eax
f0120ee0:	01 c8                	add    %ecx,%eax
f0120ee2:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120ee7:	29 c2                	sub    %eax,%edx
f0120ee9:	89 d0                	mov    %edx,%eax
f0120eeb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ef1:	e8 70 37 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120ef6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ef9:	74 17                	je     f0120f12 <test_kfree+0x1937>
f0120efb:	83 ec 04             	sub    $0x4,%esp
f0120efe:	68 08 92 13 f0       	push   $0xf0139208
f0120f03:	68 0b 06 00 00       	push   $0x60b
f0120f08:	68 ee 91 13 f0       	push   $0xf01391ee
f0120f0d:	e8 9e f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f12:	e8 a9 ba fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120f17:	89 c2                	mov    %eax,%edx
f0120f19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f1c:	29 c2                	sub    %eax,%edx
f0120f1e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120f24:	c1 e8 0c             	shr    $0xc,%eax
f0120f27:	39 c2                	cmp    %eax,%edx
f0120f29:	74 17                	je     f0120f42 <test_kfree+0x1967>
f0120f2b:	83 ec 04             	sub    $0x4,%esp
f0120f2e:	68 78 99 13 f0       	push   $0xf0139978
f0120f33:	68 0c 06 00 00       	push   $0x60c
f0120f38:	68 ee 91 13 f0       	push   $0xf01391ee
f0120f3d:	e8 6e f2 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f42:	e8 79 ba fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120f47:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f4a:	e8 17 37 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120f4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120f52:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f58:	83 ec 0c             	sub    $0xc,%esp
f0120f5b:	50                   	push   %eax
f0120f5c:	e8 fa 6f fe ff       	call   f0107f5b <kfree>
f0120f61:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f64:	e8 fd 36 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120f69:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f6c:	74 17                	je     f0120f85 <test_kfree+0x19aa>
f0120f6e:	83 ec 04             	sub    $0x4,%esp
f0120f71:	68 08 92 13 f0       	push   $0xf0139208
f0120f76:	68 12 06 00 00       	push   $0x612
f0120f7b:	68 ee 91 13 f0       	push   $0xf01391ee
f0120f80:	e8 2b f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f85:	e8 36 ba fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120f8a:	89 c2                	mov    %eax,%edx
f0120f8c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f8f:	29 c2                	sub    %eax,%edx
f0120f91:	89 d0                	mov    %edx,%eax
f0120f93:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f98:	74 17                	je     f0120fb1 <test_kfree+0x19d6>
f0120f9a:	83 ec 04             	sub    $0x4,%esp
f0120f9d:	68 78 99 13 f0       	push   $0xf0139978
f0120fa2:	68 13 06 00 00       	push   $0x613
f0120fa7:	68 ee 91 13 f0       	push   $0xf01391ee
f0120fac:	e8 ff f1 fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120fb1:	e8 0a ba fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120fb6:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120fb9:	e8 a8 36 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120fbe:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120fc1:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120fc7:	83 ec 0c             	sub    $0xc,%esp
f0120fca:	50                   	push   %eax
f0120fcb:	e8 8b 6f fe ff       	call   f0107f5b <kfree>
f0120fd0:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fd3:	e8 8e 36 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0120fd8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fdb:	74 17                	je     f0120ff4 <test_kfree+0x1a19>
f0120fdd:	83 ec 04             	sub    $0x4,%esp
f0120fe0:	68 08 92 13 f0       	push   $0xf0139208
f0120fe5:	68 19 06 00 00       	push   $0x619
f0120fea:	68 ee 91 13 f0       	push   $0xf01391ee
f0120fef:	e8 bc f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ff4:	e8 c7 b9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0120ff9:	89 c2                	mov    %eax,%edx
f0120ffb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ffe:	29 c2                	sub    %eax,%edx
f0121000:	89 d0                	mov    %edx,%eax
f0121002:	83 f8 01             	cmp    $0x1,%eax
f0121005:	74 17                	je     f012101e <test_kfree+0x1a43>
f0121007:	83 ec 04             	sub    $0x4,%esp
f012100a:	68 78 99 13 f0       	push   $0xf0139978
f012100f:	68 1a 06 00 00       	push   $0x61a
f0121014:	68 ee 91 13 f0       	push   $0xf01391ee
f0121019:	e8 92 f1 fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012101e:	e8 9d b9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121023:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121026:	e8 3b 36 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012102b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012102e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121034:	83 ec 0c             	sub    $0xc,%esp
f0121037:	50                   	push   %eax
f0121038:	e8 1e 6f fe ff       	call   f0107f5b <kfree>
f012103d:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121040:	e8 21 36 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121045:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121048:	74 17                	je     f0121061 <test_kfree+0x1a86>
f012104a:	83 ec 04             	sub    $0x4,%esp
f012104d:	68 08 92 13 f0       	push   $0xf0139208
f0121052:	68 20 06 00 00       	push   $0x620
f0121057:	68 ee 91 13 f0       	push   $0xf01391ee
f012105c:	e8 4f f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121061:	e8 5a b9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121066:	89 c2                	mov    %eax,%edx
f0121068:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012106b:	29 c2                	sub    %eax,%edx
f012106d:	89 d0                	mov    %edx,%eax
f012106f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121074:	74 17                	je     f012108d <test_kfree+0x1ab2>
f0121076:	83 ec 04             	sub    $0x4,%esp
f0121079:	68 78 99 13 f0       	push   $0xf0139978
f012107e:	68 21 06 00 00       	push   $0x621
f0121083:	68 ee 91 13 f0       	push   $0xf01391ee
f0121088:	e8 23 f1 fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012108d:	e8 2e b9 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121092:	89 c2                	mov    %eax,%edx
f0121094:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121097:	39 c2                	cmp    %eax,%edx
f0121099:	74 17                	je     f01210b2 <test_kfree+0x1ad7>
f012109b:	83 ec 04             	sub    $0x4,%esp
f012109e:	68 18 9a 13 f0       	push   $0xf0139a18
f01210a3:	68 24 06 00 00       	push   $0x624
f01210a8:	68 ee 91 13 f0       	push   $0xf01391ee
f01210ad:	e8 fe f0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01210b2:	83 ec 0c             	sub    $0xc,%esp
f01210b5:	68 4c 9a 13 f0       	push   $0xf0139a4c
f01210ba:	e8 72 fd fd ff       	call   f0100e31 <cprintf>
f01210bf:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01210c2:	83 ec 0c             	sub    $0xc,%esp
f01210c5:	6a 03                	push   $0x3
f01210c7:	e8 8f bd fe ff       	call   f010ce5b <sys_bypassPageFault>
f01210cc:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01210cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210d6:	e9 82 00 00 00       	jmp    f012115d <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f01210db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210de:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01210e5:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01210e8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210eb:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01210ee:	e8 56 bd fe ff       	call   f010ce49 <sys_rcr2>
f01210f3:	89 c2                	mov    %eax,%edx
f01210f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210f8:	39 c2                	cmp    %eax,%edx
f01210fa:	74 17                	je     f0121113 <test_kfree+0x1b38>
f01210fc:	83 ec 04             	sub    $0x4,%esp
f01210ff:	68 54 9a 13 f0       	push   $0xf0139a54
f0121104:	68 33 06 00 00       	push   $0x633
f0121109:	68 ee 91 13 f0       	push   $0xf01391ee
f012110e:	e8 9d f0 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0121113:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121116:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012111d:	89 c2                	mov    %eax,%edx
f012111f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121122:	01 d0                	add    %edx,%eax
f0121124:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121127:	e8 1d bd fe ff       	call   f010ce49 <sys_rcr2>
f012112c:	89 c2                	mov    %eax,%edx
f012112e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121131:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0121138:	89 c1                	mov    %eax,%ecx
f012113a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012113d:	01 c8                	add    %ecx,%eax
f012113f:	39 c2                	cmp    %eax,%edx
f0121141:	74 17                	je     f012115a <test_kfree+0x1b7f>
f0121143:	83 ec 04             	sub    $0x4,%esp
f0121146:	68 54 9a 13 f0       	push   $0xf0139a54
f012114b:	68 35 06 00 00       	push   $0x635
f0121150:	68 ee 91 13 f0       	push   $0xf01391ee
f0121155:	e8 56 f0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012115a:	ff 45 f4             	incl   -0xc(%ebp)
f012115d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121161:	0f 8e 74 ff ff ff    	jle    f01210db <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121167:	83 ec 0c             	sub    $0xc,%esp
f012116a:	6a 00                	push   $0x0
f012116c:	e8 ea bc fe ff       	call   f010ce5b <sys_bypassPageFault>
f0121171:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121174:	83 ec 0c             	sub    $0xc,%esp
f0121177:	68 99 9a 13 f0       	push   $0xf0139a99
f012117c:	e8 b0 fc fd ff       	call   f0100e31 <cprintf>
f0121181:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121184:	e8 37 b8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121189:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012118c:	e8 d5 34 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121191:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121194:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012119a:	83 ec 0c             	sub    $0xc,%esp
f012119d:	50                   	push   %eax
f012119e:	e8 b8 6d fe ff       	call   f0107f5b <kfree>
f01211a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211a6:	e8 bb 34 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01211ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211ae:	74 17                	je     f01211c7 <test_kfree+0x1bec>
f01211b0:	83 ec 04             	sub    $0x4,%esp
f01211b3:	68 08 92 13 f0       	push   $0xf0139208
f01211b8:	68 43 06 00 00       	push   $0x643
f01211bd:	68 ee 91 13 f0       	push   $0xf01391ee
f01211c2:	e8 e9 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01211c7:	e8 f4 b7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01211cc:	89 c2                	mov    %eax,%edx
f01211ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211d1:	39 c2                	cmp    %eax,%edx
f01211d3:	74 17                	je     f01211ec <test_kfree+0x1c11>
f01211d5:	83 ec 04             	sub    $0x4,%esp
f01211d8:	68 a0 9a 13 f0       	push   $0xf0139aa0
f01211dd:	68 44 06 00 00       	push   $0x644
f01211e2:	68 ee 91 13 f0       	push   $0xf01391ee
f01211e7:	e8 c4 ef fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211ec:	e8 cf b7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01211f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211f4:	e8 6d 34 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01211f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01211fc:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121202:	83 ec 0c             	sub    $0xc,%esp
f0121205:	50                   	push   %eax
f0121206:	e8 50 6d fe ff       	call   f0107f5b <kfree>
f012120b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012120e:	e8 53 34 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121213:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121216:	74 17                	je     f012122f <test_kfree+0x1c54>
f0121218:	83 ec 04             	sub    $0x4,%esp
f012121b:	68 08 92 13 f0       	push   $0xf0139208
f0121220:	68 4a 06 00 00       	push   $0x64a
f0121225:	68 ee 91 13 f0       	push   $0xf01391ee
f012122a:	e8 81 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012122f:	e8 8c b7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121234:	89 c2                	mov    %eax,%edx
f0121236:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121239:	39 c2                	cmp    %eax,%edx
f012123b:	74 17                	je     f0121254 <test_kfree+0x1c79>
f012123d:	83 ec 04             	sub    $0x4,%esp
f0121240:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0121245:	68 4b 06 00 00       	push   $0x64b
f012124a:	68 ee 91 13 f0       	push   $0xf01391ee
f012124f:	e8 5c ef fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121254:	e8 67 b7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121259:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012125c:	e8 05 34 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121261:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121264:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012126a:	83 ec 0c             	sub    $0xc,%esp
f012126d:	50                   	push   %eax
f012126e:	e8 e8 6c fe ff       	call   f0107f5b <kfree>
f0121273:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121276:	e8 eb 33 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012127b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012127e:	74 17                	je     f0121297 <test_kfree+0x1cbc>
f0121280:	83 ec 04             	sub    $0x4,%esp
f0121283:	68 08 92 13 f0       	push   $0xf0139208
f0121288:	68 51 06 00 00       	push   $0x651
f012128d:	68 ee 91 13 f0       	push   $0xf01391ee
f0121292:	e8 19 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121297:	e8 24 b7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012129c:	89 c2                	mov    %eax,%edx
f012129e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212a1:	39 c2                	cmp    %eax,%edx
f01212a3:	74 17                	je     f01212bc <test_kfree+0x1ce1>
f01212a5:	83 ec 04             	sub    $0x4,%esp
f01212a8:	68 a0 9a 13 f0       	push   $0xf0139aa0
f01212ad:	68 52 06 00 00       	push   $0x652
f01212b2:	68 ee 91 13 f0       	push   $0xf01391ee
f01212b7:	e8 f4 ee fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01212bc:	e8 ff b6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01212c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212c4:	e8 9d 33 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01212c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01212cc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01212d2:	83 ec 0c             	sub    $0xc,%esp
f01212d5:	50                   	push   %eax
f01212d6:	e8 80 6c fe ff       	call   f0107f5b <kfree>
f01212db:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212de:	e8 83 33 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01212e3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212e6:	74 17                	je     f01212ff <test_kfree+0x1d24>
f01212e8:	83 ec 04             	sub    $0x4,%esp
f01212eb:	68 08 92 13 f0       	push   $0xf0139208
f01212f0:	68 58 06 00 00       	push   $0x658
f01212f5:	68 ee 91 13 f0       	push   $0xf01391ee
f01212fa:	e8 b1 ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01212ff:	e8 bc b6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121304:	89 c2                	mov    %eax,%edx
f0121306:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121309:	39 c2                	cmp    %eax,%edx
f012130b:	74 17                	je     f0121324 <test_kfree+0x1d49>
f012130d:	83 ec 04             	sub    $0x4,%esp
f0121310:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0121315:	68 59 06 00 00       	push   $0x659
f012131a:	68 ee 91 13 f0       	push   $0xf01391ee
f012131f:	e8 8c ee fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0121324:	83 ec 0c             	sub    $0xc,%esp
f0121327:	68 e7 9a 13 f0       	push   $0xf0139ae7
f012132c:	e8 00 fb fd ff       	call   f0100e31 <cprintf>
f0121331:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121334:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012133b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121342:	eb 48                	jmp    f012138c <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121344:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121347:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012134c:	83 ec 04             	sub    $0x4,%esp
f012134f:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0121355:	51                   	push   %ecx
f0121356:	52                   	push   %edx
f0121357:	50                   	push   %eax
f0121358:	e8 6c 61 fe ff       	call   f01074c9 <get_page_table>
f012135d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121360:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0121366:	85 c0                	test   %eax,%eax
f0121368:	75 17                	jne    f0121381 <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012136a:	83 ec 04             	sub    $0x4,%esp
f012136d:	68 f0 9a 13 f0       	push   $0xf0139af0
f0121372:	68 67 06 00 00       	push   $0x667
f0121377:	68 ee 91 13 f0       	push   $0xf01391ee
f012137c:	e8 2f ee fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121381:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121388:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012138c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121390:	78 b2                	js     f0121344 <test_kfree+0x1d69>
f0121392:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121396:	7f 09                	jg     f01213a1 <test_kfree+0x1dc6>
f0121398:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012139f:	76 a3                	jbe    f0121344 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01213a1:	83 ec 0c             	sub    $0xc,%esp
f01213a4:	68 d2 93 13 f0       	push   $0xf01393d2
f01213a9:	e8 83 fa fd ff       	call   f0100e31 <cprintf>
f01213ae:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01213b1:	83 ec 0c             	sub    $0xc,%esp
f01213b4:	68 58 9b 13 f0       	push   $0xf0139b58
f01213b9:	e8 73 fa fd ff       	call   f0100e31 <cprintf>
f01213be:	83 c4 10             	add    $0x10,%esp

	return 1;
f01213c1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01213c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01213c9:	5b                   	pop    %ebx
f01213ca:	5f                   	pop    %edi
f01213cb:	5d                   	pop    %ebp
f01213cc:	c3                   	ret    

f01213cd <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01213cd:	55                   	push   %ebp
f01213ce:	89 e5                	mov    %esp,%ebp
f01213d0:	57                   	push   %edi
f01213d1:	53                   	push   %ebx
f01213d2:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f01213d8:	83 ec 0c             	sub    $0xc,%esp
f01213db:	68 30 91 13 f0       	push   $0xf0139130
f01213e0:	e8 4c fa fd ff       	call   f0100e31 <cprintf>
f01213e5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01213e8:	83 ec 0c             	sub    $0xc,%esp
f01213eb:	68 60 91 13 f0       	push   $0xf0139160
f01213f0:	e8 3c fa fd ff       	call   f0100e31 <cprintf>
f01213f5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01213f8:	83 ec 0c             	sub    $0xc,%esp
f01213fb:	68 30 91 13 f0       	push   $0xf0139130
f0121400:	e8 2c fa fd ff       	call   f0100e31 <cprintf>
f0121405:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121408:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012140c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121410:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121416:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012141c:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121423:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012142a:	e8 91 b5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012142f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121432:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0121438:	b9 14 00 00 00       	mov    $0x14,%ecx
f012143d:	b8 00 00 00 00       	mov    $0x0,%eax
f0121442:	89 d7                	mov    %edx,%edi
f0121444:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121446:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f012144c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121451:	b8 00 00 00 00       	mov    $0x0,%eax
f0121456:	89 d7                	mov    %edx,%edi
f0121458:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012145a:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0121460:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121465:	b8 00 00 00 00       	mov    $0x0,%eax
f012146a:	89 d7                	mov    %edx,%edi
f012146c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012146e:	e8 4d b5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121473:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121476:	e8 eb 31 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012147b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012147e:	83 ec 0c             	sub    $0xc,%esp
f0121481:	68 00 fc 1f 00       	push   $0x1ffc00
f0121486:	e8 b6 6a fe ff       	call   f0107f41 <kmalloc>
f012148b:	83 c4 10             	add    $0x10,%esp
f012148e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121494:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012149a:	89 c1                	mov    %eax,%ecx
f012149c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01214a3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01214a8:	0f b6 d0             	movzbl %al,%edx
f01214ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01214ae:	01 d0                	add    %edx,%eax
f01214b0:	48                   	dec    %eax
f01214b1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01214b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01214b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01214bc:	f7 75 c8             	divl   -0x38(%ebp)
f01214bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01214c2:	29 d0                	sub    %edx,%eax
f01214c4:	89 c3                	mov    %eax,%ebx
f01214c6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01214cd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01214d2:	0f b6 c0             	movzbl %al,%eax
f01214d5:	c1 e0 04             	shl    $0x4,%eax
f01214d8:	89 c2                	mov    %eax,%edx
f01214da:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01214dd:	01 d0                	add    %edx,%eax
f01214df:	48                   	dec    %eax
f01214e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01214e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01214eb:	f7 75 c0             	divl   -0x40(%ebp)
f01214ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214f1:	29 d0                	sub    %edx,%eax
f01214f3:	01 d8                	add    %ebx,%eax
f01214f5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01214fa:	39 c1                	cmp    %eax,%ecx
f01214fc:	74 17                	je     f0121515 <test_kfree_bestfirstfit+0x148>
f01214fe:	83 ec 04             	sub    $0x4,%esp
f0121501:	68 d4 92 13 f0       	push   $0xf01392d4
f0121506:	68 95 06 00 00       	push   $0x695
f012150b:	68 ee 91 13 f0       	push   $0xf01391ee
f0121510:	e8 9b ec fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121515:	e8 4c 31 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012151a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012151d:	74 17                	je     f0121536 <test_kfree_bestfirstfit+0x169>
f012151f:	83 ec 04             	sub    $0x4,%esp
f0121522:	68 08 92 13 f0       	push   $0xf0139208
f0121527:	68 96 06 00 00       	push   $0x696
f012152c:	68 ee 91 13 f0       	push   $0xf01391ee
f0121531:	e8 7a ec fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121536:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121539:	e8 82 b4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012153e:	29 c3                	sub    %eax,%ebx
f0121540:	89 d8                	mov    %ebx,%eax
f0121542:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121547:	74 17                	je     f0121560 <test_kfree_bestfirstfit+0x193>
f0121549:	83 ec 04             	sub    $0x4,%esp
f012154c:	68 70 92 13 f0       	push   $0xf0139270
f0121551:	68 97 06 00 00       	push   $0x697
f0121556:	68 ee 91 13 f0       	push   $0xf01391ee
f012155b:	e8 50 ec fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121560:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121567:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012156a:	e8 51 b4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012156f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121572:	e8 ef 30 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121577:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012157a:	83 ec 0c             	sub    $0xc,%esp
f012157d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121582:	e8 ba 69 fe ff       	call   f0107f41 <kmalloc>
f0121587:	83 c4 10             	add    $0x10,%esp
f012158a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121590:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121596:	89 c1                	mov    %eax,%ecx
f0121598:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012159f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01215a4:	0f b6 d0             	movzbl %al,%edx
f01215a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01215aa:	01 d0                	add    %edx,%eax
f01215ac:	48                   	dec    %eax
f01215ad:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01215b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01215b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01215b8:	f7 75 b8             	divl   -0x48(%ebp)
f01215bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01215be:	29 d0                	sub    %edx,%eax
f01215c0:	89 c3                	mov    %eax,%ebx
f01215c2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01215c9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01215ce:	0f b6 c0             	movzbl %al,%eax
f01215d1:	c1 e0 04             	shl    $0x4,%eax
f01215d4:	89 c2                	mov    %eax,%edx
f01215d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01215d9:	01 d0                	add    %edx,%eax
f01215db:	48                   	dec    %eax
f01215dc:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01215df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01215e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01215e7:	f7 75 b0             	divl   -0x50(%ebp)
f01215ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01215ed:	29 d0                	sub    %edx,%eax
f01215ef:	01 d8                	add    %ebx,%eax
f01215f1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01215f6:	39 c1                	cmp    %eax,%ecx
f01215f8:	74 17                	je     f0121611 <test_kfree_bestfirstfit+0x244>
f01215fa:	83 ec 04             	sub    $0x4,%esp
f01215fd:	68 d4 92 13 f0       	push   $0xf01392d4
f0121602:	68 9e 06 00 00       	push   $0x69e
f0121607:	68 ee 91 13 f0       	push   $0xf01391ee
f012160c:	e8 9f eb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121611:	e8 50 30 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121616:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121619:	74 17                	je     f0121632 <test_kfree_bestfirstfit+0x265>
f012161b:	83 ec 04             	sub    $0x4,%esp
f012161e:	68 08 92 13 f0       	push   $0xf0139208
f0121623:	68 9f 06 00 00       	push   $0x69f
f0121628:	68 ee 91 13 f0       	push   $0xf01391ee
f012162d:	e8 7e eb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121632:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121635:	e8 86 b3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012163a:	29 c3                	sub    %eax,%ebx
f012163c:	89 d8                	mov    %ebx,%eax
f012163e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121643:	74 17                	je     f012165c <test_kfree_bestfirstfit+0x28f>
f0121645:	83 ec 04             	sub    $0x4,%esp
f0121648:	68 70 92 13 f0       	push   $0xf0139270
f012164d:	68 a0 06 00 00       	push   $0x6a0
f0121652:	68 ee 91 13 f0       	push   $0xf01391ee
f0121657:	e8 54 eb fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012165c:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0121663:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121666:	e8 55 b3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012166b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012166e:	e8 f3 2f fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121673:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121676:	83 ec 0c             	sub    $0xc,%esp
f0121679:	68 00 08 00 00       	push   $0x800
f012167e:	e8 be 68 fe ff       	call   f0107f41 <kmalloc>
f0121683:	83 c4 10             	add    $0x10,%esp
f0121686:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012168c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121692:	89 c1                	mov    %eax,%ecx
f0121694:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012169b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01216a0:	0f b6 d0             	movzbl %al,%edx
f01216a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01216a6:	01 d0                	add    %edx,%eax
f01216a8:	48                   	dec    %eax
f01216a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01216ac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01216af:	ba 00 00 00 00       	mov    $0x0,%edx
f01216b4:	f7 75 a8             	divl   -0x58(%ebp)
f01216b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01216ba:	29 d0                	sub    %edx,%eax
f01216bc:	89 c3                	mov    %eax,%ebx
f01216be:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01216c5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01216ca:	0f b6 c0             	movzbl %al,%eax
f01216cd:	c1 e0 04             	shl    $0x4,%eax
f01216d0:	89 c2                	mov    %eax,%edx
f01216d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01216d5:	01 d0                	add    %edx,%eax
f01216d7:	48                   	dec    %eax
f01216d8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01216db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01216de:	ba 00 00 00 00       	mov    $0x0,%edx
f01216e3:	f7 75 a0             	divl   -0x60(%ebp)
f01216e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01216e9:	29 d0                	sub    %edx,%eax
f01216eb:	01 d8                	add    %ebx,%eax
f01216ed:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01216f2:	39 c1                	cmp    %eax,%ecx
f01216f4:	74 17                	je     f012170d <test_kfree_bestfirstfit+0x340>
f01216f6:	83 ec 04             	sub    $0x4,%esp
f01216f9:	68 d4 92 13 f0       	push   $0xf01392d4
f01216fe:	68 a7 06 00 00       	push   $0x6a7
f0121703:	68 ee 91 13 f0       	push   $0xf01391ee
f0121708:	e8 a3 ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012170d:	e8 54 2f fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121712:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121715:	74 17                	je     f012172e <test_kfree_bestfirstfit+0x361>
f0121717:	83 ec 04             	sub    $0x4,%esp
f012171a:	68 08 92 13 f0       	push   $0xf0139208
f012171f:	68 a8 06 00 00       	push   $0x6a8
f0121724:	68 ee 91 13 f0       	push   $0xf01391ee
f0121729:	e8 82 ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012172e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121731:	e8 8a b2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121736:	29 c3                	sub    %eax,%ebx
f0121738:	89 d8                	mov    %ebx,%eax
f012173a:	83 f8 01             	cmp    $0x1,%eax
f012173d:	74 17                	je     f0121756 <test_kfree_bestfirstfit+0x389>
f012173f:	83 ec 04             	sub    $0x4,%esp
f0121742:	68 70 92 13 f0       	push   $0xf0139270
f0121747:	68 a9 06 00 00       	push   $0x6a9
f012174c:	68 ee 91 13 f0       	push   $0xf01391ee
f0121751:	e8 5a ea fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121756:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012175d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121760:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121766:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121770:	eb 0e                	jmp    f0121780 <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121772:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121775:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121778:	01 d0                	add    %edx,%eax
f012177a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012177d:	ff 45 f4             	incl   -0xc(%ebp)
f0121780:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121786:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121789:	7f e7                	jg     f0121772 <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012178b:	e8 30 b2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121790:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121793:	e8 ce 2e fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121798:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012179b:	83 ec 0c             	sub    $0xc,%esp
f012179e:	68 00 08 00 00       	push   $0x800
f01217a3:	e8 99 67 fe ff       	call   f0107f41 <kmalloc>
f01217a8:	83 c4 10             	add    $0x10,%esp
f01217ab:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217b1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01217b7:	89 c1                	mov    %eax,%ecx
f01217b9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01217c0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01217c5:	0f b6 d0             	movzbl %al,%edx
f01217c8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01217cb:	01 d0                	add    %edx,%eax
f01217cd:	48                   	dec    %eax
f01217ce:	89 45 90             	mov    %eax,-0x70(%ebp)
f01217d1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01217d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01217d9:	f7 75 94             	divl   -0x6c(%ebp)
f01217dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01217df:	29 d0                	sub    %edx,%eax
f01217e1:	89 c3                	mov    %eax,%ebx
f01217e3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01217ea:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01217ef:	0f b6 c0             	movzbl %al,%eax
f01217f2:	c1 e0 04             	shl    $0x4,%eax
f01217f5:	89 c2                	mov    %eax,%edx
f01217f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01217fa:	01 d0                	add    %edx,%eax
f01217fc:	48                   	dec    %eax
f01217fd:	89 45 88             	mov    %eax,-0x78(%ebp)
f0121800:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121803:	ba 00 00 00 00       	mov    $0x0,%edx
f0121808:	f7 75 8c             	divl   -0x74(%ebp)
f012180b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012180e:	29 d0                	sub    %edx,%eax
f0121810:	01 d8                	add    %ebx,%eax
f0121812:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121817:	39 c1                	cmp    %eax,%ecx
f0121819:	74 17                	je     f0121832 <test_kfree_bestfirstfit+0x465>
f012181b:	83 ec 04             	sub    $0x4,%esp
f012181e:	68 d4 92 13 f0       	push   $0xf01392d4
f0121823:	68 b5 06 00 00       	push   $0x6b5
f0121828:	68 ee 91 13 f0       	push   $0xf01391ee
f012182d:	e8 7e e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121832:	e8 2f 2e fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121837:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012183a:	74 17                	je     f0121853 <test_kfree_bestfirstfit+0x486>
f012183c:	83 ec 04             	sub    $0x4,%esp
f012183f:	68 08 92 13 f0       	push   $0xf0139208
f0121844:	68 b6 06 00 00       	push   $0x6b6
f0121849:	68 ee 91 13 f0       	push   $0xf01391ee
f012184e:	e8 5d e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121853:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121856:	e8 65 b1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012185b:	29 c3                	sub    %eax,%ebx
f012185d:	89 d8                	mov    %ebx,%eax
f012185f:	83 f8 01             	cmp    $0x1,%eax
f0121862:	74 17                	je     f012187b <test_kfree_bestfirstfit+0x4ae>
f0121864:	83 ec 04             	sub    $0x4,%esp
f0121867:	68 70 92 13 f0       	push   $0xf0139270
f012186c:	68 b7 06 00 00       	push   $0x6b7
f0121871:	68 ee 91 13 f0       	push   $0xf01391ee
f0121876:	e8 35 e9 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012187b:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0121882:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121885:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012188b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012188e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121895:	eb 0e                	jmp    f01218a5 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0121897:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012189a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012189d:	01 d0                	add    %edx,%eax
f012189f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01218a2:	ff 45 f4             	incl   -0xc(%ebp)
f01218a5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01218ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01218ae:	7f e7                	jg     f0121897 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01218b0:	e8 0b b1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01218b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218b8:	e8 a9 2d fe ff       	call   f0104666 <pf_calculate_free_frames>
f01218bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01218c0:	83 ec 0c             	sub    $0xc,%esp
f01218c3:	68 00 1c 00 00       	push   $0x1c00
f01218c8:	e8 74 66 fe ff       	call   f0107f41 <kmalloc>
f01218cd:	83 c4 10             	add    $0x10,%esp
f01218d0:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218d6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01218dc:	89 c1                	mov    %eax,%ecx
f01218de:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01218e5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01218ea:	0f b6 d0             	movzbl %al,%edx
f01218ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01218f0:	01 d0                	add    %edx,%eax
f01218f2:	48                   	dec    %eax
f01218f3:	89 45 80             	mov    %eax,-0x80(%ebp)
f01218f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01218f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01218fe:	f7 75 84             	divl   -0x7c(%ebp)
f0121901:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121904:	29 d0                	sub    %edx,%eax
f0121906:	89 c3                	mov    %eax,%ebx
f0121908:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012190f:	10 00 00 
f0121912:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121917:	0f b6 c0             	movzbl %al,%eax
f012191a:	c1 e0 04             	shl    $0x4,%eax
f012191d:	89 c2                	mov    %eax,%edx
f012191f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121925:	01 d0                	add    %edx,%eax
f0121927:	48                   	dec    %eax
f0121928:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012192e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121934:	ba 00 00 00 00       	mov    $0x0,%edx
f0121939:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012193f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121945:	29 d0                	sub    %edx,%eax
f0121947:	01 d8                	add    %ebx,%eax
f0121949:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012194e:	39 c1                	cmp    %eax,%ecx
f0121950:	74 17                	je     f0121969 <test_kfree_bestfirstfit+0x59c>
f0121952:	83 ec 04             	sub    $0x4,%esp
f0121955:	68 d4 92 13 f0       	push   $0xf01392d4
f012195a:	68 c3 06 00 00       	push   $0x6c3
f012195f:	68 ee 91 13 f0       	push   $0xf01391ee
f0121964:	e8 47 e8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121969:	e8 f8 2c fe ff       	call   f0104666 <pf_calculate_free_frames>
f012196e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121971:	74 17                	je     f012198a <test_kfree_bestfirstfit+0x5bd>
f0121973:	83 ec 04             	sub    $0x4,%esp
f0121976:	68 08 92 13 f0       	push   $0xf0139208
f012197b:	68 c4 06 00 00       	push   $0x6c4
f0121980:	68 ee 91 13 f0       	push   $0xf01391ee
f0121985:	e8 26 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012198a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012198d:	e8 2e b0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121992:	29 c3                	sub    %eax,%ebx
f0121994:	89 d8                	mov    %ebx,%eax
f0121996:	83 f8 02             	cmp    $0x2,%eax
f0121999:	74 17                	je     f01219b2 <test_kfree_bestfirstfit+0x5e5>
f012199b:	83 ec 04             	sub    $0x4,%esp
f012199e:	68 70 92 13 f0       	push   $0xf0139270
f01219a3:	68 c5 06 00 00       	push   $0x6c5
f01219a8:	68 ee 91 13 f0       	push   $0xf01391ee
f01219ad:	e8 fe e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01219b2:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f01219b9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01219bc:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01219c2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01219c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01219cc:	eb 0e                	jmp    f01219dc <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f01219ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01219d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01219d4:	01 d0                	add    %edx,%eax
f01219d6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01219d9:	ff 45 f4             	incl   -0xc(%ebp)
f01219dc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01219e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01219e5:	7f e7                	jg     f01219ce <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01219e7:	e8 d4 af fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01219ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219ef:	e8 72 2c fe ff       	call   f0104666 <pf_calculate_free_frames>
f01219f4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01219f7:	83 ec 0c             	sub    $0xc,%esp
f01219fa:	68 00 fc 2f 00       	push   $0x2ffc00
f01219ff:	e8 3d 65 fe ff       	call   f0107f41 <kmalloc>
f0121a04:	83 c4 10             	add    $0x10,%esp
f0121a07:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a0d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121a13:	89 c1                	mov    %eax,%ecx
f0121a15:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121a1c:	10 00 00 
f0121a1f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121a24:	0f b6 d0             	movzbl %al,%edx
f0121a27:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121a2d:	01 d0                	add    %edx,%eax
f0121a2f:	48                   	dec    %eax
f0121a30:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121a36:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a41:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121a47:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a4d:	29 d0                	sub    %edx,%eax
f0121a4f:	89 c3                	mov    %eax,%ebx
f0121a51:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121a58:	10 00 00 
f0121a5b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121a60:	0f b6 c0             	movzbl %al,%eax
f0121a63:	c1 e0 04             	shl    $0x4,%eax
f0121a66:	89 c2                	mov    %eax,%edx
f0121a68:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121a6e:	01 d0                	add    %edx,%eax
f0121a70:	48                   	dec    %eax
f0121a71:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121a77:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121a7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a82:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121a88:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121a8e:	29 d0                	sub    %edx,%eax
f0121a90:	01 d8                	add    %ebx,%eax
f0121a92:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121a97:	39 c1                	cmp    %eax,%ecx
f0121a99:	74 17                	je     f0121ab2 <test_kfree_bestfirstfit+0x6e5>
f0121a9b:	83 ec 04             	sub    $0x4,%esp
f0121a9e:	68 d4 92 13 f0       	push   $0xf01392d4
f0121aa3:	68 d1 06 00 00       	push   $0x6d1
f0121aa8:	68 ee 91 13 f0       	push   $0xf01391ee
f0121aad:	e8 fe e6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ab2:	e8 af 2b fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121ab7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121aba:	74 17                	je     f0121ad3 <test_kfree_bestfirstfit+0x706>
f0121abc:	83 ec 04             	sub    $0x4,%esp
f0121abf:	68 08 92 13 f0       	push   $0xf0139208
f0121ac4:	68 d2 06 00 00       	push   $0x6d2
f0121ac9:	68 ee 91 13 f0       	push   $0xf01391ee
f0121ace:	e8 dd e6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ad3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ad6:	e8 e5 ae fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121adb:	29 c3                	sub    %eax,%ebx
f0121add:	89 d8                	mov    %ebx,%eax
f0121adf:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121ae4:	74 17                	je     f0121afd <test_kfree_bestfirstfit+0x730>
f0121ae6:	83 ec 04             	sub    $0x4,%esp
f0121ae9:	68 70 92 13 f0       	push   $0xf0139270
f0121aee:	68 d3 06 00 00       	push   $0x6d3
f0121af3:	68 ee 91 13 f0       	push   $0xf01391ee
f0121af8:	e8 b3 e6 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121afd:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121b04:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121b07:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121b0d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121b10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b17:	eb 0e                	jmp    f0121b27 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f0121b19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121b1f:	01 d0                	add    %edx,%eax
f0121b21:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121b24:	ff 45 f4             	incl   -0xc(%ebp)
f0121b27:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121b2d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b30:	7f e7                	jg     f0121b19 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b32:	e8 89 ae fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121b37:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b3a:	e8 27 2b fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121b3f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121b42:	83 ec 0c             	sub    $0xc,%esp
f0121b45:	68 00 fc 5f 00       	push   $0x5ffc00
f0121b4a:	e8 f2 63 fe ff       	call   f0107f41 <kmalloc>
f0121b4f:	83 c4 10             	add    $0x10,%esp
f0121b52:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b58:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121b5e:	89 c1                	mov    %eax,%ecx
f0121b60:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121b67:	10 00 00 
f0121b6a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121b6f:	0f b6 d0             	movzbl %al,%edx
f0121b72:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121b78:	01 d0                	add    %edx,%eax
f0121b7a:	48                   	dec    %eax
f0121b7b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121b81:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121b87:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b8c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121b92:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121b98:	29 d0                	sub    %edx,%eax
f0121b9a:	89 c3                	mov    %eax,%ebx
f0121b9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121ba3:	10 00 00 
f0121ba6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121bab:	0f b6 c0             	movzbl %al,%eax
f0121bae:	c1 e0 04             	shl    $0x4,%eax
f0121bb1:	89 c2                	mov    %eax,%edx
f0121bb3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121bb9:	01 d0                	add    %edx,%eax
f0121bbb:	48                   	dec    %eax
f0121bbc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121bc2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121bc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121bcd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121bd3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121bd9:	29 d0                	sub    %edx,%eax
f0121bdb:	01 d8                	add    %ebx,%eax
f0121bdd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121be2:	39 c1                	cmp    %eax,%ecx
f0121be4:	74 17                	je     f0121bfd <test_kfree_bestfirstfit+0x830>
f0121be6:	83 ec 04             	sub    $0x4,%esp
f0121be9:	68 d4 92 13 f0       	push   $0xf01392d4
f0121bee:	68 df 06 00 00       	push   $0x6df
f0121bf3:	68 ee 91 13 f0       	push   $0xf01391ee
f0121bf8:	e8 b3 e5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bfd:	e8 64 2a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121c02:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c05:	74 17                	je     f0121c1e <test_kfree_bestfirstfit+0x851>
f0121c07:	83 ec 04             	sub    $0x4,%esp
f0121c0a:	68 08 92 13 f0       	push   $0xf0139208
f0121c0f:	68 e0 06 00 00       	push   $0x6e0
f0121c14:	68 ee 91 13 f0       	push   $0xf01391ee
f0121c19:	e8 92 e5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121c1e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121c21:	e8 9a ad fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121c26:	29 c3                	sub    %eax,%ebx
f0121c28:	89 d8                	mov    %ebx,%eax
f0121c2a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121c2f:	74 17                	je     f0121c48 <test_kfree_bestfirstfit+0x87b>
f0121c31:	83 ec 04             	sub    $0x4,%esp
f0121c34:	68 70 92 13 f0       	push   $0xf0139270
f0121c39:	68 e1 06 00 00       	push   $0x6e1
f0121c3e:	68 ee 91 13 f0       	push   $0xf01391ee
f0121c43:	e8 68 e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121c48:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0121c4f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c52:	e8 69 ad fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121c57:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c5a:	e8 07 2a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121c5f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121c62:	83 ec 0c             	sub    $0xc,%esp
f0121c65:	68 00 38 00 00       	push   $0x3800
f0121c6a:	e8 d2 62 fe ff       	call   f0107f41 <kmalloc>
f0121c6f:	83 c4 10             	add    $0x10,%esp
f0121c72:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c78:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121c7e:	89 c1                	mov    %eax,%ecx
f0121c80:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121c87:	10 00 00 
f0121c8a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121c8f:	0f b6 d0             	movzbl %al,%edx
f0121c92:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121c98:	01 d0                	add    %edx,%eax
f0121c9a:	48                   	dec    %eax
f0121c9b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121ca1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121ca7:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cac:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121cb2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121cb8:	29 d0                	sub    %edx,%eax
f0121cba:	89 c3                	mov    %eax,%ebx
f0121cbc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121cc3:	10 00 00 
f0121cc6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121ccb:	0f b6 c0             	movzbl %al,%eax
f0121cce:	c1 e0 04             	shl    $0x4,%eax
f0121cd1:	89 c2                	mov    %eax,%edx
f0121cd3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121cd9:	01 d0                	add    %edx,%eax
f0121cdb:	48                   	dec    %eax
f0121cdc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121ce2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ced:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121cf3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121cf9:	29 d0                	sub    %edx,%eax
f0121cfb:	01 d8                	add    %ebx,%eax
f0121cfd:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121d02:	39 c1                	cmp    %eax,%ecx
f0121d04:	74 17                	je     f0121d1d <test_kfree_bestfirstfit+0x950>
f0121d06:	83 ec 04             	sub    $0x4,%esp
f0121d09:	68 d4 92 13 f0       	push   $0xf01392d4
f0121d0e:	68 e8 06 00 00       	push   $0x6e8
f0121d13:	68 ee 91 13 f0       	push   $0xf01391ee
f0121d18:	e8 93 e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d1d:	e8 44 29 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121d22:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d25:	74 17                	je     f0121d3e <test_kfree_bestfirstfit+0x971>
f0121d27:	83 ec 04             	sub    $0x4,%esp
f0121d2a:	68 08 92 13 f0       	push   $0xf0139208
f0121d2f:	68 e9 06 00 00       	push   $0x6e9
f0121d34:	68 ee 91 13 f0       	push   $0xf01391ee
f0121d39:	e8 72 e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d3e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d41:	e8 7a ac fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121d46:	29 c3                	sub    %eax,%ebx
f0121d48:	89 d8                	mov    %ebx,%eax
f0121d4a:	83 f8 04             	cmp    $0x4,%eax
f0121d4d:	74 17                	je     f0121d66 <test_kfree_bestfirstfit+0x999>
f0121d4f:	83 ec 04             	sub    $0x4,%esp
f0121d52:	68 70 92 13 f0       	push   $0xf0139270
f0121d57:	68 ea 06 00 00       	push   $0x6ea
f0121d5c:	68 ee 91 13 f0       	push   $0xf01391ee
f0121d61:	e8 4a e4 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121d66:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0121d6d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121d70:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121d76:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121d79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d80:	eb 0e                	jmp    f0121d90 <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f0121d82:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d85:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121d88:	01 d0                	add    %edx,%eax
f0121d8a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121d8d:	ff 45 f4             	incl   -0xc(%ebp)
f0121d90:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121d96:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d99:	7f e7                	jg     f0121d82 <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121d9b:	e8 20 ac fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121da0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121da6:	e8 bb 28 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121dab:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121db1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121db7:	83 ec 0c             	sub    $0xc,%esp
f0121dba:	50                   	push   %eax
f0121dbb:	e8 9b 61 fe ff       	call   f0107f5b <kfree>
f0121dc0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121dc3:	e8 9e 28 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121dc8:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121dce:	74 17                	je     f0121de7 <test_kfree_bestfirstfit+0xa1a>
f0121dd0:	83 ec 04             	sub    $0x4,%esp
f0121dd3:	68 08 92 13 f0       	push   $0xf0139208
f0121dd8:	68 f9 06 00 00       	push   $0x6f9
f0121ddd:	68 ee 91 13 f0       	push   $0xf01391ee
f0121de2:	e8 c9 e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121de7:	e8 d4 ab fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121dec:	89 c2                	mov    %eax,%edx
f0121dee:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121df4:	29 c2                	sub    %eax,%edx
f0121df6:	89 d0                	mov    %edx,%eax
f0121df8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121dfd:	74 17                	je     f0121e16 <test_kfree_bestfirstfit+0xa49>
f0121dff:	83 ec 04             	sub    $0x4,%esp
f0121e02:	68 78 99 13 f0       	push   $0xf0139978
f0121e07:	68 fa 06 00 00       	push   $0x6fa
f0121e0c:	68 ee 91 13 f0       	push   $0xf01391ee
f0121e11:	e8 9a e3 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e16:	e8 a5 ab fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121e1b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e21:	e8 40 28 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121e26:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0121e2c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121e32:	83 ec 0c             	sub    $0xc,%esp
f0121e35:	50                   	push   %eax
f0121e36:	e8 20 61 fe ff       	call   f0107f5b <kfree>
f0121e3b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e3e:	e8 23 28 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121e43:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121e49:	74 17                	je     f0121e62 <test_kfree_bestfirstfit+0xa95>
f0121e4b:	83 ec 04             	sub    $0x4,%esp
f0121e4e:	68 08 92 13 f0       	push   $0xf0139208
f0121e53:	68 00 07 00 00       	push   $0x700
f0121e58:	68 ee 91 13 f0       	push   $0xf01391ee
f0121e5d:	e8 4e e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e62:	e8 59 ab fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121e67:	89 c2                	mov    %eax,%edx
f0121e69:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121e6f:	29 c2                	sub    %eax,%edx
f0121e71:	89 d0                	mov    %edx,%eax
f0121e73:	83 f8 01             	cmp    $0x1,%eax
f0121e76:	74 17                	je     f0121e8f <test_kfree_bestfirstfit+0xac2>
f0121e78:	83 ec 04             	sub    $0x4,%esp
f0121e7b:	68 78 99 13 f0       	push   $0xf0139978
f0121e80:	68 01 07 00 00       	push   $0x701
f0121e85:	68 ee 91 13 f0       	push   $0xf01391ee
f0121e8a:	e8 21 e3 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121e8f:	e8 2c ab fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121e94:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e9a:	e8 c7 27 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121e9f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0121ea5:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121eab:	83 ec 0c             	sub    $0xc,%esp
f0121eae:	50                   	push   %eax
f0121eaf:	e8 a7 60 fe ff       	call   f0107f5b <kfree>
f0121eb4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121eb7:	e8 aa 27 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121ebc:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121ec2:	74 17                	je     f0121edb <test_kfree_bestfirstfit+0xb0e>
f0121ec4:	83 ec 04             	sub    $0x4,%esp
f0121ec7:	68 08 92 13 f0       	push   $0xf0139208
f0121ecc:	68 07 07 00 00       	push   $0x707
f0121ed1:	68 ee 91 13 f0       	push   $0xf01391ee
f0121ed6:	e8 d5 e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121edb:	e8 e0 aa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121ee0:	89 c2                	mov    %eax,%edx
f0121ee2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121ee8:	29 c2                	sub    %eax,%edx
f0121eea:	89 d0                	mov    %edx,%eax
f0121eec:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121ef1:	74 17                	je     f0121f0a <test_kfree_bestfirstfit+0xb3d>
f0121ef3:	83 ec 04             	sub    $0x4,%esp
f0121ef6:	68 78 99 13 f0       	push   $0xf0139978
f0121efb:	68 08 07 00 00       	push   $0x708
f0121f00:	68 ee 91 13 f0       	push   $0xf01391ee
f0121f05:	e8 a6 e2 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f0a:	e8 b1 aa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121f0f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f15:	e8 4c 27 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121f1a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0121f20:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121f26:	83 ec 0c             	sub    $0xc,%esp
f0121f29:	50                   	push   %eax
f0121f2a:	e8 2c 60 fe ff       	call   f0107f5b <kfree>
f0121f2f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f32:	e8 2f 27 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0121f37:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121f3d:	74 17                	je     f0121f56 <test_kfree_bestfirstfit+0xb89>
f0121f3f:	83 ec 04             	sub    $0x4,%esp
f0121f42:	68 08 92 13 f0       	push   $0xf0139208
f0121f47:	68 0e 07 00 00       	push   $0x70e
f0121f4c:	68 ee 91 13 f0       	push   $0xf01391ee
f0121f51:	e8 5a e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f56:	e8 65 aa fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0121f5b:	89 c2                	mov    %eax,%edx
f0121f5d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121f63:	29 c2                	sub    %eax,%edx
f0121f65:	89 d0                	mov    %edx,%eax
f0121f67:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121f6c:	74 17                	je     f0121f85 <test_kfree_bestfirstfit+0xbb8>
f0121f6e:	83 ec 04             	sub    $0x4,%esp
f0121f71:	68 78 99 13 f0       	push   $0xf0139978
f0121f76:	68 0f 07 00 00       	push   $0x70f
f0121f7b:	68 ee 91 13 f0       	push   $0xf01391ee
f0121f80:	e8 2b e2 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121f85:	83 ec 0c             	sub    $0xc,%esp
f0121f88:	68 b0 99 13 f0       	push   $0xf01399b0
f0121f8d:	e8 9f ee fd ff       	call   f0100e31 <cprintf>
f0121f92:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121f95:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121f9b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121f9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121fa5:	eb 1e                	jmp    f0121fc5 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0121fa7:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121fad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121fb0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121fb3:	01 c8                	add    %ecx,%eax
f0121fb5:	8a 00                	mov    (%eax),%al
f0121fb7:	0f be c0             	movsbl %al,%eax
f0121fba:	01 d0                	add    %edx,%eax
f0121fbc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121fc2:	ff 45 f4             	incl   -0xc(%ebp)
f0121fc5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121fcb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121fce:	7f d7                	jg     f0121fa7 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121fd0:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121fd6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121fdc:	89 c1                	mov    %eax,%ecx
f0121fde:	01 c9                	add    %ecx,%ecx
f0121fe0:	01 c8                	add    %ecx,%eax
f0121fe2:	39 c2                	cmp    %eax,%edx
f0121fe4:	74 17                	je     f0121ffd <test_kfree_bestfirstfit+0xc30>
f0121fe6:	83 ec 04             	sub    $0x4,%esp
f0121fe9:	68 d4 99 13 f0       	push   $0xf01399d4
f0121fee:	68 1c 07 00 00       	push   $0x71c
f0121ff3:	68 ee 91 13 f0       	push   $0xf01391ee
f0121ff8:	e8 b3 e1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121ffd:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0122003:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122006:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012200d:	eb 1e                	jmp    f012202d <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f012200f:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0122015:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122018:	8b 45 98             	mov    -0x68(%ebp),%eax
f012201b:	01 c8                	add    %ecx,%eax
f012201d:	8a 00                	mov    (%eax),%al
f012201f:	0f be c0             	movsbl %al,%eax
f0122022:	01 d0                	add    %edx,%eax
f0122024:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012202a:	ff 45 f4             	incl   -0xc(%ebp)
f012202d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122033:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122036:	7f d7                	jg     f012200f <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122038:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012203e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0122044:	c1 e2 02             	shl    $0x2,%edx
f0122047:	39 d0                	cmp    %edx,%eax
f0122049:	74 17                	je     f0122062 <test_kfree_bestfirstfit+0xc95>
f012204b:	83 ec 04             	sub    $0x4,%esp
f012204e:	68 d4 99 13 f0       	push   $0xf01399d4
f0122053:	68 24 07 00 00       	push   $0x724
f0122058:	68 ee 91 13 f0       	push   $0xf01391ee
f012205d:	e8 4e e1 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122062:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122068:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012206b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122072:	eb 1e                	jmp    f0122092 <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0122074:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012207a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012207d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122080:	01 c8                	add    %ecx,%eax
f0122082:	8a 00                	mov    (%eax),%al
f0122084:	0f be c0             	movsbl %al,%eax
f0122087:	01 d0                	add    %edx,%eax
f0122089:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012208f:	ff 45 f4             	incl   -0xc(%ebp)
f0122092:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122098:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012209b:	7f d7                	jg     f0122074 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012209d:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f01220a3:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f01220a9:	89 d0                	mov    %edx,%eax
f01220ab:	c1 e0 02             	shl    $0x2,%eax
f01220ae:	01 d0                	add    %edx,%eax
f01220b0:	39 c1                	cmp    %eax,%ecx
f01220b2:	74 17                	je     f01220cb <test_kfree_bestfirstfit+0xcfe>
f01220b4:	83 ec 04             	sub    $0x4,%esp
f01220b7:	68 d4 99 13 f0       	push   $0xf01399d4
f01220bc:	68 2c 07 00 00       	push   $0x72c
f01220c1:	68 ee 91 13 f0       	push   $0xf01391ee
f01220c6:	e8 e5 e0 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01220cb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01220d1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01220d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01220db:	eb 1e                	jmp    f01220fb <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f01220dd:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01220e3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01220e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01220e9:	01 c8                	add    %ecx,%eax
f01220eb:	8a 00                	mov    (%eax),%al
f01220ed:	0f be c0             	movsbl %al,%eax
f01220f0:	01 d0                	add    %edx,%eax
f01220f2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01220f8:	ff 45 f4             	incl   -0xc(%ebp)
f01220fb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122101:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122104:	7f d7                	jg     f01220dd <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122106:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f012210c:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0122112:	89 d0                	mov    %edx,%eax
f0122114:	01 c0                	add    %eax,%eax
f0122116:	01 d0                	add    %edx,%eax
f0122118:	01 c0                	add    %eax,%eax
f012211a:	01 d0                	add    %edx,%eax
f012211c:	39 c1                	cmp    %eax,%ecx
f012211e:	74 17                	je     f0122137 <test_kfree_bestfirstfit+0xd6a>
f0122120:	83 ec 04             	sub    $0x4,%esp
f0122123:	68 d4 99 13 f0       	push   $0xf01399d4
f0122128:	68 34 07 00 00       	push   $0x734
f012212d:	68 ee 91 13 f0       	push   $0xf01391ee
f0122132:	e8 79 e0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0122137:	83 ec 0c             	sub    $0xc,%esp
f012213a:	68 07 9a 13 f0       	push   $0xf0139a07
f012213f:	e8 ed ec fd ff       	call   f0100e31 <cprintf>
f0122144:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122147:	e8 74 a8 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012214c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012214f:	e8 12 25 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122154:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122157:	83 ec 0c             	sub    $0xc,%esp
f012215a:	68 00 00 30 00       	push   $0x300000
f012215f:	e8 dd 5d fe ff       	call   f0107f41 <kmalloc>
f0122164:	83 c4 10             	add    $0x10,%esp
f0122167:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012216d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122173:	89 c1                	mov    %eax,%ecx
f0122175:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012217c:	10 00 00 
f012217f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122184:	0f b6 d0             	movzbl %al,%edx
f0122187:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012218d:	01 d0                	add    %edx,%eax
f012218f:	48                   	dec    %eax
f0122190:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122196:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012219c:	ba 00 00 00 00       	mov    $0x0,%edx
f01221a1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01221a7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221ad:	29 d0                	sub    %edx,%eax
f01221af:	89 c3                	mov    %eax,%ebx
f01221b1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01221b8:	10 00 00 
f01221bb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01221c0:	0f b6 c0             	movzbl %al,%eax
f01221c3:	c1 e0 04             	shl    $0x4,%eax
f01221c6:	89 c2                	mov    %eax,%edx
f01221c8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01221ce:	01 d0                	add    %edx,%eax
f01221d0:	48                   	dec    %eax
f01221d1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01221d7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01221dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01221e2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01221e8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01221ee:	29 d0                	sub    %edx,%eax
f01221f0:	01 d8                	add    %ebx,%eax
f01221f2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01221f7:	39 c1                	cmp    %eax,%ecx
f01221f9:	74 17                	je     f0122212 <test_kfree_bestfirstfit+0xe45>
f01221fb:	83 ec 04             	sub    $0x4,%esp
f01221fe:	68 d4 92 13 f0       	push   $0xf01392d4
f0122203:	68 3f 07 00 00       	push   $0x73f
f0122208:	68 ee 91 13 f0       	push   $0xf01391ee
f012220d:	e8 9e df fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122212:	e8 4f 24 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122217:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012221a:	74 17                	je     f0122233 <test_kfree_bestfirstfit+0xe66>
f012221c:	83 ec 04             	sub    $0x4,%esp
f012221f:	68 08 92 13 f0       	push   $0xf0139208
f0122224:	68 40 07 00 00       	push   $0x740
f0122229:	68 ee 91 13 f0       	push   $0xf01391ee
f012222e:	e8 7d df fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122233:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122236:	e8 85 a7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012223b:	29 c3                	sub    %eax,%ebx
f012223d:	89 d8                	mov    %ebx,%eax
f012223f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122244:	74 17                	je     f012225d <test_kfree_bestfirstfit+0xe90>
f0122246:	83 ec 04             	sub    $0x4,%esp
f0122249:	68 70 92 13 f0       	push   $0xf0139270
f012224e:	68 41 07 00 00       	push   $0x741
f0122253:	68 ee 91 13 f0       	push   $0xf01391ee
f0122258:	e8 53 df fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012225d:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0122264:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122267:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012226d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122270:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122277:	eb 0e                	jmp    f0122287 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0122279:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012227c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012227f:	01 d0                	add    %edx,%eax
f0122281:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122284:	ff 45 f4             	incl   -0xc(%ebp)
f0122287:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012228d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122290:	7f e7                	jg     f0122279 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122292:	e8 29 a7 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122297:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012229a:	e8 c7 23 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012229f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01222a2:	83 ec 0c             	sub    $0xc,%esp
f01222a5:	68 00 08 00 00       	push   $0x800
f01222aa:	e8 92 5c fe ff       	call   f0107f41 <kmalloc>
f01222af:	83 c4 10             	add    $0x10,%esp
f01222b2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222b8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01222be:	89 c1                	mov    %eax,%ecx
f01222c0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01222c7:	10 00 00 
f01222ca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01222cf:	0f b6 d0             	movzbl %al,%edx
f01222d2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01222d8:	01 d0                	add    %edx,%eax
f01222da:	48                   	dec    %eax
f01222db:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01222e1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01222e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01222ec:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01222f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01222f8:	29 d0                	sub    %edx,%eax
f01222fa:	89 c3                	mov    %eax,%ebx
f01222fc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122303:	10 00 00 
f0122306:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012230b:	0f b6 c0             	movzbl %al,%eax
f012230e:	c1 e0 04             	shl    $0x4,%eax
f0122311:	89 c2                	mov    %eax,%edx
f0122313:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122319:	01 d0                	add    %edx,%eax
f012231b:	48                   	dec    %eax
f012231c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122322:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122328:	ba 00 00 00 00       	mov    $0x0,%edx
f012232d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122333:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122339:	29 d0                	sub    %edx,%eax
f012233b:	01 d8                	add    %ebx,%eax
f012233d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122342:	39 c1                	cmp    %eax,%ecx
f0122344:	74 17                	je     f012235d <test_kfree_bestfirstfit+0xf90>
f0122346:	83 ec 04             	sub    $0x4,%esp
f0122349:	68 d4 92 13 f0       	push   $0xf01392d4
f012234e:	68 4d 07 00 00       	push   $0x74d
f0122353:	68 ee 91 13 f0       	push   $0xf01391ee
f0122358:	e8 53 de fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012235d:	e8 04 23 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122362:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122365:	74 17                	je     f012237e <test_kfree_bestfirstfit+0xfb1>
f0122367:	83 ec 04             	sub    $0x4,%esp
f012236a:	68 08 92 13 f0       	push   $0xf0139208
f012236f:	68 4e 07 00 00       	push   $0x74e
f0122374:	68 ee 91 13 f0       	push   $0xf01391ee
f0122379:	e8 32 de fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012237e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122381:	e8 3a a6 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122386:	29 c3                	sub    %eax,%ebx
f0122388:	89 d8                	mov    %ebx,%eax
f012238a:	83 f8 01             	cmp    $0x1,%eax
f012238d:	74 17                	je     f01223a6 <test_kfree_bestfirstfit+0xfd9>
f012238f:	83 ec 04             	sub    $0x4,%esp
f0122392:	68 70 92 13 f0       	push   $0xf0139270
f0122397:	68 4f 07 00 00       	push   $0x74f
f012239c:	68 ee 91 13 f0       	push   $0xf01391ee
f01223a1:	e8 0a de fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01223a6:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f01223ad:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01223b0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01223b6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01223b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01223c0:	eb 0e                	jmp    f01223d0 <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f01223c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01223c5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01223c8:	01 d0                	add    %edx,%eax
f01223ca:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01223cd:	ff 45 f4             	incl   -0xc(%ebp)
f01223d0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01223d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01223d9:	7f e7                	jg     f01223c2 <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01223db:	e8 e0 a5 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01223e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223e3:	e8 7e 22 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01223e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01223eb:	83 ec 0c             	sub    $0xc,%esp
f01223ee:	68 00 00 10 00       	push   $0x100000
f01223f3:	e8 49 5b fe ff       	call   f0107f41 <kmalloc>
f01223f8:	83 c4 10             	add    $0x10,%esp
f01223fb:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122401:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122407:	89 c1                	mov    %eax,%ecx
f0122409:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122410:	10 00 00 
f0122413:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122418:	0f b6 d0             	movzbl %al,%edx
f012241b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122421:	01 d0                	add    %edx,%eax
f0122423:	48                   	dec    %eax
f0122424:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012242a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122430:	ba 00 00 00 00       	mov    $0x0,%edx
f0122435:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012243b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122441:	29 d0                	sub    %edx,%eax
f0122443:	89 c3                	mov    %eax,%ebx
f0122445:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012244c:	10 00 00 
f012244f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122454:	0f b6 c0             	movzbl %al,%eax
f0122457:	c1 e0 04             	shl    $0x4,%eax
f012245a:	89 c2                	mov    %eax,%edx
f012245c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122462:	01 d0                	add    %edx,%eax
f0122464:	48                   	dec    %eax
f0122465:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012246b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122471:	ba 00 00 00 00       	mov    $0x0,%edx
f0122476:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012247c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122482:	29 d0                	sub    %edx,%eax
f0122484:	01 d8                	add    %ebx,%eax
f0122486:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012248b:	39 c1                	cmp    %eax,%ecx
f012248d:	74 17                	je     f01224a6 <test_kfree_bestfirstfit+0x10d9>
f012248f:	83 ec 04             	sub    $0x4,%esp
f0122492:	68 d4 92 13 f0       	push   $0xf01392d4
f0122497:	68 5b 07 00 00       	push   $0x75b
f012249c:	68 ee 91 13 f0       	push   $0xf01391ee
f01224a1:	e8 0a dd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224a6:	e8 bb 21 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01224ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224ae:	74 17                	je     f01224c7 <test_kfree_bestfirstfit+0x10fa>
f01224b0:	83 ec 04             	sub    $0x4,%esp
f01224b3:	68 08 92 13 f0       	push   $0xf0139208
f01224b8:	68 5c 07 00 00       	push   $0x75c
f01224bd:	68 ee 91 13 f0       	push   $0xf01391ee
f01224c2:	e8 e9 dc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01224c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01224ca:	e8 f1 a4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01224cf:	29 c3                	sub    %eax,%ebx
f01224d1:	89 d8                	mov    %ebx,%eax
f01224d3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01224d8:	74 17                	je     f01224f1 <test_kfree_bestfirstfit+0x1124>
f01224da:	83 ec 04             	sub    $0x4,%esp
f01224dd:	68 70 92 13 f0       	push   $0xf0139270
f01224e2:	68 5d 07 00 00       	push   $0x75d
f01224e7:	68 ee 91 13 f0       	push   $0xf01391ee
f01224ec:	e8 bf dc fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f01224f1:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f01224f8:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01224fb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122501:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122504:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012250b:	eb 0e                	jmp    f012251b <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f012250d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122510:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122513:	01 d0                	add    %edx,%eax
f0122515:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122518:	ff 45 f4             	incl   -0xc(%ebp)
f012251b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122521:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122524:	7f e7                	jg     f012250d <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122526:	83 ec 0c             	sub    $0xc,%esp
f0122529:	68 0e 9a 13 f0       	push   $0xf0139a0e
f012252e:	e8 fe e8 fd ff       	call   f0100e31 <cprintf>
f0122533:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122536:	e8 85 a4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012253b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012253e:	e8 23 21 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122543:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122546:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012254c:	83 ec 0c             	sub    $0xc,%esp
f012254f:	50                   	push   %eax
f0122550:	e8 06 5a fe ff       	call   f0107f5b <kfree>
f0122555:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122558:	e8 09 21 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012255d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122560:	74 17                	je     f0122579 <test_kfree_bestfirstfit+0x11ac>
f0122562:	83 ec 04             	sub    $0x4,%esp
f0122565:	68 08 92 13 f0       	push   $0xf0139208
f012256a:	68 6d 07 00 00       	push   $0x76d
f012256f:	68 ee 91 13 f0       	push   $0xf01391ee
f0122574:	e8 37 dc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122579:	e8 42 a4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012257e:	89 c2                	mov    %eax,%edx
f0122580:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122583:	29 c2                	sub    %eax,%edx
f0122585:	89 d0                	mov    %edx,%eax
f0122587:	83 f8 02             	cmp    $0x2,%eax
f012258a:	74 17                	je     f01225a3 <test_kfree_bestfirstfit+0x11d6>
f012258c:	83 ec 04             	sub    $0x4,%esp
f012258f:	68 78 99 13 f0       	push   $0xf0139978
f0122594:	68 6e 07 00 00       	push   $0x76e
f0122599:	68 ee 91 13 f0       	push   $0xf01391ee
f012259e:	e8 0d dc fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01225a3:	e8 18 a4 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01225a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225ab:	e8 b6 20 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01225b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01225b3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01225b9:	83 ec 0c             	sub    $0xc,%esp
f01225bc:	50                   	push   %eax
f01225bd:	e8 99 59 fe ff       	call   f0107f5b <kfree>
f01225c2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225c5:	e8 9c 20 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01225ca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225cd:	74 17                	je     f01225e6 <test_kfree_bestfirstfit+0x1219>
f01225cf:	83 ec 04             	sub    $0x4,%esp
f01225d2:	68 08 92 13 f0       	push   $0xf0139208
f01225d7:	68 74 07 00 00       	push   $0x774
f01225dc:	68 ee 91 13 f0       	push   $0xf01391ee
f01225e1:	e8 ca db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01225e6:	e8 d5 a3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01225eb:	89 c2                	mov    %eax,%edx
f01225ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225f0:	29 c2                	sub    %eax,%edx
f01225f2:	89 d0                	mov    %edx,%eax
f01225f4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01225f9:	74 17                	je     f0122612 <test_kfree_bestfirstfit+0x1245>
f01225fb:	83 ec 04             	sub    $0x4,%esp
f01225fe:	68 78 99 13 f0       	push   $0xf0139978
f0122603:	68 75 07 00 00       	push   $0x775
f0122608:	68 ee 91 13 f0       	push   $0xf01391ee
f012260d:	e8 9e db fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122612:	e8 a9 a3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122617:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012261a:	e8 47 20 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012261f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122622:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122628:	83 ec 0c             	sub    $0xc,%esp
f012262b:	50                   	push   %eax
f012262c:	e8 2a 59 fe ff       	call   f0107f5b <kfree>
f0122631:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122634:	e8 2d 20 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122639:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012263c:	74 17                	je     f0122655 <test_kfree_bestfirstfit+0x1288>
f012263e:	83 ec 04             	sub    $0x4,%esp
f0122641:	68 08 92 13 f0       	push   $0xf0139208
f0122646:	68 7b 07 00 00       	push   $0x77b
f012264b:	68 ee 91 13 f0       	push   $0xf01391ee
f0122650:	e8 5b db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122655:	e8 66 a3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012265a:	89 c2                	mov    %eax,%edx
f012265c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012265f:	29 c2                	sub    %eax,%edx
f0122661:	89 d0                	mov    %edx,%eax
f0122663:	83 f8 01             	cmp    $0x1,%eax
f0122666:	74 17                	je     f012267f <test_kfree_bestfirstfit+0x12b2>
f0122668:	83 ec 04             	sub    $0x4,%esp
f012266b:	68 78 99 13 f0       	push   $0xf0139978
f0122670:	68 7c 07 00 00       	push   $0x77c
f0122675:	68 ee 91 13 f0       	push   $0xf01391ee
f012267a:	e8 31 db fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012267f:	e8 3c a3 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122684:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122687:	e8 da 1f fe ff       	call   f0104666 <pf_calculate_free_frames>
f012268c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012268f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122695:	83 ec 0c             	sub    $0xc,%esp
f0122698:	50                   	push   %eax
f0122699:	e8 bd 58 fe ff       	call   f0107f5b <kfree>
f012269e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226a1:	e8 c0 1f fe ff       	call   f0104666 <pf_calculate_free_frames>
f01226a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226a9:	74 17                	je     f01226c2 <test_kfree_bestfirstfit+0x12f5>
f01226ab:	83 ec 04             	sub    $0x4,%esp
f01226ae:	68 08 92 13 f0       	push   $0xf0139208
f01226b3:	68 82 07 00 00       	push   $0x782
f01226b8:	68 ee 91 13 f0       	push   $0xf01391ee
f01226bd:	e8 ee da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01226c2:	e8 f9 a2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01226c7:	89 c2                	mov    %eax,%edx
f01226c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01226cc:	29 c2                	sub    %eax,%edx
f01226ce:	89 d0                	mov    %edx,%eax
f01226d0:	83 f8 04             	cmp    $0x4,%eax
f01226d3:	74 17                	je     f01226ec <test_kfree_bestfirstfit+0x131f>
f01226d5:	83 ec 04             	sub    $0x4,%esp
f01226d8:	68 78 99 13 f0       	push   $0xf0139978
f01226dd:	68 83 07 00 00       	push   $0x783
f01226e2:	68 ee 91 13 f0       	push   $0xf01391ee
f01226e7:	e8 c4 da fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01226ec:	e8 cf a2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01226f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226f4:	e8 6d 1f fe ff       	call   f0104666 <pf_calculate_free_frames>
f01226f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01226fc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122702:	83 ec 0c             	sub    $0xc,%esp
f0122705:	50                   	push   %eax
f0122706:	e8 50 58 fe ff       	call   f0107f5b <kfree>
f012270b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012270e:	e8 53 1f fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122713:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122716:	74 17                	je     f012272f <test_kfree_bestfirstfit+0x1362>
f0122718:	83 ec 04             	sub    $0x4,%esp
f012271b:	68 08 92 13 f0       	push   $0xf0139208
f0122720:	68 89 07 00 00       	push   $0x789
f0122725:	68 ee 91 13 f0       	push   $0xf01391ee
f012272a:	e8 81 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012272f:	e8 8c a2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122734:	89 c2                	mov    %eax,%edx
f0122736:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122739:	29 c2                	sub    %eax,%edx
f012273b:	89 d0                	mov    %edx,%eax
f012273d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122742:	74 17                	je     f012275b <test_kfree_bestfirstfit+0x138e>
f0122744:	83 ec 04             	sub    $0x4,%esp
f0122747:	68 78 99 13 f0       	push   $0xf0139978
f012274c:	68 8a 07 00 00       	push   $0x78a
f0122751:	68 ee 91 13 f0       	push   $0xf01391ee
f0122756:	e8 55 da fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012275b:	e8 60 a2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122760:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122763:	e8 fe 1e fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122768:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012276b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122771:	83 ec 0c             	sub    $0xc,%esp
f0122774:	50                   	push   %eax
f0122775:	e8 e1 57 fe ff       	call   f0107f5b <kfree>
f012277a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012277d:	e8 e4 1e fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122782:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122785:	74 17                	je     f012279e <test_kfree_bestfirstfit+0x13d1>
f0122787:	83 ec 04             	sub    $0x4,%esp
f012278a:	68 08 92 13 f0       	push   $0xf0139208
f012278f:	68 90 07 00 00       	push   $0x790
f0122794:	68 ee 91 13 f0       	push   $0xf01391ee
f0122799:	e8 12 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012279e:	e8 1d a2 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01227a3:	89 c2                	mov    %eax,%edx
f01227a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01227a8:	29 c2                	sub    %eax,%edx
f01227aa:	89 d0                	mov    %edx,%eax
f01227ac:	83 f8 01             	cmp    $0x1,%eax
f01227af:	74 17                	je     f01227c8 <test_kfree_bestfirstfit+0x13fb>
f01227b1:	83 ec 04             	sub    $0x4,%esp
f01227b4:	68 78 99 13 f0       	push   $0xf0139978
f01227b9:	68 91 07 00 00       	push   $0x791
f01227be:	68 ee 91 13 f0       	push   $0xf01391ee
f01227c3:	e8 e8 d9 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01227c8:	e8 f3 a1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01227cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227d0:	e8 91 1e fe ff       	call   f0104666 <pf_calculate_free_frames>
f01227d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01227d8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01227de:	83 ec 0c             	sub    $0xc,%esp
f01227e1:	50                   	push   %eax
f01227e2:	e8 74 57 fe ff       	call   f0107f5b <kfree>
f01227e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227ea:	e8 77 1e fe ff       	call   f0104666 <pf_calculate_free_frames>
f01227ef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227f2:	74 17                	je     f012280b <test_kfree_bestfirstfit+0x143e>
f01227f4:	83 ec 04             	sub    $0x4,%esp
f01227f7:	68 08 92 13 f0       	push   $0xf0139208
f01227fc:	68 97 07 00 00       	push   $0x797
f0122801:	68 ee 91 13 f0       	push   $0xf01391ee
f0122806:	e8 a5 d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012280b:	e8 b0 a1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122810:	89 c2                	mov    %eax,%edx
f0122812:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122815:	29 c2                	sub    %eax,%edx
f0122817:	89 d0                	mov    %edx,%eax
f0122819:	3d 00 01 00 00       	cmp    $0x100,%eax
f012281e:	74 17                	je     f0122837 <test_kfree_bestfirstfit+0x146a>
f0122820:	83 ec 04             	sub    $0x4,%esp
f0122823:	68 78 99 13 f0       	push   $0xf0139978
f0122828:	68 98 07 00 00       	push   $0x798
f012282d:	68 ee 91 13 f0       	push   $0xf01391ee
f0122832:	e8 79 d9 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122837:	e8 84 a1 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012283c:	89 c2                	mov    %eax,%edx
f012283e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122841:	39 c2                	cmp    %eax,%edx
f0122843:	74 17                	je     f012285c <test_kfree_bestfirstfit+0x148f>
f0122845:	83 ec 04             	sub    $0x4,%esp
f0122848:	68 18 9a 13 f0       	push   $0xf0139a18
f012284d:	68 9a 07 00 00       	push   $0x79a
f0122852:	68 ee 91 13 f0       	push   $0xf01391ee
f0122857:	e8 54 d9 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f012285c:	83 ec 0c             	sub    $0xc,%esp
f012285f:	68 4c 9a 13 f0       	push   $0xf0139a4c
f0122864:	e8 c8 e5 fd ff       	call   f0100e31 <cprintf>
f0122869:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012286c:	83 ec 0c             	sub    $0xc,%esp
f012286f:	6a 03                	push   $0x3
f0122871:	e8 e5 a5 fe ff       	call   f010ce5b <sys_bypassPageFault>
f0122876:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122879:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122880:	e9 82 00 00 00       	jmp    f0122907 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f0122885:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122888:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f012288f:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0122892:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122895:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122898:	e8 ac a5 fe ff       	call   f010ce49 <sys_rcr2>
f012289d:	89 c2                	mov    %eax,%edx
f012289f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228a2:	39 c2                	cmp    %eax,%edx
f01228a4:	74 17                	je     f01228bd <test_kfree_bestfirstfit+0x14f0>
f01228a6:	83 ec 04             	sub    $0x4,%esp
f01228a9:	68 54 9a 13 f0       	push   $0xf0139a54
f01228ae:	68 a9 07 00 00       	push   $0x7a9
f01228b3:	68 ee 91 13 f0       	push   $0xf01391ee
f01228b8:	e8 f3 d8 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f01228bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228c0:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01228c7:	89 c2                	mov    %eax,%edx
f01228c9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228cc:	01 d0                	add    %edx,%eax
f01228ce:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01228d1:	e8 73 a5 fe ff       	call   f010ce49 <sys_rcr2>
f01228d6:	89 c2                	mov    %eax,%edx
f01228d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228db:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01228e2:	89 c1                	mov    %eax,%ecx
f01228e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228e7:	01 c8                	add    %ecx,%eax
f01228e9:	39 c2                	cmp    %eax,%edx
f01228eb:	74 17                	je     f0122904 <test_kfree_bestfirstfit+0x1537>
f01228ed:	83 ec 04             	sub    $0x4,%esp
f01228f0:	68 54 9a 13 f0       	push   $0xf0139a54
f01228f5:	68 ab 07 00 00       	push   $0x7ab
f01228fa:	68 ee 91 13 f0       	push   $0xf01391ee
f01228ff:	e8 ac d8 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122904:	ff 45 f4             	incl   -0xc(%ebp)
f0122907:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012290b:	0f 8e 74 ff ff ff    	jle    f0122885 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122911:	83 ec 0c             	sub    $0xc,%esp
f0122914:	6a 00                	push   $0x0
f0122916:	e8 40 a5 fe ff       	call   f010ce5b <sys_bypassPageFault>
f012291b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012291e:	83 ec 0c             	sub    $0xc,%esp
f0122921:	68 99 9a 13 f0       	push   $0xf0139a99
f0122926:	e8 06 e5 fd ff       	call   f0100e31 <cprintf>
f012292b:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012292e:	e8 8d a0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122933:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122936:	e8 2b 1d fe ff       	call   f0104666 <pf_calculate_free_frames>
f012293b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012293e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122944:	83 ec 0c             	sub    $0xc,%esp
f0122947:	50                   	push   %eax
f0122948:	e8 0e 56 fe ff       	call   f0107f5b <kfree>
f012294d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122950:	e8 11 1d fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122955:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122958:	74 17                	je     f0122971 <test_kfree_bestfirstfit+0x15a4>
f012295a:	83 ec 04             	sub    $0x4,%esp
f012295d:	68 08 92 13 f0       	push   $0xf0139208
f0122962:	68 b9 07 00 00       	push   $0x7b9
f0122967:	68 ee 91 13 f0       	push   $0xf01391ee
f012296c:	e8 3f d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122971:	e8 4a a0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122976:	89 c2                	mov    %eax,%edx
f0122978:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012297b:	39 c2                	cmp    %eax,%edx
f012297d:	74 17                	je     f0122996 <test_kfree_bestfirstfit+0x15c9>
f012297f:	83 ec 04             	sub    $0x4,%esp
f0122982:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0122987:	68 ba 07 00 00       	push   $0x7ba
f012298c:	68 ee 91 13 f0       	push   $0xf01391ee
f0122991:	e8 1a d8 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122996:	e8 25 a0 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012299b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012299e:	e8 c3 1c fe ff       	call   f0104666 <pf_calculate_free_frames>
f01229a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01229a6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01229ac:	83 ec 0c             	sub    $0xc,%esp
f01229af:	50                   	push   %eax
f01229b0:	e8 a6 55 fe ff       	call   f0107f5b <kfree>
f01229b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229b8:	e8 a9 1c fe ff       	call   f0104666 <pf_calculate_free_frames>
f01229bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229c0:	74 17                	je     f01229d9 <test_kfree_bestfirstfit+0x160c>
f01229c2:	83 ec 04             	sub    $0x4,%esp
f01229c5:	68 08 92 13 f0       	push   $0xf0139208
f01229ca:	68 c0 07 00 00       	push   $0x7c0
f01229cf:	68 ee 91 13 f0       	push   $0xf01391ee
f01229d4:	e8 d7 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01229d9:	e8 e2 9f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01229de:	89 c2                	mov    %eax,%edx
f01229e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229e3:	39 c2                	cmp    %eax,%edx
f01229e5:	74 17                	je     f01229fe <test_kfree_bestfirstfit+0x1631>
f01229e7:	83 ec 04             	sub    $0x4,%esp
f01229ea:	68 a0 9a 13 f0       	push   $0xf0139aa0
f01229ef:	68 c1 07 00 00       	push   $0x7c1
f01229f4:	68 ee 91 13 f0       	push   $0xf01391ee
f01229f9:	e8 b2 d7 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01229fe:	e8 bd 9f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122a03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a06:	e8 5b 1c fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122a0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122a0e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122a14:	83 ec 0c             	sub    $0xc,%esp
f0122a17:	50                   	push   %eax
f0122a18:	e8 3e 55 fe ff       	call   f0107f5b <kfree>
f0122a1d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a20:	e8 41 1c fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122a25:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a28:	74 17                	je     f0122a41 <test_kfree_bestfirstfit+0x1674>
f0122a2a:	83 ec 04             	sub    $0x4,%esp
f0122a2d:	68 08 92 13 f0       	push   $0xf0139208
f0122a32:	68 c7 07 00 00       	push   $0x7c7
f0122a37:	68 ee 91 13 f0       	push   $0xf01391ee
f0122a3c:	e8 6f d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122a41:	e8 7a 9f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122a46:	89 c2                	mov    %eax,%edx
f0122a48:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a4b:	39 c2                	cmp    %eax,%edx
f0122a4d:	74 17                	je     f0122a66 <test_kfree_bestfirstfit+0x1699>
f0122a4f:	83 ec 04             	sub    $0x4,%esp
f0122a52:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0122a57:	68 c8 07 00 00       	push   $0x7c8
f0122a5c:	68 ee 91 13 f0       	push   $0xf01391ee
f0122a61:	e8 4a d7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a66:	e8 55 9f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122a6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a6e:	e8 f3 1b fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122a73:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122a76:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122a7c:	83 ec 0c             	sub    $0xc,%esp
f0122a7f:	50                   	push   %eax
f0122a80:	e8 d6 54 fe ff       	call   f0107f5b <kfree>
f0122a85:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a88:	e8 d9 1b fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122a8d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a90:	74 17                	je     f0122aa9 <test_kfree_bestfirstfit+0x16dc>
f0122a92:	83 ec 04             	sub    $0x4,%esp
f0122a95:	68 08 92 13 f0       	push   $0xf0139208
f0122a9a:	68 ce 07 00 00       	push   $0x7ce
f0122a9f:	68 ee 91 13 f0       	push   $0xf01391ee
f0122aa4:	e8 07 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122aa9:	e8 12 9f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122aae:	89 c2                	mov    %eax,%edx
f0122ab0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ab3:	39 c2                	cmp    %eax,%edx
f0122ab5:	74 17                	je     f0122ace <test_kfree_bestfirstfit+0x1701>
f0122ab7:	83 ec 04             	sub    $0x4,%esp
f0122aba:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0122abf:	68 cf 07 00 00       	push   $0x7cf
f0122ac4:	68 ee 91 13 f0       	push   $0xf01391ee
f0122ac9:	e8 e2 d6 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122ace:	83 ec 0c             	sub    $0xc,%esp
f0122ad1:	68 e7 9a 13 f0       	push   $0xf0139ae7
f0122ad6:	e8 56 e3 fd ff       	call   f0100e31 <cprintf>
f0122adb:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122ade:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122ae5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122aec:	eb 48                	jmp    f0122b36 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122aee:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122af1:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0122af6:	83 ec 04             	sub    $0x4,%esp
f0122af9:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122aff:	51                   	push   %ecx
f0122b00:	52                   	push   %edx
f0122b01:	50                   	push   %eax
f0122b02:	e8 c2 49 fe ff       	call   f01074c9 <get_page_table>
f0122b07:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122b0a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122b10:	85 c0                	test   %eax,%eax
f0122b12:	75 17                	jne    f0122b2b <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122b14:	83 ec 04             	sub    $0x4,%esp
f0122b17:	68 f0 9a 13 f0       	push   $0xf0139af0
f0122b1c:	68 dd 07 00 00       	push   $0x7dd
f0122b21:	68 ee 91 13 f0       	push   $0xf01391ee
f0122b26:	e8 85 d6 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122b2b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122b32:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122b36:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b3a:	78 b2                	js     f0122aee <test_kfree_bestfirstfit+0x1721>
f0122b3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b40:	7f 09                	jg     f0122b4b <test_kfree_bestfirstfit+0x177e>
f0122b42:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122b49:	76 a3                	jbe    f0122aee <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122b4b:	83 ec 0c             	sub    $0xc,%esp
f0122b4e:	68 d2 93 13 f0       	push   $0xf01393d2
f0122b53:	e8 d9 e2 fd ff       	call   f0100e31 <cprintf>
f0122b58:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122b5b:	83 ec 0c             	sub    $0xc,%esp
f0122b5e:	68 58 9b 13 f0       	push   $0xf0139b58
f0122b63:	e8 c9 e2 fd ff       	call   f0100e31 <cprintf>
f0122b68:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122b6b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122b70:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122b73:	5b                   	pop    %ebx
f0122b74:	5f                   	pop    %edi
f0122b75:	5d                   	pop    %ebp
f0122b76:	c3                   	ret    

f0122b77 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122b77:	55                   	push   %ebp
f0122b78:	89 e5                	mov    %esp,%ebp
f0122b7a:	57                   	push   %edi
f0122b7b:	56                   	push   %esi
f0122b7c:	53                   	push   %ebx
f0122b7d:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122b83:	83 ec 0c             	sub    $0xc,%esp
f0122b86:	68 30 91 13 f0       	push   $0xf0139130
f0122b8b:	e8 a1 e2 fd ff       	call   f0100e31 <cprintf>
f0122b90:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122b93:	83 ec 0c             	sub    $0xc,%esp
f0122b96:	68 60 91 13 f0       	push   $0xf0139160
f0122b9b:	e8 91 e2 fd ff       	call   f0100e31 <cprintf>
f0122ba0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122ba3:	83 ec 0c             	sub    $0xc,%esp
f0122ba6:	68 30 91 13 f0       	push   $0xf0139130
f0122bab:	e8 81 e2 fd ff       	call   f0100e31 <cprintf>
f0122bb0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122bb3:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122bb7:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122bbb:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122bc1:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122bc7:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122bce:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122bd5:	e8 e6 9d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122bda:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122bdd:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122be3:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0122bed:	89 d7                	mov    %edx,%edi
f0122bef:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122bf1:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122bf7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122bfc:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c01:	89 d7                	mov    %edx,%edi
f0122c03:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122c05:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0122c0b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c10:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c15:	89 d7                	mov    %edx,%edi
f0122c17:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c19:	e8 a2 9d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122c1e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c21:	e8 40 1a fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122c26:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122c29:	83 ec 0c             	sub    $0xc,%esp
f0122c2c:	68 00 fc 1f 00       	push   $0x1ffc00
f0122c31:	e8 0b 53 fe ff       	call   f0107f41 <kmalloc>
f0122c36:	83 c4 10             	add    $0x10,%esp
f0122c39:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c3f:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122c45:	89 c1                	mov    %eax,%ecx
f0122c47:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122c4e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122c53:	0f b6 d0             	movzbl %al,%edx
f0122c56:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122c59:	01 d0                	add    %edx,%eax
f0122c5b:	48                   	dec    %eax
f0122c5c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122c5f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122c62:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c67:	f7 75 a0             	divl   -0x60(%ebp)
f0122c6a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122c6d:	29 d0                	sub    %edx,%eax
f0122c6f:	89 c3                	mov    %eax,%ebx
f0122c71:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122c78:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122c7d:	0f b6 c0             	movzbl %al,%eax
f0122c80:	c1 e0 04             	shl    $0x4,%eax
f0122c83:	89 c2                	mov    %eax,%edx
f0122c85:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122c88:	01 d0                	add    %edx,%eax
f0122c8a:	48                   	dec    %eax
f0122c8b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122c8e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122c91:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c96:	f7 75 98             	divl   -0x68(%ebp)
f0122c99:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122c9c:	29 d0                	sub    %edx,%eax
f0122c9e:	01 d8                	add    %ebx,%eax
f0122ca0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122ca5:	39 c1                	cmp    %eax,%ecx
f0122ca7:	74 17                	je     f0122cc0 <test_kheap_phys_addr+0x149>
f0122ca9:	83 ec 04             	sub    $0x4,%esp
f0122cac:	68 d4 92 13 f0       	push   $0xf01392d4
f0122cb1:	68 0a 08 00 00       	push   $0x80a
f0122cb6:	68 ee 91 13 f0       	push   $0xf01391ee
f0122cbb:	e8 f0 d4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cc0:	e8 a1 19 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122cc5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122cc8:	74 17                	je     f0122ce1 <test_kheap_phys_addr+0x16a>
f0122cca:	83 ec 04             	sub    $0x4,%esp
f0122ccd:	68 08 92 13 f0       	push   $0xf0139208
f0122cd2:	68 0b 08 00 00       	push   $0x80b
f0122cd7:	68 ee 91 13 f0       	push   $0xf01391ee
f0122cdc:	e8 cf d4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ce1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ce4:	e8 d7 9c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122ce9:	29 c3                	sub    %eax,%ebx
f0122ceb:	89 d8                	mov    %ebx,%eax
f0122ced:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122cf2:	74 17                	je     f0122d0b <test_kheap_phys_addr+0x194>
f0122cf4:	83 ec 04             	sub    $0x4,%esp
f0122cf7:	68 70 92 13 f0       	push   $0xf0139270
f0122cfc:	68 0c 08 00 00       	push   $0x80c
f0122d01:	68 ee 91 13 f0       	push   $0xf01391ee
f0122d06:	e8 a5 d4 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d0b:	e8 b0 9c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122d10:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d13:	e8 4e 19 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122d18:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122d1b:	83 ec 0c             	sub    $0xc,%esp
f0122d1e:	68 00 fc 1f 00       	push   $0x1ffc00
f0122d23:	e8 19 52 fe ff       	call   f0107f41 <kmalloc>
f0122d28:	83 c4 10             	add    $0x10,%esp
f0122d2b:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d31:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122d37:	89 c1                	mov    %eax,%ecx
f0122d39:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122d40:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122d45:	0f b6 d0             	movzbl %al,%edx
f0122d48:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122d4b:	01 d0                	add    %edx,%eax
f0122d4d:	48                   	dec    %eax
f0122d4e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122d51:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122d54:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d59:	f7 75 90             	divl   -0x70(%ebp)
f0122d5c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122d5f:	29 d0                	sub    %edx,%eax
f0122d61:	89 c3                	mov    %eax,%ebx
f0122d63:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122d6a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122d6f:	0f b6 c0             	movzbl %al,%eax
f0122d72:	c1 e0 04             	shl    $0x4,%eax
f0122d75:	89 c2                	mov    %eax,%edx
f0122d77:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122d7a:	01 d0                	add    %edx,%eax
f0122d7c:	48                   	dec    %eax
f0122d7d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122d80:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122d83:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d88:	f7 75 88             	divl   -0x78(%ebp)
f0122d8b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122d8e:	29 d0                	sub    %edx,%eax
f0122d90:	01 d8                	add    %ebx,%eax
f0122d92:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122d97:	39 c1                	cmp    %eax,%ecx
f0122d99:	74 17                	je     f0122db2 <test_kheap_phys_addr+0x23b>
f0122d9b:	83 ec 04             	sub    $0x4,%esp
f0122d9e:	68 d4 92 13 f0       	push   $0xf01392d4
f0122da3:	68 12 08 00 00       	push   $0x812
f0122da8:	68 ee 91 13 f0       	push   $0xf01391ee
f0122dad:	e8 fe d3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122db2:	e8 af 18 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122db7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122dba:	74 17                	je     f0122dd3 <test_kheap_phys_addr+0x25c>
f0122dbc:	83 ec 04             	sub    $0x4,%esp
f0122dbf:	68 08 92 13 f0       	push   $0xf0139208
f0122dc4:	68 13 08 00 00       	push   $0x813
f0122dc9:	68 ee 91 13 f0       	push   $0xf01391ee
f0122dce:	e8 dd d3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122dd3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122dd6:	e8 e5 9b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122ddb:	29 c3                	sub    %eax,%ebx
f0122ddd:	89 d8                	mov    %ebx,%eax
f0122ddf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122de4:	74 17                	je     f0122dfd <test_kheap_phys_addr+0x286>
f0122de6:	83 ec 04             	sub    $0x4,%esp
f0122de9:	68 70 92 13 f0       	push   $0xf0139270
f0122dee:	68 14 08 00 00       	push   $0x814
f0122df3:	68 ee 91 13 f0       	push   $0xf01391ee
f0122df8:	e8 b3 d3 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122dfd:	e8 be 9b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122e02:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e05:	e8 5c 18 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122e0a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122e0d:	83 ec 0c             	sub    $0xc,%esp
f0122e10:	68 00 08 00 00       	push   $0x800
f0122e15:	e8 27 51 fe ff       	call   f0107f41 <kmalloc>
f0122e1a:	83 c4 10             	add    $0x10,%esp
f0122e1d:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e23:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0122e29:	89 c1                	mov    %eax,%ecx
f0122e2b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122e32:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122e37:	0f b6 d0             	movzbl %al,%edx
f0122e3a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e3d:	01 d0                	add    %edx,%eax
f0122e3f:	48                   	dec    %eax
f0122e40:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122e46:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e51:	f7 75 80             	divl   -0x80(%ebp)
f0122e54:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e5a:	29 d0                	sub    %edx,%eax
f0122e5c:	89 c3                	mov    %eax,%ebx
f0122e5e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122e65:	10 00 00 
f0122e68:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122e6d:	0f b6 c0             	movzbl %al,%eax
f0122e70:	c1 e0 04             	shl    $0x4,%eax
f0122e73:	89 c2                	mov    %eax,%edx
f0122e75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122e7b:	01 d0                	add    %edx,%eax
f0122e7d:	48                   	dec    %eax
f0122e7e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122e84:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122e8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e8f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122e95:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122e9b:	29 d0                	sub    %edx,%eax
f0122e9d:	01 d8                	add    %ebx,%eax
f0122e9f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122ea4:	39 c1                	cmp    %eax,%ecx
f0122ea6:	74 17                	je     f0122ebf <test_kheap_phys_addr+0x348>
f0122ea8:	83 ec 04             	sub    $0x4,%esp
f0122eab:	68 d4 92 13 f0       	push   $0xf01392d4
f0122eb0:	68 1a 08 00 00       	push   $0x81a
f0122eb5:	68 ee 91 13 f0       	push   $0xf01391ee
f0122eba:	e8 f1 d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ebf:	e8 a2 17 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122ec4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ec7:	74 17                	je     f0122ee0 <test_kheap_phys_addr+0x369>
f0122ec9:	83 ec 04             	sub    $0x4,%esp
f0122ecc:	68 08 92 13 f0       	push   $0xf0139208
f0122ed1:	68 1b 08 00 00       	push   $0x81b
f0122ed6:	68 ee 91 13 f0       	push   $0xf01391ee
f0122edb:	e8 d0 d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ee0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ee3:	e8 d8 9a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122ee8:	29 c3                	sub    %eax,%ebx
f0122eea:	89 d8                	mov    %ebx,%eax
f0122eec:	83 f8 01             	cmp    $0x1,%eax
f0122eef:	74 17                	je     f0122f08 <test_kheap_phys_addr+0x391>
f0122ef1:	83 ec 04             	sub    $0x4,%esp
f0122ef4:	68 70 92 13 f0       	push   $0xf0139270
f0122ef9:	68 1c 08 00 00       	push   $0x81c
f0122efe:	68 ee 91 13 f0       	push   $0xf01391ee
f0122f03:	e8 a8 d2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f08:	e8 b3 9a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122f0d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f10:	e8 51 17 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122f15:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122f18:	83 ec 0c             	sub    $0xc,%esp
f0122f1b:	68 00 08 00 00       	push   $0x800
f0122f20:	e8 1c 50 fe ff       	call   f0107f41 <kmalloc>
f0122f25:	83 c4 10             	add    $0x10,%esp
f0122f28:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f2e:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0122f34:	89 c1                	mov    %eax,%ecx
f0122f36:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122f3d:	10 00 00 
f0122f40:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122f45:	0f b6 d0             	movzbl %al,%edx
f0122f48:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122f4e:	01 d0                	add    %edx,%eax
f0122f50:	48                   	dec    %eax
f0122f51:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122f57:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122f5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f62:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122f68:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122f6e:	29 d0                	sub    %edx,%eax
f0122f70:	89 c3                	mov    %eax,%ebx
f0122f72:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122f79:	10 00 00 
f0122f7c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122f81:	0f b6 c0             	movzbl %al,%eax
f0122f84:	c1 e0 04             	shl    $0x4,%eax
f0122f87:	89 c2                	mov    %eax,%edx
f0122f89:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122f8f:	01 d0                	add    %edx,%eax
f0122f91:	48                   	dec    %eax
f0122f92:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122f98:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fa3:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122fa9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122faf:	29 d0                	sub    %edx,%eax
f0122fb1:	01 d8                	add    %ebx,%eax
f0122fb3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122fb8:	39 c1                	cmp    %eax,%ecx
f0122fba:	74 17                	je     f0122fd3 <test_kheap_phys_addr+0x45c>
f0122fbc:	83 ec 04             	sub    $0x4,%esp
f0122fbf:	68 d4 92 13 f0       	push   $0xf01392d4
f0122fc4:	68 22 08 00 00       	push   $0x822
f0122fc9:	68 ee 91 13 f0       	push   $0xf01391ee
f0122fce:	e8 dd d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fd3:	e8 8e 16 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0122fd8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122fdb:	74 17                	je     f0122ff4 <test_kheap_phys_addr+0x47d>
f0122fdd:	83 ec 04             	sub    $0x4,%esp
f0122fe0:	68 08 92 13 f0       	push   $0xf0139208
f0122fe5:	68 23 08 00 00       	push   $0x823
f0122fea:	68 ee 91 13 f0       	push   $0xf01391ee
f0122fef:	e8 bc d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ff4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ff7:	e8 c4 99 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0122ffc:	29 c3                	sub    %eax,%ebx
f0122ffe:	89 d8                	mov    %ebx,%eax
f0123000:	83 f8 01             	cmp    $0x1,%eax
f0123003:	74 17                	je     f012301c <test_kheap_phys_addr+0x4a5>
f0123005:	83 ec 04             	sub    $0x4,%esp
f0123008:	68 70 92 13 f0       	push   $0xf0139270
f012300d:	68 24 08 00 00       	push   $0x824
f0123012:	68 ee 91 13 f0       	push   $0xf01391ee
f0123017:	e8 94 d1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012301c:	e8 9f 99 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123021:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123024:	e8 3d 16 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123029:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012302c:	83 ec 0c             	sub    $0xc,%esp
f012302f:	68 00 1c 00 00       	push   $0x1c00
f0123034:	e8 08 4f fe ff       	call   f0107f41 <kmalloc>
f0123039:	83 c4 10             	add    $0x10,%esp
f012303c:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123042:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0123048:	89 c1                	mov    %eax,%ecx
f012304a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123051:	10 00 00 
f0123054:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123059:	0f b6 d0             	movzbl %al,%edx
f012305c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123062:	01 d0                	add    %edx,%eax
f0123064:	48                   	dec    %eax
f0123065:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012306b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123071:	ba 00 00 00 00       	mov    $0x0,%edx
f0123076:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012307c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123082:	29 d0                	sub    %edx,%eax
f0123084:	89 c3                	mov    %eax,%ebx
f0123086:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012308d:	10 00 00 
f0123090:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123095:	0f b6 c0             	movzbl %al,%eax
f0123098:	c1 e0 04             	shl    $0x4,%eax
f012309b:	89 c2                	mov    %eax,%edx
f012309d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01230a3:	01 d0                	add    %edx,%eax
f01230a5:	48                   	dec    %eax
f01230a6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01230ac:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01230b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01230b7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01230bd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01230c3:	29 d0                	sub    %edx,%eax
f01230c5:	01 d8                	add    %ebx,%eax
f01230c7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01230cc:	39 c1                	cmp    %eax,%ecx
f01230ce:	74 17                	je     f01230e7 <test_kheap_phys_addr+0x570>
f01230d0:	83 ec 04             	sub    $0x4,%esp
f01230d3:	68 d4 92 13 f0       	push   $0xf01392d4
f01230d8:	68 2a 08 00 00       	push   $0x82a
f01230dd:	68 ee 91 13 f0       	push   $0xf01391ee
f01230e2:	e8 c9 d0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230e7:	e8 7a 15 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01230ec:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01230ef:	74 17                	je     f0123108 <test_kheap_phys_addr+0x591>
f01230f1:	83 ec 04             	sub    $0x4,%esp
f01230f4:	68 08 92 13 f0       	push   $0xf0139208
f01230f9:	68 2b 08 00 00       	push   $0x82b
f01230fe:	68 ee 91 13 f0       	push   $0xf01391ee
f0123103:	e8 a8 d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123108:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012310b:	e8 b0 98 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123110:	29 c3                	sub    %eax,%ebx
f0123112:	89 d8                	mov    %ebx,%eax
f0123114:	83 f8 02             	cmp    $0x2,%eax
f0123117:	74 17                	je     f0123130 <test_kheap_phys_addr+0x5b9>
f0123119:	83 ec 04             	sub    $0x4,%esp
f012311c:	68 70 92 13 f0       	push   $0xf0139270
f0123121:	68 2c 08 00 00       	push   $0x82c
f0123126:	68 ee 91 13 f0       	push   $0xf01391ee
f012312b:	e8 80 d0 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123130:	e8 8b 98 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123135:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123138:	e8 29 15 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012313d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123140:	83 ec 0c             	sub    $0xc,%esp
f0123143:	68 00 fc 2f 00       	push   $0x2ffc00
f0123148:	e8 f4 4d fe ff       	call   f0107f41 <kmalloc>
f012314d:	83 c4 10             	add    $0x10,%esp
f0123150:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123156:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f012315c:	89 c1                	mov    %eax,%ecx
f012315e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123165:	10 00 00 
f0123168:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012316d:	0f b6 d0             	movzbl %al,%edx
f0123170:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123176:	01 d0                	add    %edx,%eax
f0123178:	48                   	dec    %eax
f0123179:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012317f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123185:	ba 00 00 00 00       	mov    $0x0,%edx
f012318a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123190:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123196:	29 d0                	sub    %edx,%eax
f0123198:	89 c3                	mov    %eax,%ebx
f012319a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01231a1:	10 00 00 
f01231a4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01231a9:	0f b6 c0             	movzbl %al,%eax
f01231ac:	c1 e0 04             	shl    $0x4,%eax
f01231af:	89 c2                	mov    %eax,%edx
f01231b1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01231b7:	01 d0                	add    %edx,%eax
f01231b9:	48                   	dec    %eax
f01231ba:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01231c0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01231c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01231cb:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01231d1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01231d7:	29 d0                	sub    %edx,%eax
f01231d9:	01 d8                	add    %ebx,%eax
f01231db:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01231e0:	39 c1                	cmp    %eax,%ecx
f01231e2:	74 17                	je     f01231fb <test_kheap_phys_addr+0x684>
f01231e4:	83 ec 04             	sub    $0x4,%esp
f01231e7:	68 d4 92 13 f0       	push   $0xf01392d4
f01231ec:	68 32 08 00 00       	push   $0x832
f01231f1:	68 ee 91 13 f0       	push   $0xf01391ee
f01231f6:	e8 b5 cf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231fb:	e8 66 14 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123200:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123203:	74 17                	je     f012321c <test_kheap_phys_addr+0x6a5>
f0123205:	83 ec 04             	sub    $0x4,%esp
f0123208:	68 08 92 13 f0       	push   $0xf0139208
f012320d:	68 33 08 00 00       	push   $0x833
f0123212:	68 ee 91 13 f0       	push   $0xf01391ee
f0123217:	e8 94 cf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012321c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012321f:	e8 9c 97 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123224:	29 c3                	sub    %eax,%ebx
f0123226:	89 d8                	mov    %ebx,%eax
f0123228:	3d 00 03 00 00       	cmp    $0x300,%eax
f012322d:	74 17                	je     f0123246 <test_kheap_phys_addr+0x6cf>
f012322f:	83 ec 04             	sub    $0x4,%esp
f0123232:	68 70 92 13 f0       	push   $0xf0139270
f0123237:	68 34 08 00 00       	push   $0x834
f012323c:	68 ee 91 13 f0       	push   $0xf01391ee
f0123241:	e8 6a cf fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123246:	e8 75 97 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012324b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012324e:	e8 13 14 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123253:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123256:	83 ec 0c             	sub    $0xc,%esp
f0123259:	68 00 fc 5f 00       	push   $0x5ffc00
f012325e:	e8 de 4c fe ff       	call   f0107f41 <kmalloc>
f0123263:	83 c4 10             	add    $0x10,%esp
f0123266:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012326c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123272:	89 c1                	mov    %eax,%ecx
f0123274:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012327b:	10 00 00 
f012327e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123283:	0f b6 d0             	movzbl %al,%edx
f0123286:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012328c:	01 d0                	add    %edx,%eax
f012328e:	48                   	dec    %eax
f012328f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123295:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012329b:	ba 00 00 00 00       	mov    $0x0,%edx
f01232a0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01232a6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01232ac:	29 d0                	sub    %edx,%eax
f01232ae:	89 c3                	mov    %eax,%ebx
f01232b0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01232b7:	10 00 00 
f01232ba:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01232bf:	0f b6 c0             	movzbl %al,%eax
f01232c2:	c1 e0 04             	shl    $0x4,%eax
f01232c5:	89 c2                	mov    %eax,%edx
f01232c7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01232cd:	01 d0                	add    %edx,%eax
f01232cf:	48                   	dec    %eax
f01232d0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01232d6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01232dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01232e1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01232e7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01232ed:	29 d0                	sub    %edx,%eax
f01232ef:	01 d8                	add    %ebx,%eax
f01232f1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01232f6:	39 c1                	cmp    %eax,%ecx
f01232f8:	74 17                	je     f0123311 <test_kheap_phys_addr+0x79a>
f01232fa:	83 ec 04             	sub    $0x4,%esp
f01232fd:	68 d4 92 13 f0       	push   $0xf01392d4
f0123302:	68 3a 08 00 00       	push   $0x83a
f0123307:	68 ee 91 13 f0       	push   $0xf01391ee
f012330c:	e8 9f ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123311:	e8 50 13 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123316:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123319:	74 17                	je     f0123332 <test_kheap_phys_addr+0x7bb>
f012331b:	83 ec 04             	sub    $0x4,%esp
f012331e:	68 08 92 13 f0       	push   $0xf0139208
f0123323:	68 3b 08 00 00       	push   $0x83b
f0123328:	68 ee 91 13 f0       	push   $0xf01391ee
f012332d:	e8 7e ce fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123332:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123335:	e8 86 96 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012333a:	29 c3                	sub    %eax,%ebx
f012333c:	89 d8                	mov    %ebx,%eax
f012333e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123343:	74 17                	je     f012335c <test_kheap_phys_addr+0x7e5>
f0123345:	83 ec 04             	sub    $0x4,%esp
f0123348:	68 70 92 13 f0       	push   $0xf0139270
f012334d:	68 3c 08 00 00       	push   $0x83c
f0123352:	68 ee 91 13 f0       	push   $0xf01391ee
f0123357:	e8 54 ce fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012335c:	e8 5f 96 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123361:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123364:	e8 fd 12 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123369:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012336c:	83 ec 0c             	sub    $0xc,%esp
f012336f:	68 00 38 00 00       	push   $0x3800
f0123374:	e8 c8 4b fe ff       	call   f0107f41 <kmalloc>
f0123379:	83 c4 10             	add    $0x10,%esp
f012337c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123382:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123388:	89 c1                	mov    %eax,%ecx
f012338a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123391:	10 00 00 
f0123394:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123399:	0f b6 d0             	movzbl %al,%edx
f012339c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01233a2:	01 d0                	add    %edx,%eax
f01233a4:	48                   	dec    %eax
f01233a5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01233ab:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01233b6:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01233bc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233c2:	29 d0                	sub    %edx,%eax
f01233c4:	89 c3                	mov    %eax,%ebx
f01233c6:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01233cd:	10 00 00 
f01233d0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01233d5:	0f b6 c0             	movzbl %al,%eax
f01233d8:	c1 e0 04             	shl    $0x4,%eax
f01233db:	89 c2                	mov    %eax,%edx
f01233dd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01233e3:	01 d0                	add    %edx,%eax
f01233e5:	48                   	dec    %eax
f01233e6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01233ec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01233f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01233f7:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01233fd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123403:	29 d0                	sub    %edx,%eax
f0123405:	01 d8                	add    %ebx,%eax
f0123407:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012340c:	39 c1                	cmp    %eax,%ecx
f012340e:	74 17                	je     f0123427 <test_kheap_phys_addr+0x8b0>
f0123410:	83 ec 04             	sub    $0x4,%esp
f0123413:	68 d4 92 13 f0       	push   $0xf01392d4
f0123418:	68 42 08 00 00       	push   $0x842
f012341d:	68 ee 91 13 f0       	push   $0xf01391ee
f0123422:	e8 89 cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123427:	e8 3a 12 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012342c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012342f:	74 17                	je     f0123448 <test_kheap_phys_addr+0x8d1>
f0123431:	83 ec 04             	sub    $0x4,%esp
f0123434:	68 08 92 13 f0       	push   $0xf0139208
f0123439:	68 43 08 00 00       	push   $0x843
f012343e:	68 ee 91 13 f0       	push   $0xf01391ee
f0123443:	e8 68 cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123448:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012344b:	e8 70 95 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123450:	29 c3                	sub    %eax,%ebx
f0123452:	89 d8                	mov    %ebx,%eax
f0123454:	83 f8 04             	cmp    $0x4,%eax
f0123457:	74 17                	je     f0123470 <test_kheap_phys_addr+0x8f9>
f0123459:	83 ec 04             	sub    $0x4,%esp
f012345c:	68 70 92 13 f0       	push   $0xf0139270
f0123461:	68 44 08 00 00       	push   $0x844
f0123466:	68 ee 91 13 f0       	push   $0xf01391ee
f012346b:	e8 40 cd fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123470:	89 e0                	mov    %esp,%eax
f0123472:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123474:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012347b:	10 00 00 
f012347e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123483:	0f b6 d0             	movzbl %al,%edx
f0123486:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012348c:	01 d0                	add    %edx,%eax
f012348e:	48                   	dec    %eax
f012348f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123495:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012349b:	ba 00 00 00 00       	mov    $0x0,%edx
f01234a0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01234a6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234ac:	29 d0                	sub    %edx,%eax
f01234ae:	89 c1                	mov    %eax,%ecx
f01234b0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01234b7:	10 00 00 
f01234ba:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01234bf:	0f b6 c0             	movzbl %al,%eax
f01234c2:	c1 e0 04             	shl    $0x4,%eax
f01234c5:	89 c2                	mov    %eax,%edx
f01234c7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01234cd:	01 d0                	add    %edx,%eax
f01234cf:	48                   	dec    %eax
f01234d0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01234d6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01234dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01234e1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01234e7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01234ed:	29 d0                	sub    %edx,%eax
f01234ef:	01 c8                	add    %ecx,%eax
f01234f1:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01234f6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01234fc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0123503:	10 00 00 
f0123506:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012350b:	0f b6 d0             	movzbl %al,%edx
f012350e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123514:	01 d0                	add    %edx,%eax
f0123516:	48                   	dec    %eax
f0123517:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012351d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123523:	ba 00 00 00 00       	mov    $0x0,%edx
f0123528:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012352e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123534:	29 d0                	sub    %edx,%eax
f0123536:	89 c1                	mov    %eax,%ecx
f0123538:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012353f:	10 00 00 
f0123542:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123547:	0f b6 c0             	movzbl %al,%eax
f012354a:	c1 e0 04             	shl    $0x4,%eax
f012354d:	89 c2                	mov    %eax,%edx
f012354f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123555:	01 d0                	add    %edx,%eax
f0123557:	48                   	dec    %eax
f0123558:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012355e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123564:	ba 00 00 00 00       	mov    $0x0,%edx
f0123569:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012356f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123575:	29 d0                	sub    %edx,%eax
f0123577:	01 c8                	add    %ecx,%eax
f0123579:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012357e:	c1 e8 0c             	shr    $0xc,%eax
f0123581:	89 c2                	mov    %eax,%edx
f0123583:	4a                   	dec    %edx
f0123584:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f012358a:	c1 e0 02             	shl    $0x2,%eax
f012358d:	8d 50 03             	lea    0x3(%eax),%edx
f0123590:	b8 10 00 00 00       	mov    $0x10,%eax
f0123595:	48                   	dec    %eax
f0123596:	01 d0                	add    %edx,%eax
f0123598:	bf 10 00 00 00       	mov    $0x10,%edi
f012359d:	ba 00 00 00 00       	mov    $0x0,%edx
f01235a2:	f7 f7                	div    %edi
f01235a4:	6b c0 10             	imul   $0x10,%eax,%eax
f01235a7:	29 c4                	sub    %eax,%esp
f01235a9:	89 e0                	mov    %esp,%eax
f01235ab:	83 c0 03             	add    $0x3,%eax
f01235ae:	c1 e8 02             	shr    $0x2,%eax
f01235b1:	c1 e0 02             	shl    $0x2,%eax
f01235b4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f01235ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01235c1:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01235c8:	eb 29                	jmp    f01235f3 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f01235ca:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01235cd:	8d 43 01             	lea    0x1(%ebx),%eax
f01235d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01235d3:	83 ec 0c             	sub    $0xc,%esp
f01235d6:	ff 75 e0             	pushl  -0x20(%ebp)
f01235d9:	e8 b1 49 fe ff       	call   f0107f8f <kheap_physical_address>
f01235de:	83 c4 10             	add    $0x10,%esp
f01235e1:	89 c2                	mov    %eax,%edx
f01235e3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01235e9:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01235ec:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01235f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01235f6:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01235fc:	72 cc                	jb     f01235ca <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01235fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123601:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0123607:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012360e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123615:	e9 ab 00 00 00       	jmp    f01236c5 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012361a:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012361f:	83 ec 04             	sub    $0x4,%esp
f0123622:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f0123628:	52                   	push   %edx
f0123629:	ff 75 e0             	pushl  -0x20(%ebp)
f012362c:	50                   	push   %eax
f012362d:	e8 97 3e fe ff       	call   f01074c9 <get_page_table>
f0123632:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123635:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012363b:	85 c0                	test   %eax,%eax
f012363d:	75 17                	jne    f0123656 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012363f:	83 ec 04             	sub    $0x4,%esp
f0123642:	68 90 9b 13 f0       	push   $0xf0139b90
f0123647:	68 59 08 00 00       	push   $0x859
f012364c:	68 ee 91 13 f0       	push   $0xf01391ee
f0123651:	e8 5a cb fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123656:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123659:	c1 e8 0c             	shr    $0xc,%eax
f012365c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123661:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123664:	eb 4b                	jmp    f01236b1 <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123666:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012366c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012366f:	c1 e2 02             	shl    $0x2,%edx
f0123672:	01 d0                	add    %edx,%eax
f0123674:	8b 00                	mov    (%eax),%eax
f0123676:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012367b:	89 c1                	mov    %eax,%ecx
f012367d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123683:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123686:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123689:	39 c1                	cmp    %eax,%ecx
f012368b:	74 17                	je     f01236a4 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012368d:	83 ec 04             	sub    $0x4,%esp
f0123690:	68 e9 9b 13 f0       	push   $0xf0139be9
f0123695:	68 60 08 00 00       	push   $0x860
f012369a:	68 ee 91 13 f0       	push   $0xf01391ee
f012369f:	e8 0c cb fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01236a4:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01236ab:	ff 45 dc             	incl   -0x24(%ebp)
f01236ae:	ff 45 e4             	incl   -0x1c(%ebp)
f01236b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01236b4:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01236ba:	7d 09                	jge    f01236c5 <test_kheap_phys_addr+0xb4e>
f01236bc:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01236c3:	7e a1                	jle    f0123666 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01236c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01236c8:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01236ce:	0f 82 46 ff ff ff    	jb     f012361a <test_kheap_phys_addr+0xaa3>
f01236d4:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01236d6:	83 ec 0c             	sub    $0xc,%esp
f01236d9:	68 08 9c 13 f0       	push   $0xf0139c08
f01236de:	e8 4e d7 fd ff       	call   f0100e31 <cprintf>
f01236e3:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01236e6:	e8 d5 92 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01236eb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01236f1:	e8 70 0f fe ff       	call   f0104666 <pf_calculate_free_frames>
f01236f6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f01236fc:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0123702:	83 ec 0c             	sub    $0xc,%esp
f0123705:	50                   	push   %eax
f0123706:	e8 50 48 fe ff       	call   f0107f5b <kfree>
f012370b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012370e:	e8 53 0f fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123713:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123719:	74 17                	je     f0123732 <test_kheap_phys_addr+0xbbb>
f012371b:	83 ec 04             	sub    $0x4,%esp
f012371e:	68 08 92 13 f0       	push   $0xf0139208
f0123723:	68 6e 08 00 00       	push   $0x86e
f0123728:	68 ee 91 13 f0       	push   $0xf01391ee
f012372d:	e8 7e ca fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123732:	e8 89 92 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123737:	89 c2                	mov    %eax,%edx
f0123739:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012373f:	29 c2                	sub    %eax,%edx
f0123741:	89 d0                	mov    %edx,%eax
f0123743:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123748:	74 17                	je     f0123761 <test_kheap_phys_addr+0xbea>
f012374a:	83 ec 04             	sub    $0x4,%esp
f012374d:	68 78 99 13 f0       	push   $0xf0139978
f0123752:	68 6f 08 00 00       	push   $0x86f
f0123757:	68 ee 91 13 f0       	push   $0xf01391ee
f012375c:	e8 4f ca fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123761:	e8 5a 92 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123766:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012376c:	e8 f5 0e fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123771:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123777:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012377d:	83 ec 0c             	sub    $0xc,%esp
f0123780:	50                   	push   %eax
f0123781:	e8 d5 47 fe ff       	call   f0107f5b <kfree>
f0123786:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123789:	e8 d8 0e fe ff       	call   f0104666 <pf_calculate_free_frames>
f012378e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123794:	74 17                	je     f01237ad <test_kheap_phys_addr+0xc36>
f0123796:	83 ec 04             	sub    $0x4,%esp
f0123799:	68 08 92 13 f0       	push   $0xf0139208
f012379e:	68 75 08 00 00       	push   $0x875
f01237a3:	68 ee 91 13 f0       	push   $0xf01391ee
f01237a8:	e8 03 ca fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01237ad:	e8 0e 92 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01237b2:	89 c2                	mov    %eax,%edx
f01237b4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01237ba:	29 c2                	sub    %eax,%edx
f01237bc:	89 d0                	mov    %edx,%eax
f01237be:	3d 00 02 00 00       	cmp    $0x200,%eax
f01237c3:	74 17                	je     f01237dc <test_kheap_phys_addr+0xc65>
f01237c5:	83 ec 04             	sub    $0x4,%esp
f01237c8:	68 78 99 13 f0       	push   $0xf0139978
f01237cd:	68 76 08 00 00       	push   $0x876
f01237d2:	68 ee 91 13 f0       	push   $0xf01391ee
f01237d7:	e8 d4 c9 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01237dc:	e8 df 91 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01237e1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237e7:	e8 7a 0e fe ff       	call   f0104666 <pf_calculate_free_frames>
f01237ec:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f01237f2:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01237f8:	83 ec 0c             	sub    $0xc,%esp
f01237fb:	50                   	push   %eax
f01237fc:	e8 5a 47 fe ff       	call   f0107f5b <kfree>
f0123801:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123804:	e8 5d 0e fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123809:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012380f:	74 17                	je     f0123828 <test_kheap_phys_addr+0xcb1>
f0123811:	83 ec 04             	sub    $0x4,%esp
f0123814:	68 08 92 13 f0       	push   $0xf0139208
f0123819:	68 7c 08 00 00       	push   $0x87c
f012381e:	68 ee 91 13 f0       	push   $0xf01391ee
f0123823:	e8 88 c9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123828:	e8 93 91 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012382d:	89 c2                	mov    %eax,%edx
f012382f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123835:	29 c2                	sub    %eax,%edx
f0123837:	89 d0                	mov    %edx,%eax
f0123839:	3d 00 06 00 00       	cmp    $0x600,%eax
f012383e:	74 17                	je     f0123857 <test_kheap_phys_addr+0xce0>
f0123840:	83 ec 04             	sub    $0x4,%esp
f0123843:	68 78 99 13 f0       	push   $0xf0139978
f0123848:	68 7d 08 00 00       	push   $0x87d
f012384d:	68 ee 91 13 f0       	push   $0xf01391ee
f0123852:	e8 59 c9 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123857:	89 e0                	mov    %esp,%eax
f0123859:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012385b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123862:	10 00 00 
f0123865:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012386a:	0f b6 d0             	movzbl %al,%edx
f012386d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123873:	01 d0                	add    %edx,%eax
f0123875:	48                   	dec    %eax
f0123876:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012387c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123882:	ba 00 00 00 00       	mov    $0x0,%edx
f0123887:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012388d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123893:	29 d0                	sub    %edx,%eax
f0123895:	89 c1                	mov    %eax,%ecx
f0123897:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012389e:	10 00 00 
f01238a1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01238a6:	0f b6 c0             	movzbl %al,%eax
f01238a9:	c1 e0 04             	shl    $0x4,%eax
f01238ac:	89 c2                	mov    %eax,%edx
f01238ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01238b4:	01 d0                	add    %edx,%eax
f01238b6:	48                   	dec    %eax
f01238b7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01238bd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01238c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01238c8:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01238ce:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01238d4:	29 d0                	sub    %edx,%eax
f01238d6:	01 c8                	add    %ecx,%eax
f01238d8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01238dd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01238e3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01238ea:	10 00 00 
f01238ed:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01238f2:	0f b6 d0             	movzbl %al,%edx
f01238f5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238fb:	01 d0                	add    %edx,%eax
f01238fd:	48                   	dec    %eax
f01238fe:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123904:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012390a:	ba 00 00 00 00       	mov    $0x0,%edx
f012390f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123915:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012391b:	29 d0                	sub    %edx,%eax
f012391d:	89 c1                	mov    %eax,%ecx
f012391f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123926:	10 00 00 
f0123929:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012392e:	0f b6 c0             	movzbl %al,%eax
f0123931:	c1 e0 04             	shl    $0x4,%eax
f0123934:	89 c2                	mov    %eax,%edx
f0123936:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012393c:	01 d0                	add    %edx,%eax
f012393e:	48                   	dec    %eax
f012393f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123945:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012394b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123950:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123956:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012395c:	29 d0                	sub    %edx,%eax
f012395e:	01 c8                	add    %ecx,%eax
f0123960:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123965:	c1 e8 0c             	shr    $0xc,%eax
f0123968:	89 c2                	mov    %eax,%edx
f012396a:	4a                   	dec    %edx
f012396b:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0123971:	c1 e0 02             	shl    $0x2,%eax
f0123974:	8d 50 03             	lea    0x3(%eax),%edx
f0123977:	b8 10 00 00 00       	mov    $0x10,%eax
f012397c:	48                   	dec    %eax
f012397d:	01 d0                	add    %edx,%eax
f012397f:	bf 10 00 00 00       	mov    $0x10,%edi
f0123984:	ba 00 00 00 00       	mov    $0x0,%edx
f0123989:	f7 f7                	div    %edi
f012398b:	6b c0 10             	imul   $0x10,%eax,%eax
f012398e:	29 c4                	sub    %eax,%esp
f0123990:	89 e0                	mov    %esp,%eax
f0123992:	83 c0 03             	add    $0x3,%eax
f0123995:	c1 e8 02             	shr    $0x2,%eax
f0123998:	c1 e0 02             	shl    $0x2,%eax
f012399b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f01239a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01239a8:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01239af:	eb 29                	jmp    f01239da <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f01239b1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01239b4:	8d 43 01             	lea    0x1(%ebx),%eax
f01239b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01239ba:	83 ec 0c             	sub    $0xc,%esp
f01239bd:	ff 75 d8             	pushl  -0x28(%ebp)
f01239c0:	e8 ca 45 fe ff       	call   f0107f8f <kheap_physical_address>
f01239c5:	83 c4 10             	add    $0x10,%esp
f01239c8:	89 c2                	mov    %eax,%edx
f01239ca:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01239d0:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01239d3:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01239da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01239dd:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01239e3:	72 cc                	jb     f01239b1 <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01239e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01239e8:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f01239ee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01239f5:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01239fc:	e9 ab 00 00 00       	jmp    f0123aac <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123a01:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0123a06:	83 ec 04             	sub    $0x4,%esp
f0123a09:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0123a0f:	52                   	push   %edx
f0123a10:	ff 75 d8             	pushl  -0x28(%ebp)
f0123a13:	50                   	push   %eax
f0123a14:	e8 b0 3a fe ff       	call   f01074c9 <get_page_table>
f0123a19:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123a1c:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123a22:	85 c0                	test   %eax,%eax
f0123a24:	75 17                	jne    f0123a3d <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123a26:	83 ec 04             	sub    $0x4,%esp
f0123a29:	68 90 9b 13 f0       	push   $0xf0139b90
f0123a2e:	68 93 08 00 00       	push   $0x893
f0123a33:	68 ee 91 13 f0       	push   $0xf01391ee
f0123a38:	e8 73 c7 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123a3d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123a40:	c1 e8 0c             	shr    $0xc,%eax
f0123a43:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123a48:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123a4b:	eb 4b                	jmp    f0123a98 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123a4d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123a53:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123a56:	c1 e2 02             	shl    $0x2,%edx
f0123a59:	01 d0                	add    %edx,%eax
f0123a5b:	8b 00                	mov    (%eax),%eax
f0123a5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123a62:	89 c1                	mov    %eax,%ecx
f0123a64:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123a6d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123a70:	39 c1                	cmp    %eax,%ecx
f0123a72:	74 17                	je     f0123a8b <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123a74:	83 ec 04             	sub    $0x4,%esp
f0123a77:	68 e9 9b 13 f0       	push   $0xf0139be9
f0123a7c:	68 9a 08 00 00       	push   $0x89a
f0123a81:	68 ee 91 13 f0       	push   $0xf01391ee
f0123a86:	e8 25 c7 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123a8b:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123a92:	ff 45 d4             	incl   -0x2c(%ebp)
f0123a95:	ff 45 e4             	incl   -0x1c(%ebp)
f0123a98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123a9b:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0123aa1:	7d 09                	jge    f0123aac <test_kheap_phys_addr+0xf35>
f0123aa3:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123aaa:	7e a1                	jle    f0123a4d <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123aac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123aaf:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123ab5:	0f 82 46 ff ff ff    	jb     f0123a01 <test_kheap_phys_addr+0xe8a>
f0123abb:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123abd:	83 ec 0c             	sub    $0xc,%esp
f0123ac0:	68 79 93 13 f0       	push   $0xf0139379
f0123ac5:	e8 67 d3 fd ff       	call   f0100e31 <cprintf>
f0123aca:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123acd:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123ad4:	10 00 00 
f0123ad7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123adc:	0f b6 d0             	movzbl %al,%edx
f0123adf:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123ae5:	01 d0                	add    %edx,%eax
f0123ae7:	48                   	dec    %eax
f0123ae8:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123aee:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123af4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123af9:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123aff:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123b05:	29 d0                	sub    %edx,%eax
f0123b07:	89 c1                	mov    %eax,%ecx
f0123b09:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123b10:	10 00 00 
f0123b13:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123b18:	0f b6 c0             	movzbl %al,%eax
f0123b1b:	c1 e0 04             	shl    $0x4,%eax
f0123b1e:	89 c2                	mov    %eax,%edx
f0123b20:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123b26:	01 d0                	add    %edx,%eax
f0123b28:	48                   	dec    %eax
f0123b29:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123b2f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b35:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b3a:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123b40:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b46:	29 d0                	sub    %edx,%eax
f0123b48:	01 c8                	add    %ecx,%eax
f0123b4a:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123b4f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123b55:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123b5c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b62:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123b65:	eb 0a                	jmp    f0123b71 <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123b67:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123b6a:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123b71:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123b78:	76 ed                	jbe    f0123b67 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123b7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b7d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123b83:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123b8a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b90:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123b93:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123b9a:	e9 cc 00 00 00       	jmp    f0123c6b <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123b9f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123ba2:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0123ba7:	83 ec 04             	sub    $0x4,%esp
f0123baa:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123bb0:	51                   	push   %ecx
f0123bb1:	52                   	push   %edx
f0123bb2:	50                   	push   %eax
f0123bb3:	e8 11 39 fe ff       	call   f01074c9 <get_page_table>
f0123bb8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123bbb:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123bc1:	85 c0                	test   %eax,%eax
f0123bc3:	75 17                	jne    f0123bdc <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123bc5:	83 ec 04             	sub    $0x4,%esp
f0123bc8:	68 90 9b 13 f0       	push   $0xf0139b90
f0123bcd:	68 b6 08 00 00       	push   $0x8b6
f0123bd2:	68 ee 91 13 f0       	push   $0xf01391ee
f0123bd7:	e8 d4 c5 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123bdc:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123be3:	eb 67                	jmp    f0123c4c <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123be5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123be8:	c1 e0 0c             	shl    $0xc,%eax
f0123beb:	89 c2                	mov    %eax,%edx
f0123bed:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123bf3:	01 d0                	add    %edx,%eax
f0123bf5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123bfb:	83 ec 0c             	sub    $0xc,%esp
f0123bfe:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123c04:	e8 86 43 fe ff       	call   f0107f8f <kheap_physical_address>
f0123c09:	83 c4 10             	add    $0x10,%esp
f0123c0c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123c12:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123c18:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123c1b:	c1 e2 02             	shl    $0x2,%edx
f0123c1e:	01 d0                	add    %edx,%eax
f0123c20:	8b 00                	mov    (%eax),%eax
f0123c22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123c27:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123c2d:	74 17                	je     f0123c46 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123c2f:	83 ec 04             	sub    $0x4,%esp
f0123c32:	68 e9 9b 13 f0       	push   $0xf0139be9
f0123c37:	68 c0 08 00 00       	push   $0x8c0
f0123c3c:	68 ee 91 13 f0       	push   $0xf01391ee
f0123c41:	e8 6a c5 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123c46:	ff 45 cc             	incl   -0x34(%ebp)
f0123c49:	ff 45 e4             	incl   -0x1c(%ebp)
f0123c4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c4f:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0123c55:	7d 09                	jge    f0123c60 <test_kheap_phys_addr+0x10e9>
f0123c57:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123c5e:	7e 85                	jle    f0123be5 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123c60:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123c67:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123c6b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123c6f:	0f 88 2a ff ff ff    	js     f0123b9f <test_kheap_phys_addr+0x1028>
f0123c75:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123c79:	7f 0d                	jg     f0123c88 <test_kheap_phys_addr+0x1111>
f0123c7b:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123c82:	0f 86 17 ff ff ff    	jbe    f0123b9f <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123c88:	83 ec 0c             	sub    $0xc,%esp
f0123c8b:	68 d2 93 13 f0       	push   $0xf01393d2
f0123c90:	e8 9c d1 fd ff       	call   f0100e31 <cprintf>
f0123c95:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123c98:	83 ec 0c             	sub    $0xc,%esp
f0123c9b:	68 3c 9c 13 f0       	push   $0xf0139c3c
f0123ca0:	e8 8c d1 fd ff       	call   f0100e31 <cprintf>
f0123ca5:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123ca8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123cad:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123cb0:	5b                   	pop    %ebx
f0123cb1:	5e                   	pop    %esi
f0123cb2:	5f                   	pop    %edi
f0123cb3:	5d                   	pop    %ebp
f0123cb4:	c3                   	ret    

f0123cb5 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123cb5:	55                   	push   %ebp
f0123cb6:	89 e5                	mov    %esp,%ebp
f0123cb8:	57                   	push   %edi
f0123cb9:	56                   	push   %esi
f0123cba:	53                   	push   %ebx
f0123cbb:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123cc1:	89 e0                	mov    %esp,%eax
f0123cc3:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123cc5:	83 ec 0c             	sub    $0xc,%esp
f0123cc8:	68 30 91 13 f0       	push   $0xf0139130
f0123ccd:	e8 5f d1 fd ff       	call   f0100e31 <cprintf>
f0123cd2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123cd5:	83 ec 0c             	sub    $0xc,%esp
f0123cd8:	68 60 91 13 f0       	push   $0xf0139160
f0123cdd:	e8 4f d1 fd ff       	call   f0100e31 <cprintf>
f0123ce2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123ce5:	83 ec 0c             	sub    $0xc,%esp
f0123ce8:	68 30 91 13 f0       	push   $0xf0139130
f0123ced:	e8 3f d1 fd ff       	call   f0100e31 <cprintf>
f0123cf2:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123cf5:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123cf9:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123cfd:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123d03:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123d09:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123d10:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123d17:	e8 a4 8c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123d1c:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123d1f:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123d25:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d2f:	89 d7                	mov    %edx,%edi
f0123d31:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123d33:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0123d39:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d3e:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d43:	89 d7                	mov    %edx,%edi
f0123d45:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123d47:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0123d4d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d52:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d57:	89 d7                	mov    %edx,%edi
f0123d59:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d5b:	e8 60 8c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123d60:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d63:	e8 fe 08 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123d68:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123d6b:	83 ec 0c             	sub    $0xc,%esp
f0123d6e:	68 00 fc 1f 00       	push   $0x1ffc00
f0123d73:	e8 c9 41 fe ff       	call   f0107f41 <kmalloc>
f0123d78:	83 c4 10             	add    $0x10,%esp
f0123d7b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d81:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123d87:	89 c1                	mov    %eax,%ecx
f0123d89:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123d90:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123d95:	0f b6 d0             	movzbl %al,%edx
f0123d98:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123d9b:	01 d0                	add    %edx,%eax
f0123d9d:	48                   	dec    %eax
f0123d9e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123da1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123da4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123da9:	f7 75 b4             	divl   -0x4c(%ebp)
f0123dac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123daf:	29 d0                	sub    %edx,%eax
f0123db1:	89 c3                	mov    %eax,%ebx
f0123db3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123dba:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123dbf:	0f b6 c0             	movzbl %al,%eax
f0123dc2:	c1 e0 04             	shl    $0x4,%eax
f0123dc5:	89 c2                	mov    %eax,%edx
f0123dc7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123dca:	01 d0                	add    %edx,%eax
f0123dcc:	48                   	dec    %eax
f0123dcd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123dd0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123dd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dd8:	f7 75 ac             	divl   -0x54(%ebp)
f0123ddb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123dde:	29 d0                	sub    %edx,%eax
f0123de0:	01 d8                	add    %ebx,%eax
f0123de2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123de7:	39 c1                	cmp    %eax,%ecx
f0123de9:	74 17                	je     f0123e02 <test_kheap_virt_addr+0x14d>
f0123deb:	83 ec 04             	sub    $0x4,%esp
f0123dee:	68 d4 92 13 f0       	push   $0xf01392d4
f0123df3:	68 ed 08 00 00       	push   $0x8ed
f0123df8:	68 ee 91 13 f0       	push   $0xf01391ee
f0123dfd:	e8 ae c3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e02:	e8 5f 08 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123e07:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123e0a:	74 17                	je     f0123e23 <test_kheap_virt_addr+0x16e>
f0123e0c:	83 ec 04             	sub    $0x4,%esp
f0123e0f:	68 08 92 13 f0       	push   $0xf0139208
f0123e14:	68 ee 08 00 00       	push   $0x8ee
f0123e19:	68 ee 91 13 f0       	push   $0xf01391ee
f0123e1e:	e8 8d c3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e23:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123e26:	e8 95 8b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123e2b:	29 c3                	sub    %eax,%ebx
f0123e2d:	89 d8                	mov    %ebx,%eax
f0123e2f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123e34:	74 17                	je     f0123e4d <test_kheap_virt_addr+0x198>
f0123e36:	83 ec 04             	sub    $0x4,%esp
f0123e39:	68 70 92 13 f0       	push   $0xf0139270
f0123e3e:	68 ef 08 00 00       	push   $0x8ef
f0123e43:	68 ee 91 13 f0       	push   $0xf01391ee
f0123e48:	e8 63 c3 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e4d:	e8 6e 8b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123e52:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e55:	e8 0c 08 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123e5a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123e5d:	83 ec 0c             	sub    $0xc,%esp
f0123e60:	68 00 fc 1f 00       	push   $0x1ffc00
f0123e65:	e8 d7 40 fe ff       	call   f0107f41 <kmalloc>
f0123e6a:	83 c4 10             	add    $0x10,%esp
f0123e6d:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e73:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123e79:	89 c1                	mov    %eax,%ecx
f0123e7b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123e82:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123e87:	0f b6 d0             	movzbl %al,%edx
f0123e8a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123e8d:	01 d0                	add    %edx,%eax
f0123e8f:	48                   	dec    %eax
f0123e90:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123e93:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123e96:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e9b:	f7 75 a4             	divl   -0x5c(%ebp)
f0123e9e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123ea1:	29 d0                	sub    %edx,%eax
f0123ea3:	89 c3                	mov    %eax,%ebx
f0123ea5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0123eac:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123eb1:	0f b6 c0             	movzbl %al,%eax
f0123eb4:	c1 e0 04             	shl    $0x4,%eax
f0123eb7:	89 c2                	mov    %eax,%edx
f0123eb9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123ebc:	01 d0                	add    %edx,%eax
f0123ebe:	48                   	dec    %eax
f0123ebf:	89 45 98             	mov    %eax,-0x68(%ebp)
f0123ec2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123eca:	f7 75 9c             	divl   -0x64(%ebp)
f0123ecd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123ed0:	29 d0                	sub    %edx,%eax
f0123ed2:	01 d8                	add    %ebx,%eax
f0123ed4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123ed9:	39 c1                	cmp    %eax,%ecx
f0123edb:	74 17                	je     f0123ef4 <test_kheap_virt_addr+0x23f>
f0123edd:	83 ec 04             	sub    $0x4,%esp
f0123ee0:	68 d4 92 13 f0       	push   $0xf01392d4
f0123ee5:	68 f5 08 00 00       	push   $0x8f5
f0123eea:	68 ee 91 13 f0       	push   $0xf01391ee
f0123eef:	e8 bc c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ef4:	e8 6d 07 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123ef9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123efc:	74 17                	je     f0123f15 <test_kheap_virt_addr+0x260>
f0123efe:	83 ec 04             	sub    $0x4,%esp
f0123f01:	68 08 92 13 f0       	push   $0xf0139208
f0123f06:	68 f6 08 00 00       	push   $0x8f6
f0123f0b:	68 ee 91 13 f0       	push   $0xf01391ee
f0123f10:	e8 9b c2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f15:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123f18:	e8 a3 8a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123f1d:	29 c3                	sub    %eax,%ebx
f0123f1f:	89 d8                	mov    %ebx,%eax
f0123f21:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123f26:	74 17                	je     f0123f3f <test_kheap_virt_addr+0x28a>
f0123f28:	83 ec 04             	sub    $0x4,%esp
f0123f2b:	68 70 92 13 f0       	push   $0xf0139270
f0123f30:	68 f7 08 00 00       	push   $0x8f7
f0123f35:	68 ee 91 13 f0       	push   $0xf01391ee
f0123f3a:	e8 71 c2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f3f:	e8 7c 8a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0123f44:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f47:	e8 1a 07 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123f4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123f4f:	83 ec 0c             	sub    $0xc,%esp
f0123f52:	68 00 08 00 00       	push   $0x800
f0123f57:	e8 e5 3f fe ff       	call   f0107f41 <kmalloc>
f0123f5c:	83 c4 10             	add    $0x10,%esp
f0123f5f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f65:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123f6b:	89 c1                	mov    %eax,%ecx
f0123f6d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0123f74:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123f79:	0f b6 d0             	movzbl %al,%edx
f0123f7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123f7f:	01 d0                	add    %edx,%eax
f0123f81:	48                   	dec    %eax
f0123f82:	89 45 90             	mov    %eax,-0x70(%ebp)
f0123f85:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123f88:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f8d:	f7 75 94             	divl   -0x6c(%ebp)
f0123f90:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123f93:	29 d0                	sub    %edx,%eax
f0123f95:	89 c3                	mov    %eax,%ebx
f0123f97:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0123f9e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123fa3:	0f b6 c0             	movzbl %al,%eax
f0123fa6:	c1 e0 04             	shl    $0x4,%eax
f0123fa9:	89 c2                	mov    %eax,%edx
f0123fab:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123fae:	01 d0                	add    %edx,%eax
f0123fb0:	48                   	dec    %eax
f0123fb1:	89 45 88             	mov    %eax,-0x78(%ebp)
f0123fb4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123fb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fbc:	f7 75 8c             	divl   -0x74(%ebp)
f0123fbf:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123fc2:	29 d0                	sub    %edx,%eax
f0123fc4:	01 d8                	add    %ebx,%eax
f0123fc6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123fcb:	39 c1                	cmp    %eax,%ecx
f0123fcd:	74 17                	je     f0123fe6 <test_kheap_virt_addr+0x331>
f0123fcf:	83 ec 04             	sub    $0x4,%esp
f0123fd2:	68 d4 92 13 f0       	push   $0xf01392d4
f0123fd7:	68 fd 08 00 00       	push   $0x8fd
f0123fdc:	68 ee 91 13 f0       	push   $0xf01391ee
f0123fe1:	e8 ca c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fe6:	e8 7b 06 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0123feb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123fee:	74 17                	je     f0124007 <test_kheap_virt_addr+0x352>
f0123ff0:	83 ec 04             	sub    $0x4,%esp
f0123ff3:	68 08 92 13 f0       	push   $0xf0139208
f0123ff8:	68 fe 08 00 00       	push   $0x8fe
f0123ffd:	68 ee 91 13 f0       	push   $0xf01391ee
f0124002:	e8 a9 c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124007:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012400a:	e8 b1 89 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012400f:	29 c3                	sub    %eax,%ebx
f0124011:	89 d8                	mov    %ebx,%eax
f0124013:	83 f8 01             	cmp    $0x1,%eax
f0124016:	74 17                	je     f012402f <test_kheap_virt_addr+0x37a>
f0124018:	83 ec 04             	sub    $0x4,%esp
f012401b:	68 70 92 13 f0       	push   $0xf0139270
f0124020:	68 ff 08 00 00       	push   $0x8ff
f0124025:	68 ee 91 13 f0       	push   $0xf01391ee
f012402a:	e8 81 c1 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012402f:	e8 8c 89 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124034:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124037:	e8 2a 06 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012403c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012403f:	83 ec 0c             	sub    $0xc,%esp
f0124042:	68 00 08 00 00       	push   $0x800
f0124047:	e8 f5 3e fe ff       	call   f0107f41 <kmalloc>
f012404c:	83 c4 10             	add    $0x10,%esp
f012404f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124055:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012405b:	89 c1                	mov    %eax,%ecx
f012405d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124064:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124069:	0f b6 d0             	movzbl %al,%edx
f012406c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012406f:	01 d0                	add    %edx,%eax
f0124071:	48                   	dec    %eax
f0124072:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124075:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124078:	ba 00 00 00 00       	mov    $0x0,%edx
f012407d:	f7 75 84             	divl   -0x7c(%ebp)
f0124080:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124083:	29 d0                	sub    %edx,%eax
f0124085:	89 c3                	mov    %eax,%ebx
f0124087:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012408e:	10 00 00 
f0124091:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124096:	0f b6 c0             	movzbl %al,%eax
f0124099:	c1 e0 04             	shl    $0x4,%eax
f012409c:	89 c2                	mov    %eax,%edx
f012409e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01240a4:	01 d0                	add    %edx,%eax
f01240a6:	48                   	dec    %eax
f01240a7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01240ad:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01240b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01240b8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01240be:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01240c4:	29 d0                	sub    %edx,%eax
f01240c6:	01 d8                	add    %ebx,%eax
f01240c8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01240cd:	39 c1                	cmp    %eax,%ecx
f01240cf:	74 17                	je     f01240e8 <test_kheap_virt_addr+0x433>
f01240d1:	83 ec 04             	sub    $0x4,%esp
f01240d4:	68 d4 92 13 f0       	push   $0xf01392d4
f01240d9:	68 05 09 00 00       	push   $0x905
f01240de:	68 ee 91 13 f0       	push   $0xf01391ee
f01240e3:	e8 c8 c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240e8:	e8 79 05 fe ff       	call   f0104666 <pf_calculate_free_frames>
f01240ed:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01240f0:	74 17                	je     f0124109 <test_kheap_virt_addr+0x454>
f01240f2:	83 ec 04             	sub    $0x4,%esp
f01240f5:	68 08 92 13 f0       	push   $0xf0139208
f01240fa:	68 06 09 00 00       	push   $0x906
f01240ff:	68 ee 91 13 f0       	push   $0xf01391ee
f0124104:	e8 a7 c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124109:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012410c:	e8 af 88 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124111:	29 c3                	sub    %eax,%ebx
f0124113:	89 d8                	mov    %ebx,%eax
f0124115:	83 f8 01             	cmp    $0x1,%eax
f0124118:	74 17                	je     f0124131 <test_kheap_virt_addr+0x47c>
f012411a:	83 ec 04             	sub    $0x4,%esp
f012411d:	68 70 92 13 f0       	push   $0xf0139270
f0124122:	68 07 09 00 00       	push   $0x907
f0124127:	68 ee 91 13 f0       	push   $0xf01391ee
f012412c:	e8 7f c0 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124131:	e8 8a 88 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124136:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124139:	e8 28 05 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012413e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124141:	83 ec 0c             	sub    $0xc,%esp
f0124144:	68 00 1c 00 00       	push   $0x1c00
f0124149:	e8 f3 3d fe ff       	call   f0107f41 <kmalloc>
f012414e:	83 c4 10             	add    $0x10,%esp
f0124151:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124157:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012415d:	89 c1                	mov    %eax,%ecx
f012415f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124166:	10 00 00 
f0124169:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012416e:	0f b6 d0             	movzbl %al,%edx
f0124171:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124177:	01 d0                	add    %edx,%eax
f0124179:	48                   	dec    %eax
f012417a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124180:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124186:	ba 00 00 00 00       	mov    $0x0,%edx
f012418b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124191:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124197:	29 d0                	sub    %edx,%eax
f0124199:	89 c3                	mov    %eax,%ebx
f012419b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01241a2:	10 00 00 
f01241a5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01241aa:	0f b6 c0             	movzbl %al,%eax
f01241ad:	c1 e0 04             	shl    $0x4,%eax
f01241b0:	89 c2                	mov    %eax,%edx
f01241b2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01241b8:	01 d0                	add    %edx,%eax
f01241ba:	48                   	dec    %eax
f01241bb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01241c1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01241c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01241cc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01241d2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01241d8:	29 d0                	sub    %edx,%eax
f01241da:	01 d8                	add    %ebx,%eax
f01241dc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01241e1:	39 c1                	cmp    %eax,%ecx
f01241e3:	74 17                	je     f01241fc <test_kheap_virt_addr+0x547>
f01241e5:	83 ec 04             	sub    $0x4,%esp
f01241e8:	68 d4 92 13 f0       	push   $0xf01392d4
f01241ed:	68 0d 09 00 00       	push   $0x90d
f01241f2:	68 ee 91 13 f0       	push   $0xf01391ee
f01241f7:	e8 b4 bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241fc:	e8 65 04 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0124201:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124204:	74 17                	je     f012421d <test_kheap_virt_addr+0x568>
f0124206:	83 ec 04             	sub    $0x4,%esp
f0124209:	68 08 92 13 f0       	push   $0xf0139208
f012420e:	68 0e 09 00 00       	push   $0x90e
f0124213:	68 ee 91 13 f0       	push   $0xf01391ee
f0124218:	e8 93 bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012421d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124220:	e8 9b 87 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124225:	29 c3                	sub    %eax,%ebx
f0124227:	89 d8                	mov    %ebx,%eax
f0124229:	83 f8 02             	cmp    $0x2,%eax
f012422c:	74 17                	je     f0124245 <test_kheap_virt_addr+0x590>
f012422e:	83 ec 04             	sub    $0x4,%esp
f0124231:	68 70 92 13 f0       	push   $0xf0139270
f0124236:	68 0f 09 00 00       	push   $0x90f
f012423b:	68 ee 91 13 f0       	push   $0xf01391ee
f0124240:	e8 6b bf fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124245:	e8 76 87 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012424a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012424d:	e8 14 04 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0124252:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124255:	83 ec 0c             	sub    $0xc,%esp
f0124258:	68 00 fc 2f 00       	push   $0x2ffc00
f012425d:	e8 df 3c fe ff       	call   f0107f41 <kmalloc>
f0124262:	83 c4 10             	add    $0x10,%esp
f0124265:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012426b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0124271:	89 c1                	mov    %eax,%ecx
f0124273:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012427a:	10 00 00 
f012427d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124282:	0f b6 d0             	movzbl %al,%edx
f0124285:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012428b:	01 d0                	add    %edx,%eax
f012428d:	48                   	dec    %eax
f012428e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124294:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012429a:	ba 00 00 00 00       	mov    $0x0,%edx
f012429f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01242a5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01242ab:	29 d0                	sub    %edx,%eax
f01242ad:	89 c3                	mov    %eax,%ebx
f01242af:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01242b6:	10 00 00 
f01242b9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01242be:	0f b6 c0             	movzbl %al,%eax
f01242c1:	c1 e0 04             	shl    $0x4,%eax
f01242c4:	89 c2                	mov    %eax,%edx
f01242c6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01242cc:	01 d0                	add    %edx,%eax
f01242ce:	48                   	dec    %eax
f01242cf:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01242d5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01242db:	ba 00 00 00 00       	mov    $0x0,%edx
f01242e0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01242e6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01242ec:	29 d0                	sub    %edx,%eax
f01242ee:	01 d8                	add    %ebx,%eax
f01242f0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01242f5:	39 c1                	cmp    %eax,%ecx
f01242f7:	74 17                	je     f0124310 <test_kheap_virt_addr+0x65b>
f01242f9:	83 ec 04             	sub    $0x4,%esp
f01242fc:	68 d4 92 13 f0       	push   $0xf01392d4
f0124301:	68 15 09 00 00       	push   $0x915
f0124306:	68 ee 91 13 f0       	push   $0xf01391ee
f012430b:	e8 a0 be fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124310:	e8 51 03 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0124315:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124318:	74 17                	je     f0124331 <test_kheap_virt_addr+0x67c>
f012431a:	83 ec 04             	sub    $0x4,%esp
f012431d:	68 08 92 13 f0       	push   $0xf0139208
f0124322:	68 16 09 00 00       	push   $0x916
f0124327:	68 ee 91 13 f0       	push   $0xf01391ee
f012432c:	e8 7f be fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124331:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124334:	e8 87 86 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124339:	29 c3                	sub    %eax,%ebx
f012433b:	89 d8                	mov    %ebx,%eax
f012433d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124342:	74 17                	je     f012435b <test_kheap_virt_addr+0x6a6>
f0124344:	83 ec 04             	sub    $0x4,%esp
f0124347:	68 70 92 13 f0       	push   $0xf0139270
f012434c:	68 17 09 00 00       	push   $0x917
f0124351:	68 ee 91 13 f0       	push   $0xf01391ee
f0124356:	e8 55 be fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012435b:	e8 60 86 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124360:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124363:	e8 fe 02 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0124368:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012436b:	83 ec 0c             	sub    $0xc,%esp
f012436e:	68 00 fc 5f 00       	push   $0x5ffc00
f0124373:	e8 c9 3b fe ff       	call   f0107f41 <kmalloc>
f0124378:	83 c4 10             	add    $0x10,%esp
f012437b:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124381:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124387:	89 c1                	mov    %eax,%ecx
f0124389:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124390:	10 00 00 
f0124393:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124398:	0f b6 d0             	movzbl %al,%edx
f012439b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01243a1:	01 d0                	add    %edx,%eax
f01243a3:	48                   	dec    %eax
f01243a4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01243aa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01243b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01243b5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01243bb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01243c1:	29 d0                	sub    %edx,%eax
f01243c3:	89 c3                	mov    %eax,%ebx
f01243c5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01243cc:	10 00 00 
f01243cf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01243d4:	0f b6 c0             	movzbl %al,%eax
f01243d7:	c1 e0 04             	shl    $0x4,%eax
f01243da:	89 c2                	mov    %eax,%edx
f01243dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01243e2:	01 d0                	add    %edx,%eax
f01243e4:	48                   	dec    %eax
f01243e5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01243eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01243f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01243f6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01243fc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124402:	29 d0                	sub    %edx,%eax
f0124404:	01 d8                	add    %ebx,%eax
f0124406:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012440b:	39 c1                	cmp    %eax,%ecx
f012440d:	74 17                	je     f0124426 <test_kheap_virt_addr+0x771>
f012440f:	83 ec 04             	sub    $0x4,%esp
f0124412:	68 d4 92 13 f0       	push   $0xf01392d4
f0124417:	68 1d 09 00 00       	push   $0x91d
f012441c:	68 ee 91 13 f0       	push   $0xf01391ee
f0124421:	e8 8a bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124426:	e8 3b 02 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012442b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012442e:	74 17                	je     f0124447 <test_kheap_virt_addr+0x792>
f0124430:	83 ec 04             	sub    $0x4,%esp
f0124433:	68 08 92 13 f0       	push   $0xf0139208
f0124438:	68 1e 09 00 00       	push   $0x91e
f012443d:	68 ee 91 13 f0       	push   $0xf01391ee
f0124442:	e8 69 bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124447:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012444a:	e8 71 85 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012444f:	29 c3                	sub    %eax,%ebx
f0124451:	89 d8                	mov    %ebx,%eax
f0124453:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124458:	74 17                	je     f0124471 <test_kheap_virt_addr+0x7bc>
f012445a:	83 ec 04             	sub    $0x4,%esp
f012445d:	68 70 92 13 f0       	push   $0xf0139270
f0124462:	68 1f 09 00 00       	push   $0x91f
f0124467:	68 ee 91 13 f0       	push   $0xf01391ee
f012446c:	e8 3f bd fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124471:	e8 4a 85 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124476:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124479:	e8 e8 01 fe ff       	call   f0104666 <pf_calculate_free_frames>
f012447e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124481:	83 ec 0c             	sub    $0xc,%esp
f0124484:	68 00 38 00 00       	push   $0x3800
f0124489:	e8 b3 3a fe ff       	call   f0107f41 <kmalloc>
f012448e:	83 c4 10             	add    $0x10,%esp
f0124491:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124497:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012449d:	89 c1                	mov    %eax,%ecx
f012449f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01244a6:	10 00 00 
f01244a9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01244ae:	0f b6 d0             	movzbl %al,%edx
f01244b1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01244b7:	01 d0                	add    %edx,%eax
f01244b9:	48                   	dec    %eax
f01244ba:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01244c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01244cb:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01244d1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244d7:	29 d0                	sub    %edx,%eax
f01244d9:	89 c3                	mov    %eax,%ebx
f01244db:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01244e2:	10 00 00 
f01244e5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01244ea:	0f b6 c0             	movzbl %al,%eax
f01244ed:	c1 e0 04             	shl    $0x4,%eax
f01244f0:	89 c2                	mov    %eax,%edx
f01244f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01244f8:	01 d0                	add    %edx,%eax
f01244fa:	48                   	dec    %eax
f01244fb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124501:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124507:	ba 00 00 00 00       	mov    $0x0,%edx
f012450c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124512:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124518:	29 d0                	sub    %edx,%eax
f012451a:	01 d8                	add    %ebx,%eax
f012451c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124521:	39 c1                	cmp    %eax,%ecx
f0124523:	74 17                	je     f012453c <test_kheap_virt_addr+0x887>
f0124525:	83 ec 04             	sub    $0x4,%esp
f0124528:	68 d4 92 13 f0       	push   $0xf01392d4
f012452d:	68 25 09 00 00       	push   $0x925
f0124532:	68 ee 91 13 f0       	push   $0xf01391ee
f0124537:	e8 74 bc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012453c:	e8 25 01 fe ff       	call   f0104666 <pf_calculate_free_frames>
f0124541:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124544:	74 17                	je     f012455d <test_kheap_virt_addr+0x8a8>
f0124546:	83 ec 04             	sub    $0x4,%esp
f0124549:	68 08 92 13 f0       	push   $0xf0139208
f012454e:	68 26 09 00 00       	push   $0x926
f0124553:	68 ee 91 13 f0       	push   $0xf01391ee
f0124558:	e8 53 bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012455d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124560:	e8 5b 84 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124565:	29 c3                	sub    %eax,%ebx
f0124567:	89 d8                	mov    %ebx,%eax
f0124569:	83 f8 04             	cmp    $0x4,%eax
f012456c:	74 17                	je     f0124585 <test_kheap_virt_addr+0x8d0>
f012456e:	83 ec 04             	sub    $0x4,%esp
f0124571:	68 70 92 13 f0       	push   $0xf0139270
f0124576:	68 27 09 00 00       	push   $0x927
f012457b:	68 ee 91 13 f0       	push   $0xf01391ee
f0124580:	e8 2b bc fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124585:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012458c:	10 00 00 
f012458f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124594:	0f b6 d0             	movzbl %al,%edx
f0124597:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012459d:	01 d0                	add    %edx,%eax
f012459f:	48                   	dec    %eax
f01245a0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01245a6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01245b1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01245b7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245bd:	29 d0                	sub    %edx,%eax
f01245bf:	89 c1                	mov    %eax,%ecx
f01245c1:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01245c8:	10 00 00 
f01245cb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01245d0:	0f b6 c0             	movzbl %al,%eax
f01245d3:	c1 e0 04             	shl    $0x4,%eax
f01245d6:	89 c2                	mov    %eax,%edx
f01245d8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01245de:	01 d0                	add    %edx,%eax
f01245e0:	48                   	dec    %eax
f01245e1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01245e7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01245ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01245f2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01245f8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01245fe:	29 d0                	sub    %edx,%eax
f0124600:	01 c8                	add    %ecx,%eax
f0124602:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124607:	c1 e8 0c             	shr    $0xc,%eax
f012460a:	89 c2                	mov    %eax,%edx
f012460c:	4a                   	dec    %edx
f012460d:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0124613:	c1 e0 02             	shl    $0x2,%eax
f0124616:	8d 50 03             	lea    0x3(%eax),%edx
f0124619:	b8 10 00 00 00       	mov    $0x10,%eax
f012461e:	48                   	dec    %eax
f012461f:	01 d0                	add    %edx,%eax
f0124621:	bf 10 00 00 00       	mov    $0x10,%edi
f0124626:	ba 00 00 00 00       	mov    $0x0,%edx
f012462b:	f7 f7                	div    %edi
f012462d:	6b c0 10             	imul   $0x10,%eax,%eax
f0124630:	29 c4                	sub    %eax,%esp
f0124632:	89 e0                	mov    %esp,%eax
f0124634:	83 c0 03             	add    $0x3,%eax
f0124637:	c1 e8 02             	shr    $0x2,%eax
f012463a:	c1 e0 02             	shl    $0x2,%eax
f012463d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124643:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012464a:	10 00 00 
f012464d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124652:	0f b6 d0             	movzbl %al,%edx
f0124655:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012465b:	01 d0                	add    %edx,%eax
f012465d:	48                   	dec    %eax
f012465e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124664:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012466a:	ba 00 00 00 00       	mov    $0x0,%edx
f012466f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124675:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012467b:	29 d0                	sub    %edx,%eax
f012467d:	89 c1                	mov    %eax,%ecx
f012467f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124686:	10 00 00 
f0124689:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012468e:	0f b6 c0             	movzbl %al,%eax
f0124691:	c1 e0 04             	shl    $0x4,%eax
f0124694:	89 c2                	mov    %eax,%edx
f0124696:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012469c:	01 d0                	add    %edx,%eax
f012469e:	48                   	dec    %eax
f012469f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01246a5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01246ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01246b0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01246b6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01246bc:	29 d0                	sub    %edx,%eax
f01246be:	01 c8                	add    %ecx,%eax
f01246c0:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01246c5:	c1 e8 0c             	shr    $0xc,%eax
f01246c8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01246ce:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01246d5:	10 00 00 
f01246d8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01246dd:	0f b6 d0             	movzbl %al,%edx
f01246e0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01246e6:	01 d0                	add    %edx,%eax
f01246e8:	48                   	dec    %eax
f01246e9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01246ef:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01246f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01246fa:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124700:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124706:	29 d0                	sub    %edx,%eax
f0124708:	89 c1                	mov    %eax,%ecx
f012470a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124711:	10 00 00 
f0124714:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124719:	0f b6 c0             	movzbl %al,%eax
f012471c:	c1 e0 04             	shl    $0x4,%eax
f012471f:	89 c2                	mov    %eax,%edx
f0124721:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124727:	01 d0                	add    %edx,%eax
f0124729:	48                   	dec    %eax
f012472a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124730:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124736:	ba 00 00 00 00       	mov    $0x0,%edx
f012473b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124741:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124747:	29 d0                	sub    %edx,%eax
f0124749:	01 c8                	add    %ecx,%eax
f012474b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124750:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0124756:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012475d:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124764:	e9 21 01 00 00       	jmp    f012488a <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124769:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012476e:	83 ec 04             	sub    $0x4,%esp
f0124771:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124777:	52                   	push   %edx
f0124778:	ff 75 e4             	pushl  -0x1c(%ebp)
f012477b:	50                   	push   %eax
f012477c:	e8 48 2d fe ff       	call   f01074c9 <get_page_table>
f0124781:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124784:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012478a:	85 c0                	test   %eax,%eax
f012478c:	75 17                	jne    f01247a5 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012478e:	83 ec 04             	sub    $0x4,%esp
f0124791:	68 90 9b 13 f0       	push   $0xf0139b90
f0124796:	68 38 09 00 00       	push   $0x938
f012479b:	68 ee 91 13 f0       	push   $0xf01391ee
f01247a0:	e8 0b ba fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01247a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247a8:	c1 e8 0c             	shr    $0xc,%eax
f01247ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01247b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01247b3:	e9 ba 00 00 00       	jmp    f0124872 <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01247b8:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01247be:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01247c1:	c1 e2 02             	shl    $0x2,%edx
f01247c4:	01 d0                	add    %edx,%eax
f01247c6:	8b 00                	mov    (%eax),%eax
f01247c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01247cd:	89 c1                	mov    %eax,%ecx
f01247cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247d5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01247d8:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01247db:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01247e4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01247e7:	83 ec 0c             	sub    $0xc,%esp
f01247ea:	50                   	push   %eax
f01247eb:	e8 85 37 fe ff       	call   f0107f75 <kheap_virtual_address>
f01247f0:	83 c4 10             	add    $0x10,%esp
f01247f3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01247f9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01247ff:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124802:	74 61                	je     f0124865 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124804:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012480a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012480d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124810:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124816:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124819:	c1 e1 02             	shl    $0x2,%ecx
f012481c:	01 ca                	add    %ecx,%edx
f012481e:	8b 12                	mov    (%edx),%edx
f0124820:	89 d1                	mov    %edx,%ecx
f0124822:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124828:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012482b:	c1 e2 0c             	shl    $0xc,%edx
f012482e:	89 d3                	mov    %edx,%ebx
f0124830:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124833:	01 da                	add    %ebx,%edx
f0124835:	83 ec 0c             	sub    $0xc,%esp
f0124838:	50                   	push   %eax
f0124839:	51                   	push   %ecx
f012483a:	52                   	push   %edx
f012483b:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f0124841:	68 84 9c 13 f0       	push   $0xf0139c84
f0124846:	e8 e6 c5 fd ff       	call   f0100e31 <cprintf>
f012484b:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012484e:	83 ec 04             	sub    $0x4,%esp
f0124851:	68 c7 9c 13 f0       	push   $0xf0139cc7
f0124856:	68 42 09 00 00       	push   $0x942
f012485b:	68 ee 91 13 f0       	push   $0xf01391ee
f0124860:	e8 4b b9 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124865:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012486c:	ff 45 dc             	incl   -0x24(%ebp)
f012486f:	ff 45 e0             	incl   -0x20(%ebp)
f0124872:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124875:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f012487b:	7d 0d                	jge    f012488a <test_kheap_virt_addr+0xbd5>
f012487d:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124884:	0f 8e 2e ff ff ff    	jle    f01247b8 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012488a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012488d:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0124893:	0f 82 d0 fe ff ff    	jb     f0124769 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124899:	83 ec 0c             	sub    $0xc,%esp
f012489c:	68 e4 9c 13 f0       	push   $0xf0139ce4
f01248a1:	e8 8b c5 fd ff       	call   f0100e31 <cprintf>
f01248a6:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01248a9:	e8 12 81 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01248ae:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01248b4:	e8 ad fd fd ff       	call   f0104666 <pf_calculate_free_frames>
f01248b9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f01248bf:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01248c5:	83 ec 0c             	sub    $0xc,%esp
f01248c8:	50                   	push   %eax
f01248c9:	e8 8d 36 fe ff       	call   f0107f5b <kfree>
f01248ce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248d1:	e8 90 fd fd ff       	call   f0104666 <pf_calculate_free_frames>
f01248d6:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01248dc:	74 17                	je     f01248f5 <test_kheap_virt_addr+0xc40>
f01248de:	83 ec 04             	sub    $0x4,%esp
f01248e1:	68 08 92 13 f0       	push   $0xf0139208
f01248e6:	68 50 09 00 00       	push   $0x950
f01248eb:	68 ee 91 13 f0       	push   $0xf01391ee
f01248f0:	e8 bb b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01248f5:	e8 c6 80 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01248fa:	89 c2                	mov    %eax,%edx
f01248fc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124902:	29 c2                	sub    %eax,%edx
f0124904:	89 d0                	mov    %edx,%eax
f0124906:	3d 00 02 00 00       	cmp    $0x200,%eax
f012490b:	74 17                	je     f0124924 <test_kheap_virt_addr+0xc6f>
f012490d:	83 ec 04             	sub    $0x4,%esp
f0124910:	68 78 99 13 f0       	push   $0xf0139978
f0124915:	68 51 09 00 00       	push   $0x951
f012491a:	68 ee 91 13 f0       	push   $0xf01391ee
f012491f:	e8 8c b8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124924:	e8 97 80 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124929:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012492f:	e8 32 fd fd ff       	call   f0104666 <pf_calculate_free_frames>
f0124934:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f012493a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124940:	83 ec 0c             	sub    $0xc,%esp
f0124943:	50                   	push   %eax
f0124944:	e8 12 36 fe ff       	call   f0107f5b <kfree>
f0124949:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012494c:	e8 15 fd fd ff       	call   f0104666 <pf_calculate_free_frames>
f0124951:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124957:	74 17                	je     f0124970 <test_kheap_virt_addr+0xcbb>
f0124959:	83 ec 04             	sub    $0x4,%esp
f012495c:	68 08 92 13 f0       	push   $0xf0139208
f0124961:	68 57 09 00 00       	push   $0x957
f0124966:	68 ee 91 13 f0       	push   $0xf01391ee
f012496b:	e8 40 b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124970:	e8 4b 80 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124975:	89 c2                	mov    %eax,%edx
f0124977:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012497d:	29 c2                	sub    %eax,%edx
f012497f:	89 d0                	mov    %edx,%eax
f0124981:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124986:	74 17                	je     f012499f <test_kheap_virt_addr+0xcea>
f0124988:	83 ec 04             	sub    $0x4,%esp
f012498b:	68 78 99 13 f0       	push   $0xf0139978
f0124990:	68 58 09 00 00       	push   $0x958
f0124995:	68 ee 91 13 f0       	push   $0xf01391ee
f012499a:	e8 11 b8 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012499f:	e8 1c 80 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01249a4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249aa:	e8 b7 fc fd ff       	call   f0104666 <pf_calculate_free_frames>
f01249af:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f01249b5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01249bb:	83 ec 0c             	sub    $0xc,%esp
f01249be:	50                   	push   %eax
f01249bf:	e8 97 35 fe ff       	call   f0107f5b <kfree>
f01249c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01249c7:	e8 9a fc fd ff       	call   f0104666 <pf_calculate_free_frames>
f01249cc:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01249d2:	74 17                	je     f01249eb <test_kheap_virt_addr+0xd36>
f01249d4:	83 ec 04             	sub    $0x4,%esp
f01249d7:	68 08 92 13 f0       	push   $0xf0139208
f01249dc:	68 5e 09 00 00       	push   $0x95e
f01249e1:	68 ee 91 13 f0       	push   $0xf01391ee
f01249e6:	e8 c5 b7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01249eb:	e8 d0 7f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01249f0:	89 c2                	mov    %eax,%edx
f01249f2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01249f8:	29 c2                	sub    %eax,%edx
f01249fa:	89 d0                	mov    %edx,%eax
f01249fc:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124a01:	74 17                	je     f0124a1a <test_kheap_virt_addr+0xd65>
f0124a03:	83 ec 04             	sub    $0x4,%esp
f0124a06:	68 78 99 13 f0       	push   $0xf0139978
f0124a0b:	68 5f 09 00 00       	push   $0x95f
f0124a10:	68 ee 91 13 f0       	push   $0xf01391ee
f0124a15:	e8 96 b7 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124a1a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124a21:	10 00 00 
f0124a24:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124a29:	0f b6 d0             	movzbl %al,%edx
f0124a2c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124a32:	01 d0                	add    %edx,%eax
f0124a34:	48                   	dec    %eax
f0124a35:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124a3b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a41:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a46:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124a4c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a52:	29 d0                	sub    %edx,%eax
f0124a54:	89 c1                	mov    %eax,%ecx
f0124a56:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124a5d:	10 00 00 
f0124a60:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124a65:	0f b6 c0             	movzbl %al,%eax
f0124a68:	c1 e0 04             	shl    $0x4,%eax
f0124a6b:	89 c2                	mov    %eax,%edx
f0124a6d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124a73:	01 d0                	add    %edx,%eax
f0124a75:	48                   	dec    %eax
f0124a76:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124a7c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124a82:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a87:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124a8d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124a93:	29 d0                	sub    %edx,%eax
f0124a95:	01 c8                	add    %ecx,%eax
f0124a97:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124a9c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124aa2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124aa9:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124ab0:	10 00 00 
f0124ab3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124ab8:	0f b6 d0             	movzbl %al,%edx
f0124abb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124ac1:	01 d0                	add    %edx,%eax
f0124ac3:	48                   	dec    %eax
f0124ac4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124aca:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124ad0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ad5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124adb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124ae1:	29 d0                	sub    %edx,%eax
f0124ae3:	89 c1                	mov    %eax,%ecx
f0124ae5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124aec:	10 00 00 
f0124aef:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124af4:	0f b6 c0             	movzbl %al,%eax
f0124af7:	c1 e0 04             	shl    $0x4,%eax
f0124afa:	89 c2                	mov    %eax,%edx
f0124afc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124b02:	01 d0                	add    %edx,%eax
f0124b04:	48                   	dec    %eax
f0124b05:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124b0b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124b11:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b16:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124b1c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124b22:	29 d0                	sub    %edx,%eax
f0124b24:	01 c8                	add    %ecx,%eax
f0124b26:	05 00 40 00 00       	add    $0x4000,%eax
f0124b2b:	c1 e8 0c             	shr    $0xc,%eax
f0124b2e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124b34:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124b3d:	eb 41                	jmp    f0124b80 <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124b3f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124b45:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124b48:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b4b:	83 ec 0c             	sub    $0xc,%esp
f0124b4e:	50                   	push   %eax
f0124b4f:	e8 21 34 fe ff       	call   f0107f75 <kheap_virtual_address>
f0124b54:	83 c4 10             	add    $0x10,%esp
f0124b57:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0124b5d:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124b64:	74 17                	je     f0124b7d <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124b66:	83 ec 04             	sub    $0x4,%esp
f0124b69:	68 c7 9c 13 f0       	push   $0xf0139cc7
f0124b6e:	68 70 09 00 00       	push   $0x970
f0124b73:	68 ee 91 13 f0       	push   $0xf01391ee
f0124b78:	e8 33 b6 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124b7d:	ff 45 d8             	incl   -0x28(%ebp)
f0124b80:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b86:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0124b8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124b8f:	39 c2                	cmp    %eax,%edx
f0124b91:	77 ac                	ja     f0124b3f <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124b93:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b99:	05 00 04 00 00       	add    $0x400,%eax
f0124b9e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124ba1:	eb 4b                	jmp    f0124bee <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124ba3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ba9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124bac:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124baf:	83 ec 0c             	sub    $0xc,%esp
f0124bb2:	50                   	push   %eax
f0124bb3:	e8 bd 33 fe ff       	call   f0107f75 <kheap_virtual_address>
f0124bb8:	83 c4 10             	add    $0x10,%esp
f0124bbb:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124bc1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124bc4:	c1 e0 0c             	shl    $0xc,%eax
f0124bc7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124bcc:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124bd2:	74 17                	je     f0124beb <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124bd4:	83 ec 04             	sub    $0x4,%esp
f0124bd7:	68 c7 9c 13 f0       	push   $0xf0139cc7
f0124bdc:	68 7a 09 00 00       	push   $0x97a
f0124be1:	68 ee 91 13 f0       	push   $0xf01391ee
f0124be6:	e8 c5 b5 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124beb:	ff 45 d8             	incl   -0x28(%ebp)
f0124bee:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124bf4:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124bfa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124bfd:	39 c2                	cmp    %eax,%edx
f0124bff:	77 a2                	ja     f0124ba3 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c01:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c07:	05 04 07 00 00       	add    $0x704,%eax
f0124c0c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124c0f:	eb 41                	jmp    f0124c52 <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124c11:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c17:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124c1a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c1d:	83 ec 0c             	sub    $0xc,%esp
f0124c20:	50                   	push   %eax
f0124c21:	e8 4f 33 fe ff       	call   f0107f75 <kheap_virtual_address>
f0124c26:	83 c4 10             	add    $0x10,%esp
f0124c29:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124c2f:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124c36:	74 17                	je     f0124c4f <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f0124c38:	83 ec 04             	sub    $0x4,%esp
f0124c3b:	68 c7 9c 13 f0       	push   $0xf0139cc7
f0124c40:	68 83 09 00 00       	push   $0x983
f0124c45:	68 ee 91 13 f0       	push   $0xf01391ee
f0124c4a:	e8 61 b5 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c4f:	ff 45 d8             	incl   -0x28(%ebp)
f0124c52:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c58:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0124c5e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c61:	39 c2                	cmp    %eax,%edx
f0124c63:	77 ac                	ja     f0124c11 <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124c65:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c6b:	05 04 0d 00 00       	add    $0xd04,%eax
f0124c70:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124c73:	eb 4b                	jmp    f0124cc0 <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124c75:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c7b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124c7e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c81:	83 ec 0c             	sub    $0xc,%esp
f0124c84:	50                   	push   %eax
f0124c85:	e8 eb 32 fe ff       	call   f0107f75 <kheap_virtual_address>
f0124c8a:	83 c4 10             	add    $0x10,%esp
f0124c8d:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124c93:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c96:	c1 e0 0c             	shl    $0xc,%eax
f0124c99:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124c9e:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124ca4:	74 17                	je     f0124cbd <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124ca6:	83 ec 04             	sub    $0x4,%esp
f0124ca9:	68 c7 9c 13 f0       	push   $0xf0139cc7
f0124cae:	68 8c 09 00 00       	push   $0x98c
f0124cb3:	68 ee 91 13 f0       	push   $0xf01391ee
f0124cb8:	e8 f3 b4 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124cbd:	ff 45 d8             	incl   -0x28(%ebp)
f0124cc0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124cc6:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0124ccc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124ccf:	39 c2                	cmp    %eax,%edx
f0124cd1:	77 a2                	ja     f0124c75 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124cd3:	83 ec 0c             	sub    $0xc,%esp
f0124cd6:	68 79 93 13 f0       	push   $0xf0139379
f0124cdb:	e8 51 c1 fd ff       	call   f0100e31 <cprintf>
f0124ce0:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124ce3:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124cea:	eb 54                	jmp    f0124d40 <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0124cec:	83 ec 0c             	sub    $0xc,%esp
f0124cef:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124cf2:	e8 7e 32 fe ff       	call   f0107f75 <kheap_virtual_address>
f0124cf7:	83 c4 10             	add    $0x10,%esp
f0124cfa:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124d00:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124d07:	74 30                	je     f0124d39 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0124d09:	83 ec 04             	sub    $0x4,%esp
f0124d0c:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124d12:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124d15:	68 15 9d 13 f0       	push   $0xf0139d15
f0124d1a:	e8 12 c1 fd ff       	call   f0100e31 <cprintf>
f0124d1f:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124d22:	83 ec 04             	sub    $0x4,%esp
f0124d25:	68 c7 9c 13 f0       	push   $0xf0139cc7
f0124d2a:	68 9c 09 00 00       	push   $0x99c
f0124d2f:	68 ee 91 13 f0       	push   $0xf01391ee
f0124d34:	e8 77 b4 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124d39:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124d40:	b8 5c e6 2d 00       	mov    $0x2de65c,%eax
f0124d45:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0124d48:	72 a2                	jb     f0124cec <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124d4a:	83 ec 0c             	sub    $0xc,%esp
f0124d4d:	68 d2 93 13 f0       	push   $0xf01393d2
f0124d52:	e8 da c0 fd ff       	call   f0100e31 <cprintf>
f0124d57:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0124d5a:	83 ec 0c             	sub    $0xc,%esp
f0124d5d:	68 34 9d 13 f0       	push   $0xf0139d34
f0124d62:	e8 ca c0 fd ff       	call   f0100e31 <cprintf>
f0124d67:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124d6a:	b8 01 00 00 00       	mov    $0x1,%eax
f0124d6f:	89 f4                	mov    %esi,%esp

}
f0124d71:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124d74:	5b                   	pop    %ebx
f0124d75:	5e                   	pop    %esi
f0124d76:	5f                   	pop    %edi
f0124d77:	5d                   	pop    %ebp
f0124d78:	c3                   	ret    

f0124d79 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0124d79:	55                   	push   %ebp
f0124d7a:	89 e5                	mov    %esp,%ebp
f0124d7c:	57                   	push   %edi
f0124d7d:	56                   	push   %esi
f0124d7e:	53                   	push   %ebx
f0124d7f:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0124d85:	a0 3d cb 18 f0       	mov    0xf018cb3d,%al
f0124d8a:	84 c0                	test   %al,%al
f0124d8c:	74 56                	je     f0124de4 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0124d8e:	c6 05 3d cb 18 f0 00 	movb   $0x0,0xf018cb3d
		initFreeFrames = sys_calculate_free_frames() ;
f0124d95:	e8 26 7c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124d9a:	a3 48 e6 2d f0       	mov    %eax,0xf02de648
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0124d9f:	e8 c2 f8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0124da4:	a3 44 e6 2d f0       	mov    %eax,0xf02de644
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0124da9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124daf:	bb 91 9e 13 f0       	mov    $0xf0139e91,%ebx
f0124db4:	ba 11 00 00 00       	mov    $0x11,%edx
f0124db9:	89 c7                	mov    %eax,%edi
f0124dbb:	89 de                	mov    %ebx,%esi
f0124dbd:	89 d1                	mov    %edx,%ecx
f0124dbf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124dc1:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124dc7:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124dcc:	b0 00                	mov    $0x0,%al
f0124dce:	89 d7                	mov    %edx,%edi
f0124dd0:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124dd2:	83 ec 0c             	sub    $0xc,%esp
f0124dd5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124ddb:	50                   	push   %eax
f0124ddc:	e8 e2 cd fd ff       	call   f0101bc3 <execute_command>
f0124de1:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124de4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124deb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124df2:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0124df7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124dfa:	eb 2b                	jmp    f0124e27 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0124dfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124dff:	83 c0 5c             	add    $0x5c,%eax
f0124e02:	83 ec 08             	sub    $0x8,%esp
f0124e05:	68 7b 9d 13 f0       	push   $0xf0139d7b
f0124e0a:	50                   	push   %eax
f0124e0b:	e8 ec a0 00 00       	call   f012eefc <strcmp>
f0124e10:	83 c4 10             	add    $0x10,%esp
f0124e13:	85 c0                	test   %eax,%eax
f0124e15:	75 08                	jne    f0124e1f <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0124e17:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0124e1d:	eb 2f                	jmp    f0124e4e <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124e1f:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0124e24:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e27:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e2b:	74 08                	je     f0124e35 <test_three_creation_functions+0xbc>
f0124e2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e30:	8b 40 44             	mov    0x44(%eax),%eax
f0124e33:	eb 05                	jmp    f0124e3a <test_three_creation_functions+0xc1>
f0124e35:	b8 00 00 00 00       	mov    $0x0,%eax
f0124e3a:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0124e3f:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0124e44:	85 c0                	test   %eax,%eax
f0124e46:	75 b4                	jne    f0124dfc <test_three_creation_functions+0x83>
f0124e48:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e4c:	75 ae                	jne    f0124dfc <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0124e4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e51:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0124e57:	85 c0                	test   %eax,%eax
f0124e59:	74 17                	je     f0124e72 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0124e5b:	83 ec 04             	sub    $0x4,%esp
f0124e5e:	68 84 9d 13 f0       	push   $0xf0139d84
f0124e63:	68 c6 09 00 00       	push   $0x9c6
f0124e68:	68 ee 91 13 f0       	push   $0xf01391ee
f0124e6d:	e8 3e b3 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0124e72:	83 ec 0c             	sub    $0xc,%esp
f0124e75:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124e78:	e8 ba 33 fe ff       	call   f0108237 <env_page_ws_get_size>
f0124e7d:	83 c4 10             	add    $0x10,%esp
f0124e80:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0124e83:	e8 38 7b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124e88:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0124e8b:	e8 d6 f7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0124e90:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e93:	a1 44 e6 2d f0       	mov    0xf02de644,%eax
f0124e98:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0124e9b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0124e9e:	74 17                	je     f0124eb7 <test_three_creation_functions+0x13e>
f0124ea0:	83 ec 04             	sub    $0x4,%esp
f0124ea3:	68 08 92 13 f0       	push   $0xf0139208
f0124ea8:	68 cc 09 00 00       	push   $0x9cc
f0124ead:	68 ee 91 13 f0       	push   $0xf01391ee
f0124eb2:	e8 f9 b2 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124eb7:	a1 48 e6 2d f0       	mov    0xf02de648,%eax
f0124ebc:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0124ebf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ec2:	83 c2 15             	add    $0x15,%edx
f0124ec5:	39 d0                	cmp    %edx,%eax
f0124ec7:	74 17                	je     f0124ee0 <test_three_creation_functions+0x167>
f0124ec9:	83 ec 04             	sub    $0x4,%esp
f0124ecc:	68 70 92 13 f0       	push   $0xf0139270
f0124ed1:	68 ce 09 00 00       	push   $0x9ce
f0124ed6:	68 ee 91 13 f0       	push   $0xf01391ee
f0124edb:	e8 d0 b2 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0124ee0:	83 ec 0c             	sub    $0xc,%esp
f0124ee3:	68 00 10 00 00       	push   $0x1000
f0124ee8:	e8 54 30 fe ff       	call   f0107f41 <kmalloc>
f0124eed:	83 c4 10             	add    $0x10,%esp
f0124ef0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0124ef3:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0124efa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124eff:	0f b6 d0             	movzbl %al,%edx
f0124f02:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0124f05:	01 d0                	add    %edx,%eax
f0124f07:	48                   	dec    %eax
f0124f08:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0124f0b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f13:	f7 75 cc             	divl   -0x34(%ebp)
f0124f16:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124f19:	29 d0                	sub    %edx,%eax
f0124f1b:	89 c1                	mov    %eax,%ecx
f0124f1d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0124f24:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124f29:	0f b6 c0             	movzbl %al,%eax
f0124f2c:	c1 e0 04             	shl    $0x4,%eax
f0124f2f:	89 c2                	mov    %eax,%edx
f0124f31:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124f34:	01 d0                	add    %edx,%eax
f0124f36:	48                   	dec    %eax
f0124f37:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124f3a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f42:	f7 75 c4             	divl   -0x3c(%ebp)
f0124f45:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f48:	29 d0                	sub    %edx,%eax
f0124f4a:	01 c8                	add    %ecx,%eax
f0124f4c:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0124f52:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124f55:	39 c2                	cmp    %eax,%edx
f0124f57:	74 17                	je     f0124f70 <test_three_creation_functions+0x1f7>
f0124f59:	83 ec 04             	sub    $0x4,%esp
f0124f5c:	68 d4 9d 13 f0       	push   $0xf0139dd4
f0124f61:	68 d2 09 00 00       	push   $0x9d2
f0124f66:	68 ee 91 13 f0       	push   $0xf01391ee
f0124f6b:	e8 40 b2 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0124f70:	83 ec 0c             	sub    $0xc,%esp
f0124f73:	68 44 9e 13 f0       	push   $0xf0139e44
f0124f78:	e8 b4 be fd ff       	call   f0100e31 <cprintf>
f0124f7d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124f80:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0124f85:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124f88:	5b                   	pop    %ebx
f0124f89:	5e                   	pop    %esi
f0124f8a:	5f                   	pop    %edi
f0124f8b:	5d                   	pop    %ebp
f0124f8c:	c3                   	ret    

f0124f8d <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0124f8d:	55                   	push   %ebp
f0124f8e:	89 e5                	mov    %esp,%ebp
f0124f90:	57                   	push   %edi
f0124f91:	53                   	push   %ebx
f0124f92:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0124f98:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0124f9c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0124fa0:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0124fa6:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0124fac:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124fb3:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124fba:	e8 01 7a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0124fbf:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124fc2:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0124fc8:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124fcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0124fd2:	89 d7                	mov    %edx,%edi
f0124fd4:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124fd6:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0124fdc:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124fe1:	b8 00 00 00 00       	mov    $0x0,%eax
f0124fe6:	89 d7                	mov    %edx,%edi
f0124fe8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124fea:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0124ff0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124ff5:	b8 00 00 00 00       	mov    $0x0,%eax
f0124ffa:	89 d7                	mov    %edx,%edi
f0124ffc:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ffe:	e8 bd 79 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125003:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125006:	e8 5b f6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012500b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012500e:	83 ec 0c             	sub    $0xc,%esp
f0125011:	68 00 fc 1f 00       	push   $0x1ffc00
f0125016:	e8 26 2f fe ff       	call   f0107f41 <kmalloc>
f012501b:	83 c4 10             	add    $0x10,%esp
f012501e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125024:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012502a:	89 c1                	mov    %eax,%ecx
f012502c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125033:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125038:	0f b6 d0             	movzbl %al,%edx
f012503b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012503e:	01 d0                	add    %edx,%eax
f0125040:	48                   	dec    %eax
f0125041:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125044:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125047:	ba 00 00 00 00       	mov    $0x0,%edx
f012504c:	f7 75 c8             	divl   -0x38(%ebp)
f012504f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125052:	29 d0                	sub    %edx,%eax
f0125054:	89 c3                	mov    %eax,%ebx
f0125056:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012505d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125062:	0f b6 c0             	movzbl %al,%eax
f0125065:	c1 e0 04             	shl    $0x4,%eax
f0125068:	89 c2                	mov    %eax,%edx
f012506a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012506d:	01 d0                	add    %edx,%eax
f012506f:	48                   	dec    %eax
f0125070:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125073:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125076:	ba 00 00 00 00       	mov    $0x0,%edx
f012507b:	f7 75 c0             	divl   -0x40(%ebp)
f012507e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125081:	29 d0                	sub    %edx,%eax
f0125083:	01 d8                	add    %ebx,%eax
f0125085:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012508a:	39 c1                	cmp    %eax,%ecx
f012508c:	74 17                	je     f01250a5 <test_kfreeall+0x118>
f012508e:	83 ec 04             	sub    $0x4,%esp
f0125091:	68 d4 92 13 f0       	push   $0xf01392d4
f0125096:	68 f9 09 00 00       	push   $0x9f9
f012509b:	68 ee 91 13 f0       	push   $0xf01391ee
f01250a0:	e8 0b b1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250a5:	e8 bc f5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01250aa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01250ad:	74 17                	je     f01250c6 <test_kfreeall+0x139>
f01250af:	83 ec 04             	sub    $0x4,%esp
f01250b2:	68 08 92 13 f0       	push   $0xf0139208
f01250b7:	68 fa 09 00 00       	push   $0x9fa
f01250bc:	68 ee 91 13 f0       	push   $0xf01391ee
f01250c1:	e8 ea b0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01250c6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01250c9:	e8 f2 78 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01250ce:	29 c3                	sub    %eax,%ebx
f01250d0:	89 d8                	mov    %ebx,%eax
f01250d2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01250d7:	74 17                	je     f01250f0 <test_kfreeall+0x163>
f01250d9:	83 ec 04             	sub    $0x4,%esp
f01250dc:	68 70 92 13 f0       	push   $0xf0139270
f01250e1:	68 fb 09 00 00       	push   $0x9fb
f01250e6:	68 ee 91 13 f0       	push   $0xf01391ee
f01250eb:	e8 c0 b0 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01250f0:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01250f7:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01250fa:	e8 c1 78 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01250ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125102:	e8 5f f5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125107:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012510a:	83 ec 0c             	sub    $0xc,%esp
f012510d:	68 00 fc 1f 00       	push   $0x1ffc00
f0125112:	e8 2a 2e fe ff       	call   f0107f41 <kmalloc>
f0125117:	83 c4 10             	add    $0x10,%esp
f012511a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125120:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125126:	89 c1                	mov    %eax,%ecx
f0125128:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012512f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125134:	0f b6 d0             	movzbl %al,%edx
f0125137:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012513a:	01 d0                	add    %edx,%eax
f012513c:	48                   	dec    %eax
f012513d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125140:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125143:	ba 00 00 00 00       	mov    $0x0,%edx
f0125148:	f7 75 b8             	divl   -0x48(%ebp)
f012514b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012514e:	29 d0                	sub    %edx,%eax
f0125150:	89 c3                	mov    %eax,%ebx
f0125152:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125159:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012515e:	0f b6 c0             	movzbl %al,%eax
f0125161:	c1 e0 04             	shl    $0x4,%eax
f0125164:	89 c2                	mov    %eax,%edx
f0125166:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125169:	01 d0                	add    %edx,%eax
f012516b:	48                   	dec    %eax
f012516c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012516f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125172:	ba 00 00 00 00       	mov    $0x0,%edx
f0125177:	f7 75 b0             	divl   -0x50(%ebp)
f012517a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012517d:	29 d0                	sub    %edx,%eax
f012517f:	01 d8                	add    %ebx,%eax
f0125181:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125186:	39 c1                	cmp    %eax,%ecx
f0125188:	74 17                	je     f01251a1 <test_kfreeall+0x214>
f012518a:	83 ec 04             	sub    $0x4,%esp
f012518d:	68 d4 92 13 f0       	push   $0xf01392d4
f0125192:	68 02 0a 00 00       	push   $0xa02
f0125197:	68 ee 91 13 f0       	push   $0xf01391ee
f012519c:	e8 0f b0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01251a1:	e8 c0 f4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01251a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01251a9:	74 17                	je     f01251c2 <test_kfreeall+0x235>
f01251ab:	83 ec 04             	sub    $0x4,%esp
f01251ae:	68 08 92 13 f0       	push   $0xf0139208
f01251b3:	68 03 0a 00 00       	push   $0xa03
f01251b8:	68 ee 91 13 f0       	push   $0xf01391ee
f01251bd:	e8 ee af fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01251c2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01251c5:	e8 f6 77 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01251ca:	29 c3                	sub    %eax,%ebx
f01251cc:	89 d8                	mov    %ebx,%eax
f01251ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f01251d3:	74 17                	je     f01251ec <test_kfreeall+0x25f>
f01251d5:	83 ec 04             	sub    $0x4,%esp
f01251d8:	68 70 92 13 f0       	push   $0xf0139270
f01251dd:	68 04 0a 00 00       	push   $0xa04
f01251e2:	68 ee 91 13 f0       	push   $0xf01391ee
f01251e7:	e8 c4 af fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01251ec:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f01251f3:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01251f6:	e8 c5 77 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01251fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01251fe:	e8 63 f4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125203:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125206:	83 ec 0c             	sub    $0xc,%esp
f0125209:	68 00 08 00 00       	push   $0x800
f012520e:	e8 2e 2d fe ff       	call   f0107f41 <kmalloc>
f0125213:	83 c4 10             	add    $0x10,%esp
f0125216:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012521c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125222:	89 c1                	mov    %eax,%ecx
f0125224:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012522b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125230:	0f b6 d0             	movzbl %al,%edx
f0125233:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125236:	01 d0                	add    %edx,%eax
f0125238:	48                   	dec    %eax
f0125239:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012523c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012523f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125244:	f7 75 a8             	divl   -0x58(%ebp)
f0125247:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012524a:	29 d0                	sub    %edx,%eax
f012524c:	89 c3                	mov    %eax,%ebx
f012524e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125255:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012525a:	0f b6 c0             	movzbl %al,%eax
f012525d:	c1 e0 04             	shl    $0x4,%eax
f0125260:	89 c2                	mov    %eax,%edx
f0125262:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125265:	01 d0                	add    %edx,%eax
f0125267:	48                   	dec    %eax
f0125268:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012526b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012526e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125273:	f7 75 a0             	divl   -0x60(%ebp)
f0125276:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125279:	29 d0                	sub    %edx,%eax
f012527b:	01 d8                	add    %ebx,%eax
f012527d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125282:	39 c1                	cmp    %eax,%ecx
f0125284:	74 17                	je     f012529d <test_kfreeall+0x310>
f0125286:	83 ec 04             	sub    $0x4,%esp
f0125289:	68 d4 92 13 f0       	push   $0xf01392d4
f012528e:	68 0b 0a 00 00       	push   $0xa0b
f0125293:	68 ee 91 13 f0       	push   $0xf01391ee
f0125298:	e8 13 af fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012529d:	e8 c4 f3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01252a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01252a5:	74 17                	je     f01252be <test_kfreeall+0x331>
f01252a7:	83 ec 04             	sub    $0x4,%esp
f01252aa:	68 08 92 13 f0       	push   $0xf0139208
f01252af:	68 0c 0a 00 00       	push   $0xa0c
f01252b4:	68 ee 91 13 f0       	push   $0xf01391ee
f01252b9:	e8 f2 ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01252c1:	e8 fa 76 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01252c6:	29 c3                	sub    %eax,%ebx
f01252c8:	89 d8                	mov    %ebx,%eax
f01252ca:	83 f8 01             	cmp    $0x1,%eax
f01252cd:	74 17                	je     f01252e6 <test_kfreeall+0x359>
f01252cf:	83 ec 04             	sub    $0x4,%esp
f01252d2:	68 70 92 13 f0       	push   $0xf0139270
f01252d7:	68 0d 0a 00 00       	push   $0xa0d
f01252dc:	68 ee 91 13 f0       	push   $0xf01391ee
f01252e1:	e8 ca ae fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01252e6:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01252ed:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01252f0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01252f6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01252f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125300:	eb 0e                	jmp    f0125310 <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f0125302:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125305:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125308:	01 d0                	add    %edx,%eax
f012530a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012530d:	ff 45 f4             	incl   -0xc(%ebp)
f0125310:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125316:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125319:	7f e7                	jg     f0125302 <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012531b:	e8 a0 76 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125320:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125323:	e8 3e f3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125328:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012532b:	83 ec 0c             	sub    $0xc,%esp
f012532e:	68 00 08 00 00       	push   $0x800
f0125333:	e8 09 2c fe ff       	call   f0107f41 <kmalloc>
f0125338:	83 c4 10             	add    $0x10,%esp
f012533b:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125341:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125347:	89 c1                	mov    %eax,%ecx
f0125349:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125350:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125355:	0f b6 d0             	movzbl %al,%edx
f0125358:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012535b:	01 d0                	add    %edx,%eax
f012535d:	48                   	dec    %eax
f012535e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125361:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125364:	ba 00 00 00 00       	mov    $0x0,%edx
f0125369:	f7 75 94             	divl   -0x6c(%ebp)
f012536c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012536f:	29 d0                	sub    %edx,%eax
f0125371:	89 c3                	mov    %eax,%ebx
f0125373:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012537a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012537f:	0f b6 c0             	movzbl %al,%eax
f0125382:	c1 e0 04             	shl    $0x4,%eax
f0125385:	89 c2                	mov    %eax,%edx
f0125387:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012538a:	01 d0                	add    %edx,%eax
f012538c:	48                   	dec    %eax
f012538d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125390:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125393:	ba 00 00 00 00       	mov    $0x0,%edx
f0125398:	f7 75 8c             	divl   -0x74(%ebp)
f012539b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012539e:	29 d0                	sub    %edx,%eax
f01253a0:	01 d8                	add    %ebx,%eax
f01253a2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01253a7:	39 c1                	cmp    %eax,%ecx
f01253a9:	74 17                	je     f01253c2 <test_kfreeall+0x435>
f01253ab:	83 ec 04             	sub    $0x4,%esp
f01253ae:	68 d4 92 13 f0       	push   $0xf01392d4
f01253b3:	68 19 0a 00 00       	push   $0xa19
f01253b8:	68 ee 91 13 f0       	push   $0xf01391ee
f01253bd:	e8 ee ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253c2:	e8 9f f2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01253c7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01253ca:	74 17                	je     f01253e3 <test_kfreeall+0x456>
f01253cc:	83 ec 04             	sub    $0x4,%esp
f01253cf:	68 08 92 13 f0       	push   $0xf0139208
f01253d4:	68 1a 0a 00 00       	push   $0xa1a
f01253d9:	68 ee 91 13 f0       	push   $0xf01391ee
f01253de:	e8 cd ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253e3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01253e6:	e8 d5 75 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01253eb:	29 c3                	sub    %eax,%ebx
f01253ed:	89 d8                	mov    %ebx,%eax
f01253ef:	83 f8 01             	cmp    $0x1,%eax
f01253f2:	74 17                	je     f012540b <test_kfreeall+0x47e>
f01253f4:	83 ec 04             	sub    $0x4,%esp
f01253f7:	68 70 92 13 f0       	push   $0xf0139270
f01253fc:	68 1b 0a 00 00       	push   $0xa1b
f0125401:	68 ee 91 13 f0       	push   $0xf01391ee
f0125406:	e8 a5 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012540b:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0125412:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125415:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012541b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012541e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125425:	eb 0e                	jmp    f0125435 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f0125427:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012542a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012542d:	01 d0                	add    %edx,%eax
f012542f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125432:	ff 45 f4             	incl   -0xc(%ebp)
f0125435:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012543b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012543e:	7f e7                	jg     f0125427 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125440:	e8 7b 75 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125445:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125448:	e8 19 f2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012544d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125450:	83 ec 0c             	sub    $0xc,%esp
f0125453:	68 00 1c 00 00       	push   $0x1c00
f0125458:	e8 e4 2a fe ff       	call   f0107f41 <kmalloc>
f012545d:	83 c4 10             	add    $0x10,%esp
f0125460:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125466:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012546c:	89 c1                	mov    %eax,%ecx
f012546e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125475:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012547a:	0f b6 d0             	movzbl %al,%edx
f012547d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125480:	01 d0                	add    %edx,%eax
f0125482:	48                   	dec    %eax
f0125483:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125486:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125489:	ba 00 00 00 00       	mov    $0x0,%edx
f012548e:	f7 75 84             	divl   -0x7c(%ebp)
f0125491:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125494:	29 d0                	sub    %edx,%eax
f0125496:	89 c3                	mov    %eax,%ebx
f0125498:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012549f:	10 00 00 
f01254a2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01254a7:	0f b6 c0             	movzbl %al,%eax
f01254aa:	c1 e0 04             	shl    $0x4,%eax
f01254ad:	89 c2                	mov    %eax,%edx
f01254af:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01254b5:	01 d0                	add    %edx,%eax
f01254b7:	48                   	dec    %eax
f01254b8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01254be:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01254c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01254c9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01254cf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01254d5:	29 d0                	sub    %edx,%eax
f01254d7:	01 d8                	add    %ebx,%eax
f01254d9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01254de:	39 c1                	cmp    %eax,%ecx
f01254e0:	74 17                	je     f01254f9 <test_kfreeall+0x56c>
f01254e2:	83 ec 04             	sub    $0x4,%esp
f01254e5:	68 d4 92 13 f0       	push   $0xf01392d4
f01254ea:	68 27 0a 00 00       	push   $0xa27
f01254ef:	68 ee 91 13 f0       	push   $0xf01391ee
f01254f4:	e8 b7 ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254f9:	e8 68 f1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01254fe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125501:	74 17                	je     f012551a <test_kfreeall+0x58d>
f0125503:	83 ec 04             	sub    $0x4,%esp
f0125506:	68 08 92 13 f0       	push   $0xf0139208
f012550b:	68 28 0a 00 00       	push   $0xa28
f0125510:	68 ee 91 13 f0       	push   $0xf01391ee
f0125515:	e8 96 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012551a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012551d:	e8 9e 74 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125522:	29 c3                	sub    %eax,%ebx
f0125524:	89 d8                	mov    %ebx,%eax
f0125526:	83 f8 02             	cmp    $0x2,%eax
f0125529:	74 17                	je     f0125542 <test_kfreeall+0x5b5>
f012552b:	83 ec 04             	sub    $0x4,%esp
f012552e:	68 70 92 13 f0       	push   $0xf0139270
f0125533:	68 29 0a 00 00       	push   $0xa29
f0125538:	68 ee 91 13 f0       	push   $0xf01391ee
f012553d:	e8 6e ac fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125542:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0125549:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012554c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125552:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125555:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012555c:	eb 0e                	jmp    f012556c <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f012555e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125561:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125564:	01 d0                	add    %edx,%eax
f0125566:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125569:	ff 45 f4             	incl   -0xc(%ebp)
f012556c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125572:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125575:	7f e7                	jg     f012555e <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125577:	e8 44 74 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012557c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012557f:	e8 e2 f0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125584:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125587:	83 ec 0c             	sub    $0xc,%esp
f012558a:	68 00 fc 2f 00       	push   $0x2ffc00
f012558f:	e8 ad 29 fe ff       	call   f0107f41 <kmalloc>
f0125594:	83 c4 10             	add    $0x10,%esp
f0125597:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012559d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01255a3:	89 c1                	mov    %eax,%ecx
f01255a5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01255ac:	10 00 00 
f01255af:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01255b4:	0f b6 d0             	movzbl %al,%edx
f01255b7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01255bd:	01 d0                	add    %edx,%eax
f01255bf:	48                   	dec    %eax
f01255c0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01255c6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01255cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01255d1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01255d7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01255dd:	29 d0                	sub    %edx,%eax
f01255df:	89 c3                	mov    %eax,%ebx
f01255e1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01255e8:	10 00 00 
f01255eb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01255f0:	0f b6 c0             	movzbl %al,%eax
f01255f3:	c1 e0 04             	shl    $0x4,%eax
f01255f6:	89 c2                	mov    %eax,%edx
f01255f8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01255fe:	01 d0                	add    %edx,%eax
f0125600:	48                   	dec    %eax
f0125601:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125607:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012560d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125612:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125618:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012561e:	29 d0                	sub    %edx,%eax
f0125620:	01 d8                	add    %ebx,%eax
f0125622:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125627:	39 c1                	cmp    %eax,%ecx
f0125629:	74 17                	je     f0125642 <test_kfreeall+0x6b5>
f012562b:	83 ec 04             	sub    $0x4,%esp
f012562e:	68 d4 92 13 f0       	push   $0xf01392d4
f0125633:	68 35 0a 00 00       	push   $0xa35
f0125638:	68 ee 91 13 f0       	push   $0xf01391ee
f012563d:	e8 6e ab fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125642:	e8 1f f0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125647:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012564a:	74 17                	je     f0125663 <test_kfreeall+0x6d6>
f012564c:	83 ec 04             	sub    $0x4,%esp
f012564f:	68 08 92 13 f0       	push   $0xf0139208
f0125654:	68 36 0a 00 00       	push   $0xa36
f0125659:	68 ee 91 13 f0       	push   $0xf01391ee
f012565e:	e8 4d ab fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125663:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125666:	e8 55 73 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012566b:	29 c3                	sub    %eax,%ebx
f012566d:	89 d8                	mov    %ebx,%eax
f012566f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125674:	74 17                	je     f012568d <test_kfreeall+0x700>
f0125676:	83 ec 04             	sub    $0x4,%esp
f0125679:	68 70 92 13 f0       	push   $0xf0139270
f012567e:	68 37 0a 00 00       	push   $0xa37
f0125683:	68 ee 91 13 f0       	push   $0xf01391ee
f0125688:	e8 23 ab fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012568d:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0125694:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125697:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012569d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01256a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01256a7:	eb 0e                	jmp    f01256b7 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f01256a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01256ac:	8b 45 98             	mov    -0x68(%ebp),%eax
f01256af:	01 d0                	add    %edx,%eax
f01256b1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01256b4:	ff 45 f4             	incl   -0xc(%ebp)
f01256b7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01256bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01256c0:	7f e7                	jg     f01256a9 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01256c2:	e8 f9 72 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01256c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256ca:	e8 97 ef fd ff       	call   f0104666 <pf_calculate_free_frames>
f01256cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01256d2:	83 ec 0c             	sub    $0xc,%esp
f01256d5:	68 00 fc 5f 00       	push   $0x5ffc00
f01256da:	e8 62 28 fe ff       	call   f0107f41 <kmalloc>
f01256df:	83 c4 10             	add    $0x10,%esp
f01256e2:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256e8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01256ee:	89 c1                	mov    %eax,%ecx
f01256f0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01256f7:	10 00 00 
f01256fa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01256ff:	0f b6 d0             	movzbl %al,%edx
f0125702:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125708:	01 d0                	add    %edx,%eax
f012570a:	48                   	dec    %eax
f012570b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125711:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125717:	ba 00 00 00 00       	mov    $0x0,%edx
f012571c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125722:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125728:	29 d0                	sub    %edx,%eax
f012572a:	89 c3                	mov    %eax,%ebx
f012572c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125733:	10 00 00 
f0125736:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012573b:	0f b6 c0             	movzbl %al,%eax
f012573e:	c1 e0 04             	shl    $0x4,%eax
f0125741:	89 c2                	mov    %eax,%edx
f0125743:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125749:	01 d0                	add    %edx,%eax
f012574b:	48                   	dec    %eax
f012574c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125752:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125758:	ba 00 00 00 00       	mov    $0x0,%edx
f012575d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125763:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125769:	29 d0                	sub    %edx,%eax
f012576b:	01 d8                	add    %ebx,%eax
f012576d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125772:	39 c1                	cmp    %eax,%ecx
f0125774:	74 17                	je     f012578d <test_kfreeall+0x800>
f0125776:	83 ec 04             	sub    $0x4,%esp
f0125779:	68 d4 92 13 f0       	push   $0xf01392d4
f012577e:	68 43 0a 00 00       	push   $0xa43
f0125783:	68 ee 91 13 f0       	push   $0xf01391ee
f0125788:	e8 23 aa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012578d:	e8 d4 ee fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125792:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125795:	74 17                	je     f01257ae <test_kfreeall+0x821>
f0125797:	83 ec 04             	sub    $0x4,%esp
f012579a:	68 08 92 13 f0       	push   $0xf0139208
f012579f:	68 44 0a 00 00       	push   $0xa44
f01257a4:	68 ee 91 13 f0       	push   $0xf01391ee
f01257a9:	e8 02 aa fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257ae:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01257b1:	e8 0a 72 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01257b6:	29 c3                	sub    %eax,%ebx
f01257b8:	89 d8                	mov    %ebx,%eax
f01257ba:	3d 00 06 00 00       	cmp    $0x600,%eax
f01257bf:	74 17                	je     f01257d8 <test_kfreeall+0x84b>
f01257c1:	83 ec 04             	sub    $0x4,%esp
f01257c4:	68 70 92 13 f0       	push   $0xf0139270
f01257c9:	68 45 0a 00 00       	push   $0xa45
f01257ce:	68 ee 91 13 f0       	push   $0xf01391ee
f01257d3:	e8 d8 a9 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01257d8:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01257df:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01257e2:	e8 d9 71 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01257e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257ea:	e8 77 ee fd ff       	call   f0104666 <pf_calculate_free_frames>
f01257ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01257f2:	83 ec 0c             	sub    $0xc,%esp
f01257f5:	68 00 38 00 00       	push   $0x3800
f01257fa:	e8 42 27 fe ff       	call   f0107f41 <kmalloc>
f01257ff:	83 c4 10             	add    $0x10,%esp
f0125802:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125808:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012580e:	89 c1                	mov    %eax,%ecx
f0125810:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125817:	10 00 00 
f012581a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012581f:	0f b6 d0             	movzbl %al,%edx
f0125822:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125828:	01 d0                	add    %edx,%eax
f012582a:	48                   	dec    %eax
f012582b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125831:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125837:	ba 00 00 00 00       	mov    $0x0,%edx
f012583c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125842:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125848:	29 d0                	sub    %edx,%eax
f012584a:	89 c3                	mov    %eax,%ebx
f012584c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125853:	10 00 00 
f0125856:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012585b:	0f b6 c0             	movzbl %al,%eax
f012585e:	c1 e0 04             	shl    $0x4,%eax
f0125861:	89 c2                	mov    %eax,%edx
f0125863:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125869:	01 d0                	add    %edx,%eax
f012586b:	48                   	dec    %eax
f012586c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125872:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125878:	ba 00 00 00 00       	mov    $0x0,%edx
f012587d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125883:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125889:	29 d0                	sub    %edx,%eax
f012588b:	01 d8                	add    %ebx,%eax
f012588d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125892:	39 c1                	cmp    %eax,%ecx
f0125894:	74 17                	je     f01258ad <test_kfreeall+0x920>
f0125896:	83 ec 04             	sub    $0x4,%esp
f0125899:	68 d4 92 13 f0       	push   $0xf01392d4
f012589e:	68 4c 0a 00 00       	push   $0xa4c
f01258a3:	68 ee 91 13 f0       	push   $0xf01391ee
f01258a8:	e8 03 a9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258ad:	e8 b4 ed fd ff       	call   f0104666 <pf_calculate_free_frames>
f01258b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01258b5:	74 17                	je     f01258ce <test_kfreeall+0x941>
f01258b7:	83 ec 04             	sub    $0x4,%esp
f01258ba:	68 08 92 13 f0       	push   $0xf0139208
f01258bf:	68 4d 0a 00 00       	push   $0xa4d
f01258c4:	68 ee 91 13 f0       	push   $0xf01391ee
f01258c9:	e8 e2 a8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01258ce:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01258d1:	e8 ea 70 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01258d6:	29 c3                	sub    %eax,%ebx
f01258d8:	89 d8                	mov    %ebx,%eax
f01258da:	83 f8 04             	cmp    $0x4,%eax
f01258dd:	74 17                	je     f01258f6 <test_kfreeall+0x969>
f01258df:	83 ec 04             	sub    $0x4,%esp
f01258e2:	68 70 92 13 f0       	push   $0xf0139270
f01258e7:	68 4e 0a 00 00       	push   $0xa4e
f01258ec:	68 ee 91 13 f0       	push   $0xf01391ee
f01258f1:	e8 ba a8 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01258f6:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f01258fd:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0125900:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125906:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125909:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125910:	eb 0e                	jmp    f0125920 <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f0125912:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125915:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125918:	01 d0                	add    %edx,%eax
f012591a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012591d:	ff 45 f4             	incl   -0xc(%ebp)
f0125920:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125926:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125929:	7f e7                	jg     f0125912 <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012592b:	e8 90 70 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125930:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125936:	e8 2b ed fd ff       	call   f0104666 <pf_calculate_free_frames>
f012593b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0125941:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125947:	83 ec 0c             	sub    $0xc,%esp
f012594a:	50                   	push   %eax
f012594b:	e8 0b 26 fe ff       	call   f0107f5b <kfree>
f0125950:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125953:	e8 0e ed fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125958:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012595e:	74 17                	je     f0125977 <test_kfreeall+0x9ea>
f0125960:	83 ec 04             	sub    $0x4,%esp
f0125963:	68 08 92 13 f0       	push   $0xf0139208
f0125968:	68 5d 0a 00 00       	push   $0xa5d
f012596d:	68 ee 91 13 f0       	push   $0xf01391ee
f0125972:	e8 39 a8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125977:	e8 44 70 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012597c:	89 c2                	mov    %eax,%edx
f012597e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125984:	29 c2                	sub    %eax,%edx
f0125986:	89 d0                	mov    %edx,%eax
f0125988:	3d 00 02 00 00       	cmp    $0x200,%eax
f012598d:	74 17                	je     f01259a6 <test_kfreeall+0xa19>
f012598f:	83 ec 04             	sub    $0x4,%esp
f0125992:	68 78 99 13 f0       	push   $0xf0139978
f0125997:	68 5e 0a 00 00       	push   $0xa5e
f012599c:	68 ee 91 13 f0       	push   $0xf01391ee
f01259a1:	e8 0a a8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01259a6:	e8 15 70 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01259ab:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259b1:	e8 b0 ec fd ff       	call   f0104666 <pf_calculate_free_frames>
f01259b6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01259bc:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01259c2:	83 ec 0c             	sub    $0xc,%esp
f01259c5:	50                   	push   %eax
f01259c6:	e8 90 25 fe ff       	call   f0107f5b <kfree>
f01259cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259ce:	e8 93 ec fd ff       	call   f0104666 <pf_calculate_free_frames>
f01259d3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01259d9:	74 17                	je     f01259f2 <test_kfreeall+0xa65>
f01259db:	83 ec 04             	sub    $0x4,%esp
f01259de:	68 08 92 13 f0       	push   $0xf0139208
f01259e3:	68 64 0a 00 00       	push   $0xa64
f01259e8:	68 ee 91 13 f0       	push   $0xf01391ee
f01259ed:	e8 be a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01259f2:	e8 c9 6f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01259f7:	89 c2                	mov    %eax,%edx
f01259f9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01259ff:	29 c2                	sub    %eax,%edx
f0125a01:	89 d0                	mov    %edx,%eax
f0125a03:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125a08:	74 17                	je     f0125a21 <test_kfreeall+0xa94>
f0125a0a:	83 ec 04             	sub    $0x4,%esp
f0125a0d:	68 78 99 13 f0       	push   $0xf0139978
f0125a12:	68 65 0a 00 00       	push   $0xa65
f0125a17:	68 ee 91 13 f0       	push   $0xf01391ee
f0125a1c:	e8 8f a7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a21:	e8 9a 6f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125a26:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a2c:	e8 35 ec fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125a31:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0125a37:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125a3d:	83 ec 0c             	sub    $0xc,%esp
f0125a40:	50                   	push   %eax
f0125a41:	e8 15 25 fe ff       	call   f0107f5b <kfree>
f0125a46:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a49:	e8 18 ec fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125a4e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125a54:	74 17                	je     f0125a6d <test_kfreeall+0xae0>
f0125a56:	83 ec 04             	sub    $0x4,%esp
f0125a59:	68 08 92 13 f0       	push   $0xf0139208
f0125a5e:	68 6b 0a 00 00       	push   $0xa6b
f0125a63:	68 ee 91 13 f0       	push   $0xf01391ee
f0125a68:	e8 43 a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a6d:	e8 4e 6f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125a72:	89 c2                	mov    %eax,%edx
f0125a74:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125a7a:	29 c2                	sub    %eax,%edx
f0125a7c:	89 d0                	mov    %edx,%eax
f0125a7e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125a83:	74 17                	je     f0125a9c <test_kfreeall+0xb0f>
f0125a85:	83 ec 04             	sub    $0x4,%esp
f0125a88:	68 78 99 13 f0       	push   $0xf0139978
f0125a8d:	68 6c 0a 00 00       	push   $0xa6c
f0125a92:	68 ee 91 13 f0       	push   $0xf01391ee
f0125a97:	e8 14 a7 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0125a9c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125aa2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125aa5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125aac:	eb 1e                	jmp    f0125acc <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125aae:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125ab4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125ab7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125aba:	01 c8                	add    %ecx,%eax
f0125abc:	8a 00                	mov    (%eax),%al
f0125abe:	0f be c0             	movsbl %al,%eax
f0125ac1:	01 d0                	add    %edx,%eax
f0125ac3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125ac9:	ff 45 f4             	incl   -0xc(%ebp)
f0125acc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125ad2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ad5:	7f d7                	jg     f0125aae <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125ad7:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125add:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125ae3:	01 c0                	add    %eax,%eax
f0125ae5:	39 c2                	cmp    %eax,%edx
f0125ae7:	74 17                	je     f0125b00 <test_kfreeall+0xb73>
f0125ae9:	83 ec 04             	sub    $0x4,%esp
f0125aec:	68 d4 99 13 f0       	push   $0xf01399d4
f0125af1:	68 78 0a 00 00       	push   $0xa78
f0125af6:	68 ee 91 13 f0       	push   $0xf01391ee
f0125afb:	e8 b0 a6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125b00:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125b06:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125b09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b10:	eb 1e                	jmp    f0125b30 <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125b12:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125b1b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b1e:	01 c8                	add    %ecx,%eax
f0125b20:	8a 00                	mov    (%eax),%al
f0125b22:	0f be c0             	movsbl %al,%eax
f0125b25:	01 d0                	add    %edx,%eax
f0125b27:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125b2d:	ff 45 f4             	incl   -0xc(%ebp)
f0125b30:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b39:	7f d7                	jg     f0125b12 <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0125b3b:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b41:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b47:	89 c1                	mov    %eax,%ecx
f0125b49:	01 c9                	add    %ecx,%ecx
f0125b4b:	01 c8                	add    %ecx,%eax
f0125b4d:	39 c2                	cmp    %eax,%edx
f0125b4f:	74 17                	je     f0125b68 <test_kfreeall+0xbdb>
f0125b51:	83 ec 04             	sub    $0x4,%esp
f0125b54:	68 d4 99 13 f0       	push   $0xf01399d4
f0125b59:	68 80 0a 00 00       	push   $0xa80
f0125b5e:	68 ee 91 13 f0       	push   $0xf01391ee
f0125b63:	e8 48 a6 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125b68:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125b6e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125b71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b78:	eb 1e                	jmp    f0125b98 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125b7a:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0125b80:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125b83:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b86:	01 c8                	add    %ecx,%eax
f0125b88:	8a 00                	mov    (%eax),%al
f0125b8a:	0f be c0             	movsbl %al,%eax
f0125b8d:	01 d0                	add    %edx,%eax
f0125b8f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125b95:	ff 45 f4             	incl   -0xc(%ebp)
f0125b98:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b9e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ba1:	7f d7                	jg     f0125b7a <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125ba3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125ba9:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125baf:	c1 e2 02             	shl    $0x2,%edx
f0125bb2:	39 d0                	cmp    %edx,%eax
f0125bb4:	74 17                	je     f0125bcd <test_kfreeall+0xc40>
f0125bb6:	83 ec 04             	sub    $0x4,%esp
f0125bb9:	68 d4 99 13 f0       	push   $0xf01399d4
f0125bbe:	68 88 0a 00 00       	push   $0xa88
f0125bc3:	68 ee 91 13 f0       	push   $0xf01391ee
f0125bc8:	e8 e3 a5 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0125bcd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125bd3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125bd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125bdd:	eb 1e                	jmp    f0125bfd <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125bdf:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125be5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125be8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125beb:	01 c8                	add    %ecx,%eax
f0125bed:	8a 00                	mov    (%eax),%al
f0125bef:	0f be c0             	movsbl %al,%eax
f0125bf2:	01 d0                	add    %edx,%eax
f0125bf4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125bfa:	ff 45 f4             	incl   -0xc(%ebp)
f0125bfd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125c03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125c06:	7f d7                	jg     f0125bdf <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0125c08:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125c0e:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125c14:	89 d0                	mov    %edx,%eax
f0125c16:	c1 e0 02             	shl    $0x2,%eax
f0125c19:	01 d0                	add    %edx,%eax
f0125c1b:	39 c1                	cmp    %eax,%ecx
f0125c1d:	74 17                	je     f0125c36 <test_kfreeall+0xca9>
f0125c1f:	83 ec 04             	sub    $0x4,%esp
f0125c22:	68 d4 99 13 f0       	push   $0xf01399d4
f0125c27:	68 90 0a 00 00       	push   $0xa90
f0125c2c:	68 ee 91 13 f0       	push   $0xf01391ee
f0125c31:	e8 7a a5 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125c36:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c3c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125c3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c46:	eb 1e                	jmp    f0125c66 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f0125c48:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0125c4e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125c51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c54:	01 c8                	add    %ecx,%eax
f0125c56:	8a 00                	mov    (%eax),%al
f0125c58:	0f be c0             	movsbl %al,%eax
f0125c5b:	01 d0                	add    %edx,%eax
f0125c5d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125c63:	ff 45 f4             	incl   -0xc(%ebp)
f0125c66:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125c6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125c6f:	7f d7                	jg     f0125c48 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0125c71:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125c77:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0125c7d:	89 d0                	mov    %edx,%eax
f0125c7f:	01 c0                	add    %eax,%eax
f0125c81:	01 d0                	add    %edx,%eax
f0125c83:	01 c0                	add    %eax,%eax
f0125c85:	01 d0                	add    %edx,%eax
f0125c87:	39 c1                	cmp    %eax,%ecx
f0125c89:	74 17                	je     f0125ca2 <test_kfreeall+0xd15>
f0125c8b:	83 ec 04             	sub    $0x4,%esp
f0125c8e:	68 d4 99 13 f0       	push   $0xf01399d4
f0125c93:	68 98 0a 00 00       	push   $0xa98
f0125c98:	68 ee 91 13 f0       	push   $0xf01391ee
f0125c9d:	e8 0e a5 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125ca2:	e8 19 6d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125ca7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125caa:	e8 b7 e9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125caf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125cb2:	83 ec 0c             	sub    $0xc,%esp
f0125cb5:	68 00 50 00 00       	push   $0x5000
f0125cba:	e8 82 22 fe ff       	call   f0107f41 <kmalloc>
f0125cbf:	83 c4 10             	add    $0x10,%esp
f0125cc2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125cc8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125cce:	89 c1                	mov    %eax,%ecx
f0125cd0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125cd7:	10 00 00 
f0125cda:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125cdf:	0f b6 d0             	movzbl %al,%edx
f0125ce2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125ce8:	01 d0                	add    %edx,%eax
f0125cea:	48                   	dec    %eax
f0125ceb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125cf1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125cf7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cfc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d02:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d08:	29 d0                	sub    %edx,%eax
f0125d0a:	89 c3                	mov    %eax,%ebx
f0125d0c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125d13:	10 00 00 
f0125d16:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125d1b:	0f b6 c0             	movzbl %al,%eax
f0125d1e:	c1 e0 04             	shl    $0x4,%eax
f0125d21:	89 c2                	mov    %eax,%edx
f0125d23:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d29:	01 d0                	add    %edx,%eax
f0125d2b:	48                   	dec    %eax
f0125d2c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125d32:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d38:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d3d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d43:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d49:	29 d0                	sub    %edx,%eax
f0125d4b:	01 d8                	add    %ebx,%eax
f0125d4d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125d52:	39 c1                	cmp    %eax,%ecx
f0125d54:	74 17                	je     f0125d6d <test_kfreeall+0xde0>
f0125d56:	83 ec 04             	sub    $0x4,%esp
f0125d59:	68 d4 92 13 f0       	push   $0xf01392d4
f0125d5e:	68 a1 0a 00 00       	push   $0xaa1
f0125d63:	68 ee 91 13 f0       	push   $0xf01391ee
f0125d68:	e8 43 a4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d6d:	e8 f4 e8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125d72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125d75:	74 17                	je     f0125d8e <test_kfreeall+0xe01>
f0125d77:	83 ec 04             	sub    $0x4,%esp
f0125d7a:	68 08 92 13 f0       	push   $0xf0139208
f0125d7f:	68 a2 0a 00 00       	push   $0xaa2
f0125d84:	68 ee 91 13 f0       	push   $0xf01391ee
f0125d89:	e8 22 a4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125d8e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125d91:	e8 2a 6c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125d96:	29 c3                	sub    %eax,%ebx
f0125d98:	89 d8                	mov    %ebx,%eax
f0125d9a:	83 f8 05             	cmp    $0x5,%eax
f0125d9d:	74 17                	je     f0125db6 <test_kfreeall+0xe29>
f0125d9f:	83 ec 04             	sub    $0x4,%esp
f0125da2:	68 70 92 13 f0       	push   $0xf0139270
f0125da7:	68 a3 0a 00 00       	push   $0xaa3
f0125dac:	68 ee 91 13 f0       	push   $0xf01391ee
f0125db1:	e8 fa a3 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125db6:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125dbd:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125dc0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125dc6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125dc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125dd0:	eb 0e                	jmp    f0125de0 <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125dd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125dd5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125dd8:	01 d0                	add    %edx,%eax
f0125dda:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125ddd:	ff 45 f4             	incl   -0xc(%ebp)
f0125de0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125de6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125de9:	7f e7                	jg     f0125dd2 <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125deb:	e8 d0 6b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125df0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125df3:	e8 6e e8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125df8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0125dfb:	83 ec 0c             	sub    $0xc,%esp
f0125dfe:	68 00 00 10 00       	push   $0x100000
f0125e03:	e8 39 21 fe ff       	call   f0107f41 <kmalloc>
f0125e08:	83 c4 10             	add    $0x10,%esp
f0125e0b:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e11:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125e17:	89 c1                	mov    %eax,%ecx
f0125e19:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125e20:	10 00 00 
f0125e23:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125e28:	0f b6 d0             	movzbl %al,%edx
f0125e2b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125e31:	01 d0                	add    %edx,%eax
f0125e33:	48                   	dec    %eax
f0125e34:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125e3a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e40:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e45:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125e4b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e51:	29 d0                	sub    %edx,%eax
f0125e53:	89 c3                	mov    %eax,%ebx
f0125e55:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125e5c:	10 00 00 
f0125e5f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125e64:	0f b6 c0             	movzbl %al,%eax
f0125e67:	c1 e0 04             	shl    $0x4,%eax
f0125e6a:	89 c2                	mov    %eax,%edx
f0125e6c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125e72:	01 d0                	add    %edx,%eax
f0125e74:	48                   	dec    %eax
f0125e75:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125e7b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e81:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e86:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125e8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e92:	29 d0                	sub    %edx,%eax
f0125e94:	01 d8                	add    %ebx,%eax
f0125e96:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0125e9b:	39 c1                	cmp    %eax,%ecx
f0125e9d:	74 17                	je     f0125eb6 <test_kfreeall+0xf29>
f0125e9f:	83 ec 04             	sub    $0x4,%esp
f0125ea2:	68 d4 92 13 f0       	push   $0xf01392d4
f0125ea7:	68 af 0a 00 00       	push   $0xaaf
f0125eac:	68 ee 91 13 f0       	push   $0xf01391ee
f0125eb1:	e8 fa a2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125eb6:	e8 ab e7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125ebb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ebe:	74 17                	je     f0125ed7 <test_kfreeall+0xf4a>
f0125ec0:	83 ec 04             	sub    $0x4,%esp
f0125ec3:	68 08 92 13 f0       	push   $0xf0139208
f0125ec8:	68 b0 0a 00 00       	push   $0xab0
f0125ecd:	68 ee 91 13 f0       	push   $0xf01391ee
f0125ed2:	e8 d9 a2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ed7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125eda:	e8 e1 6a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125edf:	29 c3                	sub    %eax,%ebx
f0125ee1:	89 d8                	mov    %ebx,%eax
f0125ee3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125ee8:	74 17                	je     f0125f01 <test_kfreeall+0xf74>
f0125eea:	83 ec 04             	sub    $0x4,%esp
f0125eed:	68 70 92 13 f0       	push   $0xf0139270
f0125ef2:	68 b1 0a 00 00       	push   $0xab1
f0125ef7:	68 ee 91 13 f0       	push   $0xf01391ee
f0125efc:	e8 af a2 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0125f01:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0125f08:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0125f0b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125f11:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0125f14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125f1b:	eb 0e                	jmp    f0125f2b <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f0125f1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125f20:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125f23:	01 d0                	add    %edx,%eax
f0125f25:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0125f28:	ff 45 f4             	incl   -0xc(%ebp)
f0125f2b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125f31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125f34:	7f e7                	jg     f0125f1d <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0125f36:	e8 85 6a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125f3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f3e:	e8 23 e7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125f43:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0125f46:	e8 5e 20 fe ff       	call   f0107fa9 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f4b:	e8 16 e7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0125f50:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f53:	74 17                	je     f0125f6c <test_kfreeall+0xfdf>
f0125f55:	83 ec 04             	sub    $0x4,%esp
f0125f58:	68 08 92 13 f0       	push   $0xf0139208
f0125f5d:	68 c1 0a 00 00       	push   $0xac1
f0125f62:	68 ee 91 13 f0       	push   $0xf01391ee
f0125f67:	e8 44 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0125f6c:	e8 4f 6a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0125f71:	89 c2                	mov    %eax,%edx
f0125f73:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f76:	89 d1                	mov    %edx,%ecx
f0125f78:	29 c1                	sub    %eax,%ecx
f0125f7a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125f81:	10 00 00 
f0125f84:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125f89:	0f b6 d0             	movzbl %al,%edx
f0125f8c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125f92:	01 d0                	add    %edx,%eax
f0125f94:	48                   	dec    %eax
f0125f95:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125f9b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fa6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125fac:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fb2:	29 d0                	sub    %edx,%eax
f0125fb4:	89 c3                	mov    %eax,%ebx
f0125fb6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125fbd:	10 00 00 
f0125fc0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125fc5:	0f b6 c0             	movzbl %al,%eax
f0125fc8:	c1 e0 04             	shl    $0x4,%eax
f0125fcb:	89 c2                	mov    %eax,%edx
f0125fcd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125fd3:	01 d0                	add    %edx,%eax
f0125fd5:	48                   	dec    %eax
f0125fd6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125fdc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125fe2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fe7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125fed:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125ff3:	29 d0                	sub    %edx,%eax
f0125ff5:	01 d8                	add    %ebx,%eax
f0125ff7:	05 00 40 00 00       	add    $0x4000,%eax
f0125ffc:	c1 e8 0c             	shr    $0xc,%eax
f0125fff:	05 0d 04 00 00       	add    $0x40d,%eax
f0126004:	39 c1                	cmp    %eax,%ecx
f0126006:	74 17                	je     f012601f <test_kfreeall+0x1092>
f0126008:	83 ec 04             	sub    $0x4,%esp
f012600b:	68 78 99 13 f0       	push   $0xf0139978
f0126010:	68 c2 0a 00 00       	push   $0xac2
f0126015:	68 ee 91 13 f0       	push   $0xf01391ee
f012601a:	e8 91 a1 fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012601f:	83 ec 0c             	sub    $0xc,%esp
f0126022:	6a 03                	push   $0x3
f0126024:	e8 32 6e fe ff       	call   f010ce5b <sys_bypassPageFault>
f0126029:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012602c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126033:	e9 82 00 00 00       	jmp    f01260ba <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0126038:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012603b:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0126042:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0126045:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126048:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012604b:	e8 f9 6d fe ff       	call   f010ce49 <sys_rcr2>
f0126050:	89 c2                	mov    %eax,%edx
f0126052:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126055:	39 c2                	cmp    %eax,%edx
f0126057:	74 17                	je     f0126070 <test_kfreeall+0x10e3>
f0126059:	83 ec 04             	sub    $0x4,%esp
f012605c:	68 54 9a 13 f0       	push   $0xf0139a54
f0126061:	68 d0 0a 00 00       	push   $0xad0
f0126066:	68 ee 91 13 f0       	push   $0xf01391ee
f012606b:	e8 40 a1 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0126070:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126073:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f012607a:	89 c2                	mov    %eax,%edx
f012607c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012607f:	01 d0                	add    %edx,%eax
f0126081:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126084:	e8 c0 6d fe ff       	call   f010ce49 <sys_rcr2>
f0126089:	89 c2                	mov    %eax,%edx
f012608b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012608e:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0126095:	89 c1                	mov    %eax,%ecx
f0126097:	8b 45 98             	mov    -0x68(%ebp),%eax
f012609a:	01 c8                	add    %ecx,%eax
f012609c:	39 c2                	cmp    %eax,%edx
f012609e:	74 17                	je     f01260b7 <test_kfreeall+0x112a>
f01260a0:	83 ec 04             	sub    $0x4,%esp
f01260a3:	68 54 9a 13 f0       	push   $0xf0139a54
f01260a8:	68 d2 0a 00 00       	push   $0xad2
f01260ad:	68 ee 91 13 f0       	push   $0xf01391ee
f01260b2:	e8 f9 a0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01260b7:	ff 45 f4             	incl   -0xc(%ebp)
f01260ba:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01260be:	0f 8e 74 ff ff ff    	jle    f0126038 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01260c4:	83 ec 0c             	sub    $0xc,%esp
f01260c7:	6a 00                	push   $0x0
f01260c9:	e8 8d 6d fe ff       	call   f010ce5b <sys_bypassPageFault>
f01260ce:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01260d1:	e8 ea 68 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01260d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01260d9:	e8 88 e5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01260de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01260e1:	83 ec 0c             	sub    $0xc,%esp
f01260e4:	68 00 00 40 00       	push   $0x400000
f01260e9:	e8 53 1e fe ff       	call   f0107f41 <kmalloc>
f01260ee:	83 c4 10             	add    $0x10,%esp
f01260f1:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01260f7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01260fd:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0126102:	74 17                	je     f012611b <test_kfreeall+0x118e>
f0126104:	83 ec 04             	sub    $0x4,%esp
f0126107:	68 f8 9e 13 f0       	push   $0xf0139ef8
f012610c:	68 de 0a 00 00       	push   $0xade
f0126111:	68 ee 91 13 f0       	push   $0xf01391ee
f0126116:	e8 95 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012611b:	e8 46 e5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126120:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126123:	74 17                	je     f012613c <test_kfreeall+0x11af>
f0126125:	83 ec 04             	sub    $0x4,%esp
f0126128:	68 08 92 13 f0       	push   $0xf0139208
f012612d:	68 df 0a 00 00       	push   $0xadf
f0126132:	68 ee 91 13 f0       	push   $0xf01391ee
f0126137:	e8 74 a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012613c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012613f:	e8 7c 68 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126144:	29 c3                	sub    %eax,%ebx
f0126146:	89 d8                	mov    %ebx,%eax
f0126148:	3d 00 04 00 00       	cmp    $0x400,%eax
f012614d:	74 17                	je     f0126166 <test_kfreeall+0x11d9>
f012614f:	83 ec 04             	sub    $0x4,%esp
f0126152:	68 70 92 13 f0       	push   $0xf0139270
f0126157:	68 e0 0a 00 00       	push   $0xae0
f012615c:	68 ee 91 13 f0       	push   $0xf01391ee
f0126161:	e8 4a a0 fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126166:	e8 55 68 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012616b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012616e:	e8 f3 e4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126173:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126176:	83 ec 0c             	sub    $0xc,%esp
f0126179:	68 00 30 00 00       	push   $0x3000
f012617e:	e8 be 1d fe ff       	call   f0107f41 <kmalloc>
f0126183:	83 c4 10             	add    $0x10,%esp
f0126186:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012618c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126192:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126197:	74 17                	je     f01261b0 <test_kfreeall+0x1223>
f0126199:	83 ec 04             	sub    $0x4,%esp
f012619c:	68 f8 9e 13 f0       	push   $0xf0139ef8
f01261a1:	68 e6 0a 00 00       	push   $0xae6
f01261a6:	68 ee 91 13 f0       	push   $0xf01391ee
f01261ab:	e8 00 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261b0:	e8 b1 e4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01261b5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01261b8:	74 17                	je     f01261d1 <test_kfreeall+0x1244>
f01261ba:	83 ec 04             	sub    $0x4,%esp
f01261bd:	68 08 92 13 f0       	push   $0xf0139208
f01261c2:	68 e7 0a 00 00       	push   $0xae7
f01261c7:	68 ee 91 13 f0       	push   $0xf01391ee
f01261cc:	e8 df 9f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01261d1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01261d4:	e8 e7 67 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01261d9:	29 c3                	sub    %eax,%ebx
f01261db:	89 d8                	mov    %ebx,%eax
f01261dd:	83 f8 03             	cmp    $0x3,%eax
f01261e0:	74 17                	je     f01261f9 <test_kfreeall+0x126c>
f01261e2:	83 ec 04             	sub    $0x4,%esp
f01261e5:	68 70 92 13 f0       	push   $0xf0139270
f01261ea:	68 e8 0a 00 00       	push   $0xae8
f01261ef:	68 ee 91 13 f0       	push   $0xf01391ee
f01261f4:	e8 b7 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01261f9:	e8 c2 67 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01261fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126201:	e8 60 e4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126206:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126209:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012620f:	83 ec 0c             	sub    $0xc,%esp
f0126212:	50                   	push   %eax
f0126213:	e8 43 1d fe ff       	call   f0107f5b <kfree>
f0126218:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012621b:	e8 46 e4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126220:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126223:	74 17                	je     f012623c <test_kfreeall+0x12af>
f0126225:	83 ec 04             	sub    $0x4,%esp
f0126228:	68 08 92 13 f0       	push   $0xf0139208
f012622d:	68 f2 0a 00 00       	push   $0xaf2
f0126232:	68 ee 91 13 f0       	push   $0xf01391ee
f0126237:	e8 74 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012623c:	e8 7f 67 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126241:	89 c2                	mov    %eax,%edx
f0126243:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126246:	29 c2                	sub    %eax,%edx
f0126248:	89 d0                	mov    %edx,%eax
f012624a:	83 f8 03             	cmp    $0x3,%eax
f012624d:	74 17                	je     f0126266 <test_kfreeall+0x12d9>
f012624f:	83 ec 04             	sub    $0x4,%esp
f0126252:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0126257:	68 f3 0a 00 00       	push   $0xaf3
f012625c:	68 ee 91 13 f0       	push   $0xf01391ee
f0126261:	e8 4a 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126266:	e8 55 67 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012626b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012626e:	e8 f3 e3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126273:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126276:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012627c:	83 ec 0c             	sub    $0xc,%esp
f012627f:	50                   	push   %eax
f0126280:	e8 d6 1c fe ff       	call   f0107f5b <kfree>
f0126285:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126288:	e8 d9 e3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012628d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126290:	74 17                	je     f01262a9 <test_kfreeall+0x131c>
f0126292:	83 ec 04             	sub    $0x4,%esp
f0126295:	68 08 92 13 f0       	push   $0xf0139208
f012629a:	68 fc 0a 00 00       	push   $0xafc
f012629f:	68 ee 91 13 f0       	push   $0xf01391ee
f01262a4:	e8 07 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01262a9:	e8 12 67 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01262ae:	89 c2                	mov    %eax,%edx
f01262b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01262b3:	39 c2                	cmp    %eax,%edx
f01262b5:	74 17                	je     f01262ce <test_kfreeall+0x1341>
f01262b7:	83 ec 04             	sub    $0x4,%esp
f01262ba:	68 a0 9a 13 f0       	push   $0xf0139aa0
f01262bf:	68 fd 0a 00 00       	push   $0xafd
f01262c4:	68 ee 91 13 f0       	push   $0xf01391ee
f01262c9:	e8 e2 9e fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01262ce:	e8 ed 66 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01262d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262d6:	e8 8b e3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01262db:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01262de:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01262e4:	83 ec 0c             	sub    $0xc,%esp
f01262e7:	50                   	push   %eax
f01262e8:	e8 6e 1c fe ff       	call   f0107f5b <kfree>
f01262ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262f0:	e8 71 e3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01262f5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262f8:	74 17                	je     f0126311 <test_kfreeall+0x1384>
f01262fa:	83 ec 04             	sub    $0x4,%esp
f01262fd:	68 08 92 13 f0       	push   $0xf0139208
f0126302:	68 03 0b 00 00       	push   $0xb03
f0126307:	68 ee 91 13 f0       	push   $0xf01391ee
f012630c:	e8 9f 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126311:	e8 aa 66 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126316:	89 c2                	mov    %eax,%edx
f0126318:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012631b:	39 c2                	cmp    %eax,%edx
f012631d:	74 17                	je     f0126336 <test_kfreeall+0x13a9>
f012631f:	83 ec 04             	sub    $0x4,%esp
f0126322:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0126327:	68 04 0b 00 00       	push   $0xb04
f012632c:	68 ee 91 13 f0       	push   $0xf01391ee
f0126331:	e8 7a 9e fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126336:	e8 85 66 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012633b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012633e:	e8 23 e3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126343:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126346:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012634c:	83 ec 0c             	sub    $0xc,%esp
f012634f:	50                   	push   %eax
f0126350:	e8 06 1c fe ff       	call   f0107f5b <kfree>
f0126355:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126358:	e8 09 e3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012635d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126360:	74 17                	je     f0126379 <test_kfreeall+0x13ec>
f0126362:	83 ec 04             	sub    $0x4,%esp
f0126365:	68 08 92 13 f0       	push   $0xf0139208
f012636a:	68 0a 0b 00 00       	push   $0xb0a
f012636f:	68 ee 91 13 f0       	push   $0xf01391ee
f0126374:	e8 37 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126379:	e8 42 66 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012637e:	89 c2                	mov    %eax,%edx
f0126380:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126383:	39 c2                	cmp    %eax,%edx
f0126385:	74 17                	je     f012639e <test_kfreeall+0x1411>
f0126387:	83 ec 04             	sub    $0x4,%esp
f012638a:	68 a0 9a 13 f0       	push   $0xf0139aa0
f012638f:	68 0b 0b 00 00       	push   $0xb0b
f0126394:	68 ee 91 13 f0       	push   $0xf01391ee
f0126399:	e8 12 9e fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012639e:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01263a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01263ac:	eb 48                	jmp    f01263f6 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01263ae:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01263b1:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01263b6:	83 ec 04             	sub    $0x4,%esp
f01263b9:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f01263bf:	51                   	push   %ecx
f01263c0:	52                   	push   %edx
f01263c1:	50                   	push   %eax
f01263c2:	e8 02 11 fe ff       	call   f01074c9 <get_page_table>
f01263c7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01263ca:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01263d0:	85 c0                	test   %eax,%eax
f01263d2:	75 17                	jne    f01263eb <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01263d4:	83 ec 04             	sub    $0x4,%esp
f01263d7:	68 f0 9a 13 f0       	push   $0xf0139af0
f01263dc:	68 18 0b 00 00       	push   $0xb18
f01263e1:	68 ee 91 13 f0       	push   $0xf01391ee
f01263e6:	e8 c5 9d fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01263eb:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01263f2:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01263f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01263fa:	78 b2                	js     f01263ae <test_kfreeall+0x1421>
f01263fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126400:	7f 09                	jg     f012640b <test_kfreeall+0x147e>
f0126402:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126409:	76 a3                	jbe    f01263ae <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012640b:	83 ec 0c             	sub    $0xc,%esp
f012640e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126413:	e8 19 aa fd ff       	call   f0100e31 <cprintf>
f0126418:	83 c4 10             	add    $0x10,%esp

	return 1;
f012641b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0126420:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126423:	5b                   	pop    %ebx
f0126424:	5f                   	pop    %edi
f0126425:	5d                   	pop    %ebp
f0126426:	c3                   	ret    

f0126427 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126427:	55                   	push   %ebp
f0126428:	89 e5                	mov    %esp,%ebp
f012642a:	57                   	push   %edi
f012642b:	53                   	push   %ebx
f012642c:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f0126432:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126436:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012643a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126440:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126446:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012644d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126454:	e8 67 65 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126459:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012645c:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f0126462:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126467:	b8 00 00 00 00       	mov    $0x0,%eax
f012646c:	89 d7                	mov    %edx,%edi
f012646e:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126470:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126476:	b9 14 00 00 00       	mov    $0x14,%ecx
f012647b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126480:	89 d7                	mov    %edx,%edi
f0126482:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126484:	e8 37 65 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126489:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012648c:	e8 d5 e1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126491:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126494:	83 ec 0c             	sub    $0xc,%esp
f0126497:	68 00 fc 1f 00       	push   $0x1ffc00
f012649c:	e8 a0 1a fe ff       	call   f0107f41 <kmalloc>
f01264a1:	83 c4 10             	add    $0x10,%esp
f01264a4:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264aa:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01264b0:	89 c1                	mov    %eax,%ecx
f01264b2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01264b9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01264be:	0f b6 d0             	movzbl %al,%edx
f01264c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01264c4:	01 d0                	add    %edx,%eax
f01264c6:	48                   	dec    %eax
f01264c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01264ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01264d2:	f7 75 d4             	divl   -0x2c(%ebp)
f01264d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264d8:	29 d0                	sub    %edx,%eax
f01264da:	89 c3                	mov    %eax,%ebx
f01264dc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01264e3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01264e8:	0f b6 c0             	movzbl %al,%eax
f01264eb:	c1 e0 04             	shl    $0x4,%eax
f01264ee:	89 c2                	mov    %eax,%edx
f01264f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01264f3:	01 d0                	add    %edx,%eax
f01264f5:	48                   	dec    %eax
f01264f6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01264f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01264fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0126501:	f7 75 cc             	divl   -0x34(%ebp)
f0126504:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126507:	29 d0                	sub    %edx,%eax
f0126509:	01 d8                	add    %ebx,%eax
f012650b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126510:	39 c1                	cmp    %eax,%ecx
f0126512:	74 17                	je     f012652b <test_kexpand+0x104>
f0126514:	83 ec 04             	sub    $0x4,%esp
f0126517:	68 d4 92 13 f0       	push   $0xf01392d4
f012651c:	68 43 0b 00 00       	push   $0xb43
f0126521:	68 ee 91 13 f0       	push   $0xf01391ee
f0126526:	e8 85 9c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012652b:	e8 36 e1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126530:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126533:	74 17                	je     f012654c <test_kexpand+0x125>
f0126535:	83 ec 04             	sub    $0x4,%esp
f0126538:	68 08 92 13 f0       	push   $0xf0139208
f012653d:	68 44 0b 00 00       	push   $0xb44
f0126542:	68 ee 91 13 f0       	push   $0xf01391ee
f0126547:	e8 64 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012654c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012654f:	e8 6c 64 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126554:	29 c3                	sub    %eax,%ebx
f0126556:	89 d8                	mov    %ebx,%eax
f0126558:	3d 00 02 00 00       	cmp    $0x200,%eax
f012655d:	74 17                	je     f0126576 <test_kexpand+0x14f>
f012655f:	83 ec 04             	sub    $0x4,%esp
f0126562:	68 70 92 13 f0       	push   $0xf0139270
f0126567:	68 45 0b 00 00       	push   $0xb45
f012656c:	68 ee 91 13 f0       	push   $0xf01391ee
f0126571:	e8 3a 9c fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126576:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f012657d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126580:	e8 3b 64 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126585:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126588:	e8 d9 e0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012658d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126590:	83 ec 0c             	sub    $0xc,%esp
f0126593:	68 00 fc 1f 00       	push   $0x1ffc00
f0126598:	e8 a4 19 fe ff       	call   f0107f41 <kmalloc>
f012659d:	83 c4 10             	add    $0x10,%esp
f01265a0:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01265a6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01265ac:	89 c1                	mov    %eax,%ecx
f01265ae:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01265b5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01265ba:	0f b6 d0             	movzbl %al,%edx
f01265bd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01265c0:	01 d0                	add    %edx,%eax
f01265c2:	48                   	dec    %eax
f01265c3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01265c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01265c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01265ce:	f7 75 c4             	divl   -0x3c(%ebp)
f01265d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01265d4:	29 d0                	sub    %edx,%eax
f01265d6:	89 c3                	mov    %eax,%ebx
f01265d8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01265df:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01265e4:	0f b6 c0             	movzbl %al,%eax
f01265e7:	c1 e0 04             	shl    $0x4,%eax
f01265ea:	89 c2                	mov    %eax,%edx
f01265ec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01265ef:	01 d0                	add    %edx,%eax
f01265f1:	48                   	dec    %eax
f01265f2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01265f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01265f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01265fd:	f7 75 bc             	divl   -0x44(%ebp)
f0126600:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126603:	29 d0                	sub    %edx,%eax
f0126605:	01 d8                	add    %ebx,%eax
f0126607:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012660c:	39 c1                	cmp    %eax,%ecx
f012660e:	74 17                	je     f0126627 <test_kexpand+0x200>
f0126610:	83 ec 04             	sub    $0x4,%esp
f0126613:	68 d4 92 13 f0       	push   $0xf01392d4
f0126618:	68 4c 0b 00 00       	push   $0xb4c
f012661d:	68 ee 91 13 f0       	push   $0xf01391ee
f0126622:	e8 89 9b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126627:	e8 3a e0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012662c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012662f:	74 17                	je     f0126648 <test_kexpand+0x221>
f0126631:	83 ec 04             	sub    $0x4,%esp
f0126634:	68 08 92 13 f0       	push   $0xf0139208
f0126639:	68 4d 0b 00 00       	push   $0xb4d
f012663e:	68 ee 91 13 f0       	push   $0xf01391ee
f0126643:	e8 68 9b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126648:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012664b:	e8 70 63 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126650:	29 c3                	sub    %eax,%ebx
f0126652:	89 d8                	mov    %ebx,%eax
f0126654:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126659:	74 17                	je     f0126672 <test_kexpand+0x24b>
f012665b:	83 ec 04             	sub    $0x4,%esp
f012665e:	68 70 92 13 f0       	push   $0xf0139270
f0126663:	68 4e 0b 00 00       	push   $0xb4e
f0126668:	68 ee 91 13 f0       	push   $0xf01391ee
f012666d:	e8 3e 9b fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126672:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126679:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012667c:	e8 3f 63 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126681:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126684:	e8 dd df fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126689:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012668c:	83 ec 0c             	sub    $0xc,%esp
f012668f:	68 00 08 00 00       	push   $0x800
f0126694:	e8 a8 18 fe ff       	call   f0107f41 <kmalloc>
f0126699:	83 c4 10             	add    $0x10,%esp
f012669c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266a2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01266a8:	89 c1                	mov    %eax,%ecx
f01266aa:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01266b1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01266b6:	0f b6 d0             	movzbl %al,%edx
f01266b9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01266bc:	01 d0                	add    %edx,%eax
f01266be:	48                   	dec    %eax
f01266bf:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01266c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01266c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01266ca:	f7 75 b4             	divl   -0x4c(%ebp)
f01266cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01266d0:	29 d0                	sub    %edx,%eax
f01266d2:	89 c3                	mov    %eax,%ebx
f01266d4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01266db:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01266e0:	0f b6 c0             	movzbl %al,%eax
f01266e3:	c1 e0 04             	shl    $0x4,%eax
f01266e6:	89 c2                	mov    %eax,%edx
f01266e8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01266eb:	01 d0                	add    %edx,%eax
f01266ed:	48                   	dec    %eax
f01266ee:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01266f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01266f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01266f9:	f7 75 ac             	divl   -0x54(%ebp)
f01266fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01266ff:	29 d0                	sub    %edx,%eax
f0126701:	01 d8                	add    %ebx,%eax
f0126703:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126708:	39 c1                	cmp    %eax,%ecx
f012670a:	74 17                	je     f0126723 <test_kexpand+0x2fc>
f012670c:	83 ec 04             	sub    $0x4,%esp
f012670f:	68 d4 92 13 f0       	push   $0xf01392d4
f0126714:	68 55 0b 00 00       	push   $0xb55
f0126719:	68 ee 91 13 f0       	push   $0xf01391ee
f012671e:	e8 8d 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126723:	e8 3e df fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126728:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012672b:	74 17                	je     f0126744 <test_kexpand+0x31d>
f012672d:	83 ec 04             	sub    $0x4,%esp
f0126730:	68 08 92 13 f0       	push   $0xf0139208
f0126735:	68 56 0b 00 00       	push   $0xb56
f012673a:	68 ee 91 13 f0       	push   $0xf01391ee
f012673f:	e8 6c 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126744:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126747:	e8 74 62 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012674c:	29 c3                	sub    %eax,%ebx
f012674e:	89 d8                	mov    %ebx,%eax
f0126750:	83 f8 01             	cmp    $0x1,%eax
f0126753:	74 17                	je     f012676c <test_kexpand+0x345>
f0126755:	83 ec 04             	sub    $0x4,%esp
f0126758:	68 70 92 13 f0       	push   $0xf0139270
f012675d:	68 57 0b 00 00       	push   $0xb57
f0126762:	68 ee 91 13 f0       	push   $0xf01391ee
f0126767:	e8 44 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012676c:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126773:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126776:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012677c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012677f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126786:	eb 0e                	jmp    f0126796 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f0126788:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012678b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012678e:	01 d0                	add    %edx,%eax
f0126790:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126793:	ff 45 f4             	incl   -0xc(%ebp)
f0126796:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012679c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012679f:	7f e7                	jg     f0126788 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01267a1:	e8 1a 62 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01267a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267a9:	e8 b8 de fd ff       	call   f0104666 <pf_calculate_free_frames>
f01267ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01267b1:	83 ec 0c             	sub    $0xc,%esp
f01267b4:	68 00 08 00 00       	push   $0x800
f01267b9:	e8 83 17 fe ff       	call   f0107f41 <kmalloc>
f01267be:	83 c4 10             	add    $0x10,%esp
f01267c1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267c7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01267cd:	89 c1                	mov    %eax,%ecx
f01267cf:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01267d6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01267db:	0f b6 d0             	movzbl %al,%edx
f01267de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01267e1:	01 d0                	add    %edx,%eax
f01267e3:	48                   	dec    %eax
f01267e4:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01267e7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01267ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01267ef:	f7 75 a0             	divl   -0x60(%ebp)
f01267f2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01267f5:	29 d0                	sub    %edx,%eax
f01267f7:	89 c3                	mov    %eax,%ebx
f01267f9:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126800:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126805:	0f b6 c0             	movzbl %al,%eax
f0126808:	c1 e0 04             	shl    $0x4,%eax
f012680b:	89 c2                	mov    %eax,%edx
f012680d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126810:	01 d0                	add    %edx,%eax
f0126812:	48                   	dec    %eax
f0126813:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126816:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126819:	ba 00 00 00 00       	mov    $0x0,%edx
f012681e:	f7 75 98             	divl   -0x68(%ebp)
f0126821:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126824:	29 d0                	sub    %edx,%eax
f0126826:	01 d8                	add    %ebx,%eax
f0126828:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012682d:	39 c1                	cmp    %eax,%ecx
f012682f:	74 17                	je     f0126848 <test_kexpand+0x421>
f0126831:	83 ec 04             	sub    $0x4,%esp
f0126834:	68 d4 92 13 f0       	push   $0xf01392d4
f0126839:	68 63 0b 00 00       	push   $0xb63
f012683e:	68 ee 91 13 f0       	push   $0xf01391ee
f0126843:	e8 68 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126848:	e8 19 de fd ff       	call   f0104666 <pf_calculate_free_frames>
f012684d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126850:	74 17                	je     f0126869 <test_kexpand+0x442>
f0126852:	83 ec 04             	sub    $0x4,%esp
f0126855:	68 08 92 13 f0       	push   $0xf0139208
f012685a:	68 64 0b 00 00       	push   $0xb64
f012685f:	68 ee 91 13 f0       	push   $0xf01391ee
f0126864:	e8 47 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126869:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012686c:	e8 4f 61 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126871:	29 c3                	sub    %eax,%ebx
f0126873:	89 d8                	mov    %ebx,%eax
f0126875:	83 f8 01             	cmp    $0x1,%eax
f0126878:	74 17                	je     f0126891 <test_kexpand+0x46a>
f012687a:	83 ec 04             	sub    $0x4,%esp
f012687d:	68 70 92 13 f0       	push   $0xf0139270
f0126882:	68 65 0b 00 00       	push   $0xb65
f0126887:	68 ee 91 13 f0       	push   $0xf01391ee
f012688c:	e8 1f 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126891:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f0126898:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012689b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01268a1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01268a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268ab:	eb 0e                	jmp    f01268bb <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f01268ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01268b0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01268b3:	01 d0                	add    %edx,%eax
f01268b5:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01268b8:	ff 45 f4             	incl   -0xc(%ebp)
f01268bb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01268c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01268c4:	7f e7                	jg     f01268ad <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01268c6:	e8 f5 60 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01268cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01268ce:	e8 93 dd fd ff       	call   f0104666 <pf_calculate_free_frames>
f01268d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01268d6:	83 ec 0c             	sub    $0xc,%esp
f01268d9:	68 00 1c 00 00       	push   $0x1c00
f01268de:	e8 5e 16 fe ff       	call   f0107f41 <kmalloc>
f01268e3:	83 c4 10             	add    $0x10,%esp
f01268e6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01268ec:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01268f2:	89 c1                	mov    %eax,%ecx
f01268f4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01268fb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126900:	0f b6 d0             	movzbl %al,%edx
f0126903:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126906:	01 d0                	add    %edx,%eax
f0126908:	48                   	dec    %eax
f0126909:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012690c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012690f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126914:	f7 75 90             	divl   -0x70(%ebp)
f0126917:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012691a:	29 d0                	sub    %edx,%eax
f012691c:	89 c3                	mov    %eax,%ebx
f012691e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126925:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012692a:	0f b6 c0             	movzbl %al,%eax
f012692d:	c1 e0 04             	shl    $0x4,%eax
f0126930:	89 c2                	mov    %eax,%edx
f0126932:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126935:	01 d0                	add    %edx,%eax
f0126937:	48                   	dec    %eax
f0126938:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012693b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012693e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126943:	f7 75 88             	divl   -0x78(%ebp)
f0126946:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126949:	29 d0                	sub    %edx,%eax
f012694b:	01 d8                	add    %ebx,%eax
f012694d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126952:	39 c1                	cmp    %eax,%ecx
f0126954:	74 17                	je     f012696d <test_kexpand+0x546>
f0126956:	83 ec 04             	sub    $0x4,%esp
f0126959:	68 d4 92 13 f0       	push   $0xf01392d4
f012695e:	68 71 0b 00 00       	push   $0xb71
f0126963:	68 ee 91 13 f0       	push   $0xf01391ee
f0126968:	e8 43 98 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012696d:	e8 f4 dc fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126972:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126975:	74 17                	je     f012698e <test_kexpand+0x567>
f0126977:	83 ec 04             	sub    $0x4,%esp
f012697a:	68 08 92 13 f0       	push   $0xf0139208
f012697f:	68 72 0b 00 00       	push   $0xb72
f0126984:	68 ee 91 13 f0       	push   $0xf01391ee
f0126989:	e8 22 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012698e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126991:	e8 2a 60 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126996:	29 c3                	sub    %eax,%ebx
f0126998:	89 d8                	mov    %ebx,%eax
f012699a:	83 f8 02             	cmp    $0x2,%eax
f012699d:	74 17                	je     f01269b6 <test_kexpand+0x58f>
f012699f:	83 ec 04             	sub    $0x4,%esp
f01269a2:	68 70 92 13 f0       	push   $0xf0139270
f01269a7:	68 73 0b 00 00       	push   $0xb73
f01269ac:	68 ee 91 13 f0       	push   $0xf01391ee
f01269b1:	e8 fa 97 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01269b6:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f01269bd:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01269c0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01269c6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01269c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269d0:	eb 0e                	jmp    f01269e0 <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f01269d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01269d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01269d8:	01 d0                	add    %edx,%eax
f01269da:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01269dd:	ff 45 f4             	incl   -0xc(%ebp)
f01269e0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01269e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269e9:	7f e7                	jg     f01269d2 <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01269eb:	e8 d0 5f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01269f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269f3:	e8 6e dc fd ff       	call   f0104666 <pf_calculate_free_frames>
f01269f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01269fb:	83 ec 0c             	sub    $0xc,%esp
f01269fe:	68 00 fc 2f 00       	push   $0x2ffc00
f0126a03:	e8 39 15 fe ff       	call   f0107f41 <kmalloc>
f0126a08:	83 c4 10             	add    $0x10,%esp
f0126a0b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a11:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126a17:	89 c1                	mov    %eax,%ecx
f0126a19:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0126a20:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126a25:	0f b6 d0             	movzbl %al,%edx
f0126a28:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a2b:	01 d0                	add    %edx,%eax
f0126a2d:	48                   	dec    %eax
f0126a2e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0126a34:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a3f:	f7 75 80             	divl   -0x80(%ebp)
f0126a42:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a48:	29 d0                	sub    %edx,%eax
f0126a4a:	89 c3                	mov    %eax,%ebx
f0126a4c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0126a53:	10 00 00 
f0126a56:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126a5b:	0f b6 c0             	movzbl %al,%eax
f0126a5e:	c1 e0 04             	shl    $0x4,%eax
f0126a61:	89 c2                	mov    %eax,%edx
f0126a63:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126a69:	01 d0                	add    %edx,%eax
f0126a6b:	48                   	dec    %eax
f0126a6c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126a72:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126a78:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a7d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126a83:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126a89:	29 d0                	sub    %edx,%eax
f0126a8b:	01 d8                	add    %ebx,%eax
f0126a8d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126a92:	39 c1                	cmp    %eax,%ecx
f0126a94:	74 17                	je     f0126aad <test_kexpand+0x686>
f0126a96:	83 ec 04             	sub    $0x4,%esp
f0126a99:	68 d4 92 13 f0       	push   $0xf01392d4
f0126a9e:	68 7f 0b 00 00       	push   $0xb7f
f0126aa3:	68 ee 91 13 f0       	push   $0xf01391ee
f0126aa8:	e8 03 97 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126aad:	e8 b4 db fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126ab2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ab5:	74 17                	je     f0126ace <test_kexpand+0x6a7>
f0126ab7:	83 ec 04             	sub    $0x4,%esp
f0126aba:	68 08 92 13 f0       	push   $0xf0139208
f0126abf:	68 80 0b 00 00       	push   $0xb80
f0126ac4:	68 ee 91 13 f0       	push   $0xf01391ee
f0126ac9:	e8 e2 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ace:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ad1:	e8 ea 5e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126ad6:	29 c3                	sub    %eax,%ebx
f0126ad8:	89 d8                	mov    %ebx,%eax
f0126ada:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126adf:	74 17                	je     f0126af8 <test_kexpand+0x6d1>
f0126ae1:	83 ec 04             	sub    $0x4,%esp
f0126ae4:	68 70 92 13 f0       	push   $0xf0139270
f0126ae9:	68 81 0b 00 00       	push   $0xb81
f0126aee:	68 ee 91 13 f0       	push   $0xf01391ee
f0126af3:	e8 b8 96 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126af8:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126aff:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126b02:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126b08:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126b0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b12:	eb 0e                	jmp    f0126b22 <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126b14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b17:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126b1a:	01 d0                	add    %edx,%eax
f0126b1c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126b1f:	ff 45 f4             	incl   -0xc(%ebp)
f0126b22:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126b28:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b2b:	7f e7                	jg     f0126b14 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b2d:	e8 8e 5e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126b32:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b35:	e8 2c db fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126b3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0126b3d:	83 ec 0c             	sub    $0xc,%esp
f0126b40:	68 00 00 60 00       	push   $0x600000
f0126b45:	e8 f7 13 fe ff       	call   f0107f41 <kmalloc>
f0126b4a:	83 c4 10             	add    $0x10,%esp
f0126b4d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b53:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126b59:	89 c1                	mov    %eax,%ecx
f0126b5b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126b62:	10 00 00 
f0126b65:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126b6a:	0f b6 d0             	movzbl %al,%edx
f0126b6d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126b73:	01 d0                	add    %edx,%eax
f0126b75:	48                   	dec    %eax
f0126b76:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0126b7c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126b82:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b87:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0126b8d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126b93:	29 d0                	sub    %edx,%eax
f0126b95:	89 c3                	mov    %eax,%ebx
f0126b97:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0126b9e:	10 00 00 
f0126ba1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126ba6:	0f b6 c0             	movzbl %al,%eax
f0126ba9:	c1 e0 04             	shl    $0x4,%eax
f0126bac:	89 c2                	mov    %eax,%edx
f0126bae:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126bb4:	01 d0                	add    %edx,%eax
f0126bb6:	48                   	dec    %eax
f0126bb7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0126bbd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126bc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bc8:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126bce:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126bd4:	29 d0                	sub    %edx,%eax
f0126bd6:	01 d8                	add    %ebx,%eax
f0126bd8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126bdd:	39 c1                	cmp    %eax,%ecx
f0126bdf:	74 17                	je     f0126bf8 <test_kexpand+0x7d1>
f0126be1:	83 ec 04             	sub    $0x4,%esp
f0126be4:	68 d4 92 13 f0       	push   $0xf01392d4
f0126be9:	68 8d 0b 00 00       	push   $0xb8d
f0126bee:	68 ee 91 13 f0       	push   $0xf01391ee
f0126bf3:	e8 b8 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126bf8:	e8 69 da fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126bfd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126c00:	74 17                	je     f0126c19 <test_kexpand+0x7f2>
f0126c02:	83 ec 04             	sub    $0x4,%esp
f0126c05:	68 08 92 13 f0       	push   $0xf0139208
f0126c0a:	68 8e 0b 00 00       	push   $0xb8e
f0126c0f:	68 ee 91 13 f0       	push   $0xf01391ee
f0126c14:	e8 97 95 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c19:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c1c:	e8 9f 5d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126c21:	29 c3                	sub    %eax,%ebx
f0126c23:	89 d8                	mov    %ebx,%eax
f0126c25:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126c2a:	74 17                	je     f0126c43 <test_kexpand+0x81c>
f0126c2c:	83 ec 04             	sub    $0x4,%esp
f0126c2f:	68 70 92 13 f0       	push   $0xf0139270
f0126c34:	68 8f 0b 00 00       	push   $0xb8f
f0126c39:	68 ee 91 13 f0       	push   $0xf01391ee
f0126c3e:	e8 6d 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126c43:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f0126c4a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0126c4d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126c53:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0126c59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c60:	eb 1a                	jmp    f0126c7c <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126c6c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126c72:	01 c2                	add    %eax,%edx
f0126c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c77:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126c79:	ff 45 f4             	incl   -0xc(%ebp)
f0126c7c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126c82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c85:	7d db                	jge    f0126c62 <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126c87:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0126c8e:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0126c91:	e8 2a 5d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126c96:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c99:	e8 c8 d9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126c9e:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0126ca1:	83 ec 0c             	sub    $0xc,%esp
f0126ca4:	68 00 00 70 00       	push   $0x700000
f0126ca9:	e8 2f 13 fe ff       	call   f0107fdd <kexpand>
f0126cae:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126cb1:	e8 b0 d9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126cb6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126cb9:	74 19                	je     f0126cd4 <test_kexpand+0x8ad>
f0126cbb:	68 88 9f 13 f0       	push   $0xf0139f88
f0126cc0:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126cc5:	68 a0 0b 00 00       	push   $0xba0
f0126cca:	68 ee 91 13 f0       	push   $0xf01391ee
f0126ccf:	e8 dc 94 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126cd4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126cd7:	e8 e4 5c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126cdc:	29 c3                	sub    %eax,%ebx
f0126cde:	89 d8                	mov    %ebx,%eax
f0126ce0:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126ce5:	74 19                	je     f0126d00 <test_kexpand+0x8d9>
f0126ce7:	68 d0 9f 13 f0       	push   $0xf0139fd0
f0126cec:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126cf1:	68 a1 0b 00 00       	push   $0xba1
f0126cf6:	68 ee 91 13 f0       	push   $0xf01391ee
f0126cfb:	e8 b0 94 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126d00:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126d06:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0126d09:	eb 1a                	jmp    f0126d25 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0126d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d15:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d1b:	01 c2                	add    %eax,%edx
f0126d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d20:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126d22:	ff 45 f4             	incl   -0xc(%ebp)
f0126d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d28:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126d2e:	7c db                	jl     f0126d0b <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126d30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d37:	eb 37                	jmp    f0126d70 <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f0126d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d43:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d49:	01 d0                	add    %edx,%eax
f0126d4b:	8b 10                	mov    (%eax),%edx
f0126d4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d50:	39 c2                	cmp    %eax,%edx
f0126d52:	74 19                	je     f0126d6d <test_kexpand+0x946>
f0126d54:	68 00 a0 13 f0       	push   $0xf013a000
f0126d59:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126d5e:	68 ad 0b 00 00       	push   $0xbad
f0126d63:	68 ee 91 13 f0       	push   $0xf01391ee
f0126d68:	e8 43 94 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126d6d:	ff 45 f4             	incl   -0xc(%ebp)
f0126d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d73:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126d79:	7c be                	jl     f0126d39 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126d7b:	e8 40 5c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126d80:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d83:	e8 de d8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126d88:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0126d8b:	83 ec 0c             	sub    $0xc,%esp
f0126d8e:	68 00 00 a0 00       	push   $0xa00000
f0126d93:	e8 45 12 fe ff       	call   f0107fdd <kexpand>
f0126d98:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126d9b:	e8 c6 d8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126da0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126da3:	74 19                	je     f0126dbe <test_kexpand+0x997>
f0126da5:	68 88 9f 13 f0       	push   $0xf0139f88
f0126daa:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126daf:	68 b8 0b 00 00       	push   $0xbb8
f0126db4:	68 ee 91 13 f0       	push   $0xf01391ee
f0126db9:	e8 f2 93 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126dbe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126dc1:	e8 fa 5b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126dc6:	29 c3                	sub    %eax,%ebx
f0126dc8:	89 d8                	mov    %ebx,%eax
f0126dca:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126dcf:	74 19                	je     f0126dea <test_kexpand+0x9c3>
f0126dd1:	68 0c a0 13 f0       	push   $0xf013a00c
f0126dd6:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126ddb:	68 b9 0b 00 00       	push   $0xbb9
f0126de0:	68 ee 91 13 f0       	push   $0xf01391ee
f0126de5:	e8 c6 93 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126dea:	e8 d1 5b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126def:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126df2:	e8 6f d8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126df7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0126dfa:	83 ec 0c             	sub    $0xc,%esp
f0126dfd:	68 00 00 40 00       	push   $0x400000
f0126e02:	e8 3a 11 fe ff       	call   f0107f41 <kmalloc>
f0126e07:	83 c4 10             	add    $0x10,%esp
f0126e0a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0126e10:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126e16:	89 c1                	mov    %eax,%ecx
f0126e18:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0126e1f:	10 00 00 
f0126e22:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126e27:	0f b6 d0             	movzbl %al,%edx
f0126e2a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126e30:	01 d0                	add    %edx,%eax
f0126e32:	48                   	dec    %eax
f0126e33:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0126e39:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e44:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0126e4a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e50:	29 d0                	sub    %edx,%eax
f0126e52:	89 c3                	mov    %eax,%ebx
f0126e54:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0126e5b:	10 00 00 
f0126e5e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126e63:	0f b6 c0             	movzbl %al,%eax
f0126e66:	c1 e0 04             	shl    $0x4,%eax
f0126e69:	89 c2                	mov    %eax,%edx
f0126e6b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126e71:	01 d0                	add    %edx,%eax
f0126e73:	48                   	dec    %eax
f0126e74:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0126e7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126e80:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e85:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0126e8b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126e91:	29 d0                	sub    %edx,%eax
f0126e93:	01 d8                	add    %ebx,%eax
f0126e95:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0126e9a:	39 c1                	cmp    %eax,%ecx
f0126e9c:	74 17                	je     f0126eb5 <test_kexpand+0xa8e>
f0126e9e:	83 ec 04             	sub    $0x4,%esp
f0126ea1:	68 3c a0 13 f0       	push   $0xf013a03c
f0126ea6:	68 c4 0b 00 00       	push   $0xbc4
f0126eab:	68 ee 91 13 f0       	push   $0xf01391ee
f0126eb0:	e8 fb 92 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126eb5:	e8 ac d7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126eba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ebd:	74 17                	je     f0126ed6 <test_kexpand+0xaaf>
f0126ebf:	83 ec 04             	sub    $0x4,%esp
f0126ec2:	68 08 92 13 f0       	push   $0xf0139208
f0126ec7:	68 c5 0b 00 00       	push   $0xbc5
f0126ecc:	68 ee 91 13 f0       	push   $0xf01391ee
f0126ed1:	e8 da 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ed6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ed9:	e8 e2 5a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126ede:	29 c3                	sub    %eax,%ebx
f0126ee0:	89 d8                	mov    %ebx,%eax
f0126ee2:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126ee7:	74 17                	je     f0126f00 <test_kexpand+0xad9>
f0126ee9:	83 ec 04             	sub    $0x4,%esp
f0126eec:	68 70 92 13 f0       	push   $0xf0139270
f0126ef1:	68 c6 0b 00 00       	push   $0xbc6
f0126ef6:	68 ee 91 13 f0       	push   $0xf01391ee
f0126efb:	e8 b0 92 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0126f00:	e8 bb 5a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126f05:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f08:	e8 59 d7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126f0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0126f10:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126f16:	83 ec 0c             	sub    $0xc,%esp
f0126f19:	50                   	push   %eax
f0126f1a:	e8 3c 10 fe ff       	call   f0107f5b <kfree>
f0126f1f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f22:	e8 3f d7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126f27:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f2a:	74 17                	je     f0126f43 <test_kexpand+0xb1c>
f0126f2c:	83 ec 04             	sub    $0x4,%esp
f0126f2f:	68 08 92 13 f0       	push   $0xf0139208
f0126f34:	68 cf 0b 00 00       	push   $0xbcf
f0126f39:	68 ee 91 13 f0       	push   $0xf01391ee
f0126f3e:	e8 6d 92 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126f43:	e8 78 5a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126f48:	89 c2                	mov    %eax,%edx
f0126f4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0126f4d:	29 c2                	sub    %eax,%edx
f0126f4f:	89 d0                	mov    %edx,%eax
f0126f51:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126f56:	74 17                	je     f0126f6f <test_kexpand+0xb48>
f0126f58:	83 ec 04             	sub    $0x4,%esp
f0126f5b:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0126f60:	68 d0 0b 00 00       	push   $0xbd0
f0126f65:	68 ee 91 13 f0       	push   $0xf01391ee
f0126f6a:	e8 41 92 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126f6f:	e8 4c 5a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126f74:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f77:	e8 ea d6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126f7c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0126f7f:	83 ec 0c             	sub    $0xc,%esp
f0126f82:	68 00 50 40 00       	push   $0x405000
f0126f87:	e8 51 10 fe ff       	call   f0107fdd <kexpand>
f0126f8c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126f8f:	e8 d2 d6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0126f94:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f97:	74 19                	je     f0126fb2 <test_kexpand+0xb8b>
f0126f99:	68 88 9f 13 f0       	push   $0xf0139f88
f0126f9e:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126fa3:	68 da 0b 00 00       	push   $0xbda
f0126fa8:	68 ee 91 13 f0       	push   $0xf01391ee
f0126fad:	e8 fe 91 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0126fb2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126fb5:	e8 06 5a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0126fba:	29 c3                	sub    %eax,%ebx
f0126fbc:	89 d8                	mov    %ebx,%eax
f0126fbe:	83 f8 05             	cmp    $0x5,%eax
f0126fc1:	74 19                	je     f0126fdc <test_kexpand+0xbb5>
f0126fc3:	68 64 a0 13 f0       	push   $0xf013a064
f0126fc8:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0126fcd:	68 db 0b 00 00       	push   $0xbdb
f0126fd2:	68 ee 91 13 f0       	push   $0xf01391ee
f0126fd7:	e8 d4 91 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126fdc:	83 ec 0c             	sub    $0xc,%esp
f0126fdf:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126fe4:	e8 48 9e fd ff       	call   f0100e31 <cprintf>
f0126fe9:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126fec:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126ff1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126ff4:	5b                   	pop    %ebx
f0126ff5:	5f                   	pop    %edi
f0126ff6:	5d                   	pop    %ebp
f0126ff7:	c3                   	ret    

f0126ff8 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0126ff8:	55                   	push   %ebp
f0126ff9:	89 e5                	mov    %esp,%ebp
f0126ffb:	57                   	push   %edi
f0126ffc:	53                   	push   %ebx
f0126ffd:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0127003:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127007:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012700b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127011:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127017:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012701e:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127025:	e8 96 59 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012702a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012702d:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0127033:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127038:	b8 00 00 00 00       	mov    $0x0,%eax
f012703d:	89 d7                	mov    %edx,%edi
f012703f:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127041:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0127047:	b9 14 00 00 00       	mov    $0x14,%ecx
f012704c:	b8 00 00 00 00       	mov    $0x0,%eax
f0127051:	89 d7                	mov    %edx,%edi
f0127053:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127055:	e8 66 59 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012705a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012705d:	e8 04 d6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127062:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127065:	83 ec 0c             	sub    $0xc,%esp
f0127068:	68 00 fc 1f 00       	push   $0x1ffc00
f012706d:	e8 cf 0e fe ff       	call   f0107f41 <kmalloc>
f0127072:	83 c4 10             	add    $0x10,%esp
f0127075:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012707b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0127081:	89 c1                	mov    %eax,%ecx
f0127083:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012708a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012708f:	0f b6 d0             	movzbl %al,%edx
f0127092:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127095:	01 d0                	add    %edx,%eax
f0127097:	48                   	dec    %eax
f0127098:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012709b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012709e:	ba 00 00 00 00       	mov    $0x0,%edx
f01270a3:	f7 75 d4             	divl   -0x2c(%ebp)
f01270a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01270a9:	29 d0                	sub    %edx,%eax
f01270ab:	89 c3                	mov    %eax,%ebx
f01270ad:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01270b4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01270b9:	0f b6 c0             	movzbl %al,%eax
f01270bc:	c1 e0 04             	shl    $0x4,%eax
f01270bf:	89 c2                	mov    %eax,%edx
f01270c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01270c4:	01 d0                	add    %edx,%eax
f01270c6:	48                   	dec    %eax
f01270c7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01270ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01270cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01270d2:	f7 75 cc             	divl   -0x34(%ebp)
f01270d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01270d8:	29 d0                	sub    %edx,%eax
f01270da:	01 d8                	add    %ebx,%eax
f01270dc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01270e1:	39 c1                	cmp    %eax,%ecx
f01270e3:	74 17                	je     f01270fc <test_kshrink+0x104>
f01270e5:	83 ec 04             	sub    $0x4,%esp
f01270e8:	68 d4 92 13 f0       	push   $0xf01392d4
f01270ed:	68 01 0c 00 00       	push   $0xc01
f01270f2:	68 ee 91 13 f0       	push   $0xf01391ee
f01270f7:	e8 b4 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270fc:	e8 65 d5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127101:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127104:	74 17                	je     f012711d <test_kshrink+0x125>
f0127106:	83 ec 04             	sub    $0x4,%esp
f0127109:	68 08 92 13 f0       	push   $0xf0139208
f012710e:	68 02 0c 00 00       	push   $0xc02
f0127113:	68 ee 91 13 f0       	push   $0xf01391ee
f0127118:	e8 93 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012711d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127120:	e8 9b 58 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127125:	29 c3                	sub    %eax,%ebx
f0127127:	89 d8                	mov    %ebx,%eax
f0127129:	3d 00 02 00 00       	cmp    $0x200,%eax
f012712e:	74 17                	je     f0127147 <test_kshrink+0x14f>
f0127130:	83 ec 04             	sub    $0x4,%esp
f0127133:	68 70 92 13 f0       	push   $0xf0139270
f0127138:	68 03 0c 00 00       	push   $0xc03
f012713d:	68 ee 91 13 f0       	push   $0xf01391ee
f0127142:	e8 69 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127147:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f012714e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127151:	e8 6a 58 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127156:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127159:	e8 08 d5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012715e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127161:	83 ec 0c             	sub    $0xc,%esp
f0127164:	68 00 fc 1f 00       	push   $0x1ffc00
f0127169:	e8 d3 0d fe ff       	call   f0107f41 <kmalloc>
f012716e:	83 c4 10             	add    $0x10,%esp
f0127171:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127177:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012717d:	89 c1                	mov    %eax,%ecx
f012717f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127186:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012718b:	0f b6 d0             	movzbl %al,%edx
f012718e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127191:	01 d0                	add    %edx,%eax
f0127193:	48                   	dec    %eax
f0127194:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127197:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012719a:	ba 00 00 00 00       	mov    $0x0,%edx
f012719f:	f7 75 c4             	divl   -0x3c(%ebp)
f01271a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01271a5:	29 d0                	sub    %edx,%eax
f01271a7:	89 c3                	mov    %eax,%ebx
f01271a9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01271b0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01271b5:	0f b6 c0             	movzbl %al,%eax
f01271b8:	c1 e0 04             	shl    $0x4,%eax
f01271bb:	89 c2                	mov    %eax,%edx
f01271bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01271c0:	01 d0                	add    %edx,%eax
f01271c2:	48                   	dec    %eax
f01271c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01271c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01271c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ce:	f7 75 bc             	divl   -0x44(%ebp)
f01271d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01271d4:	29 d0                	sub    %edx,%eax
f01271d6:	01 d8                	add    %ebx,%eax
f01271d8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01271dd:	39 c1                	cmp    %eax,%ecx
f01271df:	74 17                	je     f01271f8 <test_kshrink+0x200>
f01271e1:	83 ec 04             	sub    $0x4,%esp
f01271e4:	68 d4 92 13 f0       	push   $0xf01392d4
f01271e9:	68 0a 0c 00 00       	push   $0xc0a
f01271ee:	68 ee 91 13 f0       	push   $0xf01391ee
f01271f3:	e8 b8 8f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271f8:	e8 69 d4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01271fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127200:	74 17                	je     f0127219 <test_kshrink+0x221>
f0127202:	83 ec 04             	sub    $0x4,%esp
f0127205:	68 08 92 13 f0       	push   $0xf0139208
f012720a:	68 0b 0c 00 00       	push   $0xc0b
f012720f:	68 ee 91 13 f0       	push   $0xf01391ee
f0127214:	e8 97 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127219:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012721c:	e8 9f 57 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127221:	29 c3                	sub    %eax,%ebx
f0127223:	89 d8                	mov    %ebx,%eax
f0127225:	3d 00 02 00 00       	cmp    $0x200,%eax
f012722a:	74 17                	je     f0127243 <test_kshrink+0x24b>
f012722c:	83 ec 04             	sub    $0x4,%esp
f012722f:	68 70 92 13 f0       	push   $0xf0139270
f0127234:	68 0c 0c 00 00       	push   $0xc0c
f0127239:	68 ee 91 13 f0       	push   $0xf01391ee
f012723e:	e8 6d 8f fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127243:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f012724a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012724d:	e8 6e 57 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127252:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127255:	e8 0c d4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012725a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012725d:	83 ec 0c             	sub    $0xc,%esp
f0127260:	68 00 08 00 00       	push   $0x800
f0127265:	e8 d7 0c fe ff       	call   f0107f41 <kmalloc>
f012726a:	83 c4 10             	add    $0x10,%esp
f012726d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127273:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127279:	89 c1                	mov    %eax,%ecx
f012727b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127282:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127287:	0f b6 d0             	movzbl %al,%edx
f012728a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012728d:	01 d0                	add    %edx,%eax
f012728f:	48                   	dec    %eax
f0127290:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127293:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127296:	ba 00 00 00 00       	mov    $0x0,%edx
f012729b:	f7 75 b4             	divl   -0x4c(%ebp)
f012729e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01272a1:	29 d0                	sub    %edx,%eax
f01272a3:	89 c3                	mov    %eax,%ebx
f01272a5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01272ac:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01272b1:	0f b6 c0             	movzbl %al,%eax
f01272b4:	c1 e0 04             	shl    $0x4,%eax
f01272b7:	89 c2                	mov    %eax,%edx
f01272b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01272bc:	01 d0                	add    %edx,%eax
f01272be:	48                   	dec    %eax
f01272bf:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01272c2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01272c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ca:	f7 75 ac             	divl   -0x54(%ebp)
f01272cd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01272d0:	29 d0                	sub    %edx,%eax
f01272d2:	01 d8                	add    %ebx,%eax
f01272d4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01272d9:	39 c1                	cmp    %eax,%ecx
f01272db:	74 17                	je     f01272f4 <test_kshrink+0x2fc>
f01272dd:	83 ec 04             	sub    $0x4,%esp
f01272e0:	68 d4 92 13 f0       	push   $0xf01392d4
f01272e5:	68 13 0c 00 00       	push   $0xc13
f01272ea:	68 ee 91 13 f0       	push   $0xf01391ee
f01272ef:	e8 bc 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272f4:	e8 6d d3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01272f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01272fc:	74 17                	je     f0127315 <test_kshrink+0x31d>
f01272fe:	83 ec 04             	sub    $0x4,%esp
f0127301:	68 08 92 13 f0       	push   $0xf0139208
f0127306:	68 14 0c 00 00       	push   $0xc14
f012730b:	68 ee 91 13 f0       	push   $0xf01391ee
f0127310:	e8 9b 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127315:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127318:	e8 a3 56 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012731d:	29 c3                	sub    %eax,%ebx
f012731f:	89 d8                	mov    %ebx,%eax
f0127321:	83 f8 01             	cmp    $0x1,%eax
f0127324:	74 17                	je     f012733d <test_kshrink+0x345>
f0127326:	83 ec 04             	sub    $0x4,%esp
f0127329:	68 70 92 13 f0       	push   $0xf0139270
f012732e:	68 15 0c 00 00       	push   $0xc15
f0127333:	68 ee 91 13 f0       	push   $0xf01391ee
f0127338:	e8 73 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012733d:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0127344:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127347:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012734d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127350:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127357:	eb 0e                	jmp    f0127367 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0127359:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012735c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012735f:	01 d0                	add    %edx,%eax
f0127361:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127364:	ff 45 f4             	incl   -0xc(%ebp)
f0127367:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012736d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127370:	7f e7                	jg     f0127359 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127372:	e8 49 56 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127377:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012737a:	e8 e7 d2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012737f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127382:	83 ec 0c             	sub    $0xc,%esp
f0127385:	68 00 08 00 00       	push   $0x800
f012738a:	e8 b2 0b fe ff       	call   f0107f41 <kmalloc>
f012738f:	83 c4 10             	add    $0x10,%esp
f0127392:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127398:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012739e:	89 c1                	mov    %eax,%ecx
f01273a0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01273a7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01273ac:	0f b6 d0             	movzbl %al,%edx
f01273af:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01273b2:	01 d0                	add    %edx,%eax
f01273b4:	48                   	dec    %eax
f01273b5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01273b8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01273bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01273c0:	f7 75 a0             	divl   -0x60(%ebp)
f01273c3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01273c6:	29 d0                	sub    %edx,%eax
f01273c8:	89 c3                	mov    %eax,%ebx
f01273ca:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01273d1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01273d6:	0f b6 c0             	movzbl %al,%eax
f01273d9:	c1 e0 04             	shl    $0x4,%eax
f01273dc:	89 c2                	mov    %eax,%edx
f01273de:	8b 45 98             	mov    -0x68(%ebp),%eax
f01273e1:	01 d0                	add    %edx,%eax
f01273e3:	48                   	dec    %eax
f01273e4:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01273e7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01273ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01273ef:	f7 75 98             	divl   -0x68(%ebp)
f01273f2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01273f5:	29 d0                	sub    %edx,%eax
f01273f7:	01 d8                	add    %ebx,%eax
f01273f9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01273fe:	39 c1                	cmp    %eax,%ecx
f0127400:	74 17                	je     f0127419 <test_kshrink+0x421>
f0127402:	83 ec 04             	sub    $0x4,%esp
f0127405:	68 d4 92 13 f0       	push   $0xf01392d4
f012740a:	68 21 0c 00 00       	push   $0xc21
f012740f:	68 ee 91 13 f0       	push   $0xf01391ee
f0127414:	e8 97 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127419:	e8 48 d2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012741e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127421:	74 17                	je     f012743a <test_kshrink+0x442>
f0127423:	83 ec 04             	sub    $0x4,%esp
f0127426:	68 08 92 13 f0       	push   $0xf0139208
f012742b:	68 22 0c 00 00       	push   $0xc22
f0127430:	68 ee 91 13 f0       	push   $0xf01391ee
f0127435:	e8 76 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012743a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012743d:	e8 7e 55 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127442:	29 c3                	sub    %eax,%ebx
f0127444:	89 d8                	mov    %ebx,%eax
f0127446:	83 f8 01             	cmp    $0x1,%eax
f0127449:	74 17                	je     f0127462 <test_kshrink+0x46a>
f012744b:	83 ec 04             	sub    $0x4,%esp
f012744e:	68 70 92 13 f0       	push   $0xf0139270
f0127453:	68 23 0c 00 00       	push   $0xc23
f0127458:	68 ee 91 13 f0       	push   $0xf01391ee
f012745d:	e8 4e 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127462:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127469:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012746c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127472:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127475:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012747c:	eb 0e                	jmp    f012748c <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f012747e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127481:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127484:	01 d0                	add    %edx,%eax
f0127486:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127489:	ff 45 f4             	incl   -0xc(%ebp)
f012748c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127492:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127495:	7f e7                	jg     f012747e <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127497:	e8 24 55 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012749c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012749f:	e8 c2 d1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01274a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01274a7:	83 ec 0c             	sub    $0xc,%esp
f01274aa:	68 00 1c 00 00       	push   $0x1c00
f01274af:	e8 8d 0a fe ff       	call   f0107f41 <kmalloc>
f01274b4:	83 c4 10             	add    $0x10,%esp
f01274b7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01274bd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01274c3:	89 c1                	mov    %eax,%ecx
f01274c5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01274cc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01274d1:	0f b6 d0             	movzbl %al,%edx
f01274d4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01274d7:	01 d0                	add    %edx,%eax
f01274d9:	48                   	dec    %eax
f01274da:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01274dd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01274e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01274e5:	f7 75 90             	divl   -0x70(%ebp)
f01274e8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01274eb:	29 d0                	sub    %edx,%eax
f01274ed:	89 c3                	mov    %eax,%ebx
f01274ef:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01274f6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01274fb:	0f b6 c0             	movzbl %al,%eax
f01274fe:	c1 e0 04             	shl    $0x4,%eax
f0127501:	89 c2                	mov    %eax,%edx
f0127503:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127506:	01 d0                	add    %edx,%eax
f0127508:	48                   	dec    %eax
f0127509:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012750c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012750f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127514:	f7 75 88             	divl   -0x78(%ebp)
f0127517:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012751a:	29 d0                	sub    %edx,%eax
f012751c:	01 d8                	add    %ebx,%eax
f012751e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127523:	39 c1                	cmp    %eax,%ecx
f0127525:	74 17                	je     f012753e <test_kshrink+0x546>
f0127527:	83 ec 04             	sub    $0x4,%esp
f012752a:	68 d4 92 13 f0       	push   $0xf01392d4
f012752f:	68 2f 0c 00 00       	push   $0xc2f
f0127534:	68 ee 91 13 f0       	push   $0xf01391ee
f0127539:	e8 72 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012753e:	e8 23 d1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127543:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127546:	74 17                	je     f012755f <test_kshrink+0x567>
f0127548:	83 ec 04             	sub    $0x4,%esp
f012754b:	68 08 92 13 f0       	push   $0xf0139208
f0127550:	68 30 0c 00 00       	push   $0xc30
f0127555:	68 ee 91 13 f0       	push   $0xf01391ee
f012755a:	e8 51 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012755f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127562:	e8 59 54 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127567:	29 c3                	sub    %eax,%ebx
f0127569:	89 d8                	mov    %ebx,%eax
f012756b:	83 f8 02             	cmp    $0x2,%eax
f012756e:	74 17                	je     f0127587 <test_kshrink+0x58f>
f0127570:	83 ec 04             	sub    $0x4,%esp
f0127573:	68 70 92 13 f0       	push   $0xf0139270
f0127578:	68 31 0c 00 00       	push   $0xc31
f012757d:	68 ee 91 13 f0       	push   $0xf01391ee
f0127582:	e8 29 8c fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127587:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f012758e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127591:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127597:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012759a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275a1:	eb 0e                	jmp    f01275b1 <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f01275a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275a6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01275a9:	01 d0                	add    %edx,%eax
f01275ab:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01275ae:	ff 45 f4             	incl   -0xc(%ebp)
f01275b1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01275b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275ba:	7f e7                	jg     f01275a3 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01275bc:	e8 ff 53 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01275c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275c4:	e8 9d d0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01275c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01275cc:	83 ec 0c             	sub    $0xc,%esp
f01275cf:	68 00 fc 2f 00       	push   $0x2ffc00
f01275d4:	e8 68 09 fe ff       	call   f0107f41 <kmalloc>
f01275d9:	83 c4 10             	add    $0x10,%esp
f01275dc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275e2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01275e8:	89 c1                	mov    %eax,%ecx
f01275ea:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01275f1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01275f6:	0f b6 d0             	movzbl %al,%edx
f01275f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01275fc:	01 d0                	add    %edx,%eax
f01275fe:	48                   	dec    %eax
f01275ff:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127605:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012760b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127610:	f7 75 80             	divl   -0x80(%ebp)
f0127613:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127619:	29 d0                	sub    %edx,%eax
f012761b:	89 c3                	mov    %eax,%ebx
f012761d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127624:	10 00 00 
f0127627:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012762c:	0f b6 c0             	movzbl %al,%eax
f012762f:	c1 e0 04             	shl    $0x4,%eax
f0127632:	89 c2                	mov    %eax,%edx
f0127634:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012763a:	01 d0                	add    %edx,%eax
f012763c:	48                   	dec    %eax
f012763d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127643:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127649:	ba 00 00 00 00       	mov    $0x0,%edx
f012764e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127654:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012765a:	29 d0                	sub    %edx,%eax
f012765c:	01 d8                	add    %ebx,%eax
f012765e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127663:	39 c1                	cmp    %eax,%ecx
f0127665:	74 17                	je     f012767e <test_kshrink+0x686>
f0127667:	83 ec 04             	sub    $0x4,%esp
f012766a:	68 d4 92 13 f0       	push   $0xf01392d4
f012766f:	68 3d 0c 00 00       	push   $0xc3d
f0127674:	68 ee 91 13 f0       	push   $0xf01391ee
f0127679:	e8 32 8b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012767e:	e8 e3 cf fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127683:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127686:	74 17                	je     f012769f <test_kshrink+0x6a7>
f0127688:	83 ec 04             	sub    $0x4,%esp
f012768b:	68 08 92 13 f0       	push   $0xf0139208
f0127690:	68 3e 0c 00 00       	push   $0xc3e
f0127695:	68 ee 91 13 f0       	push   $0xf01391ee
f012769a:	e8 11 8b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012769f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276a2:	e8 19 53 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01276a7:	29 c3                	sub    %eax,%ebx
f01276a9:	89 d8                	mov    %ebx,%eax
f01276ab:	3d 00 03 00 00       	cmp    $0x300,%eax
f01276b0:	74 17                	je     f01276c9 <test_kshrink+0x6d1>
f01276b2:	83 ec 04             	sub    $0x4,%esp
f01276b5:	68 70 92 13 f0       	push   $0xf0139270
f01276ba:	68 3f 0c 00 00       	push   $0xc3f
f01276bf:	68 ee 91 13 f0       	push   $0xf01391ee
f01276c4:	e8 e7 8a fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01276c9:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f01276d0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01276d3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01276d9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01276dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276e3:	eb 0e                	jmp    f01276f3 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f01276e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01276e8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01276eb:	01 d0                	add    %edx,%eax
f01276ed:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01276f0:	ff 45 f4             	incl   -0xc(%ebp)
f01276f3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01276f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276fc:	7f e7                	jg     f01276e5 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01276fe:	e8 bd 52 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127703:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127706:	e8 5b cf fd ff       	call   f0104666 <pf_calculate_free_frames>
f012770b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012770e:	83 ec 0c             	sub    $0xc,%esp
f0127711:	68 00 00 60 00       	push   $0x600000
f0127716:	e8 26 08 fe ff       	call   f0107f41 <kmalloc>
f012771b:	83 c4 10             	add    $0x10,%esp
f012771e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127724:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012772a:	89 c1                	mov    %eax,%ecx
f012772c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127733:	10 00 00 
f0127736:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012773b:	0f b6 d0             	movzbl %al,%edx
f012773e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127744:	01 d0                	add    %edx,%eax
f0127746:	48                   	dec    %eax
f0127747:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012774d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127753:	ba 00 00 00 00       	mov    $0x0,%edx
f0127758:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012775e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127764:	29 d0                	sub    %edx,%eax
f0127766:	89 c3                	mov    %eax,%ebx
f0127768:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012776f:	10 00 00 
f0127772:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127777:	0f b6 c0             	movzbl %al,%eax
f012777a:	c1 e0 04             	shl    $0x4,%eax
f012777d:	89 c2                	mov    %eax,%edx
f012777f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127785:	01 d0                	add    %edx,%eax
f0127787:	48                   	dec    %eax
f0127788:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012778e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127794:	ba 00 00 00 00       	mov    $0x0,%edx
f0127799:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012779f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01277a5:	29 d0                	sub    %edx,%eax
f01277a7:	01 d8                	add    %ebx,%eax
f01277a9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01277ae:	39 c1                	cmp    %eax,%ecx
f01277b0:	74 17                	je     f01277c9 <test_kshrink+0x7d1>
f01277b2:	83 ec 04             	sub    $0x4,%esp
f01277b5:	68 d4 92 13 f0       	push   $0xf01392d4
f01277ba:	68 4b 0c 00 00       	push   $0xc4b
f01277bf:	68 ee 91 13 f0       	push   $0xf01391ee
f01277c4:	e8 e7 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277c9:	e8 98 ce fd ff       	call   f0104666 <pf_calculate_free_frames>
f01277ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01277d1:	74 17                	je     f01277ea <test_kshrink+0x7f2>
f01277d3:	83 ec 04             	sub    $0x4,%esp
f01277d6:	68 08 92 13 f0       	push   $0xf0139208
f01277db:	68 4c 0c 00 00       	push   $0xc4c
f01277e0:	68 ee 91 13 f0       	push   $0xf01391ee
f01277e5:	e8 c6 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01277ea:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01277ed:	e8 ce 51 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01277f2:	29 c3                	sub    %eax,%ebx
f01277f4:	89 d8                	mov    %ebx,%eax
f01277f6:	3d 00 06 00 00       	cmp    $0x600,%eax
f01277fb:	74 17                	je     f0127814 <test_kshrink+0x81c>
f01277fd:	83 ec 04             	sub    $0x4,%esp
f0127800:	68 70 92 13 f0       	push   $0xf0139270
f0127805:	68 4d 0c 00 00       	push   $0xc4d
f012780a:	68 ee 91 13 f0       	push   $0xf01391ee
f012780f:	e8 9c 89 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127814:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f012781b:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012781e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127824:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012782a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127831:	eb 1a                	jmp    f012784d <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127833:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127836:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012783d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127843:	01 c2                	add    %eax,%edx
f0127845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127848:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012784a:	ff 45 f4             	incl   -0xc(%ebp)
f012784d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127853:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127856:	7d db                	jge    f0127833 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127858:	e8 63 51 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012785d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127860:	e8 01 ce fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127865:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127868:	83 ec 0c             	sub    $0xc,%esp
f012786b:	68 00 00 50 00       	push   $0x500000
f0127870:	e8 4e 07 fe ff       	call   f0107fc3 <kshrink>
f0127875:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127878:	e8 e9 cd fd ff       	call   f0104666 <pf_calculate_free_frames>
f012787d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127880:	74 19                	je     f012789b <test_kshrink+0x8a3>
f0127882:	68 88 9f 13 f0       	push   $0xf0139f88
f0127887:	68 b9 9f 13 f0       	push   $0xf0139fb9
f012788c:	68 5d 0c 00 00       	push   $0xc5d
f0127891:	68 ee 91 13 f0       	push   $0xf01391ee
f0127896:	e8 15 89 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f012789b:	e8 20 51 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01278a0:	89 c2                	mov    %eax,%edx
f01278a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01278a5:	29 c2                	sub    %eax,%edx
f01278a7:	89 d0                	mov    %edx,%eax
f01278a9:	3d 00 01 00 00       	cmp    $0x100,%eax
f01278ae:	74 19                	je     f01278c9 <test_kshrink+0x8d1>
f01278b0:	68 94 a0 13 f0       	push   $0xf013a094
f01278b5:	68 b9 9f 13 f0       	push   $0xf0139fb9
f01278ba:	68 5e 0c 00 00       	push   $0xc5e
f01278bf:	68 ee 91 13 f0       	push   $0xf01391ee
f01278c4:	e8 e7 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f01278c9:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f01278d0:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01278d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278da:	eb 37                	jmp    f0127913 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f01278dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01278df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01278e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01278ec:	01 d0                	add    %edx,%eax
f01278ee:	8b 10                	mov    (%eax),%edx
f01278f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01278f3:	39 c2                	cmp    %eax,%edx
f01278f5:	74 19                	je     f0127910 <test_kshrink+0x918>
f01278f7:	68 c4 a0 13 f0       	push   $0xf013a0c4
f01278fc:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0127901:	68 66 0c 00 00       	push   $0xc66
f0127906:	68 ee 91 13 f0       	push   $0xf01391ee
f012790b:	e8 a0 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127910:	ff 45 f4             	incl   -0xc(%ebp)
f0127913:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127916:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f012791c:	7e be                	jle    f01278dc <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012791e:	83 ec 0c             	sub    $0xc,%esp
f0127921:	6a 03                	push   $0x3
f0127923:	e8 33 55 fe ff       	call   f010ce5b <sys_bypassPageFault>
f0127928:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f012792b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127931:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127934:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127937:	05 00 00 50 00       	add    $0x500000,%eax
f012793c:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012793f:	e8 05 55 fe ff       	call   f010ce49 <sys_rcr2>
f0127944:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127947:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012794d:	39 d0                	cmp    %edx,%eax
f012794f:	74 19                	je     f012796a <test_kshrink+0x972>
f0127951:	68 d0 a0 13 f0       	push   $0xf013a0d0
f0127956:	68 b9 9f 13 f0       	push   $0xf0139fb9
f012795b:	68 6f 0c 00 00       	push   $0xc6f
f0127960:	68 ee 91 13 f0       	push   $0xf01391ee
f0127965:	e8 46 88 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012796a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012796d:	05 00 10 50 00       	add    $0x501000,%eax
f0127972:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127975:	e8 cf 54 fe ff       	call   f010ce49 <sys_rcr2>
f012797a:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f012797d:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0127983:	39 d0                	cmp    %edx,%eax
f0127985:	74 19                	je     f01279a0 <test_kshrink+0x9a8>
f0127987:	68 f8 a0 13 f0       	push   $0xf013a0f8
f012798c:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0127991:	68 72 0c 00 00       	push   $0xc72
f0127996:	68 ee 91 13 f0       	push   $0xf01391ee
f012799b:	e8 10 88 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f01279a0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01279a3:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01279a8:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01279ab:	e8 99 54 fe ff       	call   f010ce49 <sys_rcr2>
f01279b0:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01279b3:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f01279b9:	39 d0                	cmp    %edx,%eax
f01279bb:	74 19                	je     f01279d6 <test_kshrink+0x9de>
f01279bd:	68 24 a1 13 f0       	push   $0xf013a124
f01279c2:	68 b9 9f 13 f0       	push   $0xf0139fb9
f01279c7:	68 75 0c 00 00       	push   $0xc75
f01279cc:	68 ee 91 13 f0       	push   $0xf01391ee
f01279d1:	e8 da 87 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01279d6:	83 ec 0c             	sub    $0xc,%esp
f01279d9:	6a 00                	push   $0x0
f01279db:	e8 7b 54 fe ff       	call   f010ce5b <sys_bypassPageFault>
f01279e0:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01279e3:	e8 d8 4f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01279e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279eb:	e8 76 cc fd ff       	call   f0104666 <pf_calculate_free_frames>
f01279f0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01279f3:	83 ec 0c             	sub    $0xc,%esp
f01279f6:	68 00 00 20 00       	push   $0x200000
f01279fb:	e8 c3 05 fe ff       	call   f0107fc3 <kshrink>
f0127a00:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127a03:	e8 5e cc fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127a08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a0b:	74 19                	je     f0127a26 <test_kshrink+0xa2e>
f0127a0d:	68 88 9f 13 f0       	push   $0xf0139f88
f0127a12:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0127a17:	68 82 0c 00 00       	push   $0xc82
f0127a1c:	68 ee 91 13 f0       	push   $0xf01391ee
f0127a21:	e8 8a 87 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0127a26:	e8 95 4f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127a2b:	89 c2                	mov    %eax,%edx
f0127a2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127a30:	29 c2                	sub    %eax,%edx
f0127a32:	89 d0                	mov    %edx,%eax
f0127a34:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127a39:	74 19                	je     f0127a54 <test_kshrink+0xa5c>
f0127a3b:	68 50 a1 13 f0       	push   $0xf013a150
f0127a40:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0127a45:	68 83 0c 00 00       	push   $0xc83
f0127a4a:	68 ee 91 13 f0       	push   $0xf01391ee
f0127a4f:	e8 5c 87 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a54:	e8 67 4f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127a59:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a5c:	e8 05 cc fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127a61:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127a64:	83 ec 0c             	sub    $0xc,%esp
f0127a67:	68 00 00 40 00       	push   $0x400000
f0127a6c:	e8 d0 04 fe ff       	call   f0107f41 <kmalloc>
f0127a71:	83 c4 10             	add    $0x10,%esp
f0127a74:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127a7a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127a81:	10 00 00 
f0127a84:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127a89:	0f b6 d0             	movzbl %al,%edx
f0127a8c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127a92:	01 d0                	add    %edx,%eax
f0127a94:	48                   	dec    %eax
f0127a95:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127a9b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127aa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127aa6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127aac:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127ab2:	29 d0                	sub    %edx,%eax
f0127ab4:	89 c1                	mov    %eax,%ecx
f0127ab6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127abd:	10 00 00 
f0127ac0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127ac5:	0f b6 c0             	movzbl %al,%eax
f0127ac8:	c1 e0 04             	shl    $0x4,%eax
f0127acb:	89 c2                	mov    %eax,%edx
f0127acd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127ad3:	01 d0                	add    %edx,%eax
f0127ad5:	48                   	dec    %eax
f0127ad6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127adc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127ae2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ae7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127aed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127af3:	29 d0                	sub    %edx,%eax
f0127af5:	01 c8                	add    %ecx,%eax
f0127af7:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0127afd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b03:	83 ec 04             	sub    $0x4,%esp
f0127b06:	52                   	push   %edx
f0127b07:	50                   	push   %eax
f0127b08:	68 80 a1 13 f0       	push   $0xf013a180
f0127b0d:	e8 1f 93 fd ff       	call   f0100e31 <cprintf>
f0127b12:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127b15:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b1b:	89 c1                	mov    %eax,%ecx
f0127b1d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127b24:	10 00 00 
f0127b27:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127b2c:	0f b6 d0             	movzbl %al,%edx
f0127b2f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127b35:	01 d0                	add    %edx,%eax
f0127b37:	48                   	dec    %eax
f0127b38:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127b3e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b49:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127b4f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b55:	29 d0                	sub    %edx,%eax
f0127b57:	89 c3                	mov    %eax,%ebx
f0127b59:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127b60:	10 00 00 
f0127b63:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127b68:	0f b6 c0             	movzbl %al,%eax
f0127b6b:	c1 e0 04             	shl    $0x4,%eax
f0127b6e:	89 c2                	mov    %eax,%edx
f0127b70:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127b76:	01 d0                	add    %edx,%eax
f0127b78:	48                   	dec    %eax
f0127b79:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127b7f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127b85:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b8a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127b90:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127b96:	29 d0                	sub    %edx,%eax
f0127b98:	01 d8                	add    %ebx,%eax
f0127b9a:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0127b9f:	39 c1                	cmp    %eax,%ecx
f0127ba1:	74 17                	je     f0127bba <test_kshrink+0xbc2>
f0127ba3:	83 ec 04             	sub    $0x4,%esp
f0127ba6:	68 9c a1 13 f0       	push   $0xf013a19c
f0127bab:	68 8e 0c 00 00       	push   $0xc8e
f0127bb0:	68 ee 91 13 f0       	push   $0xf01391ee
f0127bb5:	e8 f6 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bba:	e8 a7 ca fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127bbf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127bc2:	74 17                	je     f0127bdb <test_kshrink+0xbe3>
f0127bc4:	83 ec 04             	sub    $0x4,%esp
f0127bc7:	68 08 92 13 f0       	push   $0xf0139208
f0127bcc:	68 8f 0c 00 00       	push   $0xc8f
f0127bd1:	68 ee 91 13 f0       	push   $0xf01391ee
f0127bd6:	e8 d5 85 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127bdb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127bde:	e8 dd 4d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127be3:	29 c3                	sub    %eax,%ebx
f0127be5:	89 d8                	mov    %ebx,%eax
f0127be7:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127bec:	74 17                	je     f0127c05 <test_kshrink+0xc0d>
f0127bee:	83 ec 04             	sub    $0x4,%esp
f0127bf1:	68 70 92 13 f0       	push   $0xf0139270
f0127bf6:	68 90 0c 00 00       	push   $0xc90
f0127bfb:	68 ee 91 13 f0       	push   $0xf01391ee
f0127c00:	e8 ab 85 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127c05:	e8 b6 4d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127c0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c0d:	e8 54 ca fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127c12:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127c15:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127c1b:	83 ec 0c             	sub    $0xc,%esp
f0127c1e:	50                   	push   %eax
f0127c1f:	e8 37 03 fe ff       	call   f0107f5b <kfree>
f0127c24:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c27:	e8 3a ca fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127c2c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c2f:	74 17                	je     f0127c48 <test_kshrink+0xc50>
f0127c31:	83 ec 04             	sub    $0x4,%esp
f0127c34:	68 08 92 13 f0       	push   $0xf0139208
f0127c39:	68 9a 0c 00 00       	push   $0xc9a
f0127c3e:	68 ee 91 13 f0       	push   $0xf01391ee
f0127c43:	e8 68 85 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127c48:	e8 73 4d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127c4d:	89 c2                	mov    %eax,%edx
f0127c4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127c52:	29 c2                	sub    %eax,%edx
f0127c54:	89 d0                	mov    %edx,%eax
f0127c56:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127c5b:	74 17                	je     f0127c74 <test_kshrink+0xc7c>
f0127c5d:	83 ec 04             	sub    $0x4,%esp
f0127c60:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0127c65:	68 9b 0c 00 00       	push   $0xc9b
f0127c6a:	68 ee 91 13 f0       	push   $0xf01391ee
f0127c6f:	e8 3c 85 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127c74:	e8 47 4d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127c79:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c7c:	e8 e5 c9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127c81:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127c84:	83 ec 0c             	sub    $0xc,%esp
f0127c87:	68 00 b0 3f 00       	push   $0x3fb000
f0127c8c:	e8 32 03 fe ff       	call   f0107fc3 <kshrink>
f0127c91:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127c94:	e8 cd c9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127c99:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c9c:	74 19                	je     f0127cb7 <test_kshrink+0xcbf>
f0127c9e:	68 88 9f 13 f0       	push   $0xf0139f88
f0127ca3:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0127ca8:	68 a5 0c 00 00       	push   $0xca5
f0127cad:	68 ee 91 13 f0       	push   $0xf01391ee
f0127cb2:	e8 f9 84 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127cb7:	e8 04 4d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127cbc:	89 c2                	mov    %eax,%edx
f0127cbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127cc1:	29 c2                	sub    %eax,%edx
f0127cc3:	89 d0                	mov    %edx,%eax
f0127cc5:	83 f8 05             	cmp    $0x5,%eax
f0127cc8:	74 19                	je     f0127ce3 <test_kshrink+0xceb>
f0127cca:	68 f0 a1 13 f0       	push   $0xf013a1f0
f0127ccf:	68 b9 9f 13 f0       	push   $0xf0139fb9
f0127cd4:	68 a6 0c 00 00       	push   $0xca6
f0127cd9:	68 ee 91 13 f0       	push   $0xf01391ee
f0127cde:	e8 cd 84 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127ce3:	83 ec 0c             	sub    $0xc,%esp
f0127ce6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127ceb:	e8 41 91 fd ff       	call   f0100e31 <cprintf>
f0127cf0:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127cf3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127cf8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127cfb:	5b                   	pop    %ebx
f0127cfc:	5f                   	pop    %edi
f0127cfd:	5d                   	pop    %ebp
f0127cfe:	c3                   	ret    

f0127cff <test_kfreelast>:


int test_kfreelast()
{
f0127cff:	55                   	push   %ebp
f0127d00:	89 e5                	mov    %esp,%ebp
f0127d02:	57                   	push   %edi
f0127d03:	53                   	push   %ebx
f0127d04:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0127d0a:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127d0e:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127d12:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0127d18:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127d1e:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127d25:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127d2c:	e8 8f 4c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127d31:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127d34:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f0127d3a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d44:	89 d7                	mov    %edx,%edi
f0127d46:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0127d48:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f0127d4e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d53:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d58:	89 d7                	mov    %edx,%edi
f0127d5a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0127d5c:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f0127d62:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d67:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d6c:	89 d7                	mov    %edx,%edi
f0127d6e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d70:	e8 4b 4c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127d75:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d78:	e8 e9 c8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127d7d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127d80:	83 ec 0c             	sub    $0xc,%esp
f0127d83:	68 00 fc 1f 00       	push   $0x1ffc00
f0127d88:	e8 b4 01 fe ff       	call   f0107f41 <kmalloc>
f0127d8d:	83 c4 10             	add    $0x10,%esp
f0127d90:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d96:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127d9c:	89 c1                	mov    %eax,%ecx
f0127d9e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127da5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127daa:	0f b6 d0             	movzbl %al,%edx
f0127dad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127db0:	01 d0                	add    %edx,%eax
f0127db2:	48                   	dec    %eax
f0127db3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127db6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127db9:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dbe:	f7 75 cc             	divl   -0x34(%ebp)
f0127dc1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127dc4:	29 d0                	sub    %edx,%eax
f0127dc6:	89 c3                	mov    %eax,%ebx
f0127dc8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127dcf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127dd4:	0f b6 c0             	movzbl %al,%eax
f0127dd7:	c1 e0 04             	shl    $0x4,%eax
f0127dda:	89 c2                	mov    %eax,%edx
f0127ddc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127ddf:	01 d0                	add    %edx,%eax
f0127de1:	48                   	dec    %eax
f0127de2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127de5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127de8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ded:	f7 75 c4             	divl   -0x3c(%ebp)
f0127df0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127df3:	29 d0                	sub    %edx,%eax
f0127df5:	01 d8                	add    %ebx,%eax
f0127df7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127dfc:	39 c1                	cmp    %eax,%ecx
f0127dfe:	74 17                	je     f0127e17 <test_kfreelast+0x118>
f0127e00:	83 ec 04             	sub    $0x4,%esp
f0127e03:	68 d4 92 13 f0       	push   $0xf01392d4
f0127e08:	68 ca 0c 00 00       	push   $0xcca
f0127e0d:	68 ee 91 13 f0       	push   $0xf01391ee
f0127e12:	e8 99 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e17:	e8 4a c8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127e1c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127e1f:	74 17                	je     f0127e38 <test_kfreelast+0x139>
f0127e21:	83 ec 04             	sub    $0x4,%esp
f0127e24:	68 08 92 13 f0       	push   $0xf0139208
f0127e29:	68 cb 0c 00 00       	push   $0xccb
f0127e2e:	68 ee 91 13 f0       	push   $0xf01391ee
f0127e33:	e8 78 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e38:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127e3b:	e8 80 4b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127e40:	29 c3                	sub    %eax,%ebx
f0127e42:	89 d8                	mov    %ebx,%eax
f0127e44:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e49:	74 17                	je     f0127e62 <test_kfreelast+0x163>
f0127e4b:	83 ec 04             	sub    $0x4,%esp
f0127e4e:	68 70 92 13 f0       	push   $0xf0139270
f0127e53:	68 cc 0c 00 00       	push   $0xccc
f0127e58:	68 ee 91 13 f0       	push   $0xf01391ee
f0127e5d:	e8 4e 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127e62:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0127e69:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e6c:	e8 4f 4b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127e71:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e74:	e8 ed c7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127e79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127e7c:	83 ec 0c             	sub    $0xc,%esp
f0127e7f:	68 00 fc 1f 00       	push   $0x1ffc00
f0127e84:	e8 b8 00 fe ff       	call   f0107f41 <kmalloc>
f0127e89:	83 c4 10             	add    $0x10,%esp
f0127e8c:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e92:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127e98:	89 c1                	mov    %eax,%ecx
f0127e9a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127ea1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127ea6:	0f b6 d0             	movzbl %al,%edx
f0127ea9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127eac:	01 d0                	add    %edx,%eax
f0127eae:	48                   	dec    %eax
f0127eaf:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127eb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127eb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eba:	f7 75 bc             	divl   -0x44(%ebp)
f0127ebd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127ec0:	29 d0                	sub    %edx,%eax
f0127ec2:	89 c3                	mov    %eax,%ebx
f0127ec4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127ecb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127ed0:	0f b6 c0             	movzbl %al,%eax
f0127ed3:	c1 e0 04             	shl    $0x4,%eax
f0127ed6:	89 c2                	mov    %eax,%edx
f0127ed8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127edb:	01 d0                	add    %edx,%eax
f0127edd:	48                   	dec    %eax
f0127ede:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127ee1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127ee4:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ee9:	f7 75 b4             	divl   -0x4c(%ebp)
f0127eec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127eef:	29 d0                	sub    %edx,%eax
f0127ef1:	01 d8                	add    %ebx,%eax
f0127ef3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127ef8:	39 c1                	cmp    %eax,%ecx
f0127efa:	74 17                	je     f0127f13 <test_kfreelast+0x214>
f0127efc:	83 ec 04             	sub    $0x4,%esp
f0127eff:	68 d4 92 13 f0       	push   $0xf01392d4
f0127f04:	68 d3 0c 00 00       	push   $0xcd3
f0127f09:	68 ee 91 13 f0       	push   $0xf01391ee
f0127f0e:	e8 9d 82 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f13:	e8 4e c7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127f18:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127f1b:	74 17                	je     f0127f34 <test_kfreelast+0x235>
f0127f1d:	83 ec 04             	sub    $0x4,%esp
f0127f20:	68 08 92 13 f0       	push   $0xf0139208
f0127f25:	68 d4 0c 00 00       	push   $0xcd4
f0127f2a:	68 ee 91 13 f0       	push   $0xf01391ee
f0127f2f:	e8 7c 82 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f34:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127f37:	e8 84 4a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127f3c:	29 c3                	sub    %eax,%ebx
f0127f3e:	89 d8                	mov    %ebx,%eax
f0127f40:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f45:	74 17                	je     f0127f5e <test_kfreelast+0x25f>
f0127f47:	83 ec 04             	sub    $0x4,%esp
f0127f4a:	68 70 92 13 f0       	push   $0xf0139270
f0127f4f:	68 d5 0c 00 00       	push   $0xcd5
f0127f54:	68 ee 91 13 f0       	push   $0xf01391ee
f0127f59:	e8 52 82 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127f5e:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0127f65:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f68:	e8 53 4a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0127f6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f70:	e8 f1 c6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0127f75:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127f78:	83 ec 0c             	sub    $0xc,%esp
f0127f7b:	68 00 08 00 00       	push   $0x800
f0127f80:	e8 bc ff fd ff       	call   f0107f41 <kmalloc>
f0127f85:	83 c4 10             	add    $0x10,%esp
f0127f88:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f8e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127f94:	89 c1                	mov    %eax,%ecx
f0127f96:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127f9d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127fa2:	0f b6 d0             	movzbl %al,%edx
f0127fa5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127fa8:	01 d0                	add    %edx,%eax
f0127faa:	48                   	dec    %eax
f0127fab:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127fae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127fb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fb6:	f7 75 ac             	divl   -0x54(%ebp)
f0127fb9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127fbc:	29 d0                	sub    %edx,%eax
f0127fbe:	89 c3                	mov    %eax,%ebx
f0127fc0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127fc7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127fcc:	0f b6 c0             	movzbl %al,%eax
f0127fcf:	c1 e0 04             	shl    $0x4,%eax
f0127fd2:	89 c2                	mov    %eax,%edx
f0127fd4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127fd7:	01 d0                	add    %edx,%eax
f0127fd9:	48                   	dec    %eax
f0127fda:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127fdd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fe5:	f7 75 a4             	divl   -0x5c(%ebp)
f0127fe8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127feb:	29 d0                	sub    %edx,%eax
f0127fed:	01 d8                	add    %ebx,%eax
f0127fef:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127ff4:	39 c1                	cmp    %eax,%ecx
f0127ff6:	74 17                	je     f012800f <test_kfreelast+0x310>
f0127ff8:	83 ec 04             	sub    $0x4,%esp
f0127ffb:	68 d4 92 13 f0       	push   $0xf01392d4
f0128000:	68 dc 0c 00 00       	push   $0xcdc
f0128005:	68 ee 91 13 f0       	push   $0xf01391ee
f012800a:	e8 a1 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012800f:	e8 52 c6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128014:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128017:	74 17                	je     f0128030 <test_kfreelast+0x331>
f0128019:	83 ec 04             	sub    $0x4,%esp
f012801c:	68 08 92 13 f0       	push   $0xf0139208
f0128021:	68 dd 0c 00 00       	push   $0xcdd
f0128026:	68 ee 91 13 f0       	push   $0xf01391ee
f012802b:	e8 80 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128030:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128033:	e8 88 49 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128038:	29 c3                	sub    %eax,%ebx
f012803a:	89 d8                	mov    %ebx,%eax
f012803c:	83 f8 01             	cmp    $0x1,%eax
f012803f:	74 17                	je     f0128058 <test_kfreelast+0x359>
f0128041:	83 ec 04             	sub    $0x4,%esp
f0128044:	68 70 92 13 f0       	push   $0xf0139270
f0128049:	68 de 0c 00 00       	push   $0xcde
f012804e:	68 ee 91 13 f0       	push   $0xf01391ee
f0128053:	e8 58 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128058:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012805f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128062:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128068:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012806b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128072:	eb 0e                	jmp    f0128082 <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0128074:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128077:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012807a:	01 d0                	add    %edx,%eax
f012807c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012807f:	ff 45 f4             	incl   -0xc(%ebp)
f0128082:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128088:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012808b:	7f e7                	jg     f0128074 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012808d:	e8 2e 49 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128092:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128095:	e8 cc c5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012809a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012809d:	83 ec 0c             	sub    $0xc,%esp
f01280a0:	68 00 08 00 00       	push   $0x800
f01280a5:	e8 97 fe fd ff       	call   f0107f41 <kmalloc>
f01280aa:	83 c4 10             	add    $0x10,%esp
f01280ad:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280b3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01280b9:	89 c1                	mov    %eax,%ecx
f01280bb:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01280c2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01280c7:	0f b6 d0             	movzbl %al,%edx
f01280ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01280cd:	01 d0                	add    %edx,%eax
f01280cf:	48                   	dec    %eax
f01280d0:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01280d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01280d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01280db:	f7 75 98             	divl   -0x68(%ebp)
f01280de:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01280e1:	29 d0                	sub    %edx,%eax
f01280e3:	89 c3                	mov    %eax,%ebx
f01280e5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01280ec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01280f1:	0f b6 c0             	movzbl %al,%eax
f01280f4:	c1 e0 04             	shl    $0x4,%eax
f01280f7:	89 c2                	mov    %eax,%edx
f01280f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01280fc:	01 d0                	add    %edx,%eax
f01280fe:	48                   	dec    %eax
f01280ff:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0128102:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128105:	ba 00 00 00 00       	mov    $0x0,%edx
f012810a:	f7 75 90             	divl   -0x70(%ebp)
f012810d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128110:	29 d0                	sub    %edx,%eax
f0128112:	01 d8                	add    %ebx,%eax
f0128114:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128119:	39 c1                	cmp    %eax,%ecx
f012811b:	74 17                	je     f0128134 <test_kfreelast+0x435>
f012811d:	83 ec 04             	sub    $0x4,%esp
f0128120:	68 d4 92 13 f0       	push   $0xf01392d4
f0128125:	68 ea 0c 00 00       	push   $0xcea
f012812a:	68 ee 91 13 f0       	push   $0xf01391ee
f012812f:	e8 7c 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128134:	e8 2d c5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128139:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012813c:	74 17                	je     f0128155 <test_kfreelast+0x456>
f012813e:	83 ec 04             	sub    $0x4,%esp
f0128141:	68 08 92 13 f0       	push   $0xf0139208
f0128146:	68 eb 0c 00 00       	push   $0xceb
f012814b:	68 ee 91 13 f0       	push   $0xf01391ee
f0128150:	e8 5b 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128155:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128158:	e8 63 48 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012815d:	29 c3                	sub    %eax,%ebx
f012815f:	89 d8                	mov    %ebx,%eax
f0128161:	83 f8 01             	cmp    $0x1,%eax
f0128164:	74 17                	je     f012817d <test_kfreelast+0x47e>
f0128166:	83 ec 04             	sub    $0x4,%esp
f0128169:	68 70 92 13 f0       	push   $0xf0139270
f012816e:	68 ec 0c 00 00       	push   $0xcec
f0128173:	68 ee 91 13 f0       	push   $0xf01391ee
f0128178:	e8 33 80 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012817d:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f0128184:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128187:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012818d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128190:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128197:	eb 0e                	jmp    f01281a7 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f0128199:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012819c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012819f:	01 d0                	add    %edx,%eax
f01281a1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01281a4:	ff 45 f4             	incl   -0xc(%ebp)
f01281a7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01281ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01281b0:	7f e7                	jg     f0128199 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01281b2:	e8 09 48 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01281b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281ba:	e8 a7 c4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01281bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01281c2:	83 ec 0c             	sub    $0xc,%esp
f01281c5:	68 00 1c 00 00       	push   $0x1c00
f01281ca:	e8 72 fd fd ff       	call   f0107f41 <kmalloc>
f01281cf:	83 c4 10             	add    $0x10,%esp
f01281d2:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01281d8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01281de:	89 c1                	mov    %eax,%ecx
f01281e0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01281e7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01281ec:	0f b6 d0             	movzbl %al,%edx
f01281ef:	8b 45 88             	mov    -0x78(%ebp),%eax
f01281f2:	01 d0                	add    %edx,%eax
f01281f4:	48                   	dec    %eax
f01281f5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01281f8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01281fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0128200:	f7 75 88             	divl   -0x78(%ebp)
f0128203:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128206:	29 d0                	sub    %edx,%eax
f0128208:	89 c3                	mov    %eax,%ebx
f012820a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128211:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128216:	0f b6 c0             	movzbl %al,%eax
f0128219:	c1 e0 04             	shl    $0x4,%eax
f012821c:	89 c2                	mov    %eax,%edx
f012821e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128221:	01 d0                	add    %edx,%eax
f0128223:	48                   	dec    %eax
f0128224:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012822a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128230:	ba 00 00 00 00       	mov    $0x0,%edx
f0128235:	f7 75 80             	divl   -0x80(%ebp)
f0128238:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012823e:	29 d0                	sub    %edx,%eax
f0128240:	01 d8                	add    %ebx,%eax
f0128242:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128247:	39 c1                	cmp    %eax,%ecx
f0128249:	74 17                	je     f0128262 <test_kfreelast+0x563>
f012824b:	83 ec 04             	sub    $0x4,%esp
f012824e:	68 d4 92 13 f0       	push   $0xf01392d4
f0128253:	68 f8 0c 00 00       	push   $0xcf8
f0128258:	68 ee 91 13 f0       	push   $0xf01391ee
f012825d:	e8 4e 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128262:	e8 ff c3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128267:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012826a:	74 17                	je     f0128283 <test_kfreelast+0x584>
f012826c:	83 ec 04             	sub    $0x4,%esp
f012826f:	68 08 92 13 f0       	push   $0xf0139208
f0128274:	68 f9 0c 00 00       	push   $0xcf9
f0128279:	68 ee 91 13 f0       	push   $0xf01391ee
f012827e:	e8 2d 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128283:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128286:	e8 35 47 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012828b:	29 c3                	sub    %eax,%ebx
f012828d:	89 d8                	mov    %ebx,%eax
f012828f:	83 f8 02             	cmp    $0x2,%eax
f0128292:	74 17                	je     f01282ab <test_kfreelast+0x5ac>
f0128294:	83 ec 04             	sub    $0x4,%esp
f0128297:	68 70 92 13 f0       	push   $0xf0139270
f012829c:	68 fa 0c 00 00       	push   $0xcfa
f01282a1:	68 ee 91 13 f0       	push   $0xf01391ee
f01282a6:	e8 05 7f fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01282ab:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f01282b2:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01282b5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01282bb:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01282be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01282c5:	eb 0e                	jmp    f01282d5 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f01282c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01282ca:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01282cd:	01 d0                	add    %edx,%eax
f01282cf:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01282d2:	ff 45 f4             	incl   -0xc(%ebp)
f01282d5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01282db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01282de:	7f e7                	jg     f01282c7 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01282e0:	e8 db 46 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01282e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282e8:	e8 79 c3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01282ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01282f0:	83 ec 0c             	sub    $0xc,%esp
f01282f3:	68 00 fc 2f 00       	push   $0x2ffc00
f01282f8:	e8 44 fc fd ff       	call   f0107f41 <kmalloc>
f01282fd:	83 c4 10             	add    $0x10,%esp
f0128300:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128306:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012830c:	89 c1                	mov    %eax,%ecx
f012830e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128315:	10 00 00 
f0128318:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012831d:	0f b6 d0             	movzbl %al,%edx
f0128320:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128326:	01 d0                	add    %edx,%eax
f0128328:	48                   	dec    %eax
f0128329:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012832f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128335:	ba 00 00 00 00       	mov    $0x0,%edx
f012833a:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128340:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128346:	29 d0                	sub    %edx,%eax
f0128348:	89 c3                	mov    %eax,%ebx
f012834a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128351:	10 00 00 
f0128354:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128359:	0f b6 c0             	movzbl %al,%eax
f012835c:	c1 e0 04             	shl    $0x4,%eax
f012835f:	89 c2                	mov    %eax,%edx
f0128361:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128367:	01 d0                	add    %edx,%eax
f0128369:	48                   	dec    %eax
f012836a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128370:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128376:	ba 00 00 00 00       	mov    $0x0,%edx
f012837b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128381:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128387:	29 d0                	sub    %edx,%eax
f0128389:	01 d8                	add    %ebx,%eax
f012838b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128390:	39 c1                	cmp    %eax,%ecx
f0128392:	74 17                	je     f01283ab <test_kfreelast+0x6ac>
f0128394:	83 ec 04             	sub    $0x4,%esp
f0128397:	68 d4 92 13 f0       	push   $0xf01392d4
f012839c:	68 06 0d 00 00       	push   $0xd06
f01283a1:	68 ee 91 13 f0       	push   $0xf01391ee
f01283a6:	e8 05 7e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283ab:	e8 b6 c2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01283b0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01283b3:	74 17                	je     f01283cc <test_kfreelast+0x6cd>
f01283b5:	83 ec 04             	sub    $0x4,%esp
f01283b8:	68 08 92 13 f0       	push   $0xf0139208
f01283bd:	68 07 0d 00 00       	push   $0xd07
f01283c2:	68 ee 91 13 f0       	push   $0xf01391ee
f01283c7:	e8 e4 7d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01283cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01283cf:	e8 ec 45 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01283d4:	29 c3                	sub    %eax,%ebx
f01283d6:	89 d8                	mov    %ebx,%eax
f01283d8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01283dd:	74 17                	je     f01283f6 <test_kfreelast+0x6f7>
f01283df:	83 ec 04             	sub    $0x4,%esp
f01283e2:	68 70 92 13 f0       	push   $0xf0139270
f01283e7:	68 08 0d 00 00       	push   $0xd08
f01283ec:	68 ee 91 13 f0       	push   $0xf01391ee
f01283f1:	e8 ba 7d fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01283f6:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f01283fd:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128400:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128406:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128409:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128410:	eb 0e                	jmp    f0128420 <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f0128412:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128415:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128418:	01 d0                	add    %edx,%eax
f012841a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012841d:	ff 45 f4             	incl   -0xc(%ebp)
f0128420:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128426:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128429:	7f e7                	jg     f0128412 <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012842b:	e8 90 45 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128430:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128433:	e8 2e c2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128438:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012843b:	83 ec 0c             	sub    $0xc,%esp
f012843e:	68 00 fc 5f 00       	push   $0x5ffc00
f0128443:	e8 f9 fa fd ff       	call   f0107f41 <kmalloc>
f0128448:	83 c4 10             	add    $0x10,%esp
f012844b:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128451:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128457:	89 c1                	mov    %eax,%ecx
f0128459:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128460:	10 00 00 
f0128463:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128468:	0f b6 d0             	movzbl %al,%edx
f012846b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128471:	01 d0                	add    %edx,%eax
f0128473:	48                   	dec    %eax
f0128474:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012847a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128480:	ba 00 00 00 00       	mov    $0x0,%edx
f0128485:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012848b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128491:	29 d0                	sub    %edx,%eax
f0128493:	89 c3                	mov    %eax,%ebx
f0128495:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012849c:	10 00 00 
f012849f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01284a4:	0f b6 c0             	movzbl %al,%eax
f01284a7:	c1 e0 04             	shl    $0x4,%eax
f01284aa:	89 c2                	mov    %eax,%edx
f01284ac:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01284b2:	01 d0                	add    %edx,%eax
f01284b4:	48                   	dec    %eax
f01284b5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01284bb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01284c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01284c6:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01284cc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01284d2:	29 d0                	sub    %edx,%eax
f01284d4:	01 d8                	add    %ebx,%eax
f01284d6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01284db:	39 c1                	cmp    %eax,%ecx
f01284dd:	74 17                	je     f01284f6 <test_kfreelast+0x7f7>
f01284df:	83 ec 04             	sub    $0x4,%esp
f01284e2:	68 d4 92 13 f0       	push   $0xf01392d4
f01284e7:	68 14 0d 00 00       	push   $0xd14
f01284ec:	68 ee 91 13 f0       	push   $0xf01391ee
f01284f1:	e8 ba 7c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01284f6:	e8 6b c1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01284fb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01284fe:	74 17                	je     f0128517 <test_kfreelast+0x818>
f0128500:	83 ec 04             	sub    $0x4,%esp
f0128503:	68 08 92 13 f0       	push   $0xf0139208
f0128508:	68 15 0d 00 00       	push   $0xd15
f012850d:	68 ee 91 13 f0       	push   $0xf01391ee
f0128512:	e8 99 7c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128517:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012851a:	e8 a1 44 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012851f:	29 c3                	sub    %eax,%ebx
f0128521:	89 d8                	mov    %ebx,%eax
f0128523:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128528:	74 17                	je     f0128541 <test_kfreelast+0x842>
f012852a:	83 ec 04             	sub    $0x4,%esp
f012852d:	68 70 92 13 f0       	push   $0xf0139270
f0128532:	68 16 0d 00 00       	push   $0xd16
f0128537:	68 ee 91 13 f0       	push   $0xf01391ee
f012853c:	e8 6f 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0128541:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f0128548:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012854b:	e8 70 44 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128550:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128553:	e8 0e c1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128558:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012855b:	83 ec 0c             	sub    $0xc,%esp
f012855e:	68 00 38 00 00       	push   $0x3800
f0128563:	e8 d9 f9 fd ff       	call   f0107f41 <kmalloc>
f0128568:	83 c4 10             	add    $0x10,%esp
f012856b:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128571:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128577:	89 c1                	mov    %eax,%ecx
f0128579:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128580:	10 00 00 
f0128583:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128588:	0f b6 d0             	movzbl %al,%edx
f012858b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128591:	01 d0                	add    %edx,%eax
f0128593:	48                   	dec    %eax
f0128594:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012859a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01285a5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01285ab:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285b1:	29 d0                	sub    %edx,%eax
f01285b3:	89 c3                	mov    %eax,%ebx
f01285b5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01285bc:	10 00 00 
f01285bf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01285c4:	0f b6 c0             	movzbl %al,%eax
f01285c7:	c1 e0 04             	shl    $0x4,%eax
f01285ca:	89 c2                	mov    %eax,%edx
f01285cc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01285d2:	01 d0                	add    %edx,%eax
f01285d4:	48                   	dec    %eax
f01285d5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01285db:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01285e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01285e6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01285ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01285f2:	29 d0                	sub    %edx,%eax
f01285f4:	01 d8                	add    %ebx,%eax
f01285f6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01285fb:	39 c1                	cmp    %eax,%ecx
f01285fd:	74 17                	je     f0128616 <test_kfreelast+0x917>
f01285ff:	83 ec 04             	sub    $0x4,%esp
f0128602:	68 d4 92 13 f0       	push   $0xf01392d4
f0128607:	68 1d 0d 00 00       	push   $0xd1d
f012860c:	68 ee 91 13 f0       	push   $0xf01391ee
f0128611:	e8 9a 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128616:	e8 4b c0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012861b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012861e:	74 17                	je     f0128637 <test_kfreelast+0x938>
f0128620:	83 ec 04             	sub    $0x4,%esp
f0128623:	68 08 92 13 f0       	push   $0xf0139208
f0128628:	68 1e 0d 00 00       	push   $0xd1e
f012862d:	68 ee 91 13 f0       	push   $0xf01391ee
f0128632:	e8 79 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128637:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012863a:	e8 81 43 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012863f:	29 c3                	sub    %eax,%ebx
f0128641:	89 d8                	mov    %ebx,%eax
f0128643:	83 f8 04             	cmp    $0x4,%eax
f0128646:	74 17                	je     f012865f <test_kfreelast+0x960>
f0128648:	83 ec 04             	sub    $0x4,%esp
f012864b:	68 70 92 13 f0       	push   $0xf0139270
f0128650:	68 1f 0d 00 00       	push   $0xd1f
f0128655:	68 ee 91 13 f0       	push   $0xf01391ee
f012865a:	e8 51 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012865f:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128666:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128669:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012866f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128672:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128679:	eb 0e                	jmp    f0128689 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f012867b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012867e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128681:	01 d0                	add    %edx,%eax
f0128683:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128686:	ff 45 f4             	incl   -0xc(%ebp)
f0128689:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012868f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128692:	7f e7                	jg     f012867b <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0128694:	e8 27 43 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128699:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012869f:	e8 c2 bf fd ff       	call   f0104666 <pf_calculate_free_frames>
f01286a4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f01286aa:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01286b0:	83 ec 0c             	sub    $0xc,%esp
f01286b3:	50                   	push   %eax
f01286b4:	e8 a2 f8 fd ff       	call   f0107f5b <kfree>
f01286b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01286bc:	e8 a5 bf fd ff       	call   f0104666 <pf_calculate_free_frames>
f01286c1:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01286c7:	74 17                	je     f01286e0 <test_kfreelast+0x9e1>
f01286c9:	83 ec 04             	sub    $0x4,%esp
f01286cc:	68 08 92 13 f0       	push   $0xf0139208
f01286d1:	68 2e 0d 00 00       	push   $0xd2e
f01286d6:	68 ee 91 13 f0       	push   $0xf01391ee
f01286db:	e8 d0 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01286e0:	e8 db 42 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01286e5:	89 c2                	mov    %eax,%edx
f01286e7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01286ed:	29 c2                	sub    %eax,%edx
f01286ef:	89 d0                	mov    %edx,%eax
f01286f1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01286f6:	74 17                	je     f012870f <test_kfreelast+0xa10>
f01286f8:	83 ec 04             	sub    $0x4,%esp
f01286fb:	68 78 99 13 f0       	push   $0xf0139978
f0128700:	68 2f 0d 00 00       	push   $0xd2f
f0128705:	68 ee 91 13 f0       	push   $0xf01391ee
f012870a:	e8 a1 7a fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012870f:	e8 ac 42 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128714:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012871a:	e8 47 bf fd ff       	call   f0104666 <pf_calculate_free_frames>
f012871f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f0128725:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012872b:	83 ec 0c             	sub    $0xc,%esp
f012872e:	50                   	push   %eax
f012872f:	e8 27 f8 fd ff       	call   f0107f5b <kfree>
f0128734:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128737:	e8 2a bf fd ff       	call   f0104666 <pf_calculate_free_frames>
f012873c:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128742:	74 17                	je     f012875b <test_kfreelast+0xa5c>
f0128744:	83 ec 04             	sub    $0x4,%esp
f0128747:	68 08 92 13 f0       	push   $0xf0139208
f012874c:	68 35 0d 00 00       	push   $0xd35
f0128751:	68 ee 91 13 f0       	push   $0xf01391ee
f0128756:	e8 55 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012875b:	e8 60 42 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128760:	89 c2                	mov    %eax,%edx
f0128762:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128768:	29 c2                	sub    %eax,%edx
f012876a:	89 d0                	mov    %edx,%eax
f012876c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128771:	74 17                	je     f012878a <test_kfreelast+0xa8b>
f0128773:	83 ec 04             	sub    $0x4,%esp
f0128776:	68 78 99 13 f0       	push   $0xf0139978
f012877b:	68 36 0d 00 00       	push   $0xd36
f0128780:	68 ee 91 13 f0       	push   $0xf01391ee
f0128785:	e8 26 7a fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012878a:	e8 31 42 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012878f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128795:	e8 cc be fd ff       	call   f0104666 <pf_calculate_free_frames>
f012879a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f01287a0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01287a6:	83 ec 0c             	sub    $0xc,%esp
f01287a9:	50                   	push   %eax
f01287aa:	e8 ac f7 fd ff       	call   f0107f5b <kfree>
f01287af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287b2:	e8 af be fd ff       	call   f0104666 <pf_calculate_free_frames>
f01287b7:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01287bd:	74 17                	je     f01287d6 <test_kfreelast+0xad7>
f01287bf:	83 ec 04             	sub    $0x4,%esp
f01287c2:	68 08 92 13 f0       	push   $0xf0139208
f01287c7:	68 3c 0d 00 00       	push   $0xd3c
f01287cc:	68 ee 91 13 f0       	push   $0xf01391ee
f01287d1:	e8 da 79 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01287d6:	e8 e5 41 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01287db:	89 c2                	mov    %eax,%edx
f01287dd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01287e3:	29 c2                	sub    %eax,%edx
f01287e5:	89 d0                	mov    %edx,%eax
f01287e7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01287ec:	74 17                	je     f0128805 <test_kfreelast+0xb06>
f01287ee:	83 ec 04             	sub    $0x4,%esp
f01287f1:	68 78 99 13 f0       	push   $0xf0139978
f01287f6:	68 3d 0d 00 00       	push   $0xd3d
f01287fb:	68 ee 91 13 f0       	push   $0xf01391ee
f0128800:	e8 ab 79 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128805:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012880b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012880e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128815:	eb 1e                	jmp    f0128835 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128817:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012881d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128820:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128823:	01 c8                	add    %ecx,%eax
f0128825:	8a 00                	mov    (%eax),%al
f0128827:	0f be c0             	movsbl %al,%eax
f012882a:	01 d0                	add    %edx,%eax
f012882c:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128832:	ff 45 f4             	incl   -0xc(%ebp)
f0128835:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012883b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012883e:	7f d7                	jg     f0128817 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0128840:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128846:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012884c:	01 c0                	add    %eax,%eax
f012884e:	39 c2                	cmp    %eax,%edx
f0128850:	74 17                	je     f0128869 <test_kfreelast+0xb6a>
f0128852:	83 ec 04             	sub    $0x4,%esp
f0128855:	68 d4 99 13 f0       	push   $0xf01399d4
f012885a:	68 48 0d 00 00       	push   $0xd48
f012885f:	68 ee 91 13 f0       	push   $0xf01391ee
f0128864:	e8 47 79 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128869:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012886f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128872:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128879:	eb 1e                	jmp    f0128899 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f012887b:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128881:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128884:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128887:	01 c8                	add    %ecx,%eax
f0128889:	8a 00                	mov    (%eax),%al
f012888b:	0f be c0             	movsbl %al,%eax
f012888e:	01 d0                	add    %edx,%eax
f0128890:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128896:	ff 45 f4             	incl   -0xc(%ebp)
f0128899:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012889f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288a2:	7f d7                	jg     f012887b <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01288a4:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f01288aa:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01288b0:	89 c1                	mov    %eax,%ecx
f01288b2:	01 c9                	add    %ecx,%ecx
f01288b4:	01 c8                	add    %ecx,%eax
f01288b6:	39 c2                	cmp    %eax,%edx
f01288b8:	74 17                	je     f01288d1 <test_kfreelast+0xbd2>
f01288ba:	83 ec 04             	sub    $0x4,%esp
f01288bd:	68 d4 99 13 f0       	push   $0xf01399d4
f01288c2:	68 50 0d 00 00       	push   $0xd50
f01288c7:	68 ee 91 13 f0       	push   $0xf01391ee
f01288cc:	e8 df 78 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01288d1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01288d7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01288da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288e1:	eb 1e                	jmp    f0128901 <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f01288e3:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f01288e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01288ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01288ef:	01 c8                	add    %ecx,%eax
f01288f1:	8a 00                	mov    (%eax),%al
f01288f3:	0f be c0             	movsbl %al,%eax
f01288f6:	01 d0                	add    %edx,%eax
f01288f8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01288fe:	ff 45 f4             	incl   -0xc(%ebp)
f0128901:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128907:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012890a:	7f d7                	jg     f01288e3 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012890c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128912:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0128918:	c1 e2 02             	shl    $0x2,%edx
f012891b:	39 d0                	cmp    %edx,%eax
f012891d:	74 17                	je     f0128936 <test_kfreelast+0xc37>
f012891f:	83 ec 04             	sub    $0x4,%esp
f0128922:	68 d4 99 13 f0       	push   $0xf01399d4
f0128927:	68 58 0d 00 00       	push   $0xd58
f012892c:	68 ee 91 13 f0       	push   $0xf01391ee
f0128931:	e8 7a 78 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128936:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012893c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012893f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128946:	eb 1e                	jmp    f0128966 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128948:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f012894e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128951:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128954:	01 c8                	add    %ecx,%eax
f0128956:	8a 00                	mov    (%eax),%al
f0128958:	0f be c0             	movsbl %al,%eax
f012895b:	01 d0                	add    %edx,%eax
f012895d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128963:	ff 45 f4             	incl   -0xc(%ebp)
f0128966:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012896c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012896f:	7f d7                	jg     f0128948 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0128971:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128977:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f012897d:	89 d0                	mov    %edx,%eax
f012897f:	c1 e0 02             	shl    $0x2,%eax
f0128982:	01 d0                	add    %edx,%eax
f0128984:	39 c1                	cmp    %eax,%ecx
f0128986:	74 17                	je     f012899f <test_kfreelast+0xca0>
f0128988:	83 ec 04             	sub    $0x4,%esp
f012898b:	68 d4 99 13 f0       	push   $0xf01399d4
f0128990:	68 60 0d 00 00       	push   $0xd60
f0128995:	68 ee 91 13 f0       	push   $0xf01391ee
f012899a:	e8 11 78 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012899f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01289a5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01289a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01289af:	eb 1e                	jmp    f01289cf <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f01289b1:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f01289b7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01289ba:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01289bd:	01 c8                	add    %ecx,%eax
f01289bf:	8a 00                	mov    (%eax),%al
f01289c1:	0f be c0             	movsbl %al,%eax
f01289c4:	01 d0                	add    %edx,%eax
f01289c6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01289cc:	ff 45 f4             	incl   -0xc(%ebp)
f01289cf:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01289d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01289d8:	7f d7                	jg     f01289b1 <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01289da:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f01289e0:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f01289e6:	89 d0                	mov    %edx,%eax
f01289e8:	01 c0                	add    %eax,%eax
f01289ea:	01 d0                	add    %edx,%eax
f01289ec:	01 c0                	add    %eax,%eax
f01289ee:	01 d0                	add    %edx,%eax
f01289f0:	39 c1                	cmp    %eax,%ecx
f01289f2:	74 17                	je     f0128a0b <test_kfreelast+0xd0c>
f01289f4:	83 ec 04             	sub    $0x4,%esp
f01289f7:	68 d4 99 13 f0       	push   $0xf01399d4
f01289fc:	68 68 0d 00 00       	push   $0xd68
f0128a01:	68 ee 91 13 f0       	push   $0xf01391ee
f0128a06:	e8 a5 77 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0128a0b:	e8 b0 3f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128a10:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a13:	e8 4e bc fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128a18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0128a1b:	83 ec 0c             	sub    $0xc,%esp
f0128a1e:	68 00 50 00 00       	push   $0x5000
f0128a23:	e8 19 f5 fd ff       	call   f0107f41 <kmalloc>
f0128a28:	83 c4 10             	add    $0x10,%esp
f0128a2b:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a31:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128a37:	89 c1                	mov    %eax,%ecx
f0128a39:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128a40:	10 00 00 
f0128a43:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128a48:	0f b6 d0             	movzbl %al,%edx
f0128a4b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128a51:	01 d0                	add    %edx,%eax
f0128a53:	48                   	dec    %eax
f0128a54:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128a5a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128a60:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a65:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128a6b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128a71:	29 d0                	sub    %edx,%eax
f0128a73:	89 c3                	mov    %eax,%ebx
f0128a75:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128a7c:	10 00 00 
f0128a7f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128a84:	0f b6 c0             	movzbl %al,%eax
f0128a87:	c1 e0 04             	shl    $0x4,%eax
f0128a8a:	89 c2                	mov    %eax,%edx
f0128a8c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128a92:	01 d0                	add    %edx,%eax
f0128a94:	48                   	dec    %eax
f0128a95:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128a9b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128aa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128aa6:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128aac:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128ab2:	29 d0                	sub    %edx,%eax
f0128ab4:	01 d8                	add    %ebx,%eax
f0128ab6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128abb:	39 c1                	cmp    %eax,%ecx
f0128abd:	74 17                	je     f0128ad6 <test_kfreelast+0xdd7>
f0128abf:	83 ec 04             	sub    $0x4,%esp
f0128ac2:	68 d4 92 13 f0       	push   $0xf01392d4
f0128ac7:	68 71 0d 00 00       	push   $0xd71
f0128acc:	68 ee 91 13 f0       	push   $0xf01391ee
f0128ad1:	e8 da 76 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ad6:	e8 8b bb fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128adb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ade:	74 17                	je     f0128af7 <test_kfreelast+0xdf8>
f0128ae0:	83 ec 04             	sub    $0x4,%esp
f0128ae3:	68 08 92 13 f0       	push   $0xf0139208
f0128ae8:	68 72 0d 00 00       	push   $0xd72
f0128aed:	68 ee 91 13 f0       	push   $0xf01391ee
f0128af2:	e8 b9 76 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128af7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128afa:	e8 c1 3e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128aff:	29 c3                	sub    %eax,%ebx
f0128b01:	89 d8                	mov    %ebx,%eax
f0128b03:	83 f8 05             	cmp    $0x5,%eax
f0128b06:	74 17                	je     f0128b1f <test_kfreelast+0xe20>
f0128b08:	83 ec 04             	sub    $0x4,%esp
f0128b0b:	68 70 92 13 f0       	push   $0xf0139270
f0128b10:	68 73 0d 00 00       	push   $0xd73
f0128b15:	68 ee 91 13 f0       	push   $0xf01391ee
f0128b1a:	e8 91 76 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128b1f:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128b26:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0128b29:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128b2f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128b32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b39:	eb 0e                	jmp    f0128b49 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f0128b3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128b3e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b41:	01 d0                	add    %edx,%eax
f0128b43:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128b46:	ff 45 f4             	incl   -0xc(%ebp)
f0128b49:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0128b4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b52:	7f e7                	jg     f0128b3b <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b54:	e8 67 3e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128b59:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b5c:	e8 05 bb fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128b61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128b64:	83 ec 0c             	sub    $0xc,%esp
f0128b67:	68 00 00 10 00       	push   $0x100000
f0128b6c:	e8 d0 f3 fd ff       	call   f0107f41 <kmalloc>
f0128b71:	83 c4 10             	add    $0x10,%esp
f0128b74:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b7a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128b80:	89 c1                	mov    %eax,%ecx
f0128b82:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128b89:	10 00 00 
f0128b8c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128b91:	0f b6 d0             	movzbl %al,%edx
f0128b94:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128b9a:	01 d0                	add    %edx,%eax
f0128b9c:	48                   	dec    %eax
f0128b9d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128ba3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128ba9:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bae:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128bb4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128bba:	29 d0                	sub    %edx,%eax
f0128bbc:	89 c3                	mov    %eax,%ebx
f0128bbe:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128bc5:	10 00 00 
f0128bc8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128bcd:	0f b6 c0             	movzbl %al,%eax
f0128bd0:	c1 e0 04             	shl    $0x4,%eax
f0128bd3:	89 c2                	mov    %eax,%edx
f0128bd5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128bdb:	01 d0                	add    %edx,%eax
f0128bdd:	48                   	dec    %eax
f0128bde:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128be4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128bea:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bef:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128bf5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128bfb:	29 d0                	sub    %edx,%eax
f0128bfd:	01 d8                	add    %ebx,%eax
f0128bff:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128c04:	39 c1                	cmp    %eax,%ecx
f0128c06:	74 17                	je     f0128c1f <test_kfreelast+0xf20>
f0128c08:	83 ec 04             	sub    $0x4,%esp
f0128c0b:	68 d4 92 13 f0       	push   $0xf01392d4
f0128c10:	68 7f 0d 00 00       	push   $0xd7f
f0128c15:	68 ee 91 13 f0       	push   $0xf01391ee
f0128c1a:	e8 91 75 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c1f:	e8 42 ba fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128c24:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c27:	74 17                	je     f0128c40 <test_kfreelast+0xf41>
f0128c29:	83 ec 04             	sub    $0x4,%esp
f0128c2c:	68 08 92 13 f0       	push   $0xf0139208
f0128c31:	68 80 0d 00 00       	push   $0xd80
f0128c36:	68 ee 91 13 f0       	push   $0xf01391ee
f0128c3b:	e8 70 75 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c40:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128c43:	e8 78 3d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128c48:	29 c3                	sub    %eax,%ebx
f0128c4a:	89 d8                	mov    %ebx,%eax
f0128c4c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128c51:	74 17                	je     f0128c6a <test_kfreelast+0xf6b>
f0128c53:	83 ec 04             	sub    $0x4,%esp
f0128c56:	68 70 92 13 f0       	push   $0xf0139270
f0128c5b:	68 81 0d 00 00       	push   $0xd81
f0128c60:	68 ee 91 13 f0       	push   $0xf01391ee
f0128c65:	e8 46 75 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128c6a:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f0128c71:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128c74:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128c7a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0128c7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c84:	eb 0e                	jmp    f0128c94 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128c86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c89:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c8c:	01 d0                	add    %edx,%eax
f0128c8e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0128c91:	ff 45 f4             	incl   -0xc(%ebp)
f0128c94:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128c9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c9d:	7f e7                	jg     f0128c86 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0128c9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ca6:	e8 15 3d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128cab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cae:	e8 b3 b9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128cb3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128cb6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128cbc:	83 ec 0c             	sub    $0xc,%esp
f0128cbf:	50                   	push   %eax
f0128cc0:	e8 96 f2 fd ff       	call   f0107f5b <kfree>
f0128cc5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128cc8:	e8 99 b9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128ccd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128cd0:	74 17                	je     f0128ce9 <test_kfreelast+0xfea>
f0128cd2:	83 ec 04             	sub    $0x4,%esp
f0128cd5:	68 08 92 13 f0       	push   $0xf0139208
f0128cda:	68 91 0d 00 00       	push   $0xd91
f0128cdf:	68 ee 91 13 f0       	push   $0xf01391ee
f0128ce4:	e8 c7 74 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128ce9:	e8 d2 3c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128cee:	89 c2                	mov    %eax,%edx
f0128cf0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128cf3:	29 c2                	sub    %eax,%edx
f0128cf5:	89 d0                	mov    %edx,%eax
f0128cf7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128cfc:	74 17                	je     f0128d15 <test_kfreelast+0x1016>
f0128cfe:	83 ec 04             	sub    $0x4,%esp
f0128d01:	68 78 99 13 f0       	push   $0xf0139978
f0128d06:	68 92 0d 00 00       	push   $0xd92
f0128d0b:	68 ee 91 13 f0       	push   $0xf01391ee
f0128d10:	e8 9b 74 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d15:	e8 a6 3c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128d1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d1d:	e8 44 b9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128d22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128d25:	83 ec 0c             	sub    $0xc,%esp
f0128d28:	68 00 78 00 00       	push   $0x7800
f0128d2d:	e8 0f f2 fd ff       	call   f0107f41 <kmalloc>
f0128d32:	83 c4 10             	add    $0x10,%esp
f0128d35:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d3b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128d41:	89 c1                	mov    %eax,%ecx
f0128d43:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128d4a:	10 00 00 
f0128d4d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128d52:	0f b6 d0             	movzbl %al,%edx
f0128d55:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128d5b:	01 d0                	add    %edx,%eax
f0128d5d:	48                   	dec    %eax
f0128d5e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128d64:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d6f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128d75:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d7b:	29 d0                	sub    %edx,%eax
f0128d7d:	89 c3                	mov    %eax,%ebx
f0128d7f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128d86:	10 00 00 
f0128d89:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128d8e:	0f b6 c0             	movzbl %al,%eax
f0128d91:	c1 e0 04             	shl    $0x4,%eax
f0128d94:	89 c2                	mov    %eax,%edx
f0128d96:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128d9c:	01 d0                	add    %edx,%eax
f0128d9e:	48                   	dec    %eax
f0128d9f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128da5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128dab:	ba 00 00 00 00       	mov    $0x0,%edx
f0128db0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128db6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128dbc:	29 d0                	sub    %edx,%eax
f0128dbe:	01 d8                	add    %ebx,%eax
f0128dc0:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128dc5:	39 c1                	cmp    %eax,%ecx
f0128dc7:	74 17                	je     f0128de0 <test_kfreelast+0x10e1>
f0128dc9:	83 ec 04             	sub    $0x4,%esp
f0128dcc:	68 d4 92 13 f0       	push   $0xf01392d4
f0128dd1:	68 9b 0d 00 00       	push   $0xd9b
f0128dd6:	68 ee 91 13 f0       	push   $0xf01391ee
f0128ddb:	e8 d0 73 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128de0:	e8 81 b8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128de5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128de8:	74 17                	je     f0128e01 <test_kfreelast+0x1102>
f0128dea:	83 ec 04             	sub    $0x4,%esp
f0128ded:	68 08 92 13 f0       	push   $0xf0139208
f0128df2:	68 9c 0d 00 00       	push   $0xd9c
f0128df7:	68 ee 91 13 f0       	push   $0xf01391ee
f0128dfc:	e8 af 73 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e01:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e04:	e8 b7 3b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128e09:	29 c3                	sub    %eax,%ebx
f0128e0b:	89 d8                	mov    %ebx,%eax
f0128e0d:	83 f8 08             	cmp    $0x8,%eax
f0128e10:	74 17                	je     f0128e29 <test_kfreelast+0x112a>
f0128e12:	83 ec 04             	sub    $0x4,%esp
f0128e15:	68 70 92 13 f0       	push   $0xf0139270
f0128e1a:	68 9d 0d 00 00       	push   $0xd9d
f0128e1f:	68 ee 91 13 f0       	push   $0xf01391ee
f0128e24:	e8 87 73 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0128e29:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0128e30:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0128e33:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128e39:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0128e3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e43:	eb 0e                	jmp    f0128e53 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0128e45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e48:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128e4b:	01 d0                	add    %edx,%eax
f0128e4d:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0128e50:	ff 45 f4             	incl   -0xc(%ebp)
f0128e53:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128e59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e5c:	7f e7                	jg     f0128e45 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e5e:	e8 5d 3b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128e63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e66:	e8 fb b7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128e6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0128e6e:	83 ec 0c             	sub    $0xc,%esp
f0128e71:	68 00 00 10 00       	push   $0x100000
f0128e76:	e8 c6 f0 fd ff       	call   f0107f41 <kmalloc>
f0128e7b:	83 c4 10             	add    $0x10,%esp
f0128e7e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e84:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128e8a:	89 c1                	mov    %eax,%ecx
f0128e8c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128e93:	10 00 00 
f0128e96:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128e9b:	0f b6 d0             	movzbl %al,%edx
f0128e9e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128ea4:	01 d0                	add    %edx,%eax
f0128ea6:	48                   	dec    %eax
f0128ea7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128ead:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128eb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0128eb8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128ebe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ec4:	29 d0                	sub    %edx,%eax
f0128ec6:	89 c3                	mov    %eax,%ebx
f0128ec8:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128ecf:	10 00 00 
f0128ed2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128ed7:	0f b6 c0             	movzbl %al,%eax
f0128eda:	c1 e0 04             	shl    $0x4,%eax
f0128edd:	89 c2                	mov    %eax,%edx
f0128edf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128ee5:	01 d0                	add    %edx,%eax
f0128ee7:	48                   	dec    %eax
f0128ee8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128eee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ef9:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128eff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f05:	29 d0                	sub    %edx,%eax
f0128f07:	01 d8                	add    %ebx,%eax
f0128f09:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0128f0e:	39 c1                	cmp    %eax,%ecx
f0128f10:	74 17                	je     f0128f29 <test_kfreelast+0x122a>
f0128f12:	83 ec 04             	sub    $0x4,%esp
f0128f15:	68 d4 92 13 f0       	push   $0xf01392d4
f0128f1a:	68 a9 0d 00 00       	push   $0xda9
f0128f1f:	68 ee 91 13 f0       	push   $0xf01391ee
f0128f24:	e8 87 72 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f29:	e8 38 b7 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128f2e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f31:	74 17                	je     f0128f4a <test_kfreelast+0x124b>
f0128f33:	83 ec 04             	sub    $0x4,%esp
f0128f36:	68 08 92 13 f0       	push   $0xf0139208
f0128f3b:	68 aa 0d 00 00       	push   $0xdaa
f0128f40:	68 ee 91 13 f0       	push   $0xf01391ee
f0128f45:	e8 66 72 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f4a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128f4d:	e8 6e 3a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128f52:	29 c3                	sub    %eax,%ebx
f0128f54:	89 d8                	mov    %ebx,%eax
f0128f56:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128f5b:	74 17                	je     f0128f74 <test_kfreelast+0x1275>
f0128f5d:	83 ec 04             	sub    $0x4,%esp
f0128f60:	68 70 92 13 f0       	push   $0xf0139270
f0128f65:	68 ab 0d 00 00       	push   $0xdab
f0128f6a:	68 ee 91 13 f0       	push   $0xf01391ee
f0128f6f:	e8 3c 72 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0128f74:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0128f7b:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0128f7e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128f84:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0128f87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f8e:	eb 0e                	jmp    f0128f9e <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0128f90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f96:	01 d0                	add    %edx,%eax
f0128f98:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0128f9b:	ff 45 f4             	incl   -0xc(%ebp)
f0128f9e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128fa4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128fa7:	7f e7                	jg     f0128f90 <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0128fa9:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0128fad:	83 ec 08             	sub    $0x8,%esp
f0128fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0128fb3:	68 20 a2 13 f0       	push   $0xf013a220
f0128fb8:	e8 74 7e fd ff       	call   f0100e31 <cprintf>
f0128fbd:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0128fc0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128fc7:	e8 f4 39 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0128fcc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fcf:	e8 92 b6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128fd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0128fd7:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128fdd:	83 ec 0c             	sub    $0xc,%esp
f0128fe0:	50                   	push   %eax
f0128fe1:	e8 75 ef fd ff       	call   f0107f5b <kfree>
f0128fe6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128fe9:	e8 78 b6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0128fee:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ff1:	74 1d                	je     f0129010 <test_kfreelast+0x1311>
f0128ff3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128ff7:	75 17                	jne    f0129010 <test_kfreelast+0x1311>
f0128ff9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129000:	83 ec 0c             	sub    $0xc,%esp
f0129003:	68 48 a2 13 f0       	push   $0xf013a248
f0129008:	e8 24 7e fd ff       	call   f0100e31 <cprintf>
f012900d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129010:	e8 ab 39 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129015:	89 c2                	mov    %eax,%edx
f0129017:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012901a:	29 c2                	sub    %eax,%edx
f012901c:	89 d0                	mov    %edx,%eax
f012901e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129023:	74 1d                	je     f0129042 <test_kfreelast+0x1343>
f0129025:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129029:	75 17                	jne    f0129042 <test_kfreelast+0x1343>
f012902b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129032:	83 ec 0c             	sub    $0xc,%esp
f0129035:	68 b4 a2 13 f0       	push   $0xf013a2b4
f012903a:	e8 f2 7d fd ff       	call   f0100e31 <cprintf>
f012903f:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129042:	e8 79 39 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129047:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012904a:	e8 17 b6 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012904f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0129052:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0129058:	83 ec 0c             	sub    $0xc,%esp
f012905b:	50                   	push   %eax
f012905c:	e8 fa ee fd ff       	call   f0107f5b <kfree>
f0129061:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129064:	e8 fd b5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129069:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012906c:	74 1d                	je     f012908b <test_kfreelast+0x138c>
f012906e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129072:	75 17                	jne    f012908b <test_kfreelast+0x138c>
f0129074:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012907b:	83 ec 0c             	sub    $0xc,%esp
f012907e:	68 48 a2 13 f0       	push   $0xf013a248
f0129083:	e8 a9 7d fd ff       	call   f0100e31 <cprintf>
f0129088:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012908b:	e8 30 39 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129090:	89 c2                	mov    %eax,%edx
f0129092:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129095:	29 c2                	sub    %eax,%edx
f0129097:	89 d0                	mov    %edx,%eax
f0129099:	83 f8 08             	cmp    $0x8,%eax
f012909c:	74 1d                	je     f01290bb <test_kfreelast+0x13bc>
f012909e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290a2:	75 17                	jne    f01290bb <test_kfreelast+0x13bc>
f01290a4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290ab:	83 ec 0c             	sub    $0xc,%esp
f01290ae:	68 b4 a2 13 f0       	push   $0xf013a2b4
f01290b3:	e8 79 7d fd ff       	call   f0100e31 <cprintf>
f01290b8:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f01290bb:	e8 00 39 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01290c0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290c3:	e8 9e b5 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01290c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f01290cb:	83 ec 0c             	sub    $0xc,%esp
f01290ce:	68 00 28 00 00       	push   $0x2800
f01290d3:	e8 69 ee fd ff       	call   f0107f41 <kmalloc>
f01290d8:	83 c4 10             	add    $0x10,%esp
f01290db:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01290e1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01290e7:	89 c1                	mov    %eax,%ecx
f01290e9:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01290f0:	10 00 00 
f01290f3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01290f8:	0f b6 d0             	movzbl %al,%edx
f01290fb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129101:	01 d0                	add    %edx,%eax
f0129103:	48                   	dec    %eax
f0129104:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012910a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129110:	ba 00 00 00 00       	mov    $0x0,%edx
f0129115:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012911b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129121:	29 d0                	sub    %edx,%eax
f0129123:	89 c3                	mov    %eax,%ebx
f0129125:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012912c:	10 00 00 
f012912f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129134:	0f b6 c0             	movzbl %al,%eax
f0129137:	c1 e0 04             	shl    $0x4,%eax
f012913a:	89 c2                	mov    %eax,%edx
f012913c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129142:	01 d0                	add    %edx,%eax
f0129144:	48                   	dec    %eax
f0129145:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012914b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129151:	ba 00 00 00 00       	mov    $0x0,%edx
f0129156:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012915c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129162:	29 d0                	sub    %edx,%eax
f0129164:	01 d8                	add    %ebx,%eax
f0129166:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012916b:	39 c1                	cmp    %eax,%ecx
f012916d:	74 1d                	je     f012918c <test_kfreelast+0x148d>
f012916f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129173:	75 17                	jne    f012918c <test_kfreelast+0x148d>
f0129175:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012917c:	83 ec 0c             	sub    $0xc,%esp
f012917f:	68 ec a2 13 f0       	push   $0xf013a2ec
f0129184:	e8 a8 7c fd ff       	call   f0100e31 <cprintf>
f0129189:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012918c:	e8 d5 b4 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129191:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129194:	74 1d                	je     f01291b3 <test_kfreelast+0x14b4>
f0129196:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012919a:	75 17                	jne    f01291b3 <test_kfreelast+0x14b4>
f012919c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291a3:	83 ec 0c             	sub    $0xc,%esp
f01291a6:	68 48 a2 13 f0       	push   $0xf013a248
f01291ab:	e8 81 7c fd ff       	call   f0100e31 <cprintf>
f01291b0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01291b3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01291b6:	e8 05 38 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01291bb:	29 c3                	sub    %eax,%ebx
f01291bd:	89 d8                	mov    %ebx,%eax
f01291bf:	83 f8 03             	cmp    $0x3,%eax
f01291c2:	74 1d                	je     f01291e1 <test_kfreelast+0x14e2>
f01291c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291c8:	75 17                	jne    f01291e1 <test_kfreelast+0x14e2>
f01291ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291d1:	83 ec 0c             	sub    $0xc,%esp
f01291d4:	68 54 a3 13 f0       	push   $0xf013a354
f01291d9:	e8 53 7c fd ff       	call   f0100e31 <cprintf>
f01291de:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f01291e1:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f01291e8:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f01291eb:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01291f1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01291f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01291fb:	eb 0e                	jmp    f012920b <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f01291fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129200:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129203:	01 d0                	add    %edx,%eax
f0129205:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129208:	ff 45 f4             	incl   -0xc(%ebp)
f012920b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129211:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129214:	7f e7                	jg     f01291fd <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129216:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012921a:	75 17                	jne    f0129233 <test_kfreelast+0x1534>
f012921c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129220:	83 ec 08             	sub    $0x8,%esp
f0129223:	ff 75 f0             	pushl  -0x10(%ebp)
f0129226:	68 20 a2 13 f0       	push   $0xf013a220
f012922b:	e8 01 7c fd ff       	call   f0100e31 <cprintf>
f0129230:	83 c4 10             	add    $0x10,%esp
f0129233:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012923a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129240:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129243:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012924a:	eb 1e                	jmp    f012926a <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f012924c:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f0129252:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129255:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129258:	01 c8                	add    %ecx,%eax
f012925a:	8a 00                	mov    (%eax),%al
f012925c:	0f be c0             	movsbl %al,%eax
f012925f:	01 d0                	add    %edx,%eax
f0129261:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129267:	ff 45 f4             	incl   -0xc(%ebp)
f012926a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129270:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129273:	7f d7                	jg     f012924c <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129275:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f012927b:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f0129281:	89 d0                	mov    %edx,%eax
f0129283:	01 c0                	add    %eax,%eax
f0129285:	01 d0                	add    %edx,%eax
f0129287:	c1 e0 02             	shl    $0x2,%eax
f012928a:	39 c1                	cmp    %eax,%ecx
f012928c:	74 1d                	je     f01292ab <test_kfreelast+0x15ac>
f012928e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129292:	75 17                	jne    f01292ab <test_kfreelast+0x15ac>
f0129294:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012929b:	83 ec 0c             	sub    $0xc,%esp
f012929e:	68 98 a3 13 f0       	push   $0xf013a398
f01292a3:	e8 89 7b fd ff       	call   f0100e31 <cprintf>
f01292a8:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01292ab:	83 ec 0c             	sub    $0xc,%esp
f01292ae:	6a 03                	push   $0x3
f01292b0:	e8 a6 3b fe ff       	call   f010ce5b <sys_bypassPageFault>
f01292b5:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f01292b8:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01292be:	05 00 30 00 00       	add    $0x3000,%eax
f01292c3:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f01292c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01292cd:	eb 3c                	jmp    f012930b <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f01292cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01292d2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01292d5:	01 d0                	add    %edx,%eax
f01292d7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01292da:	e8 6a 3b fe ff       	call   f010ce49 <sys_rcr2>
f01292df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01292e2:	8b 55 9c             	mov    -0x64(%ebp),%edx
f01292e5:	01 ca                	add    %ecx,%edx
f01292e7:	39 d0                	cmp    %edx,%eax
f01292e9:	74 1d                	je     f0129308 <test_kfreelast+0x1609>
f01292eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292ef:	75 17                	jne    f0129308 <test_kfreelast+0x1609>
f01292f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292f8:	83 ec 0c             	sub    $0xc,%esp
f01292fb:	68 cc a3 13 f0       	push   $0xf013a3cc
f0129300:	e8 2c 7b fd ff       	call   f0100e31 <cprintf>
f0129305:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0129308:	ff 45 f4             	incl   -0xc(%ebp)
f012930b:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f0129312:	7e bb                	jle    f01292cf <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129314:	83 ec 0c             	sub    $0xc,%esp
f0129317:	6a 00                	push   $0x0
f0129319:	e8 3d 3b fe ff       	call   f010ce5b <sys_bypassPageFault>
f012931e:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129321:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129325:	75 17                	jne    f012933e <test_kfreelast+0x163f>
f0129327:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012932b:	83 ec 08             	sub    $0x8,%esp
f012932e:	ff 75 f0             	pushl  -0x10(%ebp)
f0129331:	68 20 a2 13 f0       	push   $0xf013a220
f0129336:	e8 f6 7a fd ff       	call   f0100e31 <cprintf>
f012933b:	83 c4 10             	add    $0x10,%esp
f012933e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129345:	e8 76 36 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012934a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012934d:	e8 14 b3 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129352:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0129355:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012935b:	83 ec 0c             	sub    $0xc,%esp
f012935e:	50                   	push   %eax
f012935f:	e8 f7 eb fd ff       	call   f0107f5b <kfree>
f0129364:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129367:	e8 fa b2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012936c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012936f:	74 1d                	je     f012938e <test_kfreelast+0x168f>
f0129371:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129375:	75 17                	jne    f012938e <test_kfreelast+0x168f>
f0129377:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012937e:	83 ec 0c             	sub    $0xc,%esp
f0129381:	68 48 a2 13 f0       	push   $0xf013a248
f0129386:	e8 a6 7a fd ff       	call   f0100e31 <cprintf>
f012938b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012938e:	e8 2d 36 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129393:	89 c2                	mov    %eax,%edx
f0129395:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129398:	29 c2                	sub    %eax,%edx
f012939a:	89 d0                	mov    %edx,%eax
f012939c:	83 f8 03             	cmp    $0x3,%eax
f012939f:	74 1d                	je     f01293be <test_kfreelast+0x16bf>
f01293a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293a5:	75 17                	jne    f01293be <test_kfreelast+0x16bf>
f01293a7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293ae:	83 ec 0c             	sub    $0xc,%esp
f01293b1:	68 b4 a2 13 f0       	push   $0xf013a2b4
f01293b6:	e8 76 7a fd ff       	call   f0100e31 <cprintf>
f01293bb:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01293be:	e8 fd 35 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01293c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293c6:	e8 9b b2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01293cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f01293ce:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01293d4:	83 ec 0c             	sub    $0xc,%esp
f01293d7:	50                   	push   %eax
f01293d8:	e8 7e eb fd ff       	call   f0107f5b <kfree>
f01293dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01293e0:	e8 81 b2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01293e5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293e8:	74 1d                	je     f0129407 <test_kfreelast+0x1708>
f01293ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293ee:	75 17                	jne    f0129407 <test_kfreelast+0x1708>
f01293f0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293f7:	83 ec 0c             	sub    $0xc,%esp
f01293fa:	68 48 a2 13 f0       	push   $0xf013a248
f01293ff:	e8 2d 7a fd ff       	call   f0100e31 <cprintf>
f0129404:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129407:	e8 b4 35 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012940c:	89 c2                	mov    %eax,%edx
f012940e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129411:	29 c2                	sub    %eax,%edx
f0129413:	89 d0                	mov    %edx,%eax
f0129415:	83 f8 04             	cmp    $0x4,%eax
f0129418:	74 1d                	je     f0129437 <test_kfreelast+0x1738>
f012941a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012941e:	75 17                	jne    f0129437 <test_kfreelast+0x1738>
f0129420:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129427:	83 ec 0c             	sub    $0xc,%esp
f012942a:	68 b4 a2 13 f0       	push   $0xf013a2b4
f012942f:	e8 fd 79 fd ff       	call   f0100e31 <cprintf>
f0129434:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129437:	e8 84 35 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012943c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012943f:	e8 22 b2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129444:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129447:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012944d:	83 ec 0c             	sub    $0xc,%esp
f0129450:	50                   	push   %eax
f0129451:	e8 05 eb fd ff       	call   f0107f5b <kfree>
f0129456:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129459:	e8 08 b2 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012945e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129461:	74 1d                	je     f0129480 <test_kfreelast+0x1781>
f0129463:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129467:	75 17                	jne    f0129480 <test_kfreelast+0x1781>
f0129469:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129470:	83 ec 0c             	sub    $0xc,%esp
f0129473:	68 48 a2 13 f0       	push   $0xf013a248
f0129478:	e8 b4 79 fd ff       	call   f0100e31 <cprintf>
f012947d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129480:	e8 3b 35 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129485:	89 c2                	mov    %eax,%edx
f0129487:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012948a:	29 c2                	sub    %eax,%edx
f012948c:	89 d0                	mov    %edx,%eax
f012948e:	83 f8 05             	cmp    $0x5,%eax
f0129491:	74 1d                	je     f01294b0 <test_kfreelast+0x17b1>
f0129493:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129497:	75 17                	jne    f01294b0 <test_kfreelast+0x17b1>
f0129499:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01294a0:	83 ec 0c             	sub    $0xc,%esp
f01294a3:	68 b4 a2 13 f0       	push   $0xf013a2b4
f01294a8:	e8 84 79 fd ff       	call   f0100e31 <cprintf>
f01294ad:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f01294b0:	e8 0b 35 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01294b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294b8:	e8 a9 b1 fd ff       	call   f0104666 <pf_calculate_free_frames>
f01294bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f01294c0:	83 ec 0c             	sub    $0xc,%esp
f01294c3:	68 00 c8 00 00       	push   $0xc800
f01294c8:	e8 74 ea fd ff       	call   f0107f41 <kmalloc>
f01294cd:	83 c4 10             	add    $0x10,%esp
f01294d0:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01294d6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01294dc:	89 c1                	mov    %eax,%ecx
f01294de:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01294e5:	10 00 00 
f01294e8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01294ed:	0f b6 d0             	movzbl %al,%edx
f01294f0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01294f6:	01 d0                	add    %edx,%eax
f01294f8:	48                   	dec    %eax
f01294f9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01294ff:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129505:	ba 00 00 00 00       	mov    $0x0,%edx
f012950a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129510:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129516:	29 d0                	sub    %edx,%eax
f0129518:	89 c3                	mov    %eax,%ebx
f012951a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129521:	10 00 00 
f0129524:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129529:	0f b6 c0             	movzbl %al,%eax
f012952c:	c1 e0 04             	shl    $0x4,%eax
f012952f:	89 c2                	mov    %eax,%edx
f0129531:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129537:	01 d0                	add    %edx,%eax
f0129539:	48                   	dec    %eax
f012953a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129540:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129546:	ba 00 00 00 00       	mov    $0x0,%edx
f012954b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0129551:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129557:	29 d0                	sub    %edx,%eax
f0129559:	01 d8                	add    %ebx,%eax
f012955b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129560:	39 c1                	cmp    %eax,%ecx
f0129562:	74 1d                	je     f0129581 <test_kfreelast+0x1882>
f0129564:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129568:	75 17                	jne    f0129581 <test_kfreelast+0x1882>
f012956a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129571:	83 ec 0c             	sub    $0xc,%esp
f0129574:	68 ec a2 13 f0       	push   $0xf013a2ec
f0129579:	e8 b3 78 fd ff       	call   f0100e31 <cprintf>
f012957e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129581:	e8 e0 b0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129586:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129589:	74 1d                	je     f01295a8 <test_kfreelast+0x18a9>
f012958b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012958f:	75 17                	jne    f01295a8 <test_kfreelast+0x18a9>
f0129591:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129598:	83 ec 0c             	sub    $0xc,%esp
f012959b:	68 48 a2 13 f0       	push   $0xf013a248
f01295a0:	e8 8c 78 fd ff       	call   f0100e31 <cprintf>
f01295a5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01295a8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01295ab:	e8 10 34 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01295b0:	29 c3                	sub    %eax,%ebx
f01295b2:	89 d8                	mov    %ebx,%eax
f01295b4:	83 f8 0d             	cmp    $0xd,%eax
f01295b7:	74 1d                	je     f01295d6 <test_kfreelast+0x18d7>
f01295b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295bd:	75 17                	jne    f01295d6 <test_kfreelast+0x18d7>
f01295bf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295c6:	83 ec 0c             	sub    $0xc,%esp
f01295c9:	68 54 a3 13 f0       	push   $0xf013a354
f01295ce:	e8 5e 78 fd ff       	call   f0100e31 <cprintf>
f01295d3:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f01295d6:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f01295dd:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f01295e0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01295e6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f01295e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295f0:	eb 0e                	jmp    f0129600 <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f01295f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01295f5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01295f8:	01 d0                	add    %edx,%eax
f01295fa:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f01295fd:	ff 45 f4             	incl   -0xc(%ebp)
f0129600:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129606:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129609:	7f e7                	jg     f01295f2 <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012960b:	e8 b0 33 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129610:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129613:	e8 4e b0 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129618:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012961b:	83 ec 0c             	sub    $0xc,%esp
f012961e:	68 00 fc 2f 00       	push   $0x2ffc00
f0129623:	e8 19 e9 fd ff       	call   f0107f41 <kmalloc>
f0129628:	83 c4 10             	add    $0x10,%esp
f012962b:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129631:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129637:	89 c1                	mov    %eax,%ecx
f0129639:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129640:	10 00 00 
f0129643:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129648:	0f b6 d0             	movzbl %al,%edx
f012964b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0129651:	01 d0                	add    %edx,%eax
f0129653:	48                   	dec    %eax
f0129654:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012965a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129660:	ba 00 00 00 00       	mov    $0x0,%edx
f0129665:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012966b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129671:	29 d0                	sub    %edx,%eax
f0129673:	89 c3                	mov    %eax,%ebx
f0129675:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012967c:	10 00 00 
f012967f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129684:	0f b6 c0             	movzbl %al,%eax
f0129687:	c1 e0 04             	shl    $0x4,%eax
f012968a:	89 c2                	mov    %eax,%edx
f012968c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129692:	01 d0                	add    %edx,%eax
f0129694:	48                   	dec    %eax
f0129695:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012969b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01296a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01296a6:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01296ac:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01296b2:	29 d0                	sub    %edx,%eax
f01296b4:	01 d8                	add    %ebx,%eax
f01296b6:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f01296bb:	39 c1                	cmp    %eax,%ecx
f01296bd:	74 1d                	je     f01296dc <test_kfreelast+0x19dd>
f01296bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296c3:	75 17                	jne    f01296dc <test_kfreelast+0x19dd>
f01296c5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296cc:	83 ec 0c             	sub    $0xc,%esp
f01296cf:	68 ec a2 13 f0       	push   $0xf013a2ec
f01296d4:	e8 58 77 fd ff       	call   f0100e31 <cprintf>
f01296d9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01296dc:	e8 85 af fd ff       	call   f0104666 <pf_calculate_free_frames>
f01296e1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01296e4:	74 1d                	je     f0129703 <test_kfreelast+0x1a04>
f01296e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296ea:	75 17                	jne    f0129703 <test_kfreelast+0x1a04>
f01296ec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296f3:	83 ec 0c             	sub    $0xc,%esp
f01296f6:	68 48 a2 13 f0       	push   $0xf013a248
f01296fb:	e8 31 77 fd ff       	call   f0100e31 <cprintf>
f0129700:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129703:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129706:	e8 b5 32 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012970b:	29 c3                	sub    %eax,%ebx
f012970d:	89 d8                	mov    %ebx,%eax
f012970f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129714:	74 1d                	je     f0129733 <test_kfreelast+0x1a34>
f0129716:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012971a:	75 17                	jne    f0129733 <test_kfreelast+0x1a34>
f012971c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129723:	83 ec 0c             	sub    $0xc,%esp
f0129726:	68 54 a3 13 f0       	push   $0xf013a354
f012972b:	e8 01 77 fd ff       	call   f0100e31 <cprintf>
f0129730:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0129733:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f012973a:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012973d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129743:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129746:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012974d:	eb 0e                	jmp    f012975d <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f012974f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129752:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129755:	01 d0                	add    %edx,%eax
f0129757:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012975a:	ff 45 f4             	incl   -0xc(%ebp)
f012975d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129763:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129766:	7f e7                	jg     f012974f <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129768:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012976c:	75 17                	jne    f0129785 <test_kfreelast+0x1a86>
f012976e:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129772:	83 ec 08             	sub    $0x8,%esp
f0129775:	ff 75 f0             	pushl  -0x10(%ebp)
f0129778:	68 20 a2 13 f0       	push   $0xf013a220
f012977d:	e8 af 76 fd ff       	call   f0100e31 <cprintf>
f0129782:	83 c4 10             	add    $0x10,%esp
f0129785:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012978c:	e8 2f 32 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129791:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129794:	e8 cd ae fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129799:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012979c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297a2:	83 ec 0c             	sub    $0xc,%esp
f01297a5:	50                   	push   %eax
f01297a6:	e8 b0 e7 fd ff       	call   f0107f5b <kfree>
f01297ab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01297ae:	e8 b3 ae fd ff       	call   f0104666 <pf_calculate_free_frames>
f01297b3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01297b6:	74 1d                	je     f01297d5 <test_kfreelast+0x1ad6>
f01297b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297bc:	75 17                	jne    f01297d5 <test_kfreelast+0x1ad6>
f01297be:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297c5:	83 ec 0c             	sub    $0xc,%esp
f01297c8:	68 48 a2 13 f0       	push   $0xf013a248
f01297cd:	e8 5f 76 fd ff       	call   f0100e31 <cprintf>
f01297d2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01297d5:	e8 e6 31 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01297da:	89 c2                	mov    %eax,%edx
f01297dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01297df:	29 c2                	sub    %eax,%edx
f01297e1:	89 d0                	mov    %edx,%eax
f01297e3:	83 f8 0d             	cmp    $0xd,%eax
f01297e6:	74 1d                	je     f0129805 <test_kfreelast+0x1b06>
f01297e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297ec:	75 17                	jne    f0129805 <test_kfreelast+0x1b06>
f01297ee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297f5:	83 ec 0c             	sub    $0xc,%esp
f01297f8:	68 b4 a2 13 f0       	push   $0xf013a2b4
f01297fd:	e8 2f 76 fd ff       	call   f0100e31 <cprintf>
f0129802:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129805:	83 ec 0c             	sub    $0xc,%esp
f0129808:	6a 03                	push   $0x3
f012980a:	e8 4c 36 fe ff       	call   f010ce5b <sys_bypassPageFault>
f012980f:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0129812:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129818:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012981b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129822:	eb 3c                	jmp    f0129860 <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129824:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129827:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012982a:	01 d0                	add    %edx,%eax
f012982c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012982f:	e8 15 36 fe ff       	call   f010ce49 <sys_rcr2>
f0129834:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129837:	8b 55 9c             	mov    -0x64(%ebp),%edx
f012983a:	01 ca                	add    %ecx,%edx
f012983c:	39 d0                	cmp    %edx,%eax
f012983e:	74 1d                	je     f012985d <test_kfreelast+0x1b5e>
f0129840:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129844:	75 17                	jne    f012985d <test_kfreelast+0x1b5e>
f0129846:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012984d:	83 ec 0c             	sub    $0xc,%esp
f0129850:	68 cc a3 13 f0       	push   $0xf013a3cc
f0129855:	e8 d7 75 fd ff       	call   f0100e31 <cprintf>
f012985a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012985d:	ff 45 f4             	incl   -0xc(%ebp)
f0129860:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129867:	7e bb                	jle    f0129824 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129869:	83 ec 0c             	sub    $0xc,%esp
f012986c:	6a 00                	push   $0x0
f012986e:	e8 e8 35 fe ff       	call   f010ce5b <sys_bypassPageFault>
f0129873:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129876:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012987c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012987f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129886:	eb 1e                	jmp    f01298a6 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f0129888:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f012988e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129891:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129894:	01 c8                	add    %ecx,%eax
f0129896:	8a 00                	mov    (%eax),%al
f0129898:	0f be c0             	movsbl %al,%eax
f012989b:	01 d0                	add    %edx,%eax
f012989d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01298a3:	ff 45 f4             	incl   -0xc(%ebp)
f01298a6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01298ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298af:	7f d7                	jg     f0129888 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f01298b1:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f01298b7:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f01298bd:	89 d0                	mov    %edx,%eax
f01298bf:	01 c0                	add    %eax,%eax
f01298c1:	01 d0                	add    %edx,%eax
f01298c3:	01 c0                	add    %eax,%eax
f01298c5:	01 d0                	add    %edx,%eax
f01298c7:	01 c0                	add    %eax,%eax
f01298c9:	39 c1                	cmp    %eax,%ecx
f01298cb:	74 1d                	je     f01298ea <test_kfreelast+0x1beb>
f01298cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298d1:	75 17                	jne    f01298ea <test_kfreelast+0x1beb>
f01298d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01298da:	83 ec 0c             	sub    $0xc,%esp
f01298dd:	68 98 a3 13 f0       	push   $0xf013a398
f01298e2:	e8 4a 75 fd ff       	call   f0100e31 <cprintf>
f01298e7:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01298ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298ee:	75 17                	jne    f0129907 <test_kfreelast+0x1c08>
f01298f0:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f01298f4:	83 ec 08             	sub    $0x8,%esp
f01298f7:	ff 75 f0             	pushl  -0x10(%ebp)
f01298fa:	68 20 a2 13 f0       	push   $0xf013a220
f01298ff:	e8 2d 75 fd ff       	call   f0100e31 <cprintf>
f0129904:	83 c4 10             	add    $0x10,%esp
f0129907:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012990e:	e8 ad 30 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129913:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129916:	e8 4b ad fd ff       	call   f0104666 <pf_calculate_free_frames>
f012991b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012991e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129924:	83 ec 0c             	sub    $0xc,%esp
f0129927:	50                   	push   %eax
f0129928:	e8 2e e6 fd ff       	call   f0107f5b <kfree>
f012992d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129930:	e8 31 ad fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129935:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129938:	74 1d                	je     f0129957 <test_kfreelast+0x1c58>
f012993a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012993e:	75 17                	jne    f0129957 <test_kfreelast+0x1c58>
f0129940:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129947:	83 ec 0c             	sub    $0xc,%esp
f012994a:	68 48 a2 13 f0       	push   $0xf013a248
f012994f:	e8 dd 74 fd ff       	call   f0100e31 <cprintf>
f0129954:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129957:	e8 64 30 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012995c:	89 c2                	mov    %eax,%edx
f012995e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129961:	29 c2                	sub    %eax,%edx
f0129963:	89 d0                	mov    %edx,%eax
f0129965:	83 f8 02             	cmp    $0x2,%eax
f0129968:	74 1d                	je     f0129987 <test_kfreelast+0x1c88>
f012996a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012996e:	75 17                	jne    f0129987 <test_kfreelast+0x1c88>
f0129970:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129977:	83 ec 0c             	sub    $0xc,%esp
f012997a:	68 b4 a2 13 f0       	push   $0xf013a2b4
f012997f:	e8 ad 74 fd ff       	call   f0100e31 <cprintf>
f0129984:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129987:	e8 34 30 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012998c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012998f:	e8 d2 ac fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129994:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f0129997:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012999d:	83 ec 0c             	sub    $0xc,%esp
f01299a0:	50                   	push   %eax
f01299a1:	e8 b5 e5 fd ff       	call   f0107f5b <kfree>
f01299a6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299a9:	e8 b8 ac fd ff       	call   f0104666 <pf_calculate_free_frames>
f01299ae:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299b1:	74 1d                	je     f01299d0 <test_kfreelast+0x1cd1>
f01299b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299b7:	75 17                	jne    f01299d0 <test_kfreelast+0x1cd1>
f01299b9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299c0:	83 ec 0c             	sub    $0xc,%esp
f01299c3:	68 48 a2 13 f0       	push   $0xf013a248
f01299c8:	e8 64 74 fd ff       	call   f0100e31 <cprintf>
f01299cd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01299d0:	e8 eb 2f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f01299d5:	89 c2                	mov    %eax,%edx
f01299d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01299da:	29 c2                	sub    %eax,%edx
f01299dc:	89 d0                	mov    %edx,%eax
f01299de:	3d 00 03 00 00       	cmp    $0x300,%eax
f01299e3:	74 1d                	je     f0129a02 <test_kfreelast+0x1d03>
f01299e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299e9:	75 17                	jne    f0129a02 <test_kfreelast+0x1d03>
f01299eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299f2:	83 ec 0c             	sub    $0xc,%esp
f01299f5:	68 b4 a2 13 f0       	push   $0xf013a2b4
f01299fa:	e8 32 74 fd ff       	call   f0100e31 <cprintf>
f01299ff:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a02:	e8 b9 2f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129a07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a0a:	e8 57 ac fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129a0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0129a12:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0129a18:	83 ec 0c             	sub    $0xc,%esp
f0129a1b:	50                   	push   %eax
f0129a1c:	e8 3a e5 fd ff       	call   f0107f5b <kfree>
f0129a21:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a24:	e8 3d ac fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129a29:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a2c:	74 1d                	je     f0129a4b <test_kfreelast+0x1d4c>
f0129a2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a32:	75 17                	jne    f0129a4b <test_kfreelast+0x1d4c>
f0129a34:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a3b:	83 ec 0c             	sub    $0xc,%esp
f0129a3e:	68 48 a2 13 f0       	push   $0xf013a248
f0129a43:	e8 e9 73 fd ff       	call   f0100e31 <cprintf>
f0129a48:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a4b:	e8 70 2f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129a50:	89 c2                	mov    %eax,%edx
f0129a52:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a55:	29 c2                	sub    %eax,%edx
f0129a57:	89 d0                	mov    %edx,%eax
f0129a59:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a5e:	74 1d                	je     f0129a7d <test_kfreelast+0x1d7e>
f0129a60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a64:	75 17                	jne    f0129a7d <test_kfreelast+0x1d7e>
f0129a66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a6d:	83 ec 0c             	sub    $0xc,%esp
f0129a70:	68 b4 a2 13 f0       	push   $0xf013a2b4
f0129a75:	e8 b7 73 fd ff       	call   f0100e31 <cprintf>
f0129a7a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129a7d:	e8 3e 2f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129a82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a85:	e8 dc ab fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129a8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129a8d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129a93:	83 ec 0c             	sub    $0xc,%esp
f0129a96:	50                   	push   %eax
f0129a97:	e8 bf e4 fd ff       	call   f0107f5b <kfree>
f0129a9c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a9f:	e8 c2 ab fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129aa4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129aa7:	74 1d                	je     f0129ac6 <test_kfreelast+0x1dc7>
f0129aa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129aad:	75 17                	jne    f0129ac6 <test_kfreelast+0x1dc7>
f0129aaf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ab6:	83 ec 0c             	sub    $0xc,%esp
f0129ab9:	68 48 a2 13 f0       	push   $0xf013a248
f0129abe:	e8 6e 73 fd ff       	call   f0100e31 <cprintf>
f0129ac3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129ac6:	e8 f5 2e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129acb:	89 c2                	mov    %eax,%edx
f0129acd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129ad0:	29 c2                	sub    %eax,%edx
f0129ad2:	89 d0                	mov    %edx,%eax
f0129ad4:	83 f8 01             	cmp    $0x1,%eax
f0129ad7:	74 1d                	je     f0129af6 <test_kfreelast+0x1df7>
f0129ad9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129add:	75 17                	jne    f0129af6 <test_kfreelast+0x1df7>
f0129adf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ae6:	83 ec 0c             	sub    $0xc,%esp
f0129ae9:	68 b4 a2 13 f0       	push   $0xf013a2b4
f0129aee:	e8 3e 73 fd ff       	call   f0100e31 <cprintf>
f0129af3:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129af6:	e8 c5 2e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129afb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129afe:	e8 63 ab fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129b03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129b06:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0129b0c:	83 ec 0c             	sub    $0xc,%esp
f0129b0f:	50                   	push   %eax
f0129b10:	e8 46 e4 fd ff       	call   f0107f5b <kfree>
f0129b15:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129b18:	e8 49 ab fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129b1d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b20:	74 1d                	je     f0129b3f <test_kfreelast+0x1e40>
f0129b22:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b26:	75 17                	jne    f0129b3f <test_kfreelast+0x1e40>
f0129b28:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b2f:	83 ec 0c             	sub    $0xc,%esp
f0129b32:	68 48 a2 13 f0       	push   $0xf013a248
f0129b37:	e8 f5 72 fd ff       	call   f0100e31 <cprintf>
f0129b3c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129b3f:	e8 7c 2e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129b44:	89 c2                	mov    %eax,%edx
f0129b46:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b49:	29 c2                	sub    %eax,%edx
f0129b4b:	89 d0                	mov    %edx,%eax
f0129b4d:	83 f8 01             	cmp    $0x1,%eax
f0129b50:	74 1d                	je     f0129b6f <test_kfreelast+0x1e70>
f0129b52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b56:	75 17                	jne    f0129b6f <test_kfreelast+0x1e70>
f0129b58:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b5f:	83 ec 0c             	sub    $0xc,%esp
f0129b62:	68 b4 a2 13 f0       	push   $0xf013a2b4
f0129b67:	e8 c5 72 fd ff       	call   f0100e31 <cprintf>
f0129b6c:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f0129b6f:	e8 4c 2e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129b74:	89 c2                	mov    %eax,%edx
f0129b76:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129b79:	39 c2                	cmp    %eax,%edx
f0129b7b:	74 1d                	je     f0129b9a <test_kfreelast+0x1e9b>
f0129b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b81:	75 17                	jne    f0129b9a <test_kfreelast+0x1e9b>
f0129b83:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b8a:	83 ec 0c             	sub    $0xc,%esp
f0129b8d:	68 14 a4 13 f0       	push   $0xf013a414
f0129b92:	e8 9a 72 fd ff       	call   f0100e31 <cprintf>
f0129b97:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129b9a:	83 ec 0c             	sub    $0xc,%esp
f0129b9d:	6a 03                	push   $0x3
f0129b9f:	e8 b7 32 fe ff       	call   f010ce5b <sys_bypassPageFault>
f0129ba4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129ba7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129bae:	e9 8e 00 00 00       	jmp    f0129c41 <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bb6:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f0129bbd:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129bc0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129bc3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129bc6:	e8 7e 32 fe ff       	call   f010ce49 <sys_rcr2>
f0129bcb:	89 c2                	mov    %eax,%edx
f0129bcd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129bd0:	39 c2                	cmp    %eax,%edx
f0129bd2:	74 1d                	je     f0129bf1 <test_kfreelast+0x1ef2>
f0129bd4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bd8:	75 17                	jne    f0129bf1 <test_kfreelast+0x1ef2>
f0129bda:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129be1:	83 ec 0c             	sub    $0xc,%esp
f0129be4:	68 cc a3 13 f0       	push   $0xf013a3cc
f0129be9:	e8 43 72 fd ff       	call   f0100e31 <cprintf>
f0129bee:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bf4:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129bfb:	89 c2                	mov    %eax,%edx
f0129bfd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c00:	01 d0                	add    %edx,%eax
f0129c02:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129c05:	e8 3f 32 fe ff       	call   f010ce49 <sys_rcr2>
f0129c0a:	89 c2                	mov    %eax,%edx
f0129c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c0f:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129c16:	89 c1                	mov    %eax,%ecx
f0129c18:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c1b:	01 c8                	add    %ecx,%eax
f0129c1d:	39 c2                	cmp    %eax,%edx
f0129c1f:	74 1d                	je     f0129c3e <test_kfreelast+0x1f3f>
f0129c21:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c25:	75 17                	jne    f0129c3e <test_kfreelast+0x1f3f>
f0129c27:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c2e:	83 ec 0c             	sub    $0xc,%esp
f0129c31:	68 cc a3 13 f0       	push   $0xf013a3cc
f0129c36:	e8 f6 71 fd ff       	call   f0100e31 <cprintf>
f0129c3b:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129c3e:	ff 45 f4             	incl   -0xc(%ebp)
f0129c41:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129c45:	0f 8e 68 ff ff ff    	jle    f0129bb3 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129c4b:	83 ec 0c             	sub    $0xc,%esp
f0129c4e:	6a 00                	push   $0x0
f0129c50:	e8 06 32 fe ff       	call   f010ce5b <sys_bypassPageFault>
f0129c55:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c58:	e8 63 2d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129c5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c60:	e8 01 aa fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129c65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129c68:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0129c6e:	83 ec 0c             	sub    $0xc,%esp
f0129c71:	50                   	push   %eax
f0129c72:	e8 e4 e2 fd ff       	call   f0107f5b <kfree>
f0129c77:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129c7a:	e8 e7 a9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129c7f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c82:	74 1d                	je     f0129ca1 <test_kfreelast+0x1fa2>
f0129c84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c88:	75 17                	jne    f0129ca1 <test_kfreelast+0x1fa2>
f0129c8a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c91:	83 ec 0c             	sub    $0xc,%esp
f0129c94:	68 48 a2 13 f0       	push   $0xf013a248
f0129c99:	e8 93 71 fd ff       	call   f0100e31 <cprintf>
f0129c9e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129ca1:	e8 1a 2d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129ca6:	89 c2                	mov    %eax,%edx
f0129ca8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129cab:	39 c2                	cmp    %eax,%edx
f0129cad:	74 1d                	je     f0129ccc <test_kfreelast+0x1fcd>
f0129caf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cb3:	75 17                	jne    f0129ccc <test_kfreelast+0x1fcd>
f0129cb5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cbc:	83 ec 0c             	sub    $0xc,%esp
f0129cbf:	68 4c a4 13 f0       	push   $0xf013a44c
f0129cc4:	e8 68 71 fd ff       	call   f0100e31 <cprintf>
f0129cc9:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129ccc:	e8 ef 2c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129cd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cd4:	e8 8d a9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129cd9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129cdc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129ce2:	83 ec 0c             	sub    $0xc,%esp
f0129ce5:	50                   	push   %eax
f0129ce6:	e8 70 e2 fd ff       	call   f0107f5b <kfree>
f0129ceb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129cee:	e8 73 a9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129cf3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129cf6:	74 1d                	je     f0129d15 <test_kfreelast+0x2016>
f0129cf8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cfc:	75 17                	jne    f0129d15 <test_kfreelast+0x2016>
f0129cfe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d05:	83 ec 0c             	sub    $0xc,%esp
f0129d08:	68 48 a2 13 f0       	push   $0xf013a248
f0129d0d:	e8 1f 71 fd ff       	call   f0100e31 <cprintf>
f0129d12:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129d15:	e8 a6 2c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129d1a:	89 c2                	mov    %eax,%edx
f0129d1c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d1f:	39 c2                	cmp    %eax,%edx
f0129d21:	74 1d                	je     f0129d40 <test_kfreelast+0x2041>
f0129d23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d27:	75 17                	jne    f0129d40 <test_kfreelast+0x2041>
f0129d29:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d30:	83 ec 0c             	sub    $0xc,%esp
f0129d33:	68 4c a4 13 f0       	push   $0xf013a44c
f0129d38:	e8 f4 70 fd ff       	call   f0100e31 <cprintf>
f0129d3d:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d40:	e8 7b 2c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129d45:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d48:	e8 19 a9 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129d4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129d50:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0129d56:	83 ec 0c             	sub    $0xc,%esp
f0129d59:	50                   	push   %eax
f0129d5a:	e8 fc e1 fd ff       	call   f0107f5b <kfree>
f0129d5f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d62:	e8 ff a8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129d67:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d6a:	74 1d                	je     f0129d89 <test_kfreelast+0x208a>
f0129d6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d70:	75 17                	jne    f0129d89 <test_kfreelast+0x208a>
f0129d72:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d79:	83 ec 0c             	sub    $0xc,%esp
f0129d7c:	68 48 a2 13 f0       	push   $0xf013a248
f0129d81:	e8 ab 70 fd ff       	call   f0100e31 <cprintf>
f0129d86:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129d89:	e8 32 2c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129d8e:	89 c2                	mov    %eax,%edx
f0129d90:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d93:	39 c2                	cmp    %eax,%edx
f0129d95:	74 1d                	je     f0129db4 <test_kfreelast+0x20b5>
f0129d97:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d9b:	75 17                	jne    f0129db4 <test_kfreelast+0x20b5>
f0129d9d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129da4:	83 ec 0c             	sub    $0xc,%esp
f0129da7:	68 4c a4 13 f0       	push   $0xf013a44c
f0129dac:	e8 80 70 fd ff       	call   f0100e31 <cprintf>
f0129db1:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129db4:	e8 07 2c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129db9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129dbc:	e8 a5 a8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129dc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129dc4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129dca:	83 ec 0c             	sub    $0xc,%esp
f0129dcd:	50                   	push   %eax
f0129dce:	e8 88 e1 fd ff       	call   f0107f5b <kfree>
f0129dd3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129dd6:	e8 8b a8 fd ff       	call   f0104666 <pf_calculate_free_frames>
f0129ddb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129dde:	74 1d                	je     f0129dfd <test_kfreelast+0x20fe>
f0129de0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129de4:	75 17                	jne    f0129dfd <test_kfreelast+0x20fe>
f0129de6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ded:	83 ec 0c             	sub    $0xc,%esp
f0129df0:	68 48 a2 13 f0       	push   $0xf013a248
f0129df5:	e8 37 70 fd ff       	call   f0100e31 <cprintf>
f0129dfa:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129dfd:	e8 be 2b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129e02:	89 c2                	mov    %eax,%edx
f0129e04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129e07:	39 c2                	cmp    %eax,%edx
f0129e09:	74 1d                	je     f0129e28 <test_kfreelast+0x2129>
f0129e0b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e0f:	75 17                	jne    f0129e28 <test_kfreelast+0x2129>
f0129e11:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e18:	83 ec 0c             	sub    $0xc,%esp
f0129e1b:	68 4c a4 13 f0       	push   $0xf013a44c
f0129e20:	e8 0c 70 fd ff       	call   f0100e31 <cprintf>
f0129e25:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129e28:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e2c:	75 17                	jne    f0129e45 <test_kfreelast+0x2146>
f0129e2e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129e32:	83 ec 08             	sub    $0x8,%esp
f0129e35:	ff 75 f0             	pushl  -0x10(%ebp)
f0129e38:	68 20 a2 13 f0       	push   $0xf013a220
f0129e3d:	e8 ef 6f fd ff       	call   f0100e31 <cprintf>
f0129e42:	83 c4 10             	add    $0x10,%esp
f0129e45:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f0129e4c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129e51:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129e54:	5b                   	pop    %ebx
f0129e55:	5f                   	pop    %edi
f0129e56:	5d                   	pop    %ebp
f0129e57:	c3                   	ret    

f0129e58 <test_krealloc>:

int test_krealloc() {
f0129e58:	55                   	push   %ebp
f0129e59:	89 e5                	mov    %esp,%ebp
f0129e5b:	57                   	push   %edi
f0129e5c:	53                   	push   %ebx
f0129e5d:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f0129e63:	83 ec 0c             	sub    $0xc,%esp
f0129e66:	68 30 91 13 f0       	push   $0xf0139130
f0129e6b:	e8 c1 6f fd ff       	call   f0100e31 <cprintf>
f0129e70:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0129e73:	83 ec 0c             	sub    $0xc,%esp
f0129e76:	68 60 91 13 f0       	push   $0xf0139160
f0129e7b:	e8 b1 6f fd ff       	call   f0100e31 <cprintf>
f0129e80:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0129e83:	83 ec 0c             	sub    $0xc,%esp
f0129e86:	68 30 91 13 f0       	push   $0xf0139130
f0129e8b:	e8 a1 6f fd ff       	call   f0100e31 <cprintf>
f0129e90:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0129e93:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0129e97:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0129e9b:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f0129ea1:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0129ea7:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129eae:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0129eb5:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f0129ebb:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129ec0:	b8 00 00 00 00       	mov    $0x0,%eax
f0129ec5:	89 d7                	mov    %edx,%edi
f0129ec7:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0129ec9:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f0129ed0:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0129ed6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129edb:	b8 00 00 00 00       	mov    $0x0,%eax
f0129ee0:	89 d7                	mov    %edx,%edi
f0129ee2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0129ee4:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f0129eea:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129eef:	b8 00 00 00 00       	mov    $0x0,%eax
f0129ef4:	89 d7                	mov    %edx,%edi
f0129ef6:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129ef8:	e8 c3 2a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129efd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f0129f00:	83 ec 08             	sub    $0x8,%esp
f0129f03:	68 00 fc 0f 00       	push   $0xffc00
f0129f08:	6a 00                	push   $0x0
f0129f0a:	e8 e8 e0 fd ff       	call   f0107ff7 <krealloc>
f0129f0f:	83 c4 10             	add    $0x10,%esp
f0129f12:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0129f18:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f1e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0129f23:	77 17                	ja     f0129f3c <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129f25:	83 ec 04             	sub    $0x4,%esp
f0129f28:	68 94 a4 13 f0       	push   $0xf013a494
f0129f2d:	68 e2 0e 00 00       	push   $0xee2
f0129f32:	68 ee 91 13 f0       	push   $0xf01391ee
f0129f37:	e8 74 62 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f0129f3c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f42:	89 c1                	mov    %eax,%ecx
f0129f44:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129f4b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129f50:	0f b6 d0             	movzbl %al,%edx
f0129f53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129f56:	01 d0                	add    %edx,%eax
f0129f58:	48                   	dec    %eax
f0129f59:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129f5c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f64:	f7 75 b4             	divl   -0x4c(%ebp)
f0129f67:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f6a:	29 d0                	sub    %edx,%eax
f0129f6c:	89 c3                	mov    %eax,%ebx
f0129f6e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129f75:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129f7a:	0f b6 c0             	movzbl %al,%eax
f0129f7d:	c1 e0 04             	shl    $0x4,%eax
f0129f80:	89 c2                	mov    %eax,%edx
f0129f82:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129f85:	01 d0                	add    %edx,%eax
f0129f87:	48                   	dec    %eax
f0129f88:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129f8b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129f8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f93:	f7 75 ac             	divl   -0x54(%ebp)
f0129f96:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129f99:	29 d0                	sub    %edx,%eax
f0129f9b:	01 d8                	add    %ebx,%eax
f0129f9d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129fa2:	39 c1                	cmp    %eax,%ecx
f0129fa4:	74 17                	je     f0129fbd <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f0129fa6:	83 ec 04             	sub    $0x4,%esp
f0129fa9:	68 d0 a4 13 f0       	push   $0xf013a4d0
f0129fae:	68 e4 0e 00 00       	push   $0xee4
f0129fb3:	68 ee 91 13 f0       	push   $0xf01391ee
f0129fb8:	e8 f3 61 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129fbd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129fc0:	e8 fb 29 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129fc5:	29 c3                	sub    %eax,%ebx
f0129fc7:	89 d8                	mov    %ebx,%eax
f0129fc9:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129fce:	74 17                	je     f0129fe7 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f0129fd0:	83 ec 04             	sub    $0x4,%esp
f0129fd3:	68 02 a5 13 f0       	push   $0xf013a502
f0129fd8:	68 e7 0e 00 00       	push   $0xee7
f0129fdd:	68 ee 91 13 f0       	push   $0xf01391ee
f0129fe2:	e8 c9 61 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f0129fe7:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f0129fee:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129ff1:	e8 ca 29 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f0129ff6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f0129ff9:	83 ec 08             	sub    $0x8,%esp
f0129ffc:	68 00 fc 0f 00       	push   $0xffc00
f012a001:	6a 00                	push   $0x0
f012a003:	e8 ef df fd ff       	call   f0107ff7 <krealloc>
f012a008:	83 c4 10             	add    $0x10,%esp
f012a00b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012a011:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a017:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012a01c:	77 17                	ja     f012a035 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a01e:	83 ec 04             	sub    $0x4,%esp
f012a021:	68 94 a4 13 f0       	push   $0xf013a494
f012a026:	68 ef 0e 00 00       	push   $0xeef
f012a02b:	68 ee 91 13 f0       	push   $0xf01391ee
f012a030:	e8 7b 61 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012a035:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a03b:	89 c1                	mov    %eax,%ecx
f012a03d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a044:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a049:	0f b6 d0             	movzbl %al,%edx
f012a04c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a04f:	01 d0                	add    %edx,%eax
f012a051:	48                   	dec    %eax
f012a052:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a055:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a058:	ba 00 00 00 00       	mov    $0x0,%edx
f012a05d:	f7 75 a4             	divl   -0x5c(%ebp)
f012a060:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a063:	29 d0                	sub    %edx,%eax
f012a065:	89 c3                	mov    %eax,%ebx
f012a067:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a06e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a073:	0f b6 c0             	movzbl %al,%eax
f012a076:	c1 e0 04             	shl    $0x4,%eax
f012a079:	89 c2                	mov    %eax,%edx
f012a07b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a07e:	01 d0                	add    %edx,%eax
f012a080:	48                   	dec    %eax
f012a081:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a084:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a087:	ba 00 00 00 00       	mov    $0x0,%edx
f012a08c:	f7 75 9c             	divl   -0x64(%ebp)
f012a08f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a092:	29 d0                	sub    %edx,%eax
f012a094:	01 d8                	add    %ebx,%eax
f012a096:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a09b:	39 c1                	cmp    %eax,%ecx
f012a09d:	74 17                	je     f012a0b6 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a09f:	83 ec 04             	sub    $0x4,%esp
f012a0a2:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a0a7:	68 f1 0e 00 00       	push   $0xef1
f012a0ac:	68 ee 91 13 f0       	push   $0xf01391ee
f012a0b1:	e8 fa 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a0b6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a0b9:	e8 02 29 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a0be:	29 c3                	sub    %eax,%ebx
f012a0c0:	89 d8                	mov    %ebx,%eax
f012a0c2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a0c7:	74 17                	je     f012a0e0 <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a0c9:	83 ec 04             	sub    $0x4,%esp
f012a0cc:	68 02 a5 13 f0       	push   $0xf013a502
f012a0d1:	68 f3 0e 00 00       	push   $0xef3
f012a0d6:	68 ee 91 13 f0       	push   $0xf01391ee
f012a0db:	e8 d0 60 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a0e0:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a0e7:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a0ea:	e8 d1 28 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a0ef:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a0f2:	83 ec 08             	sub    $0x8,%esp
f012a0f5:	68 00 fc 0f 00       	push   $0xffc00
f012a0fa:	6a 00                	push   $0x0
f012a0fc:	e8 f6 de fd ff       	call   f0107ff7 <krealloc>
f012a101:	83 c4 10             	add    $0x10,%esp
f012a104:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a10a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a110:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a115:	77 17                	ja     f012a12e <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a117:	83 ec 04             	sub    $0x4,%esp
f012a11a:	68 94 a4 13 f0       	push   $0xf013a494
f012a11f:	68 fb 0e 00 00       	push   $0xefb
f012a124:	68 ee 91 13 f0       	push   $0xf01391ee
f012a129:	e8 82 60 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a12e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a134:	89 c1                	mov    %eax,%ecx
f012a136:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a13d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a142:	0f b6 d0             	movzbl %al,%edx
f012a145:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a148:	01 d0                	add    %edx,%eax
f012a14a:	48                   	dec    %eax
f012a14b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a14e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a151:	ba 00 00 00 00       	mov    $0x0,%edx
f012a156:	f7 75 94             	divl   -0x6c(%ebp)
f012a159:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a15c:	29 d0                	sub    %edx,%eax
f012a15e:	89 c3                	mov    %eax,%ebx
f012a160:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a167:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a16c:	0f b6 c0             	movzbl %al,%eax
f012a16f:	c1 e0 04             	shl    $0x4,%eax
f012a172:	89 c2                	mov    %eax,%edx
f012a174:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a177:	01 d0                	add    %edx,%eax
f012a179:	48                   	dec    %eax
f012a17a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a17d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a180:	ba 00 00 00 00       	mov    $0x0,%edx
f012a185:	f7 75 8c             	divl   -0x74(%ebp)
f012a188:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a18b:	29 d0                	sub    %edx,%eax
f012a18d:	01 d8                	add    %ebx,%eax
f012a18f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a194:	39 c1                	cmp    %eax,%ecx
f012a196:	74 17                	je     f012a1af <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a198:	83 ec 04             	sub    $0x4,%esp
f012a19b:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a1a0:	68 fd 0e 00 00       	push   $0xefd
f012a1a5:	68 ee 91 13 f0       	push   $0xf01391ee
f012a1aa:	e8 01 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a1af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a1b2:	e8 09 28 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a1b7:	29 c3                	sub    %eax,%ebx
f012a1b9:	89 d8                	mov    %ebx,%eax
f012a1bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a1c0:	74 17                	je     f012a1d9 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a1c2:	83 ec 04             	sub    $0x4,%esp
f012a1c5:	68 02 a5 13 f0       	push   $0xf013a502
f012a1ca:	68 ff 0e 00 00       	push   $0xeff
f012a1cf:	68 ee 91 13 f0       	push   $0xf01391ee
f012a1d4:	e8 d7 5f fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a1d9:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a1e0:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a1e3:	e8 d8 27 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a1e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a1eb:	83 ec 08             	sub    $0x8,%esp
f012a1ee:	68 00 fc 0f 00       	push   $0xffc00
f012a1f3:	6a 00                	push   $0x0
f012a1f5:	e8 fd dd fd ff       	call   f0107ff7 <krealloc>
f012a1fa:	83 c4 10             	add    $0x10,%esp
f012a1fd:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a203:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a209:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a20e:	77 17                	ja     f012a227 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a210:	83 ec 04             	sub    $0x4,%esp
f012a213:	68 94 a4 13 f0       	push   $0xf013a494
f012a218:	68 06 0f 00 00       	push   $0xf06
f012a21d:	68 ee 91 13 f0       	push   $0xf01391ee
f012a222:	e8 89 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a227:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a22d:	89 c1                	mov    %eax,%ecx
f012a22f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a236:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a23b:	0f b6 d0             	movzbl %al,%edx
f012a23e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a241:	01 d0                	add    %edx,%eax
f012a243:	48                   	dec    %eax
f012a244:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a247:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a24a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a24f:	f7 75 84             	divl   -0x7c(%ebp)
f012a252:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a255:	29 d0                	sub    %edx,%eax
f012a257:	89 c3                	mov    %eax,%ebx
f012a259:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a260:	10 00 00 
f012a263:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a268:	0f b6 c0             	movzbl %al,%eax
f012a26b:	c1 e0 04             	shl    $0x4,%eax
f012a26e:	89 c2                	mov    %eax,%edx
f012a270:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a276:	01 d0                	add    %edx,%eax
f012a278:	48                   	dec    %eax
f012a279:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a27f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a285:	ba 00 00 00 00       	mov    $0x0,%edx
f012a28a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a290:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a296:	29 d0                	sub    %edx,%eax
f012a298:	01 d8                	add    %ebx,%eax
f012a29a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a29f:	39 c1                	cmp    %eax,%ecx
f012a2a1:	74 17                	je     f012a2ba <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a2a3:	83 ec 04             	sub    $0x4,%esp
f012a2a6:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a2ab:	68 08 0f 00 00       	push   $0xf08
f012a2b0:	68 ee 91 13 f0       	push   $0xf01391ee
f012a2b5:	e8 f6 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a2ba:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a2bd:	e8 fe 26 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a2c2:	29 c3                	sub    %eax,%ebx
f012a2c4:	89 d8                	mov    %ebx,%eax
f012a2c6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a2cb:	74 17                	je     f012a2e4 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a2cd:	83 ec 04             	sub    $0x4,%esp
f012a2d0:	68 02 a5 13 f0       	push   $0xf013a502
f012a2d5:	68 0a 0f 00 00       	push   $0xf0a
f012a2da:	68 ee 91 13 f0       	push   $0xf01391ee
f012a2df:	e8 cc 5e fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a2e4:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a2eb:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a2ee:	e8 cd 26 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a2f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a2f6:	83 ec 08             	sub    $0x8,%esp
f012a2f9:	68 00 fc 1f 00       	push   $0x1ffc00
f012a2fe:	6a 00                	push   $0x0
f012a300:	e8 f2 dc fd ff       	call   f0107ff7 <krealloc>
f012a305:	83 c4 10             	add    $0x10,%esp
f012a308:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a30e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a314:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a319:	77 17                	ja     f012a332 <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a31b:	83 ec 04             	sub    $0x4,%esp
f012a31e:	68 94 a4 13 f0       	push   $0xf013a494
f012a323:	68 11 0f 00 00       	push   $0xf11
f012a328:	68 ee 91 13 f0       	push   $0xf01391ee
f012a32d:	e8 7e 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a332:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a338:	89 c1                	mov    %eax,%ecx
f012a33a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a341:	10 00 00 
f012a344:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a349:	0f b6 d0             	movzbl %al,%edx
f012a34c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a352:	01 d0                	add    %edx,%eax
f012a354:	48                   	dec    %eax
f012a355:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a35b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a361:	ba 00 00 00 00       	mov    $0x0,%edx
f012a366:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a36c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a372:	29 d0                	sub    %edx,%eax
f012a374:	89 c3                	mov    %eax,%ebx
f012a376:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a37d:	10 00 00 
f012a380:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a385:	0f b6 c0             	movzbl %al,%eax
f012a388:	c1 e0 04             	shl    $0x4,%eax
f012a38b:	89 c2                	mov    %eax,%edx
f012a38d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a393:	01 d0                	add    %edx,%eax
f012a395:	48                   	dec    %eax
f012a396:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a39c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a3a2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3a7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a3ad:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a3b3:	29 d0                	sub    %edx,%eax
f012a3b5:	01 d8                	add    %ebx,%eax
f012a3b7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a3bc:	39 c1                	cmp    %eax,%ecx
f012a3be:	74 17                	je     f012a3d7 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a3c0:	83 ec 04             	sub    $0x4,%esp
f012a3c3:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a3c8:	68 13 0f 00 00       	push   $0xf13
f012a3cd:	68 ee 91 13 f0       	push   $0xf01391ee
f012a3d2:	e8 d9 5d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a3d7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a3da:	e8 e1 25 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a3df:	29 c3                	sub    %eax,%ebx
f012a3e1:	89 d8                	mov    %ebx,%eax
f012a3e3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a3e8:	74 17                	je     f012a401 <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a3ea:	83 ec 04             	sub    $0x4,%esp
f012a3ed:	68 02 a5 13 f0       	push   $0xf013a502
f012a3f2:	68 15 0f 00 00       	push   $0xf15
f012a3f7:	68 ee 91 13 f0       	push   $0xf01391ee
f012a3fc:	e8 af 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a401:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a408:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a40b:	e8 b0 25 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a410:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a413:	83 ec 08             	sub    $0x8,%esp
f012a416:	68 00 fc 1f 00       	push   $0x1ffc00
f012a41b:	6a 00                	push   $0x0
f012a41d:	e8 d5 db fd ff       	call   f0107ff7 <krealloc>
f012a422:	83 c4 10             	add    $0x10,%esp
f012a425:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a42b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a431:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a436:	77 17                	ja     f012a44f <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a438:	83 ec 04             	sub    $0x4,%esp
f012a43b:	68 94 a4 13 f0       	push   $0xf013a494
f012a440:	68 1c 0f 00 00       	push   $0xf1c
f012a445:	68 ee 91 13 f0       	push   $0xf01391ee
f012a44a:	e8 61 5d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a44f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a455:	89 c1                	mov    %eax,%ecx
f012a457:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a45e:	10 00 00 
f012a461:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a466:	0f b6 d0             	movzbl %al,%edx
f012a469:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a46f:	01 d0                	add    %edx,%eax
f012a471:	48                   	dec    %eax
f012a472:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a478:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a47e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a483:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a489:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a48f:	29 d0                	sub    %edx,%eax
f012a491:	89 c3                	mov    %eax,%ebx
f012a493:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a49a:	10 00 00 
f012a49d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a4a2:	0f b6 c0             	movzbl %al,%eax
f012a4a5:	c1 e0 04             	shl    $0x4,%eax
f012a4a8:	89 c2                	mov    %eax,%edx
f012a4aa:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a4b0:	01 d0                	add    %edx,%eax
f012a4b2:	48                   	dec    %eax
f012a4b3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a4b9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a4bf:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4c4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a4ca:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a4d0:	29 d0                	sub    %edx,%eax
f012a4d2:	01 d8                	add    %ebx,%eax
f012a4d4:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a4d9:	39 c1                	cmp    %eax,%ecx
f012a4db:	74 17                	je     f012a4f4 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a4dd:	83 ec 04             	sub    $0x4,%esp
f012a4e0:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a4e5:	68 1e 0f 00 00       	push   $0xf1e
f012a4ea:	68 ee 91 13 f0       	push   $0xf01391ee
f012a4ef:	e8 bc 5c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a4f4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a4f7:	e8 c4 24 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a4fc:	29 c3                	sub    %eax,%ebx
f012a4fe:	89 d8                	mov    %ebx,%eax
f012a500:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a505:	74 17                	je     f012a51e <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a507:	83 ec 04             	sub    $0x4,%esp
f012a50a:	68 02 a5 13 f0       	push   $0xf013a502
f012a50f:	68 20 0f 00 00       	push   $0xf20
f012a514:	68 ee 91 13 f0       	push   $0xf01391ee
f012a519:	e8 92 5c fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a51e:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a525:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a528:	e8 93 24 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a52d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a530:	83 ec 08             	sub    $0x8,%esp
f012a533:	68 00 fc 2f 00       	push   $0x2ffc00
f012a538:	6a 00                	push   $0x0
f012a53a:	e8 b8 da fd ff       	call   f0107ff7 <krealloc>
f012a53f:	83 c4 10             	add    $0x10,%esp
f012a542:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a548:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a54e:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a553:	77 17                	ja     f012a56c <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a555:	83 ec 04             	sub    $0x4,%esp
f012a558:	68 94 a4 13 f0       	push   $0xf013a494
f012a55d:	68 27 0f 00 00       	push   $0xf27
f012a562:	68 ee 91 13 f0       	push   $0xf01391ee
f012a567:	e8 44 5c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a56c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a572:	89 c1                	mov    %eax,%ecx
f012a574:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a57b:	10 00 00 
f012a57e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a583:	0f b6 d0             	movzbl %al,%edx
f012a586:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a58c:	01 d0                	add    %edx,%eax
f012a58e:	48                   	dec    %eax
f012a58f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a595:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a59b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5a0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a5a6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a5ac:	29 d0                	sub    %edx,%eax
f012a5ae:	89 c3                	mov    %eax,%ebx
f012a5b0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a5b7:	10 00 00 
f012a5ba:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a5bf:	0f b6 c0             	movzbl %al,%eax
f012a5c2:	c1 e0 04             	shl    $0x4,%eax
f012a5c5:	89 c2                	mov    %eax,%edx
f012a5c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a5cd:	01 d0                	add    %edx,%eax
f012a5cf:	48                   	dec    %eax
f012a5d0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a5d6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a5dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5e1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a5e7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a5ed:	29 d0                	sub    %edx,%eax
f012a5ef:	01 d8                	add    %ebx,%eax
f012a5f1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a5f6:	39 c1                	cmp    %eax,%ecx
f012a5f8:	74 17                	je     f012a611 <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a5fa:	83 ec 04             	sub    $0x4,%esp
f012a5fd:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a602:	68 29 0f 00 00       	push   $0xf29
f012a607:	68 ee 91 13 f0       	push   $0xf01391ee
f012a60c:	e8 9f 5b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a611:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a614:	e8 a7 23 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a619:	29 c3                	sub    %eax,%ebx
f012a61b:	89 d8                	mov    %ebx,%eax
f012a61d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a622:	74 17                	je     f012a63b <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a624:	83 ec 04             	sub    $0x4,%esp
f012a627:	68 38 96 13 f0       	push   $0xf0139638
f012a62c:	68 2b 0f 00 00       	push   $0xf2b
f012a631:	68 ee 91 13 f0       	push   $0xf01391ee
f012a636:	e8 75 5b fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a63b:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a642:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a645:	e8 76 23 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a64a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a64d:	83 ec 08             	sub    $0x8,%esp
f012a650:	68 00 fc 2f 00       	push   $0x2ffc00
f012a655:	6a 00                	push   $0x0
f012a657:	e8 9b d9 fd ff       	call   f0107ff7 <krealloc>
f012a65c:	83 c4 10             	add    $0x10,%esp
f012a65f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a665:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a66b:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a670:	77 17                	ja     f012a689 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a672:	83 ec 04             	sub    $0x4,%esp
f012a675:	68 94 a4 13 f0       	push   $0xf013a494
f012a67a:	68 32 0f 00 00       	push   $0xf32
f012a67f:	68 ee 91 13 f0       	push   $0xf01391ee
f012a684:	e8 27 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a689:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a68f:	89 c1                	mov    %eax,%ecx
f012a691:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a698:	10 00 00 
f012a69b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a6a0:	0f b6 d0             	movzbl %al,%edx
f012a6a3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a6a9:	01 d0                	add    %edx,%eax
f012a6ab:	48                   	dec    %eax
f012a6ac:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a6b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a6b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6bd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a6c3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a6c9:	29 d0                	sub    %edx,%eax
f012a6cb:	89 c3                	mov    %eax,%ebx
f012a6cd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a6d4:	10 00 00 
f012a6d7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a6dc:	0f b6 c0             	movzbl %al,%eax
f012a6df:	c1 e0 04             	shl    $0x4,%eax
f012a6e2:	89 c2                	mov    %eax,%edx
f012a6e4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a6ea:	01 d0                	add    %edx,%eax
f012a6ec:	48                   	dec    %eax
f012a6ed:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a6f3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6fe:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a704:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a70a:	29 d0                	sub    %edx,%eax
f012a70c:	01 d8                	add    %ebx,%eax
f012a70e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a713:	39 c1                	cmp    %eax,%ecx
f012a715:	74 17                	je     f012a72e <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a717:	83 ec 04             	sub    $0x4,%esp
f012a71a:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012a71f:	68 34 0f 00 00       	push   $0xf34
f012a724:	68 ee 91 13 f0       	push   $0xf01391ee
f012a729:	e8 82 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a72e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a731:	e8 8a 22 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a736:	29 c3                	sub    %eax,%ebx
f012a738:	89 d8                	mov    %ebx,%eax
f012a73a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a73f:	74 17                	je     f012a758 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a741:	83 ec 04             	sub    $0x4,%esp
f012a744:	68 02 a5 13 f0       	push   $0xf013a502
f012a749:	68 36 0f 00 00       	push   $0xf36
f012a74e:	68 ee 91 13 f0       	push   $0xf01391ee
f012a753:	e8 58 5a fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a758:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a75f:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a762:	e8 59 22 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012a767:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a76a:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a771:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a774:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a77a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a780:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a786:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a789:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a78b:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a791:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a797:	01 c2                	add    %eax,%edx
f012a799:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a79c:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a79e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a7a4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a7aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7b1:	eb 11                	jmp    f012a7c4 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a7b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7b6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a7bc:	01 d0                	add    %edx,%eax
f012a7be:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a7c1:	ff 45 f4             	incl   -0xc(%ebp)
f012a7c4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a7ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7cd:	7d e4                	jge    f012a7b3 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a7cf:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a7d5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a7db:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a7e1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a7e7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a7ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a7f4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a7fa:	01 d0                	add    %edx,%eax
f012a7fc:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012a802:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a808:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a80e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012a815:	eb 1b                	jmp    f012a832 <test_krealloc+0x9da>
			intArr[i] = 4;
f012a817:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a81a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a821:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a827:	01 d0                	add    %edx,%eax
f012a829:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a82f:	ff 45 f0             	incl   -0x10(%ebp)
f012a832:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a838:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012a83b:	7d da                	jge    f012a817 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012a83d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a843:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a849:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012a850:	eb 17                	jmp    f012a869 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012a852:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012a855:	01 c0                	add    %eax,%eax
f012a857:	89 c2                	mov    %eax,%edx
f012a859:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a85f:	01 d0                	add    %edx,%eax
f012a861:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a866:	ff 45 ec             	incl   -0x14(%ebp)
f012a869:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a86f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012a872:	7d de                	jge    f012a852 <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012a874:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a87a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012a880:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a886:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012a88b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a891:	01 c0                	add    %eax,%eax
f012a893:	89 c2                	mov    %eax,%edx
f012a895:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a89b:	01 d0                	add    %edx,%eax
f012a89d:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012a8a2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a8a8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a8ae:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012a8b5:	eb 49                	jmp    f012a900 <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012a8b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a8ba:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8c1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8c7:	01 d0                	add    %edx,%eax
f012a8c9:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012a8cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a8cf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8d6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8dc:	01 d0                	add    %edx,%eax
f012a8de:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012a8e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a8e7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8f4:	01 d0                	add    %edx,%eax
f012a8f6:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a8fd:	ff 45 e8             	incl   -0x18(%ebp)
f012a900:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a906:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012a909:	7d ac                	jge    f012a8b7 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012a90b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a911:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012a917:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a91d:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012a920:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a926:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012a92c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a932:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012a939:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a93f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a946:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a94c:	01 d0                	add    %edx,%eax
f012a94e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012a951:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a957:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a95e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a964:	01 d0                	add    %edx,%eax
f012a966:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012a96c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a972:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a979:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a97f:	01 d0                	add    %edx,%eax
f012a981:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012a988:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a98e:	8a 00                	mov    (%eax),%al
f012a990:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012a993:	75 17                	jne    f012a9ac <test_krealloc+0xb54>
f012a995:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012a99b:	89 c2                	mov    %eax,%edx
f012a99d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9a3:	01 d0                	add    %edx,%eax
f012a9a5:	8a 00                	mov    (%eax),%al
f012a9a7:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012a9aa:	74 17                	je     f012a9c3 <test_krealloc+0xb6b>
			panic(
f012a9ac:	83 ec 04             	sub    $0x4,%esp
f012a9af:	68 20 a5 13 f0       	push   $0xf013a520
f012a9b4:	68 79 0f 00 00       	push   $0xf79
f012a9b9:	68 ee 91 13 f0       	push   $0xf01391ee
f012a9be:	e8 ed 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012a9c3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a9c9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012a9cf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9d5:	8a 00                	mov    (%eax),%al
f012a9d7:	3c 02                	cmp    $0x2,%al
f012a9d9:	75 16                	jne    f012a9f1 <test_krealloc+0xb99>
f012a9db:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9e1:	89 c2                	mov    %eax,%edx
f012a9e3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9e9:	01 d0                	add    %edx,%eax
f012a9eb:	8a 00                	mov    (%eax),%al
f012a9ed:	3c 02                	cmp    $0x2,%al
f012a9ef:	74 20                	je     f012aa11 <test_krealloc+0xbb9>
			panic(
f012a9f1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9f7:	8a 00                	mov    (%eax),%al
f012a9f9:	0f be c0             	movsbl %al,%eax
f012a9fc:	50                   	push   %eax
f012a9fd:	68 60 a5 13 f0       	push   $0xf013a560
f012aa02:	68 7f 0f 00 00       	push   $0xf7f
f012aa07:	68 ee 91 13 f0       	push   $0xf01391ee
f012aa0c:	e8 9f 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012aa11:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012aa17:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012aa1d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa23:	8b 00                	mov    (%eax),%eax
f012aa25:	83 f8 03             	cmp    $0x3,%eax
f012aa28:	75 1c                	jne    f012aa46 <test_krealloc+0xbee>
f012aa2a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012aa30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa37:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa3d:	01 d0                	add    %edx,%eax
f012aa3f:	8b 00                	mov    (%eax),%eax
f012aa41:	83 f8 03             	cmp    $0x3,%eax
f012aa44:	74 17                	je     f012aa5d <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012aa46:	83 ec 04             	sub    $0x4,%esp
f012aa49:	68 ac a5 13 f0       	push   $0xf013a5ac
f012aa4e:	68 83 0f 00 00       	push   $0xf83
f012aa53:	68 ee 91 13 f0       	push   $0xf01391ee
f012aa58:	e8 53 57 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012aa5d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aa63:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012aa69:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa6f:	8b 00                	mov    (%eax),%eax
f012aa71:	83 f8 04             	cmp    $0x4,%eax
f012aa74:	75 1c                	jne    f012aa92 <test_krealloc+0xc3a>
f012aa76:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aa7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa83:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa89:	01 d0                	add    %edx,%eax
f012aa8b:	8b 00                	mov    (%eax),%eax
f012aa8d:	83 f8 04             	cmp    $0x4,%eax
f012aa90:	74 17                	je     f012aaa9 <test_krealloc+0xc51>
			panic(
f012aa92:	83 ec 04             	sub    $0x4,%esp
f012aa95:	68 20 a5 13 f0       	push   $0xf013a520
f012aa9a:	68 88 0f 00 00       	push   $0xf88
f012aa9f:	68 ee 91 13 f0       	push   $0xf01391ee
f012aaa4:	e8 07 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012aaa9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aaaf:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012aab5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aabb:	66 8b 00             	mov    (%eax),%ax
f012aabe:	66 83 f8 05          	cmp    $0x5,%ax
f012aac2:	75 1b                	jne    f012aadf <test_krealloc+0xc87>
f012aac4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012aaca:	01 c0                	add    %eax,%eax
f012aacc:	89 c2                	mov    %eax,%edx
f012aace:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aad4:	01 d0                	add    %edx,%eax
f012aad6:	66 8b 00             	mov    (%eax),%ax
f012aad9:	66 83 f8 05          	cmp    $0x5,%ax
f012aadd:	74 17                	je     f012aaf6 <test_krealloc+0xc9e>
			panic(
f012aadf:	83 ec 04             	sub    $0x4,%esp
f012aae2:	68 20 a5 13 f0       	push   $0xf013a520
f012aae7:	68 8d 0f 00 00       	push   $0xf8d
f012aaec:	68 ee 91 13 f0       	push   $0xf01391ee
f012aaf1:	e8 ba 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012aaf6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aafc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ab02:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab08:	66 8b 00             	mov    (%eax),%ax
f012ab0b:	66 83 f8 06          	cmp    $0x6,%ax
f012ab0f:	75 1b                	jne    f012ab2c <test_krealloc+0xcd4>
f012ab11:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ab17:	01 c0                	add    %eax,%eax
f012ab19:	89 c2                	mov    %eax,%edx
f012ab1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab21:	01 d0                	add    %edx,%eax
f012ab23:	66 8b 00             	mov    (%eax),%ax
f012ab26:	66 83 f8 06          	cmp    $0x6,%ax
f012ab2a:	74 17                	je     f012ab43 <test_krealloc+0xceb>
			panic(
f012ab2c:	83 ec 04             	sub    $0x4,%esp
f012ab2f:	68 20 a5 13 f0       	push   $0xf013a520
f012ab34:	68 92 0f 00 00       	push   $0xf92
f012ab39:	68 ee 91 13 f0       	push   $0xf01391ee
f012ab3e:	e8 6d 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ab43:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ab49:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ab4f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab55:	8a 00                	mov    (%eax),%al
f012ab57:	3c 07                	cmp    $0x7,%al
f012ab59:	75 1b                	jne    f012ab76 <test_krealloc+0xd1e>
f012ab5b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ab61:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab68:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab6e:	01 d0                	add    %edx,%eax
f012ab70:	8a 00                	mov    (%eax),%al
f012ab72:	3c 07                	cmp    $0x7,%al
f012ab74:	74 17                	je     f012ab8d <test_krealloc+0xd35>
			panic(
f012ab76:	83 ec 04             	sub    $0x4,%esp
f012ab79:	68 20 a5 13 f0       	push   $0xf013a520
f012ab7e:	68 97 0f 00 00       	push   $0xf97
f012ab83:	68 ee 91 13 f0       	push   $0xf01391ee
f012ab88:	e8 23 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ab8d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab93:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ab97:	66 83 f8 07          	cmp    $0x7,%ax
f012ab9b:	75 1f                	jne    f012abbc <test_krealloc+0xd64>
f012ab9d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012aba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abaa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abb0:	01 d0                	add    %edx,%eax
f012abb2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012abb6:	66 83 f8 07          	cmp    $0x7,%ax
f012abba:	74 17                	je     f012abd3 <test_krealloc+0xd7b>
			panic(
f012abbc:	83 ec 04             	sub    $0x4,%esp
f012abbf:	68 20 a5 13 f0       	push   $0xf013a520
f012abc4:	68 9a 0f 00 00       	push   $0xf9a
f012abc9:	68 ee 91 13 f0       	push   $0xf01391ee
f012abce:	e8 dd 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012abd3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abd9:	8b 40 04             	mov    0x4(%eax),%eax
f012abdc:	83 f8 07             	cmp    $0x7,%eax
f012abdf:	75 1d                	jne    f012abfe <test_krealloc+0xda6>
f012abe1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012abe7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abf4:	01 d0                	add    %edx,%eax
f012abf6:	8b 40 04             	mov    0x4(%eax),%eax
f012abf9:	83 f8 07             	cmp    $0x7,%eax
f012abfc:	74 17                	je     f012ac15 <test_krealloc+0xdbd>
			panic(
f012abfe:	83 ec 04             	sub    $0x4,%esp
f012ac01:	68 20 a5 13 f0       	push   $0xf013a520
f012ac06:	68 9d 0f 00 00       	push   $0xf9d
f012ac0b:	68 ee 91 13 f0       	push   $0xf01391ee
f012ac10:	e8 9b 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012ac15:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ac1b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ac21:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac27:	8a 00                	mov    (%eax),%al
f012ac29:	3c 08                	cmp    $0x8,%al
f012ac2b:	75 1b                	jne    f012ac48 <test_krealloc+0xdf0>
f012ac2d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac33:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac3a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac40:	01 d0                	add    %edx,%eax
f012ac42:	8a 00                	mov    (%eax),%al
f012ac44:	3c 08                	cmp    $0x8,%al
f012ac46:	74 17                	je     f012ac5f <test_krealloc+0xe07>
			panic(
f012ac48:	83 ec 04             	sub    $0x4,%esp
f012ac4b:	68 20 a5 13 f0       	push   $0xf013a520
f012ac50:	68 a2 0f 00 00       	push   $0xfa2
f012ac55:	68 ee 91 13 f0       	push   $0xf01391ee
f012ac5a:	e8 51 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ac5f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac65:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ac69:	66 83 f8 08          	cmp    $0x8,%ax
f012ac6d:	75 1f                	jne    f012ac8e <test_krealloc+0xe36>
f012ac6f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac75:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac7c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac82:	01 d0                	add    %edx,%eax
f012ac84:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ac88:	66 83 f8 08          	cmp    $0x8,%ax
f012ac8c:	74 17                	je     f012aca5 <test_krealloc+0xe4d>
			panic(
f012ac8e:	83 ec 04             	sub    $0x4,%esp
f012ac91:	68 20 a5 13 f0       	push   $0xf013a520
f012ac96:	68 a5 0f 00 00       	push   $0xfa5
f012ac9b:	68 ee 91 13 f0       	push   $0xf01391ee
f012aca0:	e8 0b 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012aca5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012acab:	8b 40 04             	mov    0x4(%eax),%eax
f012acae:	83 f8 08             	cmp    $0x8,%eax
f012acb1:	75 1d                	jne    f012acd0 <test_krealloc+0xe78>
f012acb3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012acb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012acc0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012acc6:	01 d0                	add    %edx,%eax
f012acc8:	8b 40 04             	mov    0x4(%eax),%eax
f012accb:	83 f8 08             	cmp    $0x8,%eax
f012acce:	74 17                	je     f012ace7 <test_krealloc+0xe8f>
			panic(
f012acd0:	83 ec 04             	sub    $0x4,%esp
f012acd3:	68 20 a5 13 f0       	push   $0xf013a520
f012acd8:	68 a8 0f 00 00       	push   $0xfa8
f012acdd:	68 ee 91 13 f0       	push   $0xf01391ee
f012ace2:	e8 c9 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ace7:	e8 d4 1c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012acec:	89 c2                	mov    %eax,%edx
f012acee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012acf1:	39 c2                	cmp    %eax,%edx
f012acf3:	74 17                	je     f012ad0c <test_krealloc+0xeb4>
			panic(
f012acf5:	83 ec 04             	sub    $0x4,%esp
f012acf8:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012acfd:	68 ac 0f 00 00       	push   $0xfac
f012ad02:	68 ee 91 13 f0       	push   $0xf01391ee
f012ad07:	e8 a4 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ad0c:	83 ec 0c             	sub    $0xc,%esp
f012ad0f:	68 2c a6 13 f0       	push   $0xf013a62c
f012ad14:	e8 18 61 fd ff       	call   f0100e31 <cprintf>
f012ad19:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ad1c:	e8 9f 1c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ad21:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ad24:	e8 3d 99 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ad29:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ad2f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ad35:	83 ec 08             	sub    $0x8,%esp
f012ad38:	6a 00                	push   $0x0
f012ad3a:	50                   	push   %eax
f012ad3b:	e8 b7 d2 fd ff       	call   f0107ff7 <krealloc>
f012ad40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ad43:	e8 1e 99 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ad48:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ad4e:	74 17                	je     f012ad67 <test_krealloc+0xf0f>
			panic(
f012ad50:	83 ec 04             	sub    $0x4,%esp
f012ad53:	68 50 a6 13 f0       	push   $0xf013a650
f012ad58:	68 b9 0f 00 00       	push   $0xfb9
f012ad5d:	68 ee 91 13 f0       	push   $0xf01391ee
f012ad62:	e8 49 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ad67:	e8 54 1c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ad6c:	89 c2                	mov    %eax,%edx
f012ad6e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ad71:	29 c2                	sub    %eax,%edx
f012ad73:	89 d0                	mov    %edx,%eax
f012ad75:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad7a:	74 17                	je     f012ad93 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012ad7c:	83 ec 04             	sub    $0x4,%esp
f012ad7f:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012ad84:	68 bb 0f 00 00       	push   $0xfbb
f012ad89:	68 ee 91 13 f0       	push   $0xf01391ee
f012ad8e:	e8 1d 54 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ad93:	e8 28 1c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ad98:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ad9b:	e8 c6 98 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ada0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012ada6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012adac:	83 ec 08             	sub    $0x8,%esp
f012adaf:	6a 00                	push   $0x0
f012adb1:	50                   	push   %eax
f012adb2:	e8 40 d2 fd ff       	call   f0107ff7 <krealloc>
f012adb7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012adba:	e8 a7 98 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012adbf:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012adc5:	74 17                	je     f012adde <test_krealloc+0xf86>
			panic(
f012adc7:	83 ec 04             	sub    $0x4,%esp
f012adca:	68 50 a6 13 f0       	push   $0xf013a650
f012adcf:	68 c4 0f 00 00       	push   $0xfc4
f012add4:	68 ee 91 13 f0       	push   $0xf01391ee
f012add9:	e8 d2 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012adde:	e8 dd 1b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ade3:	89 c2                	mov    %eax,%edx
f012ade5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ade8:	29 c2                	sub    %eax,%edx
f012adea:	89 d0                	mov    %edx,%eax
f012adec:	3d 00 01 00 00       	cmp    $0x100,%eax
f012adf1:	74 17                	je     f012ae0a <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012adf3:	83 ec 04             	sub    $0x4,%esp
f012adf6:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012adfb:	68 c6 0f 00 00       	push   $0xfc6
f012ae00:	68 ee 91 13 f0       	push   $0xf01391ee
f012ae05:	e8 a6 53 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ae0a:	e8 b1 1b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ae0f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ae12:	e8 4f 98 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ae17:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ae1d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ae23:	83 ec 08             	sub    $0x8,%esp
f012ae26:	6a 00                	push   $0x0
f012ae28:	50                   	push   %eax
f012ae29:	e8 c9 d1 fd ff       	call   f0107ff7 <krealloc>
f012ae2e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ae31:	e8 30 98 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ae36:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ae3c:	74 17                	je     f012ae55 <test_krealloc+0xffd>
			panic(
f012ae3e:	83 ec 04             	sub    $0x4,%esp
f012ae41:	68 08 92 13 f0       	push   $0xf0139208
f012ae46:	68 ce 0f 00 00       	push   $0xfce
f012ae4b:	68 ee 91 13 f0       	push   $0xf01391ee
f012ae50:	e8 5b 53 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ae55:	e8 66 1b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ae5a:	89 c2                	mov    %eax,%edx
f012ae5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae5f:	29 c2                	sub    %eax,%edx
f012ae61:	89 d0                	mov    %edx,%eax
f012ae63:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ae68:	74 17                	je     f012ae81 <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012ae6a:	83 ec 04             	sub    $0x4,%esp
f012ae6d:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012ae72:	68 d0 0f 00 00       	push   $0xfd0
f012ae77:	68 ee 91 13 f0       	push   $0xf01391ee
f012ae7c:	e8 2f 53 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ae81:	e8 3a 1b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ae86:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ae89:	e8 d8 97 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ae8e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ae94:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ae9a:	83 ec 08             	sub    $0x8,%esp
f012ae9d:	6a 00                	push   $0x0
f012ae9f:	50                   	push   %eax
f012aea0:	e8 52 d1 fd ff       	call   f0107ff7 <krealloc>
f012aea5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aea8:	e8 b9 97 fd ff       	call   f0104666 <pf_calculate_free_frames>
f012aead:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012aeb3:	74 17                	je     f012aecc <test_krealloc+0x1074>
			panic(
f012aeb5:	83 ec 04             	sub    $0x4,%esp
f012aeb8:	68 50 a6 13 f0       	push   $0xf013a650
f012aebd:	68 d8 0f 00 00       	push   $0xfd8
f012aec2:	68 ee 91 13 f0       	push   $0xf01391ee
f012aec7:	e8 e4 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012aecc:	e8 ef 1a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012aed1:	89 c2                	mov    %eax,%edx
f012aed3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aed6:	29 c2                	sub    %eax,%edx
f012aed8:	89 d0                	mov    %edx,%eax
f012aeda:	3d 00 03 00 00       	cmp    $0x300,%eax
f012aedf:	74 17                	je     f012aef8 <test_krealloc+0x10a0>
			panic(
f012aee1:	83 ec 04             	sub    $0x4,%esp
f012aee4:	68 f8 a6 13 f0       	push   $0xf013a6f8
f012aee9:	68 db 0f 00 00       	push   $0xfdb
f012aeee:	68 ee 91 13 f0       	push   $0xf01391ee
f012aef3:	e8 b8 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012aef8:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012aeff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012af06:	eb 48                	jmp    f012af50 <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012af08:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012af0b:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012af10:	83 ec 04             	sub    $0x4,%esp
f012af13:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012af19:	51                   	push   %ecx
f012af1a:	52                   	push   %edx
f012af1b:	50                   	push   %eax
f012af1c:	e8 a8 c5 fd ff       	call   f01074c9 <get_page_table>
f012af21:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012af24:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012af2a:	85 c0                	test   %eax,%eax
f012af2c:	75 17                	jne    f012af45 <test_krealloc+0x10ed>
					panic(
f012af2e:	83 ec 04             	sub    $0x4,%esp
f012af31:	68 f0 9a 13 f0       	push   $0xf0139af0
f012af36:	68 e7 0f 00 00       	push   $0xfe7
f012af3b:	68 ee 91 13 f0       	push   $0xf01391ee
f012af40:	e8 6b 52 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012af45:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012af4c:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012af50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012af54:	78 b2                	js     f012af08 <test_krealloc+0x10b0>
f012af56:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012af5a:	7f 09                	jg     f012af65 <test_krealloc+0x110d>
f012af5c:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012af63:	76 a3                	jbe    f012af08 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012af65:	83 ec 0c             	sub    $0xc,%esp
f012af68:	68 37 a7 13 f0       	push   $0xf013a737
f012af6d:	e8 bf 5e fd ff       	call   f0100e31 <cprintf>
f012af72:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012af75:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af7b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012af81:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012af88:	eb 21                	jmp    f012afab <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012af8a:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012af90:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012af93:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012af99:	01 c8                	add    %ecx,%eax
f012af9b:	8a 00                	mov    (%eax),%al
f012af9d:	0f be c0             	movsbl %al,%eax
f012afa0:	01 d0                	add    %edx,%eax
f012afa2:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012afa8:	ff 45 dc             	incl   -0x24(%ebp)
f012afab:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012afb1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012afb4:	7d d4                	jge    f012af8a <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012afb6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012afbc:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012afc2:	42                   	inc    %edx
f012afc3:	01 d2                	add    %edx,%edx
f012afc5:	39 d0                	cmp    %edx,%eax
f012afc7:	74 17                	je     f012afe0 <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012afc9:	83 ec 04             	sub    $0x4,%esp
f012afcc:	68 40 a7 13 f0       	push   $0xf013a740
f012afd1:	68 f9 0f 00 00       	push   $0xff9
f012afd6:	68 ee 91 13 f0       	push   $0xf01391ee
f012afdb:	e8 d0 51 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012afe0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012afe6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012afec:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012aff3:	eb 25                	jmp    f012b01a <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012aff5:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012affb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012affe:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012b005:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b00b:	01 c8                	add    %ecx,%eax
f012b00d:	8b 00                	mov    (%eax),%eax
f012b00f:	01 d0                	add    %edx,%eax
f012b011:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b017:	ff 45 dc             	incl   -0x24(%ebp)
f012b01a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b020:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b023:	7d d0                	jge    f012aff5 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012b025:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b02b:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012b031:	42                   	inc    %edx
f012b032:	c1 e2 02             	shl    $0x2,%edx
f012b035:	39 d0                	cmp    %edx,%eax
f012b037:	74 17                	je     f012b050 <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012b039:	83 ec 04             	sub    $0x4,%esp
f012b03c:	68 40 a7 13 f0       	push   $0xf013a740
f012b041:	68 03 10 00 00       	push   $0x1003
f012b046:	68 ee 91 13 f0       	push   $0xf01391ee
f012b04b:	e8 60 51 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b050:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b056:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b05c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b063:	eb 24                	jmp    f012b089 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b065:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b06b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b06e:	01 c0                	add    %eax,%eax
f012b070:	89 c1                	mov    %eax,%ecx
f012b072:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b078:	01 c8                	add    %ecx,%eax
f012b07a:	66 8b 00             	mov    (%eax),%ax
f012b07d:	98                   	cwtl   
f012b07e:	01 d0                	add    %edx,%eax
f012b080:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b086:	ff 45 dc             	incl   -0x24(%ebp)
f012b089:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b08f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b092:	7d d1                	jge    f012b065 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b094:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b09a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b0a0:	8d 48 01             	lea    0x1(%eax),%ecx
f012b0a3:	89 c8                	mov    %ecx,%eax
f012b0a5:	c1 e0 02             	shl    $0x2,%eax
f012b0a8:	01 c8                	add    %ecx,%eax
f012b0aa:	39 c2                	cmp    %eax,%edx
f012b0ac:	74 17                	je     f012b0c5 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b0ae:	83 ec 04             	sub    $0x4,%esp
f012b0b1:	68 40 a7 13 f0       	push   $0xf013a740
f012b0b6:	68 0d 10 00 00       	push   $0x100d
f012b0bb:	68 ee 91 13 f0       	push   $0xf01391ee
f012b0c0:	e8 eb 50 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b0c5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b0cb:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b0d1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b0d8:	eb 70                	jmp    f012b14a <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b0da:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b0e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b0e3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b0ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b0f0:	01 c8                	add    %ecx,%eax
f012b0f2:	8a 00                	mov    (%eax),%al
f012b0f4:	0f be c0             	movsbl %al,%eax
f012b0f7:	01 d0                	add    %edx,%eax
f012b0f9:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b0ff:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b105:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b108:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b10f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b115:	01 c8                	add    %ecx,%eax
f012b117:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b11b:	98                   	cwtl   
f012b11c:	01 d0                	add    %edx,%eax
f012b11e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b124:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b12a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b12d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b134:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b13a:	01 c8                	add    %ecx,%eax
f012b13c:	8b 40 04             	mov    0x4(%eax),%eax
f012b13f:	01 d0                	add    %edx,%eax
f012b141:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b147:	ff 45 dc             	incl   -0x24(%ebp)
f012b14a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b150:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b153:	7d 85                	jge    f012b0da <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b155:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b15b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b161:	8d 50 01             	lea    0x1(%eax),%edx
f012b164:	89 d0                	mov    %edx,%eax
f012b166:	01 c0                	add    %eax,%eax
f012b168:	01 d0                	add    %edx,%eax
f012b16a:	01 c0                	add    %eax,%eax
f012b16c:	01 d0                	add    %edx,%eax
f012b16e:	39 c1                	cmp    %eax,%ecx
f012b170:	75 3a                	jne    f012b1ac <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b172:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b178:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b17e:	8d 50 01             	lea    0x1(%eax),%edx
f012b181:	89 d0                	mov    %edx,%eax
f012b183:	01 c0                	add    %eax,%eax
f012b185:	01 d0                	add    %edx,%eax
f012b187:	01 c0                	add    %eax,%eax
f012b189:	01 d0                	add    %edx,%eax
f012b18b:	39 c1                	cmp    %eax,%ecx
f012b18d:	75 1d                	jne    f012b1ac <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b18f:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b195:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b19b:	8d 50 01             	lea    0x1(%eax),%edx
f012b19e:	89 d0                	mov    %edx,%eax
f012b1a0:	01 c0                	add    %eax,%eax
f012b1a2:	01 d0                	add    %edx,%eax
f012b1a4:	01 c0                	add    %eax,%eax
f012b1a6:	01 d0                	add    %edx,%eax
f012b1a8:	39 c1                	cmp    %eax,%ecx
f012b1aa:	74 17                	je     f012b1c3 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b1ac:	83 ec 04             	sub    $0x4,%esp
f012b1af:	68 40 a7 13 f0       	push   $0xf013a740
f012b1b4:	68 1b 10 00 00       	push   $0x101b
f012b1b9:	68 ee 91 13 f0       	push   $0xf01391ee
f012b1be:	e8 ed 4f fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b1c3:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b1ca:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b1cd:	e8 ee 17 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b1d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b1d5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b1db:	83 ec 08             	sub    $0x8,%esp
f012b1de:	68 00 3c 00 00       	push   $0x3c00
f012b1e3:	50                   	push   %eax
f012b1e4:	e8 0e ce fd ff       	call   f0107ff7 <krealloc>
f012b1e9:	83 c4 10             	add    $0x10,%esp
f012b1ec:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b1f2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b1f8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b1fd:	77 17                	ja     f012b216 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b1ff:	83 ec 04             	sub    $0x4,%esp
f012b202:	68 94 a4 13 f0       	push   $0xf013a494
f012b207:	68 27 10 00 00       	push   $0x1027
f012b20c:	68 ee 91 13 f0       	push   $0xf01391ee
f012b211:	e8 9a 4f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b216:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b21c:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b222:	74 17                	je     f012b23b <test_krealloc+0x13e3>
			panic(
f012b224:	83 ec 04             	sub    $0x4,%esp
f012b227:	68 78 a7 13 f0       	push   $0xf013a778
f012b22c:	68 2a 10 00 00       	push   $0x102a
f012b231:	68 ee 91 13 f0       	push   $0xf01391ee
f012b236:	e8 75 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b23b:	e8 80 17 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b240:	89 c2                	mov    %eax,%edx
f012b242:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b245:	39 c2                	cmp    %eax,%edx
f012b247:	74 17                	je     f012b260 <test_krealloc+0x1408>
			panic(
f012b249:	83 ec 04             	sub    $0x4,%esp
f012b24c:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012b251:	68 2d 10 00 00       	push   $0x102d
f012b256:	68 ee 91 13 f0       	push   $0xf01391ee
f012b25b:	e8 50 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b260:	e8 5b 17 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b265:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b268:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b26e:	83 ec 08             	sub    $0x8,%esp
f012b271:	68 00 fc 0f 00       	push   $0xffc00
f012b276:	50                   	push   %eax
f012b277:	e8 7b cd fd ff       	call   f0107ff7 <krealloc>
f012b27c:	83 c4 10             	add    $0x10,%esp
f012b27f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b285:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b28b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b290:	77 17                	ja     f012b2a9 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b292:	83 ec 04             	sub    $0x4,%esp
f012b295:	68 94 a4 13 f0       	push   $0xf013a494
f012b29a:	68 33 10 00 00       	push   $0x1033
f012b29f:	68 ee 91 13 f0       	push   $0xf01391ee
f012b2a4:	e8 07 4f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b2a9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b2af:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b2b5:	74 17                	je     f012b2ce <test_krealloc+0x1476>
			panic(
f012b2b7:	83 ec 04             	sub    $0x4,%esp
f012b2ba:	68 78 a7 13 f0       	push   $0xf013a778
f012b2bf:	68 36 10 00 00       	push   $0x1036
f012b2c4:	68 ee 91 13 f0       	push   $0xf01391ee
f012b2c9:	e8 e2 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b2ce:	e8 ed 16 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b2d3:	89 c2                	mov    %eax,%edx
f012b2d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b2d8:	39 c2                	cmp    %eax,%edx
f012b2da:	74 17                	je     f012b2f3 <test_krealloc+0x149b>
			panic(
f012b2dc:	83 ec 04             	sub    $0x4,%esp
f012b2df:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012b2e4:	68 39 10 00 00       	push   $0x1039
f012b2e9:	68 ee 91 13 f0       	push   $0xf01391ee
f012b2ee:	e8 bd 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b2f3:	e8 c8 16 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b2f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b2fb:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b301:	83 ec 08             	sub    $0x8,%esp
f012b304:	68 00 fc 0f 00       	push   $0xffc00
f012b309:	50                   	push   %eax
f012b30a:	e8 e8 cc fd ff       	call   f0107ff7 <krealloc>
f012b30f:	83 c4 10             	add    $0x10,%esp
f012b312:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b318:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b31e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b323:	77 17                	ja     f012b33c <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b325:	83 ec 04             	sub    $0x4,%esp
f012b328:	68 94 a4 13 f0       	push   $0xf013a494
f012b32d:	68 3f 10 00 00       	push   $0x103f
f012b332:	68 ee 91 13 f0       	push   $0xf01391ee
f012b337:	e8 74 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b33c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b342:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b348:	74 17                	je     f012b361 <test_krealloc+0x1509>
			panic(
f012b34a:	83 ec 04             	sub    $0x4,%esp
f012b34d:	68 78 a7 13 f0       	push   $0xf013a778
f012b352:	68 42 10 00 00       	push   $0x1042
f012b357:	68 ee 91 13 f0       	push   $0xf01391ee
f012b35c:	e8 4f 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b361:	e8 5a 16 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b366:	89 c2                	mov    %eax,%edx
f012b368:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b36b:	39 c2                	cmp    %eax,%edx
f012b36d:	74 17                	je     f012b386 <test_krealloc+0x152e>
			panic(
f012b36f:	83 ec 04             	sub    $0x4,%esp
f012b372:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012b377:	68 45 10 00 00       	push   $0x1045
f012b37c:	68 ee 91 13 f0       	push   $0xf01391ee
f012b381:	e8 2a 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b386:	e8 35 16 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b38b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b38e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b394:	83 ec 08             	sub    $0x8,%esp
f012b397:	68 00 fc 0f 00       	push   $0xffc00
f012b39c:	50                   	push   %eax
f012b39d:	e8 55 cc fd ff       	call   f0107ff7 <krealloc>
f012b3a2:	83 c4 10             	add    $0x10,%esp
f012b3a5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b3ab:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b3b1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b3b6:	77 17                	ja     f012b3cf <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b3b8:	83 ec 04             	sub    $0x4,%esp
f012b3bb:	68 94 a4 13 f0       	push   $0xf013a494
f012b3c0:	68 4d 10 00 00       	push   $0x104d
f012b3c5:	68 ee 91 13 f0       	push   $0xf01391ee
f012b3ca:	e8 e1 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b3cf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b3d5:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b3db:	74 17                	je     f012b3f4 <test_krealloc+0x159c>
			panic(
f012b3dd:	83 ec 04             	sub    $0x4,%esp
f012b3e0:	68 28 a8 13 f0       	push   $0xf013a828
f012b3e5:	68 50 10 00 00       	push   $0x1050
f012b3ea:	68 ee 91 13 f0       	push   $0xf01391ee
f012b3ef:	e8 bc 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b3f4:	e8 c7 15 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b3f9:	89 c2                	mov    %eax,%edx
f012b3fb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b3fe:	39 c2                	cmp    %eax,%edx
f012b400:	74 17                	je     f012b419 <test_krealloc+0x15c1>
			panic(
f012b402:	83 ec 04             	sub    $0x4,%esp
f012b405:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012b40a:	68 53 10 00 00       	push   $0x1053
f012b40f:	68 ee 91 13 f0       	push   $0xf01391ee
f012b414:	e8 97 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b419:	83 ec 0c             	sub    $0xc,%esp
f012b41c:	68 07 9a 13 f0       	push   $0xf0139a07
f012b421:	e8 0b 5a fd ff       	call   f0100e31 <cprintf>
f012b426:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b429:	e8 92 15 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b431:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b437:	83 ec 08             	sub    $0x8,%esp
f012b43a:	68 00 18 10 00       	push   $0x101800
f012b43f:	50                   	push   %eax
f012b440:	e8 b2 cb fd ff       	call   f0107ff7 <krealloc>
f012b445:	83 c4 10             	add    $0x10,%esp
f012b448:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b44b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b44e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b453:	77 17                	ja     f012b46c <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b455:	83 ec 04             	sub    $0x4,%esp
f012b458:	68 94 a4 13 f0       	push   $0xf013a494
f012b45d:	68 5c 10 00 00       	push   $0x105c
f012b462:	68 ee 91 13 f0       	push   $0xf01391ee
f012b467:	e8 44 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b46c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b472:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b475:	74 17                	je     f012b48e <test_krealloc+0x1636>
			panic(
f012b477:	83 ec 04             	sub    $0x4,%esp
f012b47a:	68 88 a8 13 f0       	push   $0xf013a888
f012b47f:	68 5f 10 00 00       	push   $0x105f
f012b484:	68 ee 91 13 f0       	push   $0xf01391ee
f012b489:	e8 22 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b48e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b491:	e8 2a 15 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b496:	29 c3                	sub    %eax,%ebx
f012b498:	89 d8                	mov    %ebx,%eax
f012b49a:	83 f8 02             	cmp    $0x2,%eax
f012b49d:	74 17                	je     f012b4b6 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b49f:	83 ec 04             	sub    $0x4,%esp
f012b4a2:	68 04 a9 13 f0       	push   $0xf013a904
f012b4a7:	68 61 10 00 00       	push   $0x1061
f012b4ac:	68 ee 91 13 f0       	push   $0xf01391ee
f012b4b1:	e8 fa 4c fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b4b6:	e8 05 15 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b4bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b4be:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b4c4:	83 ec 08             	sub    $0x8,%esp
f012b4c7:	68 00 fc 3f 00       	push   $0x3ffc00
f012b4cc:	50                   	push   %eax
f012b4cd:	e8 25 cb fd ff       	call   f0107ff7 <krealloc>
f012b4d2:	83 c4 10             	add    $0x10,%esp
f012b4d5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b4d8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b4db:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b4e0:	77 17                	ja     f012b4f9 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b4e2:	83 ec 04             	sub    $0x4,%esp
f012b4e5:	68 94 a4 13 f0       	push   $0xf013a494
f012b4ea:	68 67 10 00 00       	push   $0x1067
f012b4ef:	68 ee 91 13 f0       	push   $0xf01391ee
f012b4f4:	e8 b7 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b4f9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b4ff:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b502:	74 17                	je     f012b51b <test_krealloc+0x16c3>
			panic(
f012b504:	83 ec 04             	sub    $0x4,%esp
f012b507:	68 88 a8 13 f0       	push   $0xf013a888
f012b50c:	68 6a 10 00 00       	push   $0x106a
f012b511:	68 ee 91 13 f0       	push   $0xf01391ee
f012b516:	e8 95 4c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b51b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b51e:	e8 9d 14 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b523:	29 c3                	sub    %eax,%ebx
f012b525:	89 d8                	mov    %ebx,%eax
f012b527:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b52c:	74 17                	je     f012b545 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b52e:	83 ec 04             	sub    $0x4,%esp
f012b531:	68 04 a9 13 f0       	push   $0xf013a904
f012b536:	68 6d 10 00 00       	push   $0x106d
f012b53b:	68 ee 91 13 f0       	push   $0xf01391ee
f012b540:	e8 6b 4c fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b545:	83 ec 0c             	sub    $0xc,%esp
f012b548:	68 4c 9a 13 f0       	push   $0xf0139a4c
f012b54d:	e8 df 58 fd ff       	call   f0100e31 <cprintf>
f012b552:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b555:	e8 66 14 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b55a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b55d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b563:	83 ec 08             	sub    $0x8,%esp
f012b566:	68 00 fc 9f 00       	push   $0x9ffc00
f012b56b:	50                   	push   %eax
f012b56c:	e8 86 ca fd ff       	call   f0107ff7 <krealloc>
f012b571:	83 c4 10             	add    $0x10,%esp
f012b574:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b577:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b57a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b57f:	77 17                	ja     f012b598 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b581:	83 ec 04             	sub    $0x4,%esp
f012b584:	68 94 a4 13 f0       	push   $0xf013a494
f012b589:	68 78 10 00 00       	push   $0x1078
f012b58e:	68 ee 91 13 f0       	push   $0xf01391ee
f012b593:	e8 18 4c fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b598:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b59f:	10 00 00 
f012b5a2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b5a7:	0f b6 d0             	movzbl %al,%edx
f012b5aa:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b5b0:	01 d0                	add    %edx,%eax
f012b5b2:	48                   	dec    %eax
f012b5b3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b5b9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b5bf:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5c4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b5ca:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b5d0:	29 d0                	sub    %edx,%eax
f012b5d2:	89 c1                	mov    %eax,%ecx
f012b5d4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b5db:	10 00 00 
f012b5de:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b5e3:	0f b6 c0             	movzbl %al,%eax
f012b5e6:	c1 e0 04             	shl    $0x4,%eax
f012b5e9:	89 c2                	mov    %eax,%edx
f012b5eb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b5f1:	01 d0                	add    %edx,%eax
f012b5f3:	48                   	dec    %eax
f012b5f4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b5fa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b600:	ba 00 00 00 00       	mov    $0x0,%edx
f012b605:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b60b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b611:	29 d0                	sub    %edx,%eax
f012b613:	01 c8                	add    %ecx,%eax
f012b615:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b61b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b61e:	39 c2                	cmp    %eax,%edx
f012b620:	74 18                	je     f012b63a <test_krealloc+0x17e2>
			panic(
f012b622:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b625:	50                   	push   %eax
f012b626:	68 38 a9 13 f0       	push   $0xf013a938
f012b62b:	68 7c 10 00 00       	push   $0x107c
f012b630:	68 ee 91 13 f0       	push   $0xf01391ee
f012b635:	e8 76 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b63a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b640:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b643:	75 17                	jne    f012b65c <test_krealloc+0x1804>
			panic(
f012b645:	83 ec 04             	sub    $0x4,%esp
f012b648:	68 7c a9 13 f0       	push   $0xf013a97c
f012b64d:	68 7f 10 00 00       	push   $0x107f
f012b652:	68 ee 91 13 f0       	push   $0xf01391ee
f012b657:	e8 54 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b65c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b65f:	e8 5c 13 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b664:	29 c3                	sub    %eax,%ebx
f012b666:	89 d8                	mov    %ebx,%eax
f012b668:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b66d:	74 17                	je     f012b686 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b66f:	83 ec 04             	sub    $0x4,%esp
f012b672:	68 04 a9 13 f0       	push   $0xf013a904
f012b677:	68 82 10 00 00       	push   $0x1082
f012b67c:	68 ee 91 13 f0       	push   $0xf01391ee
f012b681:	e8 2a 4b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b686:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b689:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b68f:	e8 2c 13 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b694:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b697:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b69d:	83 ec 08             	sub    $0x8,%esp
f012b6a0:	68 00 fc 5f 00       	push   $0x5ffc00
f012b6a5:	50                   	push   %eax
f012b6a6:	e8 4c c9 fd ff       	call   f0107ff7 <krealloc>
f012b6ab:	83 c4 10             	add    $0x10,%esp
f012b6ae:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b6b1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b6b4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b6b9:	77 17                	ja     f012b6d2 <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b6bb:	83 ec 04             	sub    $0x4,%esp
f012b6be:	68 94 a4 13 f0       	push   $0xf013a494
f012b6c3:	68 8b 10 00 00       	push   $0x108b
f012b6c8:	68 ee 91 13 f0       	push   $0xf01391ee
f012b6cd:	e8 de 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b6d2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b6d8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b6db:	74 17                	je     f012b6f4 <test_krealloc+0x189c>
			panic(
f012b6dd:	83 ec 04             	sub    $0x4,%esp
f012b6e0:	68 88 a8 13 f0       	push   $0xf013a888
f012b6e5:	68 8e 10 00 00       	push   $0x108e
f012b6ea:	68 ee 91 13 f0       	push   $0xf01391ee
f012b6ef:	e8 bc 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b6f4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6f7:	e8 c4 12 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b6fc:	29 c3                	sub    %eax,%ebx
f012b6fe:	89 d8                	mov    %ebx,%eax
f012b700:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b705:	74 17                	je     f012b71e <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b707:	83 ec 04             	sub    $0x4,%esp
f012b70a:	68 04 a9 13 f0       	push   $0xf013a904
f012b70f:	68 91 10 00 00       	push   $0x1091
f012b714:	68 ee 91 13 f0       	push   $0xf01391ee
f012b719:	e8 92 4a fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b71e:	e8 9d 12 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b723:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b726:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b72c:	83 ec 08             	sub    $0x8,%esp
f012b72f:	68 00 fc 3f 01       	push   $0x13ffc00
f012b734:	50                   	push   %eax
f012b735:	e8 bd c8 fd ff       	call   f0107ff7 <krealloc>
f012b73a:	83 c4 10             	add    $0x10,%esp
f012b73d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b740:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b743:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b748:	77 17                	ja     f012b761 <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b74a:	83 ec 04             	sub    $0x4,%esp
f012b74d:	68 94 a4 13 f0       	push   $0xf013a494
f012b752:	68 98 10 00 00       	push   $0x1098
f012b757:	68 ee 91 13 f0       	push   $0xf01391ee
f012b75c:	e8 4f 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b761:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b767:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b76a:	75 17                	jne    f012b783 <test_krealloc+0x192b>
			panic(
f012b76c:	83 ec 04             	sub    $0x4,%esp
f012b76f:	68 7c a9 13 f0       	push   $0xf013a97c
f012b774:	68 9b 10 00 00       	push   $0x109b
f012b779:	68 ee 91 13 f0       	push   $0xf01391ee
f012b77e:	e8 2d 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b783:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b78a:	10 00 00 
f012b78d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b792:	0f b6 d0             	movzbl %al,%edx
f012b795:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b79b:	01 d0                	add    %edx,%eax
f012b79d:	48                   	dec    %eax
f012b79e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b7a4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7aa:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7af:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b7b5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7bb:	29 d0                	sub    %edx,%eax
f012b7bd:	89 c1                	mov    %eax,%ecx
f012b7bf:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b7c6:	10 00 00 
f012b7c9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b7ce:	0f b6 c0             	movzbl %al,%eax
f012b7d1:	c1 e0 04             	shl    $0x4,%eax
f012b7d4:	89 c2                	mov    %eax,%edx
f012b7d6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b7dc:	01 d0                	add    %edx,%eax
f012b7de:	48                   	dec    %eax
f012b7df:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b7e5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b7eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7f0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b7f6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b7fc:	29 d0                	sub    %edx,%eax
f012b7fe:	01 c8                	add    %ecx,%eax
f012b800:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012b806:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b809:	39 c2                	cmp    %eax,%edx
f012b80b:	74 17                	je     f012b824 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012b80d:	83 ec 04             	sub    $0x4,%esp
f012b810:	68 00 aa 13 f0       	push   $0xf013aa00
f012b815:	68 9d 10 00 00       	push   $0x109d
f012b81a:	68 ee 91 13 f0       	push   $0xf01391ee
f012b81f:	e8 8c 49 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012b824:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b827:	e8 94 11 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012b82c:	29 c3                	sub    %eax,%ebx
f012b82e:	89 d8                	mov    %ebx,%eax
f012b830:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012b835:	74 17                	je     f012b84e <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b837:	83 ec 04             	sub    $0x4,%esp
f012b83a:	68 04 a9 13 f0       	push   $0xf013a904
f012b83f:	68 a0 10 00 00       	push   $0x10a0
f012b844:	68 ee 91 13 f0       	push   $0xf01391ee
f012b849:	e8 62 49 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012b84e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b851:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b857:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b85d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012b863:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b86a:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b86d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b874:	eb 21                	jmp    f012b897 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012b876:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b87c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012b87f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b885:	01 c8                	add    %ecx,%eax
f012b887:	8a 00                	mov    (%eax),%al
f012b889:	0f be c0             	movsbl %al,%eax
f012b88c:	01 d0                	add    %edx,%eax
f012b88e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b894:	ff 45 d8             	incl   -0x28(%ebp)
f012b897:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b89d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b8a0:	7d d4                	jge    f012b876 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b8a2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b8a8:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b8ae:	42                   	inc    %edx
f012b8af:	01 d2                	add    %edx,%edx
f012b8b1:	39 d0                	cmp    %edx,%eax
f012b8b3:	74 17                	je     f012b8cc <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012b8b5:	83 ec 04             	sub    $0x4,%esp
f012b8b8:	68 34 aa 13 f0       	push   $0xf013aa34
f012b8bd:	68 ae 10 00 00       	push   $0x10ae
f012b8c2:	68 ee 91 13 f0       	push   $0xf01391ee
f012b8c7:	e8 e4 48 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b8cc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b8d2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012b8d8:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b8df:	00 00 00 
		sums[1] = 0;
f012b8e2:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012b8e9:	00 00 00 
		sums[2] = 0;
f012b8ec:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012b8f3:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b8f6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b8fd:	eb 70                	jmp    f012b96f <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012b8ff:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b905:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b908:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b90f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b915:	01 c8                	add    %ecx,%eax
f012b917:	8a 00                	mov    (%eax),%al
f012b919:	0f be c0             	movsbl %al,%eax
f012b91c:	01 d0                	add    %edx,%eax
f012b91e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012b924:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b92a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b92d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b934:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b93a:	01 c8                	add    %ecx,%eax
f012b93c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b940:	98                   	cwtl   
f012b941:	01 d0                	add    %edx,%eax
f012b943:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012b949:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b94f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b952:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b959:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b95f:	01 c8                	add    %ecx,%eax
f012b961:	8b 40 04             	mov    0x4(%eax),%eax
f012b964:	01 d0                	add    %edx,%eax
f012b966:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b96c:	ff 45 d8             	incl   -0x28(%ebp)
f012b96f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b975:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b978:	7d 85                	jge    f012b8ff <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012b97a:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012b980:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b986:	8d 50 01             	lea    0x1(%eax),%edx
f012b989:	89 d0                	mov    %edx,%eax
f012b98b:	01 c0                	add    %eax,%eax
f012b98d:	01 d0                	add    %edx,%eax
f012b98f:	01 c0                	add    %eax,%eax
f012b991:	01 d0                	add    %edx,%eax
f012b993:	39 c1                	cmp    %eax,%ecx
f012b995:	75 3a                	jne    f012b9d1 <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012b997:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012b99d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9a3:	8d 50 01             	lea    0x1(%eax),%edx
f012b9a6:	89 d0                	mov    %edx,%eax
f012b9a8:	01 c0                	add    %eax,%eax
f012b9aa:	01 d0                	add    %edx,%eax
f012b9ac:	01 c0                	add    %eax,%eax
f012b9ae:	01 d0                	add    %edx,%eax
f012b9b0:	39 c1                	cmp    %eax,%ecx
f012b9b2:	75 1d                	jne    f012b9d1 <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012b9b4:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012b9ba:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9c0:	8d 50 01             	lea    0x1(%eax),%edx
f012b9c3:	89 d0                	mov    %edx,%eax
f012b9c5:	01 c0                	add    %eax,%eax
f012b9c7:	01 d0                	add    %edx,%eax
f012b9c9:	01 c0                	add    %eax,%eax
f012b9cb:	01 d0                	add    %edx,%eax
f012b9cd:	39 c1                	cmp    %eax,%ecx
f012b9cf:	74 17                	je     f012b9e8 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012b9d1:	83 ec 04             	sub    $0x4,%esp
f012b9d4:	68 34 aa 13 f0       	push   $0xf013aa34
f012b9d9:	68 c0 10 00 00       	push   $0x10c0
f012b9de:	68 ee 91 13 f0       	push   $0xf01391ee
f012b9e3:	e8 c8 47 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012b9e8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b9ee:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012b9f4:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b9fb:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b9fe:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ba05:	eb 24                	jmp    f012ba2b <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012ba07:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ba10:	01 c0                	add    %eax,%eax
f012ba12:	89 c1                	mov    %eax,%ecx
f012ba14:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ba1a:	01 c8                	add    %ecx,%eax
f012ba1c:	66 8b 00             	mov    (%eax),%ax
f012ba1f:	98                   	cwtl   
f012ba20:	01 d0                	add    %edx,%eax
f012ba22:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ba28:	ff 45 d8             	incl   -0x28(%ebp)
f012ba2b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ba34:	7d d1                	jge    f012ba07 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ba36:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba3c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba42:	8d 48 01             	lea    0x1(%eax),%ecx
f012ba45:	89 c8                	mov    %ecx,%eax
f012ba47:	c1 e0 02             	shl    $0x2,%eax
f012ba4a:	01 c8                	add    %ecx,%eax
f012ba4c:	39 c2                	cmp    %eax,%edx
f012ba4e:	74 17                	je     f012ba67 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012ba50:	83 ec 04             	sub    $0x4,%esp
f012ba53:	68 34 aa 13 f0       	push   $0xf013aa34
f012ba58:	68 ca 10 00 00       	push   $0x10ca
f012ba5d:	68 ee 91 13 f0       	push   $0xf01391ee
f012ba62:	e8 49 47 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ba67:	e8 54 0f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ba6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ba6f:	e8 f2 8b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ba74:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ba7a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ba80:	83 ec 08             	sub    $0x8,%esp
f012ba83:	6a 00                	push   $0x0
f012ba85:	50                   	push   %eax
f012ba86:	e8 6c c5 fd ff       	call   f0107ff7 <krealloc>
f012ba8b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ba8e:	e8 d3 8b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012ba93:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ba99:	74 17                	je     f012bab2 <test_krealloc+0x1c5a>
			panic(
f012ba9b:	83 ec 04             	sub    $0x4,%esp
f012ba9e:	68 08 92 13 f0       	push   $0xf0139208
f012baa3:	68 d2 10 00 00       	push   $0x10d2
f012baa8:	68 ee 91 13 f0       	push   $0xf01391ee
f012baad:	e8 fe 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012bab2:	e8 09 0f fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bab7:	89 c2                	mov    %eax,%edx
f012bab9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012babc:	29 c2                	sub    %eax,%edx
f012babe:	89 d0                	mov    %edx,%eax
f012bac0:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012bac5:	74 17                	je     f012bade <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012bac7:	83 ec 04             	sub    $0x4,%esp
f012baca:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012bacf:	68 d4 10 00 00       	push   $0x10d4
f012bad4:	68 ee 91 13 f0       	push   $0xf01391ee
f012bad9:	e8 d2 46 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012bade:	e8 dd 0e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bae3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bae6:	e8 7b 8b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012baeb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012baf1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012baf7:	83 ec 0c             	sub    $0xc,%esp
f012bafa:	50                   	push   %eax
f012bafb:	e8 5b c4 fd ff       	call   f0107f5b <kfree>
f012bb00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bb03:	e8 5e 8b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012bb08:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bb0e:	74 17                	je     f012bb27 <test_krealloc+0x1ccf>
			panic(
f012bb10:	83 ec 04             	sub    $0x4,%esp
f012bb13:	68 08 92 13 f0       	push   $0xf0139208
f012bb18:	68 dc 10 00 00       	push   $0x10dc
f012bb1d:	68 ee 91 13 f0       	push   $0xf01391ee
f012bb22:	e8 89 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012bb27:	e8 94 0e fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bb2c:	89 c2                	mov    %eax,%edx
f012bb2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bb31:	29 c2                	sub    %eax,%edx
f012bb33:	89 d0                	mov    %edx,%eax
f012bb35:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012bb3a:	74 17                	je     f012bb53 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012bb3c:	83 ec 04             	sub    $0x4,%esp
f012bb3f:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012bb44:	68 de 10 00 00       	push   $0x10de
f012bb49:	68 ee 91 13 f0       	push   $0xf01391ee
f012bb4e:	e8 5d 46 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bb53:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012bb5a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012bb61:	eb 48                	jmp    f012bbab <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012bb63:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012bb66:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012bb6b:	83 ec 04             	sub    $0x4,%esp
f012bb6e:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012bb74:	51                   	push   %ecx
f012bb75:	52                   	push   %edx
f012bb76:	50                   	push   %eax
f012bb77:	e8 4d b9 fd ff       	call   f01074c9 <get_page_table>
f012bb7c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012bb7f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012bb85:	85 c0                	test   %eax,%eax
f012bb87:	75 17                	jne    f012bba0 <test_krealloc+0x1d48>
					panic(
f012bb89:	83 ec 04             	sub    $0x4,%esp
f012bb8c:	68 f0 9a 13 f0       	push   $0xf0139af0
f012bb91:	68 eb 10 00 00       	push   $0x10eb
f012bb96:	68 ee 91 13 f0       	push   $0xf01391ee
f012bb9b:	e8 10 46 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bba0:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012bba7:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012bbab:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bbaf:	78 b2                	js     f012bb63 <test_krealloc+0x1d0b>
f012bbb1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bbb5:	7f 09                	jg     f012bbc0 <test_krealloc+0x1d68>
f012bbb7:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012bbbe:	76 a3                	jbe    f012bb63 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012bbc0:	83 ec 0c             	sub    $0xc,%esp
f012bbc3:	68 d2 93 13 f0       	push   $0xf01393d2
f012bbc8:	e8 64 52 fd ff       	call   f0100e31 <cprintf>
f012bbcd:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012bbd0:	83 ec 0c             	sub    $0xc,%esp
f012bbd3:	68 60 aa 13 f0       	push   $0xf013aa60
f012bbd8:	e8 54 52 fd ff       	call   f0100e31 <cprintf>
f012bbdd:	83 c4 10             	add    $0x10,%esp
	return 0;
f012bbe0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012bbe5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bbe8:	5b                   	pop    %ebx
f012bbe9:	5f                   	pop    %edi
f012bbea:	5d                   	pop    %ebp
f012bbeb:	c3                   	ret    

f012bbec <test_krealloc_BF>:


int test_krealloc_BF() {
f012bbec:	55                   	push   %ebp
f012bbed:	89 e5                	mov    %esp,%ebp
f012bbef:	57                   	push   %edi
f012bbf0:	53                   	push   %ebx
f012bbf1:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012bbf7:	83 ec 0c             	sub    $0xc,%esp
f012bbfa:	68 30 91 13 f0       	push   $0xf0139130
f012bbff:	e8 2d 52 fd ff       	call   f0100e31 <cprintf>
f012bc04:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bc07:	83 ec 0c             	sub    $0xc,%esp
f012bc0a:	68 60 91 13 f0       	push   $0xf0139160
f012bc0f:	e8 1d 52 fd ff       	call   f0100e31 <cprintf>
f012bc14:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bc17:	83 ec 0c             	sub    $0xc,%esp
f012bc1a:	68 30 91 13 f0       	push   $0xf0139130
f012bc1f:	e8 0d 52 fd ff       	call   f0100e31 <cprintf>
f012bc24:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bc27:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bc2b:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bc2f:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bc35:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bc3b:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bc42:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bc49:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012bc4f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc54:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc59:	89 d7                	mov    %edx,%edi
f012bc5b:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bc5d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bc64:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012bc6a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc6f:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc74:	89 d7                	mov    %edx,%edi
f012bc76:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bc78:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012bc7e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc83:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc88:	89 d7                	mov    %edx,%edi
f012bc8a:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bc8c:	e8 2f 0d fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bc91:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bc94:	83 ec 08             	sub    $0x8,%esp
f012bc97:	68 00 fc 0f 00       	push   $0xffc00
f012bc9c:	6a 00                	push   $0x0
f012bc9e:	e8 54 c3 fd ff       	call   f0107ff7 <krealloc>
f012bca3:	83 c4 10             	add    $0x10,%esp
f012bca6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bcac:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bcb2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bcb7:	77 17                	ja     f012bcd0 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bcb9:	83 ec 04             	sub    $0x4,%esp
f012bcbc:	68 94 a4 13 f0       	push   $0xf013a494
f012bcc1:	68 1a 11 00 00       	push   $0x111a
f012bcc6:	68 ee 91 13 f0       	push   $0xf01391ee
f012bccb:	e8 e0 44 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bcd0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bcd6:	89 c1                	mov    %eax,%ecx
f012bcd8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bcdf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bce4:	0f b6 d0             	movzbl %al,%edx
f012bce7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bcea:	01 d0                	add    %edx,%eax
f012bcec:	48                   	dec    %eax
f012bced:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bcf0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bcf3:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcf8:	f7 75 b4             	divl   -0x4c(%ebp)
f012bcfb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bcfe:	29 d0                	sub    %edx,%eax
f012bd00:	89 c3                	mov    %eax,%ebx
f012bd02:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bd09:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bd0e:	0f b6 c0             	movzbl %al,%eax
f012bd11:	c1 e0 04             	shl    $0x4,%eax
f012bd14:	89 c2                	mov    %eax,%edx
f012bd16:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bd19:	01 d0                	add    %edx,%eax
f012bd1b:	48                   	dec    %eax
f012bd1c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bd1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd22:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd27:	f7 75 ac             	divl   -0x54(%ebp)
f012bd2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd2d:	29 d0                	sub    %edx,%eax
f012bd2f:	01 d8                	add    %ebx,%eax
f012bd31:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bd36:	39 c1                	cmp    %eax,%ecx
f012bd38:	74 17                	je     f012bd51 <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012bd3a:	83 ec 04             	sub    $0x4,%esp
f012bd3d:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012bd42:	68 1c 11 00 00       	push   $0x111c
f012bd47:	68 ee 91 13 f0       	push   $0xf01391ee
f012bd4c:	e8 5f 44 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bd51:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd54:	e8 67 0c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bd59:	29 c3                	sub    %eax,%ebx
f012bd5b:	89 d8                	mov    %ebx,%eax
f012bd5d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bd62:	74 17                	je     f012bd7b <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012bd64:	83 ec 04             	sub    $0x4,%esp
f012bd67:	68 02 a5 13 f0       	push   $0xf013a502
f012bd6c:	68 1f 11 00 00       	push   $0x111f
f012bd71:	68 ee 91 13 f0       	push   $0xf01391ee
f012bd76:	e8 35 44 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bd7b:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012bd82:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bd85:	e8 36 0c fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bd8a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bd8d:	83 ec 08             	sub    $0x8,%esp
f012bd90:	68 00 fc 0f 00       	push   $0xffc00
f012bd95:	6a 00                	push   $0x0
f012bd97:	e8 5b c2 fd ff       	call   f0107ff7 <krealloc>
f012bd9c:	83 c4 10             	add    $0x10,%esp
f012bd9f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bda5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bdab:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bdb0:	77 17                	ja     f012bdc9 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdb2:	83 ec 04             	sub    $0x4,%esp
f012bdb5:	68 94 a4 13 f0       	push   $0xf013a494
f012bdba:	68 27 11 00 00       	push   $0x1127
f012bdbf:	68 ee 91 13 f0       	push   $0xf01391ee
f012bdc4:	e8 e7 43 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bdc9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bdcf:	89 c1                	mov    %eax,%ecx
f012bdd1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012bdd8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bddd:	0f b6 d0             	movzbl %al,%edx
f012bde0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012bde3:	01 d0                	add    %edx,%eax
f012bde5:	48                   	dec    %eax
f012bde6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012bde9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bdec:	ba 00 00 00 00       	mov    $0x0,%edx
f012bdf1:	f7 75 a4             	divl   -0x5c(%ebp)
f012bdf4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bdf7:	29 d0                	sub    %edx,%eax
f012bdf9:	89 c3                	mov    %eax,%ebx
f012bdfb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012be02:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012be07:	0f b6 c0             	movzbl %al,%eax
f012be0a:	c1 e0 04             	shl    $0x4,%eax
f012be0d:	89 c2                	mov    %eax,%edx
f012be0f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012be12:	01 d0                	add    %edx,%eax
f012be14:	48                   	dec    %eax
f012be15:	89 45 98             	mov    %eax,-0x68(%ebp)
f012be18:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be1b:	ba 00 00 00 00       	mov    $0x0,%edx
f012be20:	f7 75 9c             	divl   -0x64(%ebp)
f012be23:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be26:	29 d0                	sub    %edx,%eax
f012be28:	01 d8                	add    %ebx,%eax
f012be2a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012be2f:	39 c1                	cmp    %eax,%ecx
f012be31:	74 17                	je     f012be4a <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012be33:	83 ec 04             	sub    $0x4,%esp
f012be36:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012be3b:	68 29 11 00 00       	push   $0x1129
f012be40:	68 ee 91 13 f0       	push   $0xf01391ee
f012be45:	e8 66 43 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012be4a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be4d:	e8 6e 0b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012be52:	29 c3                	sub    %eax,%ebx
f012be54:	89 d8                	mov    %ebx,%eax
f012be56:	3d 00 01 00 00       	cmp    $0x100,%eax
f012be5b:	74 17                	je     f012be74 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012be5d:	83 ec 04             	sub    $0x4,%esp
f012be60:	68 02 a5 13 f0       	push   $0xf013a502
f012be65:	68 2b 11 00 00       	push   $0x112b
f012be6a:	68 ee 91 13 f0       	push   $0xf01391ee
f012be6f:	e8 3c 43 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012be74:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012be7b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012be7e:	e8 3d 0b fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012be83:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012be86:	83 ec 08             	sub    $0x8,%esp
f012be89:	68 00 fc 0f 00       	push   $0xffc00
f012be8e:	6a 00                	push   $0x0
f012be90:	e8 62 c1 fd ff       	call   f0107ff7 <krealloc>
f012be95:	83 c4 10             	add    $0x10,%esp
f012be98:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012be9e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bea4:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bea9:	77 17                	ja     f012bec2 <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012beab:	83 ec 04             	sub    $0x4,%esp
f012beae:	68 94 a4 13 f0       	push   $0xf013a494
f012beb3:	68 33 11 00 00       	push   $0x1133
f012beb8:	68 ee 91 13 f0       	push   $0xf01391ee
f012bebd:	e8 ee 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bec2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bec8:	89 c1                	mov    %eax,%ecx
f012beca:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bed1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bed6:	0f b6 d0             	movzbl %al,%edx
f012bed9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bedc:	01 d0                	add    %edx,%eax
f012bede:	48                   	dec    %eax
f012bedf:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bee2:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bee5:	ba 00 00 00 00       	mov    $0x0,%edx
f012beea:	f7 75 94             	divl   -0x6c(%ebp)
f012beed:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bef0:	29 d0                	sub    %edx,%eax
f012bef2:	89 c3                	mov    %eax,%ebx
f012bef4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012befb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bf00:	0f b6 c0             	movzbl %al,%eax
f012bf03:	c1 e0 04             	shl    $0x4,%eax
f012bf06:	89 c2                	mov    %eax,%edx
f012bf08:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bf0b:	01 d0                	add    %edx,%eax
f012bf0d:	48                   	dec    %eax
f012bf0e:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bf11:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf14:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf19:	f7 75 8c             	divl   -0x74(%ebp)
f012bf1c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf1f:	29 d0                	sub    %edx,%eax
f012bf21:	01 d8                	add    %ebx,%eax
f012bf23:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bf28:	39 c1                	cmp    %eax,%ecx
f012bf2a:	74 17                	je     f012bf43 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012bf2c:	83 ec 04             	sub    $0x4,%esp
f012bf2f:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012bf34:	68 35 11 00 00       	push   $0x1135
f012bf39:	68 ee 91 13 f0       	push   $0xf01391ee
f012bf3e:	e8 6d 42 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf43:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf46:	e8 75 0a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bf4b:	29 c3                	sub    %eax,%ebx
f012bf4d:	89 d8                	mov    %ebx,%eax
f012bf4f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf54:	74 17                	je     f012bf6d <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012bf56:	83 ec 04             	sub    $0x4,%esp
f012bf59:	68 02 a5 13 f0       	push   $0xf013a502
f012bf5e:	68 37 11 00 00       	push   $0x1137
f012bf63:	68 ee 91 13 f0       	push   $0xf01391ee
f012bf68:	e8 43 42 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bf6d:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012bf74:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf77:	e8 44 0a fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012bf7c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bf7f:	83 ec 08             	sub    $0x8,%esp
f012bf82:	68 00 fc 0f 00       	push   $0xffc00
f012bf87:	6a 00                	push   $0x0
f012bf89:	e8 69 c0 fd ff       	call   f0107ff7 <krealloc>
f012bf8e:	83 c4 10             	add    $0x10,%esp
f012bf91:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bf97:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bf9d:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bfa2:	77 17                	ja     f012bfbb <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bfa4:	83 ec 04             	sub    $0x4,%esp
f012bfa7:	68 94 a4 13 f0       	push   $0xf013a494
f012bfac:	68 3e 11 00 00       	push   $0x113e
f012bfb1:	68 ee 91 13 f0       	push   $0xf01391ee
f012bfb6:	e8 f5 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bfbb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bfc1:	89 c1                	mov    %eax,%ecx
f012bfc3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bfca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bfcf:	0f b6 d0             	movzbl %al,%edx
f012bfd2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bfd5:	01 d0                	add    %edx,%eax
f012bfd7:	48                   	dec    %eax
f012bfd8:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bfdb:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bfde:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfe3:	f7 75 84             	divl   -0x7c(%ebp)
f012bfe6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bfe9:	29 d0                	sub    %edx,%eax
f012bfeb:	89 c3                	mov    %eax,%ebx
f012bfed:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bff4:	10 00 00 
f012bff7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bffc:	0f b6 c0             	movzbl %al,%eax
f012bfff:	c1 e0 04             	shl    $0x4,%eax
f012c002:	89 c2                	mov    %eax,%edx
f012c004:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c00a:	01 d0                	add    %edx,%eax
f012c00c:	48                   	dec    %eax
f012c00d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c013:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c019:	ba 00 00 00 00       	mov    $0x0,%edx
f012c01e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c024:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c02a:	29 d0                	sub    %edx,%eax
f012c02c:	01 d8                	add    %ebx,%eax
f012c02e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c033:	39 c1                	cmp    %eax,%ecx
f012c035:	74 17                	je     f012c04e <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012c037:	83 ec 04             	sub    $0x4,%esp
f012c03a:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012c03f:	68 40 11 00 00       	push   $0x1140
f012c044:	68 ee 91 13 f0       	push   $0xf01391ee
f012c049:	e8 62 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c04e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c051:	e8 6a 09 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c056:	29 c3                	sub    %eax,%ebx
f012c058:	89 d8                	mov    %ebx,%eax
f012c05a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c05f:	74 17                	je     f012c078 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c061:	83 ec 04             	sub    $0x4,%esp
f012c064:	68 02 a5 13 f0       	push   $0xf013a502
f012c069:	68 42 11 00 00       	push   $0x1142
f012c06e:	68 ee 91 13 f0       	push   $0xf01391ee
f012c073:	e8 38 41 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c078:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c07f:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c082:	e8 39 09 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c087:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c08a:	83 ec 08             	sub    $0x8,%esp
f012c08d:	68 00 fc 1f 00       	push   $0x1ffc00
f012c092:	6a 00                	push   $0x0
f012c094:	e8 5e bf fd ff       	call   f0107ff7 <krealloc>
f012c099:	83 c4 10             	add    $0x10,%esp
f012c09c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c0a2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c0a8:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c0ad:	77 17                	ja     f012c0c6 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0af:	83 ec 04             	sub    $0x4,%esp
f012c0b2:	68 94 a4 13 f0       	push   $0xf013a494
f012c0b7:	68 49 11 00 00       	push   $0x1149
f012c0bc:	68 ee 91 13 f0       	push   $0xf01391ee
f012c0c1:	e8 ea 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c0c6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c0cc:	89 c1                	mov    %eax,%ecx
f012c0ce:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c0d5:	10 00 00 
f012c0d8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c0dd:	0f b6 d0             	movzbl %al,%edx
f012c0e0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c0e6:	01 d0                	add    %edx,%eax
f012c0e8:	48                   	dec    %eax
f012c0e9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c0ef:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c0f5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0fa:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c100:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c106:	29 d0                	sub    %edx,%eax
f012c108:	89 c3                	mov    %eax,%ebx
f012c10a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c111:	10 00 00 
f012c114:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c119:	0f b6 c0             	movzbl %al,%eax
f012c11c:	c1 e0 04             	shl    $0x4,%eax
f012c11f:	89 c2                	mov    %eax,%edx
f012c121:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c127:	01 d0                	add    %edx,%eax
f012c129:	48                   	dec    %eax
f012c12a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c130:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c136:	ba 00 00 00 00       	mov    $0x0,%edx
f012c13b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c141:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c147:	29 d0                	sub    %edx,%eax
f012c149:	01 d8                	add    %ebx,%eax
f012c14b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c150:	39 c1                	cmp    %eax,%ecx
f012c152:	74 17                	je     f012c16b <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c154:	83 ec 04             	sub    $0x4,%esp
f012c157:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012c15c:	68 4b 11 00 00       	push   $0x114b
f012c161:	68 ee 91 13 f0       	push   $0xf01391ee
f012c166:	e8 45 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c16b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c16e:	e8 4d 08 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c173:	29 c3                	sub    %eax,%ebx
f012c175:	89 d8                	mov    %ebx,%eax
f012c177:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c17c:	74 17                	je     f012c195 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c17e:	83 ec 04             	sub    $0x4,%esp
f012c181:	68 02 a5 13 f0       	push   $0xf013a502
f012c186:	68 4d 11 00 00       	push   $0x114d
f012c18b:	68 ee 91 13 f0       	push   $0xf01391ee
f012c190:	e8 1b 40 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c195:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c19c:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c19f:	e8 1c 08 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c1a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c1a7:	83 ec 08             	sub    $0x8,%esp
f012c1aa:	68 00 fc 1f 00       	push   $0x1ffc00
f012c1af:	6a 00                	push   $0x0
f012c1b1:	e8 41 be fd ff       	call   f0107ff7 <krealloc>
f012c1b6:	83 c4 10             	add    $0x10,%esp
f012c1b9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c1bf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c1c5:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c1ca:	77 17                	ja     f012c1e3 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c1cc:	83 ec 04             	sub    $0x4,%esp
f012c1cf:	68 94 a4 13 f0       	push   $0xf013a494
f012c1d4:	68 54 11 00 00       	push   $0x1154
f012c1d9:	68 ee 91 13 f0       	push   $0xf01391ee
f012c1de:	e8 cd 3f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c1e3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c1e9:	89 c1                	mov    %eax,%ecx
f012c1eb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c1f2:	10 00 00 
f012c1f5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c1fa:	0f b6 d0             	movzbl %al,%edx
f012c1fd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c203:	01 d0                	add    %edx,%eax
f012c205:	48                   	dec    %eax
f012c206:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c20c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c212:	ba 00 00 00 00       	mov    $0x0,%edx
f012c217:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c21d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c223:	29 d0                	sub    %edx,%eax
f012c225:	89 c3                	mov    %eax,%ebx
f012c227:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c22e:	10 00 00 
f012c231:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c236:	0f b6 c0             	movzbl %al,%eax
f012c239:	c1 e0 04             	shl    $0x4,%eax
f012c23c:	89 c2                	mov    %eax,%edx
f012c23e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c244:	01 d0                	add    %edx,%eax
f012c246:	48                   	dec    %eax
f012c247:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c24d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c253:	ba 00 00 00 00       	mov    $0x0,%edx
f012c258:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c25e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c264:	29 d0                	sub    %edx,%eax
f012c266:	01 d8                	add    %ebx,%eax
f012c268:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c26d:	39 c1                	cmp    %eax,%ecx
f012c26f:	74 17                	je     f012c288 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c271:	83 ec 04             	sub    $0x4,%esp
f012c274:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012c279:	68 56 11 00 00       	push   $0x1156
f012c27e:	68 ee 91 13 f0       	push   $0xf01391ee
f012c283:	e8 28 3f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c288:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c28b:	e8 30 07 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c290:	29 c3                	sub    %eax,%ebx
f012c292:	89 d8                	mov    %ebx,%eax
f012c294:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c299:	74 17                	je     f012c2b2 <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c29b:	83 ec 04             	sub    $0x4,%esp
f012c29e:	68 02 a5 13 f0       	push   $0xf013a502
f012c2a3:	68 58 11 00 00       	push   $0x1158
f012c2a8:	68 ee 91 13 f0       	push   $0xf01391ee
f012c2ad:	e8 fe 3e fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c2b2:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c2b9:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c2bc:	e8 ff 06 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c2c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c2c4:	83 ec 08             	sub    $0x8,%esp
f012c2c7:	68 00 fc 2f 00       	push   $0x2ffc00
f012c2cc:	6a 00                	push   $0x0
f012c2ce:	e8 24 bd fd ff       	call   f0107ff7 <krealloc>
f012c2d3:	83 c4 10             	add    $0x10,%esp
f012c2d6:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c2dc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c2e2:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c2e7:	77 17                	ja     f012c300 <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c2e9:	83 ec 04             	sub    $0x4,%esp
f012c2ec:	68 94 a4 13 f0       	push   $0xf013a494
f012c2f1:	68 5f 11 00 00       	push   $0x115f
f012c2f6:	68 ee 91 13 f0       	push   $0xf01391ee
f012c2fb:	e8 b0 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c300:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c306:	89 c1                	mov    %eax,%ecx
f012c308:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c30f:	10 00 00 
f012c312:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c317:	0f b6 d0             	movzbl %al,%edx
f012c31a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c320:	01 d0                	add    %edx,%eax
f012c322:	48                   	dec    %eax
f012c323:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c329:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c32f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c334:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c33a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c340:	29 d0                	sub    %edx,%eax
f012c342:	89 c3                	mov    %eax,%ebx
f012c344:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c34b:	10 00 00 
f012c34e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c353:	0f b6 c0             	movzbl %al,%eax
f012c356:	c1 e0 04             	shl    $0x4,%eax
f012c359:	89 c2                	mov    %eax,%edx
f012c35b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c361:	01 d0                	add    %edx,%eax
f012c363:	48                   	dec    %eax
f012c364:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c36a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c370:	ba 00 00 00 00       	mov    $0x0,%edx
f012c375:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c37b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c381:	29 d0                	sub    %edx,%eax
f012c383:	01 d8                	add    %ebx,%eax
f012c385:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c38a:	39 c1                	cmp    %eax,%ecx
f012c38c:	74 17                	je     f012c3a5 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c38e:	83 ec 04             	sub    $0x4,%esp
f012c391:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012c396:	68 61 11 00 00       	push   $0x1161
f012c39b:	68 ee 91 13 f0       	push   $0xf01391ee
f012c3a0:	e8 0b 3e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c3a5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c3a8:	e8 13 06 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c3ad:	29 c3                	sub    %eax,%ebx
f012c3af:	89 d8                	mov    %ebx,%eax
f012c3b1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c3b6:	74 17                	je     f012c3cf <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c3b8:	83 ec 04             	sub    $0x4,%esp
f012c3bb:	68 38 96 13 f0       	push   $0xf0139638
f012c3c0:	68 63 11 00 00       	push   $0x1163
f012c3c5:	68 ee 91 13 f0       	push   $0xf01391ee
f012c3ca:	e8 e1 3d fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c3cf:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c3d6:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c3d9:	e8 e2 05 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c3de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c3e1:	83 ec 08             	sub    $0x8,%esp
f012c3e4:	68 00 fc 2f 00       	push   $0x2ffc00
f012c3e9:	6a 00                	push   $0x0
f012c3eb:	e8 07 bc fd ff       	call   f0107ff7 <krealloc>
f012c3f0:	83 c4 10             	add    $0x10,%esp
f012c3f3:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c3f9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c3ff:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c404:	77 17                	ja     f012c41d <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c406:	83 ec 04             	sub    $0x4,%esp
f012c409:	68 94 a4 13 f0       	push   $0xf013a494
f012c40e:	68 6a 11 00 00       	push   $0x116a
f012c413:	68 ee 91 13 f0       	push   $0xf01391ee
f012c418:	e8 93 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c41d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c423:	89 c1                	mov    %eax,%ecx
f012c425:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c42c:	10 00 00 
f012c42f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c434:	0f b6 d0             	movzbl %al,%edx
f012c437:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c43d:	01 d0                	add    %edx,%eax
f012c43f:	48                   	dec    %eax
f012c440:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c446:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c44c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c451:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c457:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c45d:	29 d0                	sub    %edx,%eax
f012c45f:	89 c3                	mov    %eax,%ebx
f012c461:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c468:	10 00 00 
f012c46b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c470:	0f b6 c0             	movzbl %al,%eax
f012c473:	c1 e0 04             	shl    $0x4,%eax
f012c476:	89 c2                	mov    %eax,%edx
f012c478:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c47e:	01 d0                	add    %edx,%eax
f012c480:	48                   	dec    %eax
f012c481:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c487:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c48d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c492:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c498:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c49e:	29 d0                	sub    %edx,%eax
f012c4a0:	01 d8                	add    %ebx,%eax
f012c4a2:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c4a7:	39 c1                	cmp    %eax,%ecx
f012c4a9:	74 17                	je     f012c4c2 <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c4ab:	83 ec 04             	sub    $0x4,%esp
f012c4ae:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012c4b3:	68 6c 11 00 00       	push   $0x116c
f012c4b8:	68 ee 91 13 f0       	push   $0xf01391ee
f012c4bd:	e8 ee 3c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c4c2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c4c5:	e8 f6 04 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c4ca:	29 c3                	sub    %eax,%ebx
f012c4cc:	89 d8                	mov    %ebx,%eax
f012c4ce:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c4d3:	74 17                	je     f012c4ec <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c4d5:	83 ec 04             	sub    $0x4,%esp
f012c4d8:	68 02 a5 13 f0       	push   $0xf013a502
f012c4dd:	68 6e 11 00 00       	push   $0x116e
f012c4e2:	68 ee 91 13 f0       	push   $0xf01391ee
f012c4e7:	e8 c4 3c fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c4ec:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c4f3:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c4f6:	e8 c5 04 fe ff       	call   f010c9c0 <sys_calculate_free_frames>
f012c4fb:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c4fe:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c505:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c508:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c50e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c514:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c51a:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c51d:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c51f:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c525:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c52b:	01 c2                	add    %eax,%edx
f012c52d:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c530:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c532:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c538:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c53e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c545:	eb 11                	jmp    f012c558 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c547:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c54a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c550:	01 d0                	add    %edx,%eax
f012c552:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c555:	ff 45 f4             	incl   -0xc(%ebp)
f012c558:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c55e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c561:	7d e4                	jge    f012c547 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c563:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c569:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c56f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c575:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c57b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c581:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c588:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c58e:	01 d0                	add    %edx,%eax
f012c590:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c596:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c59c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c5a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c5a9:	eb 1b                	jmp    f012c5c6 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c5ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c5ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c5b5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c5bb:	01 d0                	add    %edx,%eax
f012c5bd:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c5c3:	ff 45 f0             	incl   -0x10(%ebp)
f012c5c6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c5cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c5cf:	7d da                	jge    f012c5ab <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c5d1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c5d7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c5dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c5e4:	eb 17                	jmp    f012c5fd <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c5e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c5e9:	01 c0                	add    %eax,%eax
f012c5eb:	89 c2                	mov    %eax,%edx
f012c5ed:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c5f3:	01 d0                	add    %edx,%eax
f012c5f5:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c5fa:	ff 45 ec             	incl   -0x14(%ebp)
f012c5fd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c603:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c606:	7d de                	jge    f012c5e6 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c608:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c60e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c614:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c61a:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c61f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c625:	01 c0                	add    %eax,%eax
f012c627:	89 c2                	mov    %eax,%edx
f012c629:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c62f:	01 d0                	add    %edx,%eax
f012c631:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c636:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c63c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c642:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c649:	eb 49                	jmp    f012c694 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c64b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c64e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c655:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c65b:	01 d0                	add    %edx,%eax
f012c65d:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c660:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c663:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c66a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c670:	01 d0                	add    %edx,%eax
f012c672:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c678:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c67b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c682:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c688:	01 d0                	add    %edx,%eax
f012c68a:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c691:	ff 45 e8             	incl   -0x18(%ebp)
f012c694:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c69a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c69d:	7d ac                	jge    f012c64b <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c69f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c6a5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c6ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6b1:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c6b4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6ba:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c6c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6c6:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c6cd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6d3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6e0:	01 d0                	add    %edx,%eax
f012c6e2:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c6e5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6f8:	01 d0                	add    %edx,%eax
f012c6fa:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c700:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c706:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c70d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c713:	01 d0                	add    %edx,%eax
f012c715:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c71c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c722:	8a 00                	mov    (%eax),%al
f012c724:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c727:	75 17                	jne    f012c740 <test_krealloc_BF+0xb54>
f012c729:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c72f:	89 c2                	mov    %eax,%edx
f012c731:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c737:	01 d0                	add    %edx,%eax
f012c739:	8a 00                	mov    (%eax),%al
f012c73b:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c73e:	74 17                	je     f012c757 <test_krealloc_BF+0xb6b>
			panic(
f012c740:	83 ec 04             	sub    $0x4,%esp
f012c743:	68 20 a5 13 f0       	push   $0xf013a520
f012c748:	68 b1 11 00 00       	push   $0x11b1
f012c74d:	68 ee 91 13 f0       	push   $0xf01391ee
f012c752:	e8 59 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c757:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c75d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c763:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c769:	8a 00                	mov    (%eax),%al
f012c76b:	3c 02                	cmp    $0x2,%al
f012c76d:	75 16                	jne    f012c785 <test_krealloc_BF+0xb99>
f012c76f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c775:	89 c2                	mov    %eax,%edx
f012c777:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c77d:	01 d0                	add    %edx,%eax
f012c77f:	8a 00                	mov    (%eax),%al
f012c781:	3c 02                	cmp    $0x2,%al
f012c783:	74 20                	je     f012c7a5 <test_krealloc_BF+0xbb9>
			panic(
f012c785:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c78b:	8a 00                	mov    (%eax),%al
f012c78d:	0f be c0             	movsbl %al,%eax
f012c790:	50                   	push   %eax
f012c791:	68 60 a5 13 f0       	push   $0xf013a560
f012c796:	68 b7 11 00 00       	push   $0x11b7
f012c79b:	68 ee 91 13 f0       	push   $0xf01391ee
f012c7a0:	e8 0b 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c7a5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c7ab:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c7b1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7b7:	8b 00                	mov    (%eax),%eax
f012c7b9:	83 f8 03             	cmp    $0x3,%eax
f012c7bc:	75 1c                	jne    f012c7da <test_krealloc_BF+0xbee>
f012c7be:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c7c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c7cb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7d1:	01 d0                	add    %edx,%eax
f012c7d3:	8b 00                	mov    (%eax),%eax
f012c7d5:	83 f8 03             	cmp    $0x3,%eax
f012c7d8:	74 17                	je     f012c7f1 <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c7da:	83 ec 04             	sub    $0x4,%esp
f012c7dd:	68 ac a5 13 f0       	push   $0xf013a5ac
f012c7e2:	68 bb 11 00 00       	push   $0x11bb
f012c7e7:	68 ee 91 13 f0       	push   $0xf01391ee
f012c7ec:	e8 bf 39 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c7f1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c7f7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c7fd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c803:	8b 00                	mov    (%eax),%eax
f012c805:	83 f8 04             	cmp    $0x4,%eax
f012c808:	75 1c                	jne    f012c826 <test_krealloc_BF+0xc3a>
f012c80a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c810:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c817:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c81d:	01 d0                	add    %edx,%eax
f012c81f:	8b 00                	mov    (%eax),%eax
f012c821:	83 f8 04             	cmp    $0x4,%eax
f012c824:	74 17                	je     f012c83d <test_krealloc_BF+0xc51>
			panic(
f012c826:	83 ec 04             	sub    $0x4,%esp
f012c829:	68 20 a5 13 f0       	push   $0xf013a520
f012c82e:	68 c0 11 00 00       	push   $0x11c0
f012c833:	68 ee 91 13 f0       	push   $0xf01391ee
f012c838:	e8 73 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c83d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c843:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c849:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c84f:	66 8b 00             	mov    (%eax),%ax
f012c852:	66 83 f8 05          	cmp    $0x5,%ax
f012c856:	75 1b                	jne    f012c873 <test_krealloc_BF+0xc87>
f012c858:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c85e:	01 c0                	add    %eax,%eax
f012c860:	89 c2                	mov    %eax,%edx
f012c862:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c868:	01 d0                	add    %edx,%eax
f012c86a:	66 8b 00             	mov    (%eax),%ax
f012c86d:	66 83 f8 05          	cmp    $0x5,%ax
f012c871:	74 17                	je     f012c88a <test_krealloc_BF+0xc9e>
			panic(
f012c873:	83 ec 04             	sub    $0x4,%esp
f012c876:	68 20 a5 13 f0       	push   $0xf013a520
f012c87b:	68 c5 11 00 00       	push   $0x11c5
f012c880:	68 ee 91 13 f0       	push   $0xf01391ee
f012c885:	e8 26 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c88a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c890:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c896:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c89c:	66 8b 00             	mov    (%eax),%ax
f012c89f:	66 83 f8 06          	cmp    $0x6,%ax
f012c8a3:	75 1b                	jne    f012c8c0 <test_krealloc_BF+0xcd4>
f012c8a5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8ab:	01 c0                	add    %eax,%eax
f012c8ad:	89 c2                	mov    %eax,%edx
f012c8af:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8b5:	01 d0                	add    %edx,%eax
f012c8b7:	66 8b 00             	mov    (%eax),%ax
f012c8ba:	66 83 f8 06          	cmp    $0x6,%ax
f012c8be:	74 17                	je     f012c8d7 <test_krealloc_BF+0xceb>
			panic(
f012c8c0:	83 ec 04             	sub    $0x4,%esp
f012c8c3:	68 20 a5 13 f0       	push   $0xf013a520
f012c8c8:	68 ca 11 00 00       	push   $0x11ca
f012c8cd:	68 ee 91 13 f0       	push   $0xf01391ee
f012c8d2:	e8 d9 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c8d7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c8dd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c8e3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8e9:	8a 00                	mov    (%eax),%al
f012c8eb:	3c 07                	cmp    $0x7,%al
f012c8ed:	75 1b                	jne    f012c90a <test_krealloc_BF+0xd1e>
f012c8ef:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c8f5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c902:	01 d0                	add    %edx,%eax
f012c904:	8a 00                	mov    (%eax),%al
f012c906:	3c 07                	cmp    $0x7,%al
f012c908:	74 17                	je     f012c921 <test_krealloc_BF+0xd35>
			panic(
f012c90a:	83 ec 04             	sub    $0x4,%esp
f012c90d:	68 20 a5 13 f0       	push   $0xf013a520
f012c912:	68 cf 11 00 00       	push   $0x11cf
f012c917:	68 ee 91 13 f0       	push   $0xf01391ee
f012c91c:	e8 8f 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c921:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c927:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c92b:	66 83 f8 07          	cmp    $0x7,%ax
f012c92f:	75 1f                	jne    f012c950 <test_krealloc_BF+0xd64>
f012c931:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c937:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c93e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c944:	01 d0                	add    %edx,%eax
f012c946:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c94a:	66 83 f8 07          	cmp    $0x7,%ax
f012c94e:	74 17                	je     f012c967 <test_krealloc_BF+0xd7b>
			panic(
f012c950:	83 ec 04             	sub    $0x4,%esp
f012c953:	68 20 a5 13 f0       	push   $0xf013a520
f012c958:	68 d2 11 00 00       	push   $0x11d2
f012c95d:	68 ee 91 13 f0       	push   $0xf01391ee
f012c962:	e8 49 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c967:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c96d:	8b 40 04             	mov    0x4(%eax),%eax
f012c970:	83 f8 07             	cmp    $0x7,%eax
f012c973:	75 1d                	jne    f012c992 <test_krealloc_BF+0xda6>
f012c975:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c97b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c982:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c988:	01 d0                	add    %edx,%eax
f012c98a:	8b 40 04             	mov    0x4(%eax),%eax
f012c98d:	83 f8 07             	cmp    $0x7,%eax
f012c990:	74 17                	je     f012c9a9 <test_krealloc_BF+0xdbd>
			panic(
f012c992:	83 ec 04             	sub    $0x4,%esp
f012c995:	68 20 a5 13 f0       	push   $0xf013a520
f012c99a:	68 d5 11 00 00       	push   $0x11d5
f012c99f:	68 ee 91 13 f0       	push   $0xf01391ee
f012c9a4:	e8 07 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c9a9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c9af:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c9b5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9bb:	8a 00                	mov    (%eax),%al
f012c9bd:	3c 08                	cmp    $0x8,%al
f012c9bf:	75 1b                	jne    f012c9dc <test_krealloc_BF+0xdf0>
f012c9c1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9ce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9d4:	01 d0                	add    %edx,%eax
f012c9d6:	8a 00                	mov    (%eax),%al
f012c9d8:	3c 08                	cmp    $0x8,%al
f012c9da:	74 17                	je     f012c9f3 <test_krealloc_BF+0xe07>
			panic(
f012c9dc:	83 ec 04             	sub    $0x4,%esp
f012c9df:	68 20 a5 13 f0       	push   $0xf013a520
f012c9e4:	68 da 11 00 00       	push   $0x11da
f012c9e9:	68 ee 91 13 f0       	push   $0xf01391ee
f012c9ee:	e8 bd 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c9f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9f9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c9fd:	66 83 f8 08          	cmp    $0x8,%ax
f012ca01:	75 1f                	jne    f012ca22 <test_krealloc_BF+0xe36>
f012ca03:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca09:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca10:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca16:	01 d0                	add    %edx,%eax
f012ca18:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ca1c:	66 83 f8 08          	cmp    $0x8,%ax
f012ca20:	74 17                	je     f012ca39 <test_krealloc_BF+0xe4d>
			panic(
f012ca22:	83 ec 04             	sub    $0x4,%esp
f012ca25:	68 20 a5 13 f0       	push   $0xf013a520
f012ca2a:	68 dd 11 00 00       	push   $0x11dd
f012ca2f:	68 ee 91 13 f0       	push   $0xf01391ee
f012ca34:	e8 77 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ca39:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca3f:	8b 40 04             	mov    0x4(%eax),%eax
f012ca42:	83 f8 08             	cmp    $0x8,%eax
f012ca45:	75 1d                	jne    f012ca64 <test_krealloc_BF+0xe78>
f012ca47:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca5a:	01 d0                	add    %edx,%eax
f012ca5c:	8b 40 04             	mov    0x4(%eax),%eax
f012ca5f:	83 f8 08             	cmp    $0x8,%eax
f012ca62:	74 17                	je     f012ca7b <test_krealloc_BF+0xe8f>
			panic(
f012ca64:	83 ec 04             	sub    $0x4,%esp
f012ca67:	68 20 a5 13 f0       	push   $0xf013a520
f012ca6c:	68 e0 11 00 00       	push   $0x11e0
f012ca71:	68 ee 91 13 f0       	push   $0xf01391ee
f012ca76:	e8 35 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ca7b:	e8 40 ff fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012ca80:	89 c2                	mov    %eax,%edx
f012ca82:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ca85:	39 c2                	cmp    %eax,%edx
f012ca87:	74 17                	je     f012caa0 <test_krealloc_BF+0xeb4>
			panic(
f012ca89:	83 ec 04             	sub    $0x4,%esp
f012ca8c:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ca91:	68 e4 11 00 00       	push   $0x11e4
f012ca96:	68 ee 91 13 f0       	push   $0xf01391ee
f012ca9b:	e8 10 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012caa0:	83 ec 0c             	sub    $0xc,%esp
f012caa3:	68 2c a6 13 f0       	push   $0xf013a62c
f012caa8:	e8 84 43 fd ff       	call   f0100e31 <cprintf>
f012caad:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012cab0:	e8 0b ff fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cab5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cab8:	e8 a9 7b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cabd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012cac3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012cac9:	83 ec 08             	sub    $0x8,%esp
f012cacc:	6a 00                	push   $0x0
f012cace:	50                   	push   %eax
f012cacf:	e8 23 b5 fd ff       	call   f0107ff7 <krealloc>
f012cad4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cad7:	e8 8a 7b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cadc:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cae2:	74 17                	je     f012cafb <test_krealloc_BF+0xf0f>
			panic(
f012cae4:	83 ec 04             	sub    $0x4,%esp
f012cae7:	68 50 a6 13 f0       	push   $0xf013a650
f012caec:	68 f1 11 00 00       	push   $0x11f1
f012caf1:	68 ee 91 13 f0       	push   $0xf01391ee
f012caf6:	e8 b5 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cafb:	e8 c0 fe fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cb00:	89 c2                	mov    %eax,%edx
f012cb02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb05:	29 c2                	sub    %eax,%edx
f012cb07:	89 d0                	mov    %edx,%eax
f012cb09:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cb0e:	74 17                	je     f012cb27 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012cb10:	83 ec 04             	sub    $0x4,%esp
f012cb13:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012cb18:	68 f3 11 00 00       	push   $0x11f3
f012cb1d:	68 ee 91 13 f0       	push   $0xf01391ee
f012cb22:	e8 89 36 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cb27:	e8 94 fe fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cb2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cb2f:	e8 32 7b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cb34:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cb3a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cb40:	83 ec 08             	sub    $0x8,%esp
f012cb43:	6a 00                	push   $0x0
f012cb45:	50                   	push   %eax
f012cb46:	e8 ac b4 fd ff       	call   f0107ff7 <krealloc>
f012cb4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb4e:	e8 13 7b fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cb53:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cb59:	74 17                	je     f012cb72 <test_krealloc_BF+0xf86>
			panic(
f012cb5b:	83 ec 04             	sub    $0x4,%esp
f012cb5e:	68 50 a6 13 f0       	push   $0xf013a650
f012cb63:	68 fc 11 00 00       	push   $0x11fc
f012cb68:	68 ee 91 13 f0       	push   $0xf01391ee
f012cb6d:	e8 3e 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cb72:	e8 49 fe fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cb77:	89 c2                	mov    %eax,%edx
f012cb79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb7c:	29 c2                	sub    %eax,%edx
f012cb7e:	89 d0                	mov    %edx,%eax
f012cb80:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cb85:	74 17                	je     f012cb9e <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012cb87:	83 ec 04             	sub    $0x4,%esp
f012cb8a:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012cb8f:	68 fe 11 00 00       	push   $0x11fe
f012cb94:	68 ee 91 13 f0       	push   $0xf01391ee
f012cb99:	e8 12 36 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cb9e:	e8 1d fe fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cba3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cba6:	e8 bb 7a fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cbab:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cbb1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cbb7:	83 ec 08             	sub    $0x8,%esp
f012cbba:	6a 00                	push   $0x0
f012cbbc:	50                   	push   %eax
f012cbbd:	e8 35 b4 fd ff       	call   f0107ff7 <krealloc>
f012cbc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cbc5:	e8 9c 7a fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cbca:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cbd0:	74 17                	je     f012cbe9 <test_krealloc_BF+0xffd>
			panic(
f012cbd2:	83 ec 04             	sub    $0x4,%esp
f012cbd5:	68 08 92 13 f0       	push   $0xf0139208
f012cbda:	68 06 12 00 00       	push   $0x1206
f012cbdf:	68 ee 91 13 f0       	push   $0xf01391ee
f012cbe4:	e8 c7 35 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cbe9:	e8 d2 fd fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cbee:	89 c2                	mov    %eax,%edx
f012cbf0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cbf3:	29 c2                	sub    %eax,%edx
f012cbf5:	89 d0                	mov    %edx,%eax
f012cbf7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cbfc:	74 17                	je     f012cc15 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012cbfe:	83 ec 04             	sub    $0x4,%esp
f012cc01:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012cc06:	68 08 12 00 00       	push   $0x1208
f012cc0b:	68 ee 91 13 f0       	push   $0xf01391ee
f012cc10:	e8 9b 35 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cc15:	e8 a6 fd fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cc1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cc1d:	e8 44 7a fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cc22:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012cc28:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cc2e:	83 ec 08             	sub    $0x8,%esp
f012cc31:	6a 00                	push   $0x0
f012cc33:	50                   	push   %eax
f012cc34:	e8 be b3 fd ff       	call   f0107ff7 <krealloc>
f012cc39:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc3c:	e8 25 7a fd ff       	call   f0104666 <pf_calculate_free_frames>
f012cc41:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cc47:	74 17                	je     f012cc60 <test_krealloc_BF+0x1074>
			panic(
f012cc49:	83 ec 04             	sub    $0x4,%esp
f012cc4c:	68 50 a6 13 f0       	push   $0xf013a650
f012cc51:	68 10 12 00 00       	push   $0x1210
f012cc56:	68 ee 91 13 f0       	push   $0xf01391ee
f012cc5b:	e8 50 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cc60:	e8 5b fd fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cc65:	89 c2                	mov    %eax,%edx
f012cc67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc6a:	29 c2                	sub    %eax,%edx
f012cc6c:	89 d0                	mov    %edx,%eax
f012cc6e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cc73:	74 17                	je     f012cc8c <test_krealloc_BF+0x10a0>
			panic(
f012cc75:	83 ec 04             	sub    $0x4,%esp
f012cc78:	68 f8 a6 13 f0       	push   $0xf013a6f8
f012cc7d:	68 13 12 00 00       	push   $0x1213
f012cc82:	68 ee 91 13 f0       	push   $0xf01391ee
f012cc87:	e8 24 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cc8c:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cc93:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012cc9a:	eb 48                	jmp    f012cce4 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012cc9c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012cc9f:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012cca4:	83 ec 04             	sub    $0x4,%esp
f012cca7:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012ccad:	51                   	push   %ecx
f012ccae:	52                   	push   %edx
f012ccaf:	50                   	push   %eax
f012ccb0:	e8 14 a8 fd ff       	call   f01074c9 <get_page_table>
f012ccb5:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ccb8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ccbe:	85 c0                	test   %eax,%eax
f012ccc0:	75 17                	jne    f012ccd9 <test_krealloc_BF+0x10ed>
					panic(
f012ccc2:	83 ec 04             	sub    $0x4,%esp
f012ccc5:	68 f0 9a 13 f0       	push   $0xf0139af0
f012ccca:	68 1f 12 00 00       	push   $0x121f
f012cccf:	68 ee 91 13 f0       	push   $0xf01391ee
f012ccd4:	e8 d7 34 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccd9:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cce0:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cce4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cce8:	78 b2                	js     f012cc9c <test_krealloc_BF+0x10b0>
f012ccea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ccee:	7f 09                	jg     f012ccf9 <test_krealloc_BF+0x110d>
f012ccf0:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ccf7:	76 a3                	jbe    f012cc9c <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ccf9:	83 ec 0c             	sub    $0xc,%esp
f012ccfc:	68 37 a7 13 f0       	push   $0xf013a737
f012cd01:	e8 2b 41 fd ff       	call   f0100e31 <cprintf>
f012cd06:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cd09:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cd0f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd15:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd1c:	eb 21                	jmp    f012cd3f <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012cd1e:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012cd24:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cd27:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cd2d:	01 c8                	add    %ecx,%eax
f012cd2f:	8a 00                	mov    (%eax),%al
f012cd31:	0f be c0             	movsbl %al,%eax
f012cd34:	01 d0                	add    %edx,%eax
f012cd36:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd3c:	ff 45 dc             	incl   -0x24(%ebp)
f012cd3f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cd45:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd48:	7d d4                	jge    f012cd1e <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cd4a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012cd50:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012cd56:	42                   	inc    %edx
f012cd57:	01 d2                	add    %edx,%edx
f012cd59:	39 d0                	cmp    %edx,%eax
f012cd5b:	74 17                	je     f012cd74 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012cd5d:	83 ec 04             	sub    $0x4,%esp
f012cd60:	68 40 a7 13 f0       	push   $0xf013a740
f012cd65:	68 31 12 00 00       	push   $0x1231
f012cd6a:	68 ee 91 13 f0       	push   $0xf01391ee
f012cd6f:	e8 3c 34 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cd74:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cd7a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cd80:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd87:	eb 25                	jmp    f012cdae <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012cd89:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012cd8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cd92:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cd99:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cd9f:	01 c8                	add    %ecx,%eax
f012cda1:	8b 00                	mov    (%eax),%eax
f012cda3:	01 d0                	add    %edx,%eax
f012cda5:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cdab:	ff 45 dc             	incl   -0x24(%ebp)
f012cdae:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012cdb4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cdb7:	7d d0                	jge    f012cd89 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cdb9:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012cdbf:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012cdc5:	42                   	inc    %edx
f012cdc6:	c1 e2 02             	shl    $0x2,%edx
f012cdc9:	39 d0                	cmp    %edx,%eax
f012cdcb:	74 17                	je     f012cde4 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012cdcd:	83 ec 04             	sub    $0x4,%esp
f012cdd0:	68 40 a7 13 f0       	push   $0xf013a740
f012cdd5:	68 3b 12 00 00       	push   $0x123b
f012cdda:	68 ee 91 13 f0       	push   $0xf01391ee
f012cddf:	e8 cc 33 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cde4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cdea:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cdf0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cdf7:	eb 24                	jmp    f012ce1d <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012cdf9:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012cdff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce02:	01 c0                	add    %eax,%eax
f012ce04:	89 c1                	mov    %eax,%ecx
f012ce06:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ce0c:	01 c8                	add    %ecx,%eax
f012ce0e:	66 8b 00             	mov    (%eax),%ax
f012ce11:	98                   	cwtl   
f012ce12:	01 d0                	add    %edx,%eax
f012ce14:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ce1a:	ff 45 dc             	incl   -0x24(%ebp)
f012ce1d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce23:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ce26:	7d d1                	jge    f012cdf9 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ce28:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ce2e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce34:	8d 48 01             	lea    0x1(%eax),%ecx
f012ce37:	89 c8                	mov    %ecx,%eax
f012ce39:	c1 e0 02             	shl    $0x2,%eax
f012ce3c:	01 c8                	add    %ecx,%eax
f012ce3e:	39 c2                	cmp    %eax,%edx
f012ce40:	74 17                	je     f012ce59 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ce42:	83 ec 04             	sub    $0x4,%esp
f012ce45:	68 40 a7 13 f0       	push   $0xf013a740
f012ce4a:	68 45 12 00 00       	push   $0x1245
f012ce4f:	68 ee 91 13 f0       	push   $0xf01391ee
f012ce54:	e8 57 33 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ce59:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ce5f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce65:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ce6c:	eb 70                	jmp    f012cede <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012ce6e:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012ce74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce77:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce7e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ce84:	01 c8                	add    %ecx,%eax
f012ce86:	8a 00                	mov    (%eax),%al
f012ce88:	0f be c0             	movsbl %al,%eax
f012ce8b:	01 d0                	add    %edx,%eax
f012ce8d:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012ce93:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ce99:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce9c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cea3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cea9:	01 c8                	add    %ecx,%eax
f012ceab:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ceaf:	98                   	cwtl   
f012ceb0:	01 d0                	add    %edx,%eax
f012ceb2:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012ceb8:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cebe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cec1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cec8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cece:	01 c8                	add    %ecx,%eax
f012ced0:	8b 40 04             	mov    0x4(%eax),%eax
f012ced3:	01 d0                	add    %edx,%eax
f012ced5:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cedb:	ff 45 dc             	incl   -0x24(%ebp)
f012cede:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cee4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cee7:	7d 85                	jge    f012ce6e <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cee9:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012ceef:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cef5:	8d 50 01             	lea    0x1(%eax),%edx
f012cef8:	89 d0                	mov    %edx,%eax
f012cefa:	01 c0                	add    %eax,%eax
f012cefc:	01 d0                	add    %edx,%eax
f012cefe:	01 c0                	add    %eax,%eax
f012cf00:	01 d0                	add    %edx,%eax
f012cf02:	39 c1                	cmp    %eax,%ecx
f012cf04:	75 3a                	jne    f012cf40 <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cf06:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012cf0c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf12:	8d 50 01             	lea    0x1(%eax),%edx
f012cf15:	89 d0                	mov    %edx,%eax
f012cf17:	01 c0                	add    %eax,%eax
f012cf19:	01 d0                	add    %edx,%eax
f012cf1b:	01 c0                	add    %eax,%eax
f012cf1d:	01 d0                	add    %edx,%eax
f012cf1f:	39 c1                	cmp    %eax,%ecx
f012cf21:	75 1d                	jne    f012cf40 <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cf23:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012cf29:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf2f:	8d 50 01             	lea    0x1(%eax),%edx
f012cf32:	89 d0                	mov    %edx,%eax
f012cf34:	01 c0                	add    %eax,%eax
f012cf36:	01 d0                	add    %edx,%eax
f012cf38:	01 c0                	add    %eax,%eax
f012cf3a:	01 d0                	add    %edx,%eax
f012cf3c:	39 c1                	cmp    %eax,%ecx
f012cf3e:	74 17                	je     f012cf57 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012cf40:	83 ec 04             	sub    $0x4,%esp
f012cf43:	68 40 a7 13 f0       	push   $0xf013a740
f012cf48:	68 53 12 00 00       	push   $0x1253
f012cf4d:	68 ee 91 13 f0       	push   $0xf01391ee
f012cf52:	e8 59 32 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cf57:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012cf5e:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cf61:	e8 5a fa fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cf66:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cf69:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cf6f:	83 ec 08             	sub    $0x8,%esp
f012cf72:	68 00 3c 00 00       	push   $0x3c00
f012cf77:	50                   	push   %eax
f012cf78:	e8 7a b0 fd ff       	call   f0107ff7 <krealloc>
f012cf7d:	83 c4 10             	add    $0x10,%esp
f012cf80:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf86:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cf8c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf91:	77 17                	ja     f012cfaa <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf93:	83 ec 04             	sub    $0x4,%esp
f012cf96:	68 94 a4 13 f0       	push   $0xf013a494
f012cf9b:	68 5f 12 00 00       	push   $0x125f
f012cfa0:	68 ee 91 13 f0       	push   $0xf01391ee
f012cfa5:	e8 06 32 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cfaa:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cfb0:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cfb6:	74 17                	je     f012cfcf <test_krealloc_BF+0x13e3>
			panic(
f012cfb8:	83 ec 04             	sub    $0x4,%esp
f012cfbb:	68 78 a7 13 f0       	push   $0xf013a778
f012cfc0:	68 62 12 00 00       	push   $0x1262
f012cfc5:	68 ee 91 13 f0       	push   $0xf01391ee
f012cfca:	e8 e1 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cfcf:	e8 ec f9 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cfd4:	89 c2                	mov    %eax,%edx
f012cfd6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cfd9:	39 c2                	cmp    %eax,%edx
f012cfdb:	74 17                	je     f012cff4 <test_krealloc_BF+0x1408>
			panic(
f012cfdd:	83 ec 04             	sub    $0x4,%esp
f012cfe0:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012cfe5:	68 65 12 00 00       	push   $0x1265
f012cfea:	68 ee 91 13 f0       	push   $0xf01391ee
f012cfef:	e8 bc 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cff4:	e8 c7 f9 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012cff9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cffc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d002:	83 ec 08             	sub    $0x8,%esp
f012d005:	68 00 fc 0f 00       	push   $0xffc00
f012d00a:	50                   	push   %eax
f012d00b:	e8 e7 af fd ff       	call   f0107ff7 <krealloc>
f012d010:	83 c4 10             	add    $0x10,%esp
f012d013:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d019:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d01f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d024:	77 17                	ja     f012d03d <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d026:	83 ec 04             	sub    $0x4,%esp
f012d029:	68 94 a4 13 f0       	push   $0xf013a494
f012d02e:	68 6b 12 00 00       	push   $0x126b
f012d033:	68 ee 91 13 f0       	push   $0xf01391ee
f012d038:	e8 73 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d03d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d043:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d049:	74 17                	je     f012d062 <test_krealloc_BF+0x1476>
			panic(
f012d04b:	83 ec 04             	sub    $0x4,%esp
f012d04e:	68 78 a7 13 f0       	push   $0xf013a778
f012d053:	68 6e 12 00 00       	push   $0x126e
f012d058:	68 ee 91 13 f0       	push   $0xf01391ee
f012d05d:	e8 4e 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d062:	e8 59 f9 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d067:	89 c2                	mov    %eax,%edx
f012d069:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d06c:	39 c2                	cmp    %eax,%edx
f012d06e:	74 17                	je     f012d087 <test_krealloc_BF+0x149b>
			panic(
f012d070:	83 ec 04             	sub    $0x4,%esp
f012d073:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012d078:	68 71 12 00 00       	push   $0x1271
f012d07d:	68 ee 91 13 f0       	push   $0xf01391ee
f012d082:	e8 29 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d087:	e8 34 f9 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d08c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d08f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d095:	83 ec 08             	sub    $0x8,%esp
f012d098:	68 00 fc 0f 00       	push   $0xffc00
f012d09d:	50                   	push   %eax
f012d09e:	e8 54 af fd ff       	call   f0107ff7 <krealloc>
f012d0a3:	83 c4 10             	add    $0x10,%esp
f012d0a6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0ac:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d0b2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d0b7:	77 17                	ja     f012d0d0 <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d0b9:	83 ec 04             	sub    $0x4,%esp
f012d0bc:	68 94 a4 13 f0       	push   $0xf013a494
f012d0c1:	68 77 12 00 00       	push   $0x1277
f012d0c6:	68 ee 91 13 f0       	push   $0xf01391ee
f012d0cb:	e8 e0 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d0d0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d0d6:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d0dc:	74 17                	je     f012d0f5 <test_krealloc_BF+0x1509>
			panic(
f012d0de:	83 ec 04             	sub    $0x4,%esp
f012d0e1:	68 78 a7 13 f0       	push   $0xf013a778
f012d0e6:	68 7a 12 00 00       	push   $0x127a
f012d0eb:	68 ee 91 13 f0       	push   $0xf01391ee
f012d0f0:	e8 bb 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d0f5:	e8 c6 f8 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d0fa:	89 c2                	mov    %eax,%edx
f012d0fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d0ff:	39 c2                	cmp    %eax,%edx
f012d101:	74 17                	je     f012d11a <test_krealloc_BF+0x152e>
			panic(
f012d103:	83 ec 04             	sub    $0x4,%esp
f012d106:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012d10b:	68 7d 12 00 00       	push   $0x127d
f012d110:	68 ee 91 13 f0       	push   $0xf01391ee
f012d115:	e8 96 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d11a:	e8 a1 f8 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d11f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d122:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d128:	83 ec 08             	sub    $0x8,%esp
f012d12b:	68 00 fc 0f 00       	push   $0xffc00
f012d130:	50                   	push   %eax
f012d131:	e8 c1 ae fd ff       	call   f0107ff7 <krealloc>
f012d136:	83 c4 10             	add    $0x10,%esp
f012d139:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d13f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d145:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d14a:	77 17                	ja     f012d163 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d14c:	83 ec 04             	sub    $0x4,%esp
f012d14f:	68 94 a4 13 f0       	push   $0xf013a494
f012d154:	68 85 12 00 00       	push   $0x1285
f012d159:	68 ee 91 13 f0       	push   $0xf01391ee
f012d15e:	e8 4d 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d163:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d169:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d16f:	74 17                	je     f012d188 <test_krealloc_BF+0x159c>
			panic(
f012d171:	83 ec 04             	sub    $0x4,%esp
f012d174:	68 28 a8 13 f0       	push   $0xf013a828
f012d179:	68 88 12 00 00       	push   $0x1288
f012d17e:	68 ee 91 13 f0       	push   $0xf01391ee
f012d183:	e8 28 30 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d188:	e8 33 f8 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d18d:	89 c2                	mov    %eax,%edx
f012d18f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d192:	39 c2                	cmp    %eax,%edx
f012d194:	74 17                	je     f012d1ad <test_krealloc_BF+0x15c1>
			panic(
f012d196:	83 ec 04             	sub    $0x4,%esp
f012d199:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012d19e:	68 8b 12 00 00       	push   $0x128b
f012d1a3:	68 ee 91 13 f0       	push   $0xf01391ee
f012d1a8:	e8 03 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d1ad:	83 ec 0c             	sub    $0xc,%esp
f012d1b0:	68 07 9a 13 f0       	push   $0xf0139a07
f012d1b5:	e8 77 3c fd ff       	call   f0100e31 <cprintf>
f012d1ba:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d1bd:	e8 fe f7 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d1c2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d1c5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d1cb:	83 ec 08             	sub    $0x8,%esp
f012d1ce:	68 00 18 10 00       	push   $0x101800
f012d1d3:	50                   	push   %eax
f012d1d4:	e8 1e ae fd ff       	call   f0107ff7 <krealloc>
f012d1d9:	83 c4 10             	add    $0x10,%esp
f012d1dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d1df:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1e2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1e7:	77 17                	ja     f012d200 <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1e9:	83 ec 04             	sub    $0x4,%esp
f012d1ec:	68 94 a4 13 f0       	push   $0xf013a494
f012d1f1:	68 93 12 00 00       	push   $0x1293
f012d1f6:	68 ee 91 13 f0       	push   $0xf01391ee
f012d1fb:	e8 b0 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d200:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d206:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d209:	74 17                	je     f012d222 <test_krealloc_BF+0x1636>
			panic(
f012d20b:	83 ec 04             	sub    $0x4,%esp
f012d20e:	68 88 a8 13 f0       	push   $0xf013a888
f012d213:	68 96 12 00 00       	push   $0x1296
f012d218:	68 ee 91 13 f0       	push   $0xf01391ee
f012d21d:	e8 8e 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d222:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d225:	e8 96 f7 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d22a:	29 c3                	sub    %eax,%ebx
f012d22c:	89 d8                	mov    %ebx,%eax
f012d22e:	83 f8 02             	cmp    $0x2,%eax
f012d231:	74 17                	je     f012d24a <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d233:	83 ec 04             	sub    $0x4,%esp
f012d236:	68 04 a9 13 f0       	push   $0xf013a904
f012d23b:	68 98 12 00 00       	push   $0x1298
f012d240:	68 ee 91 13 f0       	push   $0xf01391ee
f012d245:	e8 66 2f fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d24a:	e8 71 f7 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d24f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d252:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d258:	83 ec 08             	sub    $0x8,%esp
f012d25b:	68 00 fc 3f 00       	push   $0x3ffc00
f012d260:	50                   	push   %eax
f012d261:	e8 91 ad fd ff       	call   f0107ff7 <krealloc>
f012d266:	83 c4 10             	add    $0x10,%esp
f012d269:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d26c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d26f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d274:	77 17                	ja     f012d28d <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d276:	83 ec 04             	sub    $0x4,%esp
f012d279:	68 94 a4 13 f0       	push   $0xf013a494
f012d27e:	68 9e 12 00 00       	push   $0x129e
f012d283:	68 ee 91 13 f0       	push   $0xf01391ee
f012d288:	e8 23 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d28d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d293:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d296:	74 17                	je     f012d2af <test_krealloc_BF+0x16c3>
			panic(
f012d298:	83 ec 04             	sub    $0x4,%esp
f012d29b:	68 88 a8 13 f0       	push   $0xf013a888
f012d2a0:	68 a1 12 00 00       	push   $0x12a1
f012d2a5:	68 ee 91 13 f0       	push   $0xf01391ee
f012d2aa:	e8 01 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d2af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2b2:	e8 09 f7 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d2b7:	29 c3                	sub    %eax,%ebx
f012d2b9:	89 d8                	mov    %ebx,%eax
f012d2bb:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d2c0:	74 17                	je     f012d2d9 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d2c2:	83 ec 04             	sub    $0x4,%esp
f012d2c5:	68 04 a9 13 f0       	push   $0xf013a904
f012d2ca:	68 a4 12 00 00       	push   $0x12a4
f012d2cf:	68 ee 91 13 f0       	push   $0xf01391ee
f012d2d4:	e8 d7 2e fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d2d9:	83 ec 0c             	sub    $0xc,%esp
f012d2dc:	68 4c 9a 13 f0       	push   $0xf0139a4c
f012d2e1:	e8 4b 3b fd ff       	call   f0100e31 <cprintf>
f012d2e6:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d2e9:	e8 d2 f6 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d2ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d2f1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2f7:	83 ec 08             	sub    $0x8,%esp
f012d2fa:	68 00 fc 9f 00       	push   $0x9ffc00
f012d2ff:	50                   	push   %eax
f012d300:	e8 f2 ac fd ff       	call   f0107ff7 <krealloc>
f012d305:	83 c4 10             	add    $0x10,%esp
f012d308:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d30b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d30e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d313:	77 17                	ja     f012d32c <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d315:	83 ec 04             	sub    $0x4,%esp
f012d318:	68 94 a4 13 f0       	push   $0xf013a494
f012d31d:	68 af 12 00 00       	push   $0x12af
f012d322:	68 ee 91 13 f0       	push   $0xf01391ee
f012d327:	e8 84 2e fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d32c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d333:	10 00 00 
f012d336:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d33b:	0f b6 d0             	movzbl %al,%edx
f012d33e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d344:	01 d0                	add    %edx,%eax
f012d346:	48                   	dec    %eax
f012d347:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d34d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d353:	ba 00 00 00 00       	mov    $0x0,%edx
f012d358:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d35e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d364:	29 d0                	sub    %edx,%eax
f012d366:	89 c1                	mov    %eax,%ecx
f012d368:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d36f:	10 00 00 
f012d372:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d377:	0f b6 c0             	movzbl %al,%eax
f012d37a:	c1 e0 04             	shl    $0x4,%eax
f012d37d:	89 c2                	mov    %eax,%edx
f012d37f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d385:	01 d0                	add    %edx,%eax
f012d387:	48                   	dec    %eax
f012d388:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d38e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d394:	ba 00 00 00 00       	mov    $0x0,%edx
f012d399:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d39f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d3a5:	29 d0                	sub    %edx,%eax
f012d3a7:	01 c8                	add    %ecx,%eax
f012d3a9:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d3af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3b2:	39 c2                	cmp    %eax,%edx
f012d3b4:	74 18                	je     f012d3ce <test_krealloc_BF+0x17e2>
			panic(
f012d3b6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3b9:	50                   	push   %eax
f012d3ba:	68 38 a9 13 f0       	push   $0xf013a938
f012d3bf:	68 b3 12 00 00       	push   $0x12b3
f012d3c4:	68 ee 91 13 f0       	push   $0xf01391ee
f012d3c9:	e8 e2 2d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d3ce:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d3d4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d3d7:	75 17                	jne    f012d3f0 <test_krealloc_BF+0x1804>
			panic(
f012d3d9:	83 ec 04             	sub    $0x4,%esp
f012d3dc:	68 7c a9 13 f0       	push   $0xf013a97c
f012d3e1:	68 b6 12 00 00       	push   $0x12b6
f012d3e6:	68 ee 91 13 f0       	push   $0xf01391ee
f012d3eb:	e8 c0 2d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d3f0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d3f3:	e8 c8 f5 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d3f8:	29 c3                	sub    %eax,%ebx
f012d3fa:	89 d8                	mov    %ebx,%eax
f012d3fc:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d401:	74 17                	je     f012d41a <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d403:	83 ec 04             	sub    $0x4,%esp
f012d406:	68 04 a9 13 f0       	push   $0xf013a904
f012d40b:	68 b9 12 00 00       	push   $0x12b9
f012d410:	68 ee 91 13 f0       	push   $0xf01391ee
f012d415:	e8 96 2d fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d41a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d41d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d423:	e8 98 f5 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d428:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d42b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d431:	83 ec 08             	sub    $0x8,%esp
f012d434:	68 00 fc 3f 00       	push   $0x3ffc00
f012d439:	50                   	push   %eax
f012d43a:	e8 b8 ab fd ff       	call   f0107ff7 <krealloc>
f012d43f:	83 c4 10             	add    $0x10,%esp
f012d442:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d445:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d448:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d44d:	77 17                	ja     f012d466 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d44f:	83 ec 04             	sub    $0x4,%esp
f012d452:	68 94 a4 13 f0       	push   $0xf013a494
f012d457:	68 c2 12 00 00       	push   $0x12c2
f012d45c:	68 ee 91 13 f0       	push   $0xf01391ee
f012d461:	e8 4a 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d466:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d46c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d46f:	75 17                	jne    f012d488 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d471:	83 ec 04             	sub    $0x4,%esp
f012d474:	68 7c a9 13 f0       	push   $0xf013a97c
f012d479:	68 c4 12 00 00       	push   $0x12c4
f012d47e:	68 ee 91 13 f0       	push   $0xf01391ee
f012d483:	e8 28 2d fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d488:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d48f:	10 00 00 
f012d492:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d497:	0f b6 d0             	movzbl %al,%edx
f012d49a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d4a0:	01 d0                	add    %edx,%eax
f012d4a2:	48                   	dec    %eax
f012d4a3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d4a9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d4af:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4b4:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d4ba:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d4c0:	29 d0                	sub    %edx,%eax
f012d4c2:	89 c1                	mov    %eax,%ecx
f012d4c4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d4cb:	10 00 00 
f012d4ce:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d4d3:	0f b6 c0             	movzbl %al,%eax
f012d4d6:	c1 e0 04             	shl    $0x4,%eax
f012d4d9:	89 c2                	mov    %eax,%edx
f012d4db:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d4e1:	01 d0                	add    %edx,%eax
f012d4e3:	48                   	dec    %eax
f012d4e4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d4ea:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d4f0:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4f5:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d4fb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d501:	29 d0                	sub    %edx,%eax
f012d503:	01 c8                	add    %ecx,%eax
f012d505:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d50b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d50e:	39 c2                	cmp    %eax,%edx
f012d510:	74 17                	je     f012d529 <test_krealloc_BF+0x193d>
f012d512:	83 ec 04             	sub    $0x4,%esp
f012d515:	68 d0 a4 13 f0       	push   $0xf013a4d0
f012d51a:	68 c5 12 00 00       	push   $0x12c5
f012d51f:	68 ee 91 13 f0       	push   $0xf01391ee
f012d524:	e8 87 2c fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d529:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d52c:	e8 8f f4 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d531:	29 c3                	sub    %eax,%ebx
f012d533:	89 d8                	mov    %ebx,%eax
f012d535:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d53a:	74 17                	je     f012d553 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d53c:	83 ec 04             	sub    $0x4,%esp
f012d53f:	68 04 a9 13 f0       	push   $0xf013a904
f012d544:	68 c9 12 00 00       	push   $0x12c9
f012d549:	68 ee 91 13 f0       	push   $0xf01391ee
f012d54e:	e8 5d 2c fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d553:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d556:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d55c:	e8 5f f4 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d561:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d564:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d56a:	83 ec 08             	sub    $0x8,%esp
f012d56d:	68 00 fc 3f 01       	push   $0x13ffc00
f012d572:	50                   	push   %eax
f012d573:	e8 7f aa fd ff       	call   f0107ff7 <krealloc>
f012d578:	83 c4 10             	add    $0x10,%esp
f012d57b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d57e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d581:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d586:	77 17                	ja     f012d59f <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d588:	83 ec 04             	sub    $0x4,%esp
f012d58b:	68 94 a4 13 f0       	push   $0xf013a494
f012d590:	68 cf 12 00 00       	push   $0x12cf
f012d595:	68 ee 91 13 f0       	push   $0xf01391ee
f012d59a:	e8 11 2c fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d59f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d5a5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d5a8:	75 17                	jne    f012d5c1 <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d5aa:	83 ec 04             	sub    $0x4,%esp
f012d5ad:	68 7c a9 13 f0       	push   $0xf013a97c
f012d5b2:	68 d1 12 00 00       	push   $0x12d1
f012d5b7:	68 ee 91 13 f0       	push   $0xf01391ee
f012d5bc:	e8 ef 2b fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d5c1:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d5c8:	10 00 00 
f012d5cb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d5d0:	0f b6 d0             	movzbl %al,%edx
f012d5d3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d5d9:	01 d0                	add    %edx,%eax
f012d5db:	48                   	dec    %eax
f012d5dc:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d5e2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d5e8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5ed:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d5f3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d5f9:	29 d0                	sub    %edx,%eax
f012d5fb:	89 c1                	mov    %eax,%ecx
f012d5fd:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d604:	10 00 00 
f012d607:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d60c:	0f b6 c0             	movzbl %al,%eax
f012d60f:	c1 e0 04             	shl    $0x4,%eax
f012d612:	89 c2                	mov    %eax,%edx
f012d614:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d61a:	01 d0                	add    %edx,%eax
f012d61c:	48                   	dec    %eax
f012d61d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d623:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d629:	ba 00 00 00 00       	mov    $0x0,%edx
f012d62e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d634:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d63a:	29 d0                	sub    %edx,%eax
f012d63c:	01 c8                	add    %ecx,%eax
f012d63e:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d644:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d647:	39 c2                	cmp    %eax,%edx
f012d649:	74 17                	je     f012d662 <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d64b:	83 ec 04             	sub    $0x4,%esp
f012d64e:	68 9c aa 13 f0       	push   $0xf013aa9c
f012d653:	68 d3 12 00 00       	push   $0x12d3
f012d658:	68 ee 91 13 f0       	push   $0xf01391ee
f012d65d:	e8 4e 2b fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d662:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d665:	e8 56 f3 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d66a:	29 c3                	sub    %eax,%ebx
f012d66c:	89 d8                	mov    %ebx,%eax
f012d66e:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d673:	74 17                	je     f012d68c <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d675:	83 ec 04             	sub    $0x4,%esp
f012d678:	68 04 a9 13 f0       	push   $0xf013a904
f012d67d:	68 d6 12 00 00       	push   $0x12d6
f012d682:	68 ee 91 13 f0       	push   $0xf01391ee
f012d687:	e8 24 2b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d68c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d68f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d695:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d69b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d6a1:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d6a8:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6ab:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d6b2:	eb 21                	jmp    f012d6d5 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d6b4:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d6ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d6bd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d6c3:	01 c8                	add    %ecx,%eax
f012d6c5:	8a 00                	mov    (%eax),%al
f012d6c7:	0f be c0             	movsbl %al,%eax
f012d6ca:	01 d0                	add    %edx,%eax
f012d6cc:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6d2:	ff 45 d8             	incl   -0x28(%ebp)
f012d6d5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d6db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d6de:	7d d4                	jge    f012d6b4 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d6e0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d6e6:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d6ec:	42                   	inc    %edx
f012d6ed:	01 d2                	add    %edx,%edx
f012d6ef:	39 d0                	cmp    %edx,%eax
f012d6f1:	74 17                	je     f012d70a <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d6f3:	83 ec 04             	sub    $0x4,%esp
f012d6f6:	68 34 aa 13 f0       	push   $0xf013aa34
f012d6fb:	68 e4 12 00 00       	push   $0x12e4
f012d700:	68 ee 91 13 f0       	push   $0xf01391ee
f012d705:	e8 a6 2a fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d70a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d710:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d716:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d71d:	00 00 00 
		sums[1] = 0;
f012d720:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d727:	00 00 00 
		sums[2] = 0;
f012d72a:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d731:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d734:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d73b:	eb 70                	jmp    f012d7ad <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d73d:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d743:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d746:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d74d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d753:	01 c8                	add    %ecx,%eax
f012d755:	8a 00                	mov    (%eax),%al
f012d757:	0f be c0             	movsbl %al,%eax
f012d75a:	01 d0                	add    %edx,%eax
f012d75c:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d762:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d768:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d76b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d772:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d778:	01 c8                	add    %ecx,%eax
f012d77a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d77e:	98                   	cwtl   
f012d77f:	01 d0                	add    %edx,%eax
f012d781:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d787:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d78d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d790:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d797:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d79d:	01 c8                	add    %ecx,%eax
f012d79f:	8b 40 04             	mov    0x4(%eax),%eax
f012d7a2:	01 d0                	add    %edx,%eax
f012d7a4:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d7aa:	ff 45 d8             	incl   -0x28(%ebp)
f012d7ad:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d7b6:	7d 85                	jge    f012d73d <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d7b8:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d7be:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7c4:	8d 50 01             	lea    0x1(%eax),%edx
f012d7c7:	89 d0                	mov    %edx,%eax
f012d7c9:	01 c0                	add    %eax,%eax
f012d7cb:	01 d0                	add    %edx,%eax
f012d7cd:	01 c0                	add    %eax,%eax
f012d7cf:	01 d0                	add    %edx,%eax
f012d7d1:	39 c1                	cmp    %eax,%ecx
f012d7d3:	75 3a                	jne    f012d80f <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d7d5:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d7db:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7e1:	8d 50 01             	lea    0x1(%eax),%edx
f012d7e4:	89 d0                	mov    %edx,%eax
f012d7e6:	01 c0                	add    %eax,%eax
f012d7e8:	01 d0                	add    %edx,%eax
f012d7ea:	01 c0                	add    %eax,%eax
f012d7ec:	01 d0                	add    %edx,%eax
f012d7ee:	39 c1                	cmp    %eax,%ecx
f012d7f0:	75 1d                	jne    f012d80f <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d7f2:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012d7f8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7fe:	8d 50 01             	lea    0x1(%eax),%edx
f012d801:	89 d0                	mov    %edx,%eax
f012d803:	01 c0                	add    %eax,%eax
f012d805:	01 d0                	add    %edx,%eax
f012d807:	01 c0                	add    %eax,%eax
f012d809:	01 d0                	add    %edx,%eax
f012d80b:	39 c1                	cmp    %eax,%ecx
f012d80d:	74 17                	je     f012d826 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012d80f:	83 ec 04             	sub    $0x4,%esp
f012d812:	68 34 aa 13 f0       	push   $0xf013aa34
f012d817:	68 f6 12 00 00       	push   $0x12f6
f012d81c:	68 ee 91 13 f0       	push   $0xf01391ee
f012d821:	e8 8a 29 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d826:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d82c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012d832:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d839:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d83c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d843:	eb 24                	jmp    f012d869 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012d845:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d84b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d84e:	01 c0                	add    %eax,%eax
f012d850:	89 c1                	mov    %eax,%ecx
f012d852:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d858:	01 c8                	add    %ecx,%eax
f012d85a:	66 8b 00             	mov    (%eax),%ax
f012d85d:	98                   	cwtl   
f012d85e:	01 d0                	add    %edx,%eax
f012d860:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d866:	ff 45 d8             	incl   -0x28(%ebp)
f012d869:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d86f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d872:	7d d1                	jge    f012d845 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d874:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d87a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d880:	8d 48 01             	lea    0x1(%eax),%ecx
f012d883:	89 c8                	mov    %ecx,%eax
f012d885:	c1 e0 02             	shl    $0x2,%eax
f012d888:	01 c8                	add    %ecx,%eax
f012d88a:	39 c2                	cmp    %eax,%edx
f012d88c:	74 17                	je     f012d8a5 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012d88e:	83 ec 04             	sub    $0x4,%esp
f012d891:	68 34 aa 13 f0       	push   $0xf013aa34
f012d896:	68 00 13 00 00       	push   $0x1300
f012d89b:	68 ee 91 13 f0       	push   $0xf01391ee
f012d8a0:	e8 0b 29 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d8a5:	e8 16 f1 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d8aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d8ad:	e8 b4 6d fd ff       	call   f0104666 <pf_calculate_free_frames>
f012d8b2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d8b8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d8be:	83 ec 08             	sub    $0x8,%esp
f012d8c1:	6a 00                	push   $0x0
f012d8c3:	50                   	push   %eax
f012d8c4:	e8 2e a7 fd ff       	call   f0107ff7 <krealloc>
f012d8c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d8cc:	e8 95 6d fd ff       	call   f0104666 <pf_calculate_free_frames>
f012d8d1:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d8d7:	74 17                	je     f012d8f0 <test_krealloc_BF+0x1d04>
			panic(
f012d8d9:	83 ec 04             	sub    $0x4,%esp
f012d8dc:	68 08 92 13 f0       	push   $0xf0139208
f012d8e1:	68 08 13 00 00       	push   $0x1308
f012d8e6:	68 ee 91 13 f0       	push   $0xf01391ee
f012d8eb:	e8 c0 28 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d8f0:	e8 cb f0 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d8f5:	89 c2                	mov    %eax,%edx
f012d8f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d8fa:	29 c2                	sub    %eax,%edx
f012d8fc:	89 d0                	mov    %edx,%eax
f012d8fe:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d903:	74 17                	je     f012d91c <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012d905:	83 ec 04             	sub    $0x4,%esp
f012d908:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012d90d:	68 0a 13 00 00       	push   $0x130a
f012d912:	68 ee 91 13 f0       	push   $0xf01391ee
f012d917:	e8 94 28 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d91c:	e8 9f f0 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d921:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d924:	e8 3d 6d fd ff       	call   f0104666 <pf_calculate_free_frames>
f012d929:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012d92f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d935:	83 ec 0c             	sub    $0xc,%esp
f012d938:	50                   	push   %eax
f012d939:	e8 1d a6 fd ff       	call   f0107f5b <kfree>
f012d93e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d941:	e8 20 6d fd ff       	call   f0104666 <pf_calculate_free_frames>
f012d946:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d94c:	74 17                	je     f012d965 <test_krealloc_BF+0x1d79>
			panic(
f012d94e:	83 ec 04             	sub    $0x4,%esp
f012d951:	68 08 92 13 f0       	push   $0xf0139208
f012d956:	68 12 13 00 00       	push   $0x1312
f012d95b:	68 ee 91 13 f0       	push   $0xf01391ee
f012d960:	e8 4b 28 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d965:	e8 56 f0 fd ff       	call   f010c9c0 <sys_calculate_free_frames>
f012d96a:	89 c2                	mov    %eax,%edx
f012d96c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d96f:	29 c2                	sub    %eax,%edx
f012d971:	89 d0                	mov    %edx,%eax
f012d973:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d978:	74 17                	je     f012d991 <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012d97a:	83 ec 04             	sub    $0x4,%esp
f012d97d:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012d982:	68 14 13 00 00       	push   $0x1314
f012d987:	68 ee 91 13 f0       	push   $0xf01391ee
f012d98c:	e8 1f 28 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d991:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d998:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d99f:	eb 48                	jmp    f012d9e9 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d9a1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d9a4:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012d9a9:	83 ec 04             	sub    $0x4,%esp
f012d9ac:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012d9b2:	51                   	push   %ecx
f012d9b3:	52                   	push   %edx
f012d9b4:	50                   	push   %eax
f012d9b5:	e8 0f 9b fd ff       	call   f01074c9 <get_page_table>
f012d9ba:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d9bd:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012d9c3:	85 c0                	test   %eax,%eax
f012d9c5:	75 17                	jne    f012d9de <test_krealloc_BF+0x1df2>
					panic(
f012d9c7:	83 ec 04             	sub    $0x4,%esp
f012d9ca:	68 f0 9a 13 f0       	push   $0xf0139af0
f012d9cf:	68 21 13 00 00       	push   $0x1321
f012d9d4:	68 ee 91 13 f0       	push   $0xf01391ee
f012d9d9:	e8 d2 27 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d9de:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d9e5:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d9e9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d9ed:	78 b2                	js     f012d9a1 <test_krealloc_BF+0x1db5>
f012d9ef:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d9f3:	7f 09                	jg     f012d9fe <test_krealloc_BF+0x1e12>
f012d9f5:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d9fc:	76 a3                	jbe    f012d9a1 <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d9fe:	83 ec 0c             	sub    $0xc,%esp
f012da01:	68 d2 93 13 f0       	push   $0xf01393d2
f012da06:	e8 26 34 fd ff       	call   f0100e31 <cprintf>
f012da0b:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012da0e:	83 ec 0c             	sub    $0xc,%esp
f012da11:	68 d4 aa 13 f0       	push   $0xf013aad4
f012da16:	e8 16 34 fd ff       	call   f0100e31 <cprintf>
f012da1b:	83 c4 10             	add    $0x10,%esp
	return 0;
f012da1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012da23:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012da26:	5b                   	pop    %ebx
f012da27:	5f                   	pop    %edi
f012da28:	5d                   	pop    %ebp
f012da29:	c3                   	ret    

f012da2a <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012da2a:	55                   	push   %ebp
f012da2b:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012da2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012da32:	5d                   	pop    %ebp
f012da33:	c3                   	ret    

f012da34 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012da34:	55                   	push   %ebp
f012da35:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012da37:	c7 05 34 3b 25 f0 00 	movl   $0x0,0xf0253b34
f012da3e:	00 00 00 
}
f012da41:	90                   	nop
f012da42:	5d                   	pop    %ebp
f012da43:	c3                   	ret    

f012da44 <inctst>:
void inctst()
{
f012da44:	55                   	push   %ebp
f012da45:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012da47:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
f012da4c:	40                   	inc    %eax
f012da4d:	a3 34 3b 25 f0       	mov    %eax,0xf0253b34
}
f012da52:	90                   	nop
f012da53:	5d                   	pop    %ebp
f012da54:	c3                   	ret    

f012da55 <gettst>:
uint32 gettst()
{
f012da55:	55                   	push   %ebp
f012da56:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012da58:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
}
f012da5d:	5d                   	pop    %ebp
f012da5e:	c3                   	ret    

f012da5f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012da5f:	55                   	push   %ebp
f012da60:	89 e5                	mov    %esp,%ebp
f012da62:	83 ec 28             	sub    $0x28,%esp
f012da65:	8b 45 14             	mov    0x14(%ebp),%eax
f012da68:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012da6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012da72:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012da76:	83 f8 65             	cmp    $0x65,%eax
f012da79:	74 5d                	je     f012dad8 <tst+0x79>
f012da7b:	83 f8 65             	cmp    $0x65,%eax
f012da7e:	7f 0a                	jg     f012da8a <tst+0x2b>
f012da80:	83 f8 62             	cmp    $0x62,%eax
f012da83:	74 73                	je     f012daf8 <tst+0x99>
f012da85:	e9 91 00 00 00       	jmp    f012db1b <tst+0xbc>
f012da8a:	83 f8 67             	cmp    $0x67,%eax
f012da8d:	74 29                	je     f012dab8 <tst+0x59>
f012da8f:	83 f8 6c             	cmp    $0x6c,%eax
f012da92:	0f 85 83 00 00 00    	jne    f012db1b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012da98:	8b 45 08             	mov    0x8(%ebp),%eax
f012da9b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012da9e:	73 09                	jae    f012daa9 <tst+0x4a>
			chk = 1;
f012daa0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012daa7:	eb 68                	jmp    f012db11 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012daa9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012daad:	74 62                	je     f012db11 <tst+0xb2>
			chk = 1;
f012daaf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dab6:	eb 59                	jmp    f012db11 <tst+0xb2>
	case 'g':
		if (n > v1)
f012dab8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dabb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dabe:	76 09                	jbe    f012dac9 <tst+0x6a>
			chk = 1;
f012dac0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dac7:	eb 4b                	jmp    f012db14 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012dac9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dacd:	74 45                	je     f012db14 <tst+0xb5>
			chk = 1;
f012dacf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dad6:	eb 3c                	jmp    f012db14 <tst+0xb5>
	case 'e':
		if (n == v1)
f012dad8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dadb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dade:	75 09                	jne    f012dae9 <tst+0x8a>
			chk = 1;
f012dae0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dae7:	eb 2e                	jmp    f012db17 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012dae9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012daed:	74 28                	je     f012db17 <tst+0xb8>
			chk = 1;
f012daef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012daf6:	eb 1f                	jmp    f012db17 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012daf8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dafb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dafe:	72 1a                	jb     f012db1a <tst+0xbb>
f012db00:	8b 45 08             	mov    0x8(%ebp),%eax
f012db03:	3b 45 10             	cmp    0x10(%ebp),%eax
f012db06:	77 12                	ja     f012db1a <tst+0xbb>
			chk = 1;
f012db08:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db0f:	eb 09                	jmp    f012db1a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db11:	90                   	nop
f012db12:	eb 07                	jmp    f012db1b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db14:	90                   	nop
f012db15:	eb 04                	jmp    f012db1b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db17:	90                   	nop
f012db18:	eb 01                	jmp    f012db1b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012db1a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012db1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012db1f:	75 14                	jne    f012db35 <tst+0xd6>
f012db21:	83 ec 04             	sub    $0x4,%esp
f012db24:	68 14 ab 13 f0       	push   $0xf013ab14
f012db29:	6a 3c                	push   $0x3c
f012db2b:	68 27 ab 13 f0       	push   $0xf013ab27
f012db30:	e8 7b 26 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012db35:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
f012db3a:	40                   	inc    %eax
f012db3b:	a3 34 3b 25 f0       	mov    %eax,0xf0253b34
	return;
f012db40:	90                   	nop
}
f012db41:	c9                   	leave  
f012db42:	c3                   	ret    

f012db43 <chktst>:

void chktst(uint32 n)
{
f012db43:	55                   	push   %ebp
f012db44:	89 e5                	mov    %esp,%ebp
f012db46:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012db49:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
f012db4e:	3b 45 08             	cmp    0x8(%ebp),%eax
f012db51:	75 12                	jne    f012db65 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012db53:	83 ec 0c             	sub    $0xc,%esp
f012db56:	68 40 ab 13 f0       	push   $0xf013ab40
f012db5b:	e8 d1 32 fd ff       	call   f0100e31 <cprintf>
f012db60:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012db63:	eb 14                	jmp    f012db79 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012db65:	83 ec 04             	sub    $0x4,%esp
f012db68:	68 6c ab 13 f0       	push   $0xf013ab6c
f012db6d:	6a 46                	push   $0x46
f012db6f:	68 27 ab 13 f0       	push   $0xf013ab27
f012db74:	e8 37 26 fd ff       	call   f01001b0 <_panic>
}
f012db79:	c9                   	leave  
f012db7a:	c3                   	ret    

f012db7b <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012db7b:	55                   	push   %ebp
f012db7c:	89 e5                	mov    %esp,%ebp
f012db7e:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012db81:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012db85:	77 07                	ja     f012db8e <nearest_pow2_ceil+0x13>
f012db87:	b8 01 00 00 00       	mov    $0x1,%eax
f012db8c:	eb 20                	jmp    f012dbae <nearest_pow2_ceil+0x33>
    int power = 2;
f012db8e:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012db95:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012db98:	eb 08                	jmp    f012dba2 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012db9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012db9d:	01 c0                	add    %eax,%eax
f012db9f:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012dba2:	d1 6d 08             	shrl   0x8(%ebp)
f012dba5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dba9:	75 ef                	jne    f012db9a <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012dbab:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012dbae:	c9                   	leave  
f012dbaf:	c3                   	ret    

f012dbb0 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012dbb0:	55                   	push   %ebp
f012dbb1:	89 e5                	mov    %esp,%ebp
f012dbb3:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012dbb6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dbba:	77 07                	ja     f012dbc3 <log2_ceil+0x13>
f012dbbc:	b8 01 00 00 00       	mov    $0x1,%eax
f012dbc1:	eb 1b                	jmp    f012dbde <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012dbc3:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012dbca:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dbcd:	eb 03                	jmp    f012dbd2 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012dbcf:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012dbd2:	d1 6d 08             	shrl   0x8(%ebp)
f012dbd5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dbd9:	75 f4                	jne    f012dbcf <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012dbdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012dbde:	c9                   	leave  
f012dbdf:	c3                   	ret    

f012dbe0 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012dbe0:	55                   	push   %ebp
f012dbe1:	89 e5                	mov    %esp,%ebp
f012dbe3:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012dbe6:	8b 45 08             	mov    0x8(%ebp),%eax
f012dbe9:	8b 00                	mov    (%eax),%eax
f012dbeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012dbee:	8b 45 08             	mov    0x8(%ebp),%eax
f012dbf1:	8b 00                	mov    (%eax),%eax
f012dbf3:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012dbf6:	eb 52                	jmp    f012dc4a <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012dbf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dbfb:	8b 00                	mov    (%eax),%eax
f012dbfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012dc00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc06:	75 12                	jne    f012dc1a <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012dc08:	83 ec 0c             	sub    $0xc,%esp
f012dc0b:	68 88 ab 13 f0       	push   $0xf013ab88
f012dc10:	e8 1c 32 fd ff       	call   f0100e31 <cprintf>
f012dc15:	83 c4 10             	add    $0x10,%esp
			break;
f012dc18:	eb 3f                	jmp    f012dc59 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012dc1a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dc1e:	74 38                	je     f012dc58 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012dc20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc23:	8b 00                	mov    (%eax),%eax
f012dc25:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012dc28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc2b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc2e:	75 12                	jne    f012dc42 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012dc30:	83 ec 0c             	sub    $0xc,%esp
f012dc33:	68 a4 ab 13 f0       	push   $0xf013aba4
f012dc38:	e8 f4 31 fd ff       	call   f0100e31 <cprintf>
f012dc3d:	83 c4 10             	add    $0x10,%esp
			break;
f012dc40:	eb 17                	jmp    f012dc59 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012dc42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc45:	8b 00                	mov    (%eax),%eax
f012dc47:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012dc4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012dc4e:	74 09                	je     f012dc59 <detect_loop_in_FrameInfo_list+0x79>
f012dc50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dc54:	75 a2                	jne    f012dbf8 <detect_loop_in_FrameInfo_list+0x18>
f012dc56:	eb 01                	jmp    f012dc59 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012dc58:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012dc59:	83 ec 0c             	sub    $0xc,%esp
f012dc5c:	68 bb ab 13 f0       	push   $0xf013abbb
f012dc61:	e8 cb 31 fd ff       	call   f0100e31 <cprintf>
f012dc66:	83 c4 10             	add    $0x10,%esp
}
f012dc69:	90                   	nop
f012dc6a:	c9                   	leave  
f012dc6b:	c3                   	ret    

f012dc6c <scarce_memory>:

void scarce_memory()
{
f012dc6c:	55                   	push   %ebp
f012dc6d:	89 e5                	mov    %esp,%ebp
f012dc6f:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012dc72:	a1 a0 9a 2b f0       	mov    0xf02b9aa0,%eax
f012dc77:	ba 64 00 00 00       	mov    $0x64,%edx
f012dc7c:	29 c2                	sub    %eax,%edx
f012dc7e:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f012dc83:	0f af c2             	imul   %edx,%eax
f012dc86:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dc8b:	f7 e2                	mul    %edx
f012dc8d:	89 d0                	mov    %edx,%eax
f012dc8f:	c1 e8 05             	shr    $0x5,%eax
f012dc92:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012dc95:	a1 a0 9a 2b f0       	mov    0xf02b9aa0,%eax
f012dc9a:	ba 64 00 00 00       	mov    $0x64,%edx
f012dc9f:	29 c2                	sub    %eax,%edx
f012dca1:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f012dca6:	89 d1                	mov    %edx,%ecx
f012dca8:	0f af c8             	imul   %eax,%ecx
f012dcab:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dcb0:	f7 e1                	mul    %ecx
f012dcb2:	c1 ea 05             	shr    $0x5,%edx
f012dcb5:	89 d0                	mov    %edx,%eax
f012dcb7:	c1 e0 02             	shl    $0x2,%eax
f012dcba:	01 d0                	add    %edx,%eax
f012dcbc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dcc3:	01 d0                	add    %edx,%eax
f012dcc5:	c1 e0 02             	shl    $0x2,%eax
f012dcc8:	29 c1                	sub    %eax,%ecx
f012dcca:	89 ca                	mov    %ecx,%edx
f012dccc:	85 d2                	test   %edx,%edx
f012dcce:	74 03                	je     f012dcd3 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012dcd0:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012dcd3:	8b 15 b0 be 2b f0    	mov    0xf02bbeb0,%edx
f012dcd9:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f012dcde:	29 c2                	sub    %eax,%edx
f012dce0:	89 d0                	mov    %edx,%eax
f012dce2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012dce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dce8:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012dceb:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012dcee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dcf5:	eb 12                	jmp    f012dd09 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012dcf7:	83 ec 0c             	sub    $0xc,%esp
f012dcfa:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012dcfd:	50                   	push   %eax
f012dcfe:	e8 04 96 fd ff       	call   f0107307 <allocate_frame>
f012dd03:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dd06:	ff 45 f0             	incl   -0x10(%ebp)
f012dd09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dd0c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dd0f:	76 e6                	jbe    f012dcf7 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012dd11:	90                   	nop
f012dd12:	c9                   	leave  
f012dd13:	c3                   	ret    

f012dd14 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012dd14:	55                   	push   %ebp
f012dd15:	89 e5                	mov    %esp,%ebp
f012dd17:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012dd1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012dd21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012dd28:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012dd2f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dd33:	0f 85 d3 01 00 00    	jne    f012df0c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dd39:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dd40:	e9 e1 00 00 00       	jmp    f012de26 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012dd45:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dd4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd4f:	c1 e0 04             	shl    $0x4,%eax
f012dd52:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012dd57:	8b 00                	mov    (%eax),%eax
f012dd59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dd5c:	e9 82 00 00 00       	jmp    f012dde3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012dd61:	83 ec 0c             	sub    $0xc,%esp
f012dd64:	ff 75 e4             	pushl  -0x1c(%ebp)
f012dd67:	e8 cb a4 fd ff       	call   f0108237 <env_page_ws_get_size>
f012dd6c:	83 c4 10             	add    $0x10,%esp
f012dd6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dd72:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012dd77:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dd7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dd80:	0f af c2             	imul   %edx,%eax
f012dd83:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dd88:	f7 e2                	mul    %edx
f012dd8a:	89 d0                	mov    %edx,%eax
f012dd8c:	c1 e8 05             	shr    $0x5,%eax
f012dd8f:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dd92:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012dd97:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dd9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dda0:	89 d1                	mov    %edx,%ecx
f012dda2:	0f af c8             	imul   %eax,%ecx
f012dda5:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ddaa:	f7 e1                	mul    %ecx
f012ddac:	c1 ea 05             	shr    $0x5,%edx
f012ddaf:	89 d0                	mov    %edx,%eax
f012ddb1:	c1 e0 02             	shl    $0x2,%eax
f012ddb4:	01 d0                	add    %edx,%eax
f012ddb6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ddbd:	01 d0                	add    %edx,%eax
f012ddbf:	c1 e0 02             	shl    $0x2,%eax
f012ddc2:	29 c1                	sub    %eax,%ecx
f012ddc4:	89 ca                	mov    %ecx,%edx
f012ddc6:	85 d2                	test   %edx,%edx
f012ddc8:	74 03                	je     f012ddcd <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012ddca:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012ddcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ddd0:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012ddd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ddd6:	c1 e0 04             	shl    $0x4,%eax
f012ddd9:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f012ddde:	8b 00                	mov    (%eax),%eax
f012dde0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dde3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dde7:	74 08                	je     f012ddf1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012dde9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012ddec:	8b 40 44             	mov    0x44(%eax),%eax
f012ddef:	eb 05                	jmp    f012ddf6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012ddf1:	b8 00 00 00 00       	mov    $0x0,%eax
f012ddf6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012ddf9:	c1 e2 04             	shl    $0x4,%edx
f012ddfc:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f012de02:	89 02                	mov    %eax,(%edx)
f012de04:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012de07:	c1 e0 04             	shl    $0x4,%eax
f012de0a:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f012de0f:	8b 00                	mov    (%eax),%eax
f012de11:	85 c0                	test   %eax,%eax
f012de13:	0f 85 48 ff ff ff    	jne    f012dd61 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012de19:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012de1d:	0f 85 3e ff ff ff    	jne    f012dd61 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012de23:	ff 45 e8             	incl   -0x18(%ebp)
f012de26:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012de2b:	0f b6 c0             	movzbl %al,%eax
f012de2e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012de31:	0f 8f 0e ff ff ff    	jg     f012dd45 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012de37:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012de3e:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f012de43:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de46:	eb 19                	jmp    f012de61 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012de48:	83 ec 0c             	sub    $0xc,%esp
f012de4b:	ff 75 dc             	pushl  -0x24(%ebp)
f012de4e:	e8 e4 a3 fd ff       	call   f0108237 <env_page_ws_get_size>
f012de53:	83 c4 10             	add    $0x10,%esp
f012de56:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012de59:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f012de5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de61:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012de65:	74 08                	je     f012de6f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012de67:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012de6a:	8b 40 44             	mov    0x44(%eax),%eax
f012de6d:	eb 05                	jmp    f012de74 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012de6f:	b8 00 00 00 00       	mov    $0x0,%eax
f012de74:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f012de79:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f012de7e:	85 c0                	test   %eax,%eax
f012de80:	75 c6                	jne    f012de48 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012de82:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012de86:	75 c0                	jne    f012de48 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012de88:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012de8d:	85 c0                	test   %eax,%eax
f012de8f:	0f 84 ec 00 00 00    	je     f012df81 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012de95:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012de9a:	83 ec 0c             	sub    $0xc,%esp
f012de9d:	50                   	push   %eax
f012de9e:	e8 94 a3 fd ff       	call   f0108237 <env_page_ws_get_size>
f012dea3:	83 c4 10             	add    $0x10,%esp
f012dea6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dea9:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012deae:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012deb4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012deb7:	0f af c2             	imul   %edx,%eax
f012deba:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012debf:	f7 e2                	mul    %edx
f012dec1:	89 d0                	mov    %edx,%eax
f012dec3:	c1 e8 05             	shr    $0x5,%eax
f012dec6:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dec9:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012dece:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012ded4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012ded7:	89 d1                	mov    %edx,%ecx
f012ded9:	0f af c8             	imul   %eax,%ecx
f012dedc:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dee1:	f7 e1                	mul    %ecx
f012dee3:	c1 ea 05             	shr    $0x5,%edx
f012dee6:	89 d0                	mov    %edx,%eax
f012dee8:	c1 e0 02             	shl    $0x2,%eax
f012deeb:	01 d0                	add    %edx,%eax
f012deed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012def4:	01 d0                	add    %edx,%eax
f012def6:	c1 e0 02             	shl    $0x2,%eax
f012def9:	29 c1                	sub    %eax,%ecx
f012defb:	89 ca                	mov    %ecx,%edx
f012defd:	85 d2                	test   %edx,%edx
f012deff:	74 03                	je     f012df04 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012df01:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012df04:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012df07:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012df0a:	eb 75                	jmp    f012df81 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012df0c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012df11:	83 ec 0c             	sub    $0xc,%esp
f012df14:	50                   	push   %eax
f012df15:	e8 1d a3 fd ff       	call   f0108237 <env_page_ws_get_size>
f012df1a:	83 c4 10             	add    $0x10,%esp
f012df1d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012df20:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012df25:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df2b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df2e:	0f af c2             	imul   %edx,%eax
f012df31:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012df36:	f7 e2                	mul    %edx
f012df38:	89 d0                	mov    %edx,%eax
f012df3a:	c1 e8 05             	shr    $0x5,%eax
f012df3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012df40:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012df45:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df4b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df4e:	89 d1                	mov    %edx,%ecx
f012df50:	0f af c8             	imul   %eax,%ecx
f012df53:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012df58:	f7 e1                	mul    %ecx
f012df5a:	c1 ea 05             	shr    $0x5,%edx
f012df5d:	89 d0                	mov    %edx,%eax
f012df5f:	c1 e0 02             	shl    $0x2,%eax
f012df62:	01 d0                	add    %edx,%eax
f012df64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df6b:	01 d0                	add    %edx,%eax
f012df6d:	c1 e0 02             	shl    $0x2,%eax
f012df70:	29 c1                	sub    %eax,%ecx
f012df72:	89 ca                	mov    %ecx,%edx
f012df74:	85 d2                	test   %edx,%edx
f012df76:	74 03                	je     f012df7b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012df78:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012df7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012df7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012df81:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012df84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012df87:	01 c2                	add    %eax,%edx
f012df89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012df8c:	01 d0                	add    %edx,%eax
}
f012df8e:	c9                   	leave  
f012df8f:	c3                   	ret    

f012df90 <schenv>:


void schenv()
{
f012df90:	55                   	push   %ebp
f012df91:	89 e5                	mov    %esp,%ebp
f012df93:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012df96:	c6 05 3c bf 2b f0 00 	movb   $0x0,0xf02bbf3c
	__ne = NULL;
f012df9d:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f012dfa4:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dfa7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dfae:	eb 3a                	jmp    f012dfea <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012dfb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfb3:	c1 e0 04             	shl    $0x4,%eax
f012dfb6:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012dfbb:	83 ec 0c             	sub    $0xc,%esp
f012dfbe:	50                   	push   %eax
f012dfbf:	e8 cb 6d fd ff       	call   f0104d8f <queue_size>
f012dfc4:	83 c4 10             	add    $0x10,%esp
f012dfc7:	85 c0                	test   %eax,%eax
f012dfc9:	74 1c                	je     f012dfe7 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012dfcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfce:	c1 e0 04             	shl    $0x4,%eax
f012dfd1:	05 44 3b 25 f0       	add    $0xf0253b44,%eax
f012dfd6:	8b 00                	mov    (%eax),%eax
f012dfd8:	a3 d4 be 2b f0       	mov    %eax,0xf02bbed4
			__nl = i;
f012dfdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfe0:	a2 3c bf 2b f0       	mov    %al,0xf02bbf3c
			break;
f012dfe5:	eb 10                	jmp    f012dff7 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dfe7:	ff 45 f4             	incl   -0xc(%ebp)
f012dfea:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012dfef:	0f b6 c0             	movzbl %al,%eax
f012dff2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dff5:	7f b9                	jg     f012dfb0 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012dff7:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012dffc:	85 c0                	test   %eax,%eax
f012dffe:	0f 84 86 00 00 00    	je     f012e08a <schenv+0xfa>
	{
		if (__ne != NULL)
f012e004:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e009:	85 c0                	test   %eax,%eax
f012e00b:	74 4b                	je     f012e058 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012e00d:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e012:	0f b6 c0             	movzbl %al,%eax
f012e015:	8d 50 01             	lea    0x1(%eax),%edx
f012e018:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e01d:	0f b6 c0             	movzbl %al,%eax
f012e020:	39 c2                	cmp    %eax,%edx
f012e022:	7d 66                	jge    f012e08a <schenv+0xfa>
			{
				__ne = curenv;
f012e024:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e029:	a3 d4 be 2b f0       	mov    %eax,0xf02bbed4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e02e:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e033:	0f b6 c0             	movzbl %al,%eax
f012e036:	8a 15 14 bf 2b f0    	mov    0xf02bbf14,%dl
f012e03c:	0f b6 d2             	movzbl %dl,%edx
f012e03f:	4a                   	dec    %edx
f012e040:	39 d0                	cmp    %edx,%eax
f012e042:	7d 08                	jge    f012e04c <schenv+0xbc>
f012e044:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e049:	40                   	inc    %eax
f012e04a:	eb 05                	jmp    f012e051 <schenv+0xc1>
f012e04c:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e051:	a2 3c bf 2b f0       	mov    %al,0xf02bbf3c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e056:	eb 32                	jmp    f012e08a <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e058:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e05d:	a3 d4 be 2b f0       	mov    %eax,0xf02bbed4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e062:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e067:	0f b6 c0             	movzbl %al,%eax
f012e06a:	8a 15 14 bf 2b f0    	mov    0xf02bbf14,%dl
f012e070:	0f b6 d2             	movzbl %dl,%edx
f012e073:	4a                   	dec    %edx
f012e074:	39 d0                	cmp    %edx,%eax
f012e076:	7d 08                	jge    f012e080 <schenv+0xf0>
f012e078:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e07d:	40                   	inc    %eax
f012e07e:	eb 05                	jmp    f012e085 <schenv+0xf5>
f012e080:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e085:	a2 3c bf 2b f0       	mov    %al,0xf02bbf3c
		}
	}
}
f012e08a:	90                   	nop
f012e08b:	c9                   	leave  
f012e08c:	c3                   	ret    

f012e08d <chksch>:

void chksch(uint8 onoff)
{
f012e08d:	55                   	push   %ebp
f012e08e:	89 e5                	mov    %esp,%ebp
f012e090:	83 ec 04             	sub    $0x4,%esp
f012e093:	8b 45 08             	mov    0x8(%ebp),%eax
f012e096:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e099:	c7 05 38 bf 2b f0 00 	movl   $0x0,0xf02bbf38
f012e0a0:	00 00 00 
	__ne = NULL;
f012e0a3:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f012e0aa:	00 00 00 
	__pl = 0 ;
f012e0ad:	c6 05 38 3b 25 f0 00 	movb   $0x0,0xf0253b38
	__nl = 0 ;
f012e0b4:	c6 05 3c bf 2b f0 00 	movb   $0x0,0xf02bbf3c
	__chkstatus = onoff;
f012e0bb:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e0be:	a2 d0 be 2b f0       	mov    %al,0xf02bbed0
}
f012e0c3:	90                   	nop
f012e0c4:	c9                   	leave  
f012e0c5:	c3                   	ret    

f012e0c6 <chk1>:
void chk1()
{
f012e0c6:	55                   	push   %ebp
f012e0c7:	89 e5                	mov    %esp,%ebp
f012e0c9:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e0cc:	a0 d0 be 2b f0       	mov    0xf02bbed0,%al
f012e0d1:	84 c0                	test   %al,%al
f012e0d3:	74 2b                	je     f012e100 <chk1+0x3a>
		return ;
	__pe = curenv;
f012e0d5:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e0da:	a3 38 bf 2b f0       	mov    %eax,0xf02bbf38
	__pl = __nl ;
f012e0df:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e0e4:	a2 38 3b 25 f0       	mov    %al,0xf0253b38
	if (__pe == NULL)
f012e0e9:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e0ee:	85 c0                	test   %eax,%eax
f012e0f0:	75 07                	jne    f012e0f9 <chk1+0x33>
	{
		__pl = 0;
f012e0f2:	c6 05 38 3b 25 f0 00 	movb   $0x0,0xf0253b38
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e0f9:	e8 92 fe ff ff       	call   f012df90 <schenv>
f012e0fe:	eb 01                	jmp    f012e101 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e100:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e101:	c9                   	leave  
f012e102:	c3                   	ret    

f012e103 <chk2>:
void chk2(struct Env* __se)
{
f012e103:	55                   	push   %ebp
f012e104:	89 e5                	mov    %esp,%ebp
f012e106:	53                   	push   %ebx
f012e107:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e10a:	a0 d0 be 2b f0       	mov    0xf02bbed0,%al
f012e10f:	84 c0                	test   %al,%al
f012e111:	0f 84 35 02 00 00    	je     f012e34c <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e117:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e11c:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e11f:	74 19                	je     f012e13a <chk2+0x37>
f012e121:	68 d5 ab 13 f0       	push   $0xf013abd5
f012e126:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e12b:	68 f8 00 00 00       	push   $0xf8
f012e130:	68 27 ab 13 f0       	push   $0xf013ab27
f012e135:	e8 2c 21 fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e13a:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e13f:	85 c0                	test   %eax,%eax
f012e141:	0f 84 1b 01 00 00    	je     f012e262 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e147:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e14c:	0f b6 c0             	movzbl %al,%eax
f012e14f:	8a 80 c8 be 2b f0    	mov    -0xfd44138(%eax),%al
f012e155:	0f b6 d8             	movzbl %al,%ebx
f012e158:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e15d:	99                   	cltd   
f012e15e:	f7 fb                	idiv   %ebx
f012e160:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e166:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e16b:	0f b6 c0             	movzbl %al,%eax
f012e16e:	8a 80 c8 be 2b f0    	mov    -0xfd44138(%eax),%al
f012e174:	0f b6 d8             	movzbl %al,%ebx
f012e177:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e17c:	99                   	cltd   
f012e17d:	f7 fb                	idiv   %ebx
f012e17f:	89 c3                	mov    %eax,%ebx
f012e181:	89 c8                	mov    %ecx,%eax
f012e183:	99                   	cltd   
f012e184:	f7 fb                	idiv   %ebx
f012e186:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e18a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e18e:	83 e0 01             	and    $0x1,%eax
f012e191:	66 85 c0             	test   %ax,%ax
f012e194:	74 07                	je     f012e19d <chk2+0x9a>
f012e196:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e19a:	40                   	inc    %eax
f012e19b:	eb 04                	jmp    f012e1a1 <chk2+0x9e>
f012e19d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1a1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e1a5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e1a9:	89 d0                	mov    %edx,%eax
f012e1ab:	c1 e0 02             	shl    $0x2,%eax
f012e1ae:	01 d0                	add    %edx,%eax
f012e1b0:	01 c0                	add    %eax,%eax
f012e1b2:	01 d0                	add    %edx,%eax
f012e1b4:	c1 e0 02             	shl    $0x2,%eax
f012e1b7:	01 d0                	add    %edx,%eax
f012e1b9:	01 c0                	add    %eax,%eax
f012e1bb:	89 c1                	mov    %eax,%ecx
f012e1bd:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e1c2:	f7 e9                	imul   %ecx
f012e1c4:	c1 fa 05             	sar    $0x5,%edx
f012e1c7:	89 c8                	mov    %ecx,%eax
f012e1c9:	c1 f8 1f             	sar    $0x1f,%eax
f012e1cc:	29 c2                	sub    %eax,%edx
f012e1ce:	89 d0                	mov    %edx,%eax
f012e1d0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e1d4:	e8 bc 6a fd ff       	call   f0104c95 <kclock_read_cnt0>
f012e1d9:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e1dd:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e1e1:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e1e5:	76 0a                	jbe    f012e1f1 <chk2+0xee>
f012e1e7:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e1eb:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e1ef:	76 19                	jbe    f012e20a <chk2+0x107>
f012e1f1:	68 f8 ab 13 f0       	push   $0xf013abf8
f012e1f6:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e1fb:	68 02 01 00 00       	push   $0x102
f012e200:	68 27 ab 13 f0       	push   $0xf013ab27
f012e205:	e8 5c 20 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e20a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e211:	eb 42                	jmp    f012e255 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e213:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e218:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e21b:	89 c2                	mov    %eax,%edx
f012e21d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e220:	c1 e0 04             	shl    $0x4,%eax
f012e223:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012e228:	83 ec 08             	sub    $0x8,%esp
f012e22b:	52                   	push   %edx
f012e22c:	50                   	push   %eax
f012e22d:	e8 77 6d fd ff       	call   f0104fa9 <find_env_in_queue>
f012e232:	83 c4 10             	add    $0x10,%esp
f012e235:	85 c0                	test   %eax,%eax
f012e237:	74 19                	je     f012e252 <chk2+0x14f>
f012e239:	68 1c ac 13 f0       	push   $0xf013ac1c
f012e23e:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e243:	68 06 01 00 00       	push   $0x106
f012e248:	68 27 ab 13 f0       	push   $0xf013ab27
f012e24d:	e8 14 20 fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e252:	ff 45 f4             	incl   -0xc(%ebp)
f012e255:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012e25a:	0f b6 c0             	movzbl %al,%eax
f012e25d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e260:	7f b1                	jg     f012e213 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e262:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e267:	85 c0                	test   %eax,%eax
f012e269:	0f 84 de 00 00 00    	je     f012e34d <chk2+0x24a>
f012e26f:	8b 15 38 bf 2b f0    	mov    0xf02bbf38,%edx
f012e275:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e27a:	39 c2                	cmp    %eax,%edx
f012e27c:	0f 84 cb 00 00 00    	je     f012e34d <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e282:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e287:	0f b6 c0             	movzbl %al,%eax
f012e28a:	8a 15 14 bf 2b f0    	mov    0xf02bbf14,%dl
f012e290:	0f b6 d2             	movzbl %dl,%edx
f012e293:	4a                   	dec    %edx
f012e294:	39 d0                	cmp    %edx,%eax
f012e296:	74 08                	je     f012e2a0 <chk2+0x19d>
f012e298:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e29d:	40                   	inc    %eax
f012e29e:	eb 05                	jmp    f012e2a5 <chk2+0x1a2>
f012e2a0:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e2a5:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e2a8:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e2ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e2b0:	89 c2                	mov    %eax,%edx
f012e2b2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e2b6:	c1 e0 04             	shl    $0x4,%eax
f012e2b9:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012e2be:	83 ec 08             	sub    $0x8,%esp
f012e2c1:	52                   	push   %edx
f012e2c2:	50                   	push   %eax
f012e2c3:	e8 e1 6c fd ff       	call   f0104fa9 <find_env_in_queue>
f012e2c8:	83 c4 10             	add    $0x10,%esp
f012e2cb:	85 c0                	test   %eax,%eax
f012e2cd:	75 19                	jne    f012e2e8 <chk2+0x1e5>
f012e2cf:	68 5c ac 13 f0       	push   $0xf013ac5c
f012e2d4:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e2d9:	68 0c 01 00 00       	push   $0x10c
f012e2de:	68 27 ab 13 f0       	push   $0xf013ab27
f012e2e3:	e8 7e 1f fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e2e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e2ef:	eb 4c                	jmp    f012e33d <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e2f1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e2f5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e2f8:	74 3f                	je     f012e339 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e2fa:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e2ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e302:	89 c2                	mov    %eax,%edx
f012e304:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e307:	c1 e0 04             	shl    $0x4,%eax
f012e30a:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012e30f:	83 ec 08             	sub    $0x8,%esp
f012e312:	52                   	push   %edx
f012e313:	50                   	push   %eax
f012e314:	e8 90 6c fd ff       	call   f0104fa9 <find_env_in_queue>
f012e319:	83 c4 10             	add    $0x10,%esp
f012e31c:	85 c0                	test   %eax,%eax
f012e31e:	74 1a                	je     f012e33a <chk2+0x237>
f012e320:	68 a0 ac 13 f0       	push   $0xf013aca0
f012e325:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e32a:	68 10 01 00 00       	push   $0x110
f012e32f:	68 27 ab 13 f0       	push   $0xf013ab27
f012e334:	e8 2d 1f fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e339:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e33a:	ff 45 f0             	incl   -0x10(%ebp)
f012e33d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012e342:	0f b6 c0             	movzbl %al,%eax
f012e345:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e348:	7f a7                	jg     f012e2f1 <chk2+0x1ee>
f012e34a:	eb 01                	jmp    f012e34d <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e34c:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e34d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e350:	c9                   	leave  
f012e351:	c3                   	ret    

f012e352 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e352:	55                   	push   %ebp
f012e353:	89 e5                	mov    %esp,%ebp
f012e355:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e358:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e35f:	eb 40                	jmp    f012e3a1 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e364:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e36a:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e36f:	83 ec 08             	sub    $0x8,%esp
f012e372:	52                   	push   %edx
f012e373:	50                   	push   %eax
f012e374:	e8 92 01 00 00       	call   f012e50b <check_va2pa>
f012e379:	83 c4 10             	add    $0x10,%esp
f012e37c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e37f:	74 19                	je     f012e39a <check_boot_pgdir+0x48>
f012e381:	68 e0 ac 13 f0       	push   $0xf013ace0
f012e386:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e38b:	68 37 01 00 00       	push   $0x137
f012e390:	68 27 ab 13 f0       	push   $0xf013ab27
f012e395:	e8 16 1e fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e39a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e3a1:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e3a8:	75 b7                	jne    f012e361 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e3aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e3b1:	eb 74                	jmp    f012e427 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e3b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e3b6:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e3bc:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e3c1:	83 ec 08             	sub    $0x8,%esp
f012e3c4:	52                   	push   %edx
f012e3c5:	50                   	push   %eax
f012e3c6:	e8 40 01 00 00       	call   f012e50b <check_va2pa>
f012e3cb:	83 c4 10             	add    $0x10,%esp
f012e3ce:	c7 45 f0 00 40 18 f0 	movl   $0xf0184000,-0x10(%ebp)
f012e3d5:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e3dc:	77 17                	ja     f012e3f5 <check_boot_pgdir+0xa3>
f012e3de:	ff 75 f0             	pushl  -0x10(%ebp)
f012e3e1:	68 18 ad 13 f0       	push   $0xf013ad18
f012e3e6:	68 3c 01 00 00       	push   $0x13c
f012e3eb:	68 27 ab 13 f0       	push   $0xf013ab27
f012e3f0:	e8 bb 1d fd ff       	call   f01001b0 <_panic>
f012e3f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e3f8:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e3fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e401:	01 ca                	add    %ecx,%edx
f012e403:	39 d0                	cmp    %edx,%eax
f012e405:	74 19                	je     f012e420 <check_boot_pgdir+0xce>
f012e407:	68 4c ad 13 f0       	push   $0xf013ad4c
f012e40c:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e411:	68 3c 01 00 00       	push   $0x13c
f012e416:	68 27 ab 13 f0       	push   $0xf013ab27
f012e41b:	e8 90 1d fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e420:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e427:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e42e:	76 83                	jbe    f012e3b3 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e430:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e437:	e9 af 00 00 00       	jmp    f012e4eb <check_boot_pgdir+0x199>
		switch (i) {
f012e43c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e43f:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e444:	74 11                	je     f012e457 <check_boot_pgdir+0x105>
f012e446:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e44b:	72 36                	jb     f012e483 <check_boot_pgdir+0x131>
f012e44d:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e452:	83 f8 02             	cmp    $0x2,%eax
f012e455:	77 2c                	ja     f012e483 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e457:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e45c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e45f:	c1 e2 02             	shl    $0x2,%edx
f012e462:	01 d0                	add    %edx,%eax
f012e464:	8b 00                	mov    (%eax),%eax
f012e466:	85 c0                	test   %eax,%eax
f012e468:	75 7a                	jne    f012e4e4 <check_boot_pgdir+0x192>
f012e46a:	68 ce ad 13 f0       	push   $0xf013adce
f012e46f:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e474:	68 47 01 00 00       	push   $0x147
f012e479:	68 27 ab 13 f0       	push   $0xf013ab27
f012e47e:	e8 2d 1d fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e483:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e48a:	76 2c                	jbe    f012e4b8 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e48c:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e491:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e494:	c1 e2 02             	shl    $0x2,%edx
f012e497:	01 d0                	add    %edx,%eax
f012e499:	8b 00                	mov    (%eax),%eax
f012e49b:	85 c0                	test   %eax,%eax
f012e49d:	75 48                	jne    f012e4e7 <check_boot_pgdir+0x195>
f012e49f:	68 ce ad 13 f0       	push   $0xf013adce
f012e4a4:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e4a9:	68 4b 01 00 00       	push   $0x14b
f012e4ae:	68 27 ab 13 f0       	push   $0xf013ab27
f012e4b3:	e8 f8 1c fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e4b8:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e4bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e4c0:	c1 e2 02             	shl    $0x2,%edx
f012e4c3:	01 d0                	add    %edx,%eax
f012e4c5:	8b 00                	mov    (%eax),%eax
f012e4c7:	85 c0                	test   %eax,%eax
f012e4c9:	74 1c                	je     f012e4e7 <check_boot_pgdir+0x195>
f012e4cb:	68 e4 ad 13 f0       	push   $0xf013ade4
f012e4d0:	68 e2 ab 13 f0       	push   $0xf013abe2
f012e4d5:	68 4d 01 00 00       	push   $0x14d
f012e4da:	68 27 ab 13 f0       	push   $0xf013ab27
f012e4df:	e8 cc 1c fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e4e4:	90                   	nop
f012e4e5:	eb 01                	jmp    f012e4e8 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e4e7:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e4e8:	ff 45 f4             	incl   -0xc(%ebp)
f012e4eb:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e4f2:	0f 86 44 ff ff ff    	jbe    f012e43c <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e4f8:	83 ec 0c             	sub    $0xc,%esp
f012e4fb:	68 00 ae 13 f0       	push   $0xf013ae00
f012e500:	e8 2c 29 fd ff       	call   f0100e31 <cprintf>
f012e505:	83 c4 10             	add    $0x10,%esp
}
f012e508:	90                   	nop
f012e509:	c9                   	leave  
f012e50a:	c3                   	ret    

f012e50b <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e50b:	55                   	push   %ebp
f012e50c:	89 e5                	mov    %esp,%ebp
f012e50e:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e511:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e514:	c1 e8 16             	shr    $0x16,%eax
f012e517:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e51e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e521:	01 d0                	add    %edx,%eax
f012e523:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e526:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e529:	8b 00                	mov    (%eax),%eax
f012e52b:	83 e0 01             	and    $0x1,%eax
f012e52e:	85 c0                	test   %eax,%eax
f012e530:	75 0a                	jne    f012e53c <check_va2pa+0x31>
		return ~0;
f012e532:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e537:	e9 87 00 00 00       	jmp    f012e5c3 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e53c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e53f:	8b 00                	mov    (%eax),%eax
f012e541:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e546:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e549:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e54c:	c1 e8 0c             	shr    $0xc,%eax
f012e54f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e552:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f012e557:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e55a:	72 17                	jb     f012e573 <check_va2pa+0x68>
f012e55c:	ff 75 f0             	pushl  -0x10(%ebp)
f012e55f:	68 20 ae 13 f0       	push   $0xf013ae20
f012e564:	68 63 01 00 00       	push   $0x163
f012e569:	68 27 ab 13 f0       	push   $0xf013ab27
f012e56e:	e8 3d 1c fd ff       	call   f01001b0 <_panic>
f012e573:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e576:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e57b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e57e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e581:	c1 e8 0c             	shr    $0xc,%eax
f012e584:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e589:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e590:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e593:	01 d0                	add    %edx,%eax
f012e595:	8b 00                	mov    (%eax),%eax
f012e597:	83 e0 01             	and    $0x1,%eax
f012e59a:	85 c0                	test   %eax,%eax
f012e59c:	75 07                	jne    f012e5a5 <check_va2pa+0x9a>
		return ~0;
f012e59e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e5a3:	eb 1e                	jmp    f012e5c3 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e5a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e5a8:	c1 e8 0c             	shr    $0xc,%eax
f012e5ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e5b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e5b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e5ba:	01 d0                	add    %edx,%eax
f012e5bc:	8b 00                	mov    (%eax),%eax
f012e5be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e5c3:	c9                   	leave  
f012e5c4:	c3                   	ret    

f012e5c5 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e5c5:	55                   	push   %ebp
f012e5c6:	89 e5                	mov    %esp,%ebp
f012e5c8:	53                   	push   %ebx
f012e5c9:	83 ec 14             	sub    $0x14,%esp
f012e5cc:	8b 45 10             	mov    0x10(%ebp),%eax
f012e5cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e5d2:	8b 45 14             	mov    0x14(%ebp),%eax
f012e5d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e5d8:	8b 45 18             	mov    0x18(%ebp),%eax
f012e5db:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5e0:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e5e3:	77 55                	ja     f012e63a <printnum+0x75>
f012e5e5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e5e8:	72 05                	jb     f012e5ef <printnum+0x2a>
f012e5ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e5ed:	77 4b                	ja     f012e63a <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e5ef:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e5f2:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e5f5:	8b 45 18             	mov    0x18(%ebp),%eax
f012e5f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5fd:	52                   	push   %edx
f012e5fe:	50                   	push   %eax
f012e5ff:	ff 75 f4             	pushl  -0xc(%ebp)
f012e602:	ff 75 f0             	pushl  -0x10(%ebp)
f012e605:	e8 5a 15 00 00       	call   f012fb64 <__udivdi3>
f012e60a:	83 c4 10             	add    $0x10,%esp
f012e60d:	83 ec 04             	sub    $0x4,%esp
f012e610:	ff 75 20             	pushl  0x20(%ebp)
f012e613:	53                   	push   %ebx
f012e614:	ff 75 18             	pushl  0x18(%ebp)
f012e617:	52                   	push   %edx
f012e618:	50                   	push   %eax
f012e619:	ff 75 0c             	pushl  0xc(%ebp)
f012e61c:	ff 75 08             	pushl  0x8(%ebp)
f012e61f:	e8 a1 ff ff ff       	call   f012e5c5 <printnum>
f012e624:	83 c4 20             	add    $0x20,%esp
f012e627:	eb 1a                	jmp    f012e643 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e629:	83 ec 08             	sub    $0x8,%esp
f012e62c:	ff 75 0c             	pushl  0xc(%ebp)
f012e62f:	ff 75 20             	pushl  0x20(%ebp)
f012e632:	8b 45 08             	mov    0x8(%ebp),%eax
f012e635:	ff d0                	call   *%eax
f012e637:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e63a:	ff 4d 1c             	decl   0x1c(%ebp)
f012e63d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e641:	7f e6                	jg     f012e629 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e643:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e646:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e64b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e64e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e651:	53                   	push   %ebx
f012e652:	51                   	push   %ecx
f012e653:	52                   	push   %edx
f012e654:	50                   	push   %eax
f012e655:	e8 1a 16 00 00       	call   f012fc74 <__umoddi3>
f012e65a:	83 c4 10             	add    $0x10,%esp
f012e65d:	05 74 b0 13 f0       	add    $0xf013b074,%eax
f012e662:	8a 00                	mov    (%eax),%al
f012e664:	0f be c0             	movsbl %al,%eax
f012e667:	83 ec 08             	sub    $0x8,%esp
f012e66a:	ff 75 0c             	pushl  0xc(%ebp)
f012e66d:	50                   	push   %eax
f012e66e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e671:	ff d0                	call   *%eax
f012e673:	83 c4 10             	add    $0x10,%esp
}
f012e676:	90                   	nop
f012e677:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e67a:	c9                   	leave  
f012e67b:	c3                   	ret    

f012e67c <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e67c:	55                   	push   %ebp
f012e67d:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e67f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e683:	7e 1c                	jle    f012e6a1 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e685:	8b 45 08             	mov    0x8(%ebp),%eax
f012e688:	8b 00                	mov    (%eax),%eax
f012e68a:	8d 50 08             	lea    0x8(%eax),%edx
f012e68d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e690:	89 10                	mov    %edx,(%eax)
f012e692:	8b 45 08             	mov    0x8(%ebp),%eax
f012e695:	8b 00                	mov    (%eax),%eax
f012e697:	83 e8 08             	sub    $0x8,%eax
f012e69a:	8b 50 04             	mov    0x4(%eax),%edx
f012e69d:	8b 00                	mov    (%eax),%eax
f012e69f:	eb 40                	jmp    f012e6e1 <getuint+0x65>
	else if (lflag)
f012e6a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e6a5:	74 1e                	je     f012e6c5 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e6a7:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6aa:	8b 00                	mov    (%eax),%eax
f012e6ac:	8d 50 04             	lea    0x4(%eax),%edx
f012e6af:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6b2:	89 10                	mov    %edx,(%eax)
f012e6b4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6b7:	8b 00                	mov    (%eax),%eax
f012e6b9:	83 e8 04             	sub    $0x4,%eax
f012e6bc:	8b 00                	mov    (%eax),%eax
f012e6be:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6c3:	eb 1c                	jmp    f012e6e1 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e6c5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6c8:	8b 00                	mov    (%eax),%eax
f012e6ca:	8d 50 04             	lea    0x4(%eax),%edx
f012e6cd:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d0:	89 10                	mov    %edx,(%eax)
f012e6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d5:	8b 00                	mov    (%eax),%eax
f012e6d7:	83 e8 04             	sub    $0x4,%eax
f012e6da:	8b 00                	mov    (%eax),%eax
f012e6dc:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e6e1:	5d                   	pop    %ebp
f012e6e2:	c3                   	ret    

f012e6e3 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e6e3:	55                   	push   %ebp
f012e6e4:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e6e6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e6ea:	7e 1c                	jle    f012e708 <getint+0x25>
		return va_arg(*ap, long long);
f012e6ec:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6ef:	8b 00                	mov    (%eax),%eax
f012e6f1:	8d 50 08             	lea    0x8(%eax),%edx
f012e6f4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6f7:	89 10                	mov    %edx,(%eax)
f012e6f9:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6fc:	8b 00                	mov    (%eax),%eax
f012e6fe:	83 e8 08             	sub    $0x8,%eax
f012e701:	8b 50 04             	mov    0x4(%eax),%edx
f012e704:	8b 00                	mov    (%eax),%eax
f012e706:	eb 38                	jmp    f012e740 <getint+0x5d>
	else if (lflag)
f012e708:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e70c:	74 1a                	je     f012e728 <getint+0x45>
		return va_arg(*ap, long);
f012e70e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e711:	8b 00                	mov    (%eax),%eax
f012e713:	8d 50 04             	lea    0x4(%eax),%edx
f012e716:	8b 45 08             	mov    0x8(%ebp),%eax
f012e719:	89 10                	mov    %edx,(%eax)
f012e71b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e71e:	8b 00                	mov    (%eax),%eax
f012e720:	83 e8 04             	sub    $0x4,%eax
f012e723:	8b 00                	mov    (%eax),%eax
f012e725:	99                   	cltd   
f012e726:	eb 18                	jmp    f012e740 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e728:	8b 45 08             	mov    0x8(%ebp),%eax
f012e72b:	8b 00                	mov    (%eax),%eax
f012e72d:	8d 50 04             	lea    0x4(%eax),%edx
f012e730:	8b 45 08             	mov    0x8(%ebp),%eax
f012e733:	89 10                	mov    %edx,(%eax)
f012e735:	8b 45 08             	mov    0x8(%ebp),%eax
f012e738:	8b 00                	mov    (%eax),%eax
f012e73a:	83 e8 04             	sub    $0x4,%eax
f012e73d:	8b 00                	mov    (%eax),%eax
f012e73f:	99                   	cltd   
}
f012e740:	5d                   	pop    %ebp
f012e741:	c3                   	ret    

f012e742 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e742:	55                   	push   %ebp
f012e743:	89 e5                	mov    %esp,%ebp
f012e745:	56                   	push   %esi
f012e746:	53                   	push   %ebx
f012e747:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e74a:	eb 17                	jmp    f012e763 <vprintfmt+0x21>
			if (ch == '\0')
f012e74c:	85 db                	test   %ebx,%ebx
f012e74e:	0f 84 af 03 00 00    	je     f012eb03 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e754:	83 ec 08             	sub    $0x8,%esp
f012e757:	ff 75 0c             	pushl  0xc(%ebp)
f012e75a:	53                   	push   %ebx
f012e75b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e75e:	ff d0                	call   *%eax
f012e760:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e763:	8b 45 10             	mov    0x10(%ebp),%eax
f012e766:	8d 50 01             	lea    0x1(%eax),%edx
f012e769:	89 55 10             	mov    %edx,0x10(%ebp)
f012e76c:	8a 00                	mov    (%eax),%al
f012e76e:	0f b6 d8             	movzbl %al,%ebx
f012e771:	83 fb 25             	cmp    $0x25,%ebx
f012e774:	75 d6                	jne    f012e74c <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e776:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e77a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e781:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e788:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e78f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e796:	8b 45 10             	mov    0x10(%ebp),%eax
f012e799:	8d 50 01             	lea    0x1(%eax),%edx
f012e79c:	89 55 10             	mov    %edx,0x10(%ebp)
f012e79f:	8a 00                	mov    (%eax),%al
f012e7a1:	0f b6 d8             	movzbl %al,%ebx
f012e7a4:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e7a7:	83 f8 55             	cmp    $0x55,%eax
f012e7aa:	0f 87 2b 03 00 00    	ja     f012eadb <vprintfmt+0x399>
f012e7b0:	8b 04 85 98 b0 13 f0 	mov    -0xfec4f68(,%eax,4),%eax
f012e7b7:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e7b9:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e7bd:	eb d7                	jmp    f012e796 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e7bf:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e7c3:	eb d1                	jmp    f012e796 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e7c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e7cc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e7cf:	89 d0                	mov    %edx,%eax
f012e7d1:	c1 e0 02             	shl    $0x2,%eax
f012e7d4:	01 d0                	add    %edx,%eax
f012e7d6:	01 c0                	add    %eax,%eax
f012e7d8:	01 d8                	add    %ebx,%eax
f012e7da:	83 e8 30             	sub    $0x30,%eax
f012e7dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e7e0:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7e3:	8a 00                	mov    (%eax),%al
f012e7e5:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e7e8:	83 fb 2f             	cmp    $0x2f,%ebx
f012e7eb:	7e 3e                	jle    f012e82b <vprintfmt+0xe9>
f012e7ed:	83 fb 39             	cmp    $0x39,%ebx
f012e7f0:	7f 39                	jg     f012e82b <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e7f2:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012e7f5:	eb d5                	jmp    f012e7cc <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012e7f7:	8b 45 14             	mov    0x14(%ebp),%eax
f012e7fa:	83 c0 04             	add    $0x4,%eax
f012e7fd:	89 45 14             	mov    %eax,0x14(%ebp)
f012e800:	8b 45 14             	mov    0x14(%ebp),%eax
f012e803:	83 e8 04             	sub    $0x4,%eax
f012e806:	8b 00                	mov    (%eax),%eax
f012e808:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012e80b:	eb 1f                	jmp    f012e82c <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012e80d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e811:	79 83                	jns    f012e796 <vprintfmt+0x54>
				width = 0;
f012e813:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012e81a:	e9 77 ff ff ff       	jmp    f012e796 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012e81f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012e826:	e9 6b ff ff ff       	jmp    f012e796 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012e82b:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012e82c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e830:	0f 89 60 ff ff ff    	jns    f012e796 <vprintfmt+0x54>
				width = precision, precision = -1;
f012e836:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e839:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e83c:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012e843:	e9 4e ff ff ff       	jmp    f012e796 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012e848:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012e84b:	e9 46 ff ff ff       	jmp    f012e796 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012e850:	8b 45 14             	mov    0x14(%ebp),%eax
f012e853:	83 c0 04             	add    $0x4,%eax
f012e856:	89 45 14             	mov    %eax,0x14(%ebp)
f012e859:	8b 45 14             	mov    0x14(%ebp),%eax
f012e85c:	83 e8 04             	sub    $0x4,%eax
f012e85f:	8b 00                	mov    (%eax),%eax
f012e861:	83 ec 08             	sub    $0x8,%esp
f012e864:	ff 75 0c             	pushl  0xc(%ebp)
f012e867:	50                   	push   %eax
f012e868:	8b 45 08             	mov    0x8(%ebp),%eax
f012e86b:	ff d0                	call   *%eax
f012e86d:	83 c4 10             	add    $0x10,%esp
			break;
f012e870:	e9 89 02 00 00       	jmp    f012eafe <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012e875:	8b 45 14             	mov    0x14(%ebp),%eax
f012e878:	83 c0 04             	add    $0x4,%eax
f012e87b:	89 45 14             	mov    %eax,0x14(%ebp)
f012e87e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e881:	83 e8 04             	sub    $0x4,%eax
f012e884:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012e886:	85 db                	test   %ebx,%ebx
f012e888:	79 02                	jns    f012e88c <vprintfmt+0x14a>
				err = -err;
f012e88a:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012e88c:	83 fb 64             	cmp    $0x64,%ebx
f012e88f:	7f 0b                	jg     f012e89c <vprintfmt+0x15a>
f012e891:	8b 34 9d e0 ae 13 f0 	mov    -0xfec5120(,%ebx,4),%esi
f012e898:	85 f6                	test   %esi,%esi
f012e89a:	75 19                	jne    f012e8b5 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012e89c:	53                   	push   %ebx
f012e89d:	68 85 b0 13 f0       	push   $0xf013b085
f012e8a2:	ff 75 0c             	pushl  0xc(%ebp)
f012e8a5:	ff 75 08             	pushl  0x8(%ebp)
f012e8a8:	e8 5e 02 00 00       	call   f012eb0b <printfmt>
f012e8ad:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012e8b0:	e9 49 02 00 00       	jmp    f012eafe <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012e8b5:	56                   	push   %esi
f012e8b6:	68 8e b0 13 f0       	push   $0xf013b08e
f012e8bb:	ff 75 0c             	pushl  0xc(%ebp)
f012e8be:	ff 75 08             	pushl  0x8(%ebp)
f012e8c1:	e8 45 02 00 00       	call   f012eb0b <printfmt>
f012e8c6:	83 c4 10             	add    $0x10,%esp
			break;
f012e8c9:	e9 30 02 00 00       	jmp    f012eafe <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012e8ce:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8d1:	83 c0 04             	add    $0x4,%eax
f012e8d4:	89 45 14             	mov    %eax,0x14(%ebp)
f012e8d7:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8da:	83 e8 04             	sub    $0x4,%eax
f012e8dd:	8b 30                	mov    (%eax),%esi
f012e8df:	85 f6                	test   %esi,%esi
f012e8e1:	75 05                	jne    f012e8e8 <vprintfmt+0x1a6>
				p = "(null)";
f012e8e3:	be 91 b0 13 f0       	mov    $0xf013b091,%esi
			if (width > 0 && padc != '-')
f012e8e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e8ec:	7e 6d                	jle    f012e95b <vprintfmt+0x219>
f012e8ee:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012e8f2:	74 67                	je     f012e95b <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012e8f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e8f7:	83 ec 08             	sub    $0x8,%esp
f012e8fa:	50                   	push   %eax
f012e8fb:	56                   	push   %esi
f012e8fc:	e8 12 05 00 00       	call   f012ee13 <strnlen>
f012e901:	83 c4 10             	add    $0x10,%esp
f012e904:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012e907:	eb 16                	jmp    f012e91f <vprintfmt+0x1dd>
					putch(padc, putdat);
f012e909:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012e90d:	83 ec 08             	sub    $0x8,%esp
f012e910:	ff 75 0c             	pushl  0xc(%ebp)
f012e913:	50                   	push   %eax
f012e914:	8b 45 08             	mov    0x8(%ebp),%eax
f012e917:	ff d0                	call   *%eax
f012e919:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012e91c:	ff 4d e4             	decl   -0x1c(%ebp)
f012e91f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e923:	7f e4                	jg     f012e909 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e925:	eb 34                	jmp    f012e95b <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012e927:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e92b:	74 1c                	je     f012e949 <vprintfmt+0x207>
f012e92d:	83 fb 1f             	cmp    $0x1f,%ebx
f012e930:	7e 05                	jle    f012e937 <vprintfmt+0x1f5>
f012e932:	83 fb 7e             	cmp    $0x7e,%ebx
f012e935:	7e 12                	jle    f012e949 <vprintfmt+0x207>
					putch('?', putdat);
f012e937:	83 ec 08             	sub    $0x8,%esp
f012e93a:	ff 75 0c             	pushl  0xc(%ebp)
f012e93d:	6a 3f                	push   $0x3f
f012e93f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e942:	ff d0                	call   *%eax
f012e944:	83 c4 10             	add    $0x10,%esp
f012e947:	eb 0f                	jmp    f012e958 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012e949:	83 ec 08             	sub    $0x8,%esp
f012e94c:	ff 75 0c             	pushl  0xc(%ebp)
f012e94f:	53                   	push   %ebx
f012e950:	8b 45 08             	mov    0x8(%ebp),%eax
f012e953:	ff d0                	call   *%eax
f012e955:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e958:	ff 4d e4             	decl   -0x1c(%ebp)
f012e95b:	89 f0                	mov    %esi,%eax
f012e95d:	8d 70 01             	lea    0x1(%eax),%esi
f012e960:	8a 00                	mov    (%eax),%al
f012e962:	0f be d8             	movsbl %al,%ebx
f012e965:	85 db                	test   %ebx,%ebx
f012e967:	74 24                	je     f012e98d <vprintfmt+0x24b>
f012e969:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e96d:	78 b8                	js     f012e927 <vprintfmt+0x1e5>
f012e96f:	ff 4d e0             	decl   -0x20(%ebp)
f012e972:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e976:	79 af                	jns    f012e927 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e978:	eb 13                	jmp    f012e98d <vprintfmt+0x24b>
				putch(' ', putdat);
f012e97a:	83 ec 08             	sub    $0x8,%esp
f012e97d:	ff 75 0c             	pushl  0xc(%ebp)
f012e980:	6a 20                	push   $0x20
f012e982:	8b 45 08             	mov    0x8(%ebp),%eax
f012e985:	ff d0                	call   *%eax
f012e987:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e98a:	ff 4d e4             	decl   -0x1c(%ebp)
f012e98d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e991:	7f e7                	jg     f012e97a <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012e993:	e9 66 01 00 00       	jmp    f012eafe <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012e998:	83 ec 08             	sub    $0x8,%esp
f012e99b:	ff 75 e8             	pushl  -0x18(%ebp)
f012e99e:	8d 45 14             	lea    0x14(%ebp),%eax
f012e9a1:	50                   	push   %eax
f012e9a2:	e8 3c fd ff ff       	call   f012e6e3 <getint>
f012e9a7:	83 c4 10             	add    $0x10,%esp
f012e9aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9ad:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012e9b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e9b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e9b6:	85 d2                	test   %edx,%edx
f012e9b8:	79 23                	jns    f012e9dd <vprintfmt+0x29b>
				putch('-', putdat);
f012e9ba:	83 ec 08             	sub    $0x8,%esp
f012e9bd:	ff 75 0c             	pushl  0xc(%ebp)
f012e9c0:	6a 2d                	push   $0x2d
f012e9c2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9c5:	ff d0                	call   *%eax
f012e9c7:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012e9ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e9cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e9d0:	f7 d8                	neg    %eax
f012e9d2:	83 d2 00             	adc    $0x0,%edx
f012e9d5:	f7 da                	neg    %edx
f012e9d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9da:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012e9dd:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e9e4:	e9 bc 00 00 00       	jmp    f012eaa5 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012e9e9:	83 ec 08             	sub    $0x8,%esp
f012e9ec:	ff 75 e8             	pushl  -0x18(%ebp)
f012e9ef:	8d 45 14             	lea    0x14(%ebp),%eax
f012e9f2:	50                   	push   %eax
f012e9f3:	e8 84 fc ff ff       	call   f012e67c <getuint>
f012e9f8:	83 c4 10             	add    $0x10,%esp
f012e9fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9fe:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012ea01:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ea08:	e9 98 00 00 00       	jmp    f012eaa5 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012ea0d:	83 ec 08             	sub    $0x8,%esp
f012ea10:	ff 75 0c             	pushl  0xc(%ebp)
f012ea13:	6a 58                	push   $0x58
f012ea15:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea18:	ff d0                	call   *%eax
f012ea1a:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ea1d:	83 ec 08             	sub    $0x8,%esp
f012ea20:	ff 75 0c             	pushl  0xc(%ebp)
f012ea23:	6a 58                	push   $0x58
f012ea25:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea28:	ff d0                	call   *%eax
f012ea2a:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ea2d:	83 ec 08             	sub    $0x8,%esp
f012ea30:	ff 75 0c             	pushl  0xc(%ebp)
f012ea33:	6a 58                	push   $0x58
f012ea35:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea38:	ff d0                	call   *%eax
f012ea3a:	83 c4 10             	add    $0x10,%esp
			break;
f012ea3d:	e9 bc 00 00 00       	jmp    f012eafe <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012ea42:	83 ec 08             	sub    $0x8,%esp
f012ea45:	ff 75 0c             	pushl  0xc(%ebp)
f012ea48:	6a 30                	push   $0x30
f012ea4a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea4d:	ff d0                	call   *%eax
f012ea4f:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012ea52:	83 ec 08             	sub    $0x8,%esp
f012ea55:	ff 75 0c             	pushl  0xc(%ebp)
f012ea58:	6a 78                	push   $0x78
f012ea5a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea5d:	ff d0                	call   *%eax
f012ea5f:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012ea62:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea65:	83 c0 04             	add    $0x4,%eax
f012ea68:	89 45 14             	mov    %eax,0x14(%ebp)
f012ea6b:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea6e:	83 e8 04             	sub    $0x4,%eax
f012ea71:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012ea73:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012ea7d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012ea84:	eb 1f                	jmp    f012eaa5 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012ea86:	83 ec 08             	sub    $0x8,%esp
f012ea89:	ff 75 e8             	pushl  -0x18(%ebp)
f012ea8c:	8d 45 14             	lea    0x14(%ebp),%eax
f012ea8f:	50                   	push   %eax
f012ea90:	e8 e7 fb ff ff       	call   f012e67c <getuint>
f012ea95:	83 c4 10             	add    $0x10,%esp
f012ea98:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea9b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012ea9e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012eaa5:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012eaa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012eaac:	83 ec 04             	sub    $0x4,%esp
f012eaaf:	52                   	push   %edx
f012eab0:	ff 75 e4             	pushl  -0x1c(%ebp)
f012eab3:	50                   	push   %eax
f012eab4:	ff 75 f4             	pushl  -0xc(%ebp)
f012eab7:	ff 75 f0             	pushl  -0x10(%ebp)
f012eaba:	ff 75 0c             	pushl  0xc(%ebp)
f012eabd:	ff 75 08             	pushl  0x8(%ebp)
f012eac0:	e8 00 fb ff ff       	call   f012e5c5 <printnum>
f012eac5:	83 c4 20             	add    $0x20,%esp
			break;
f012eac8:	eb 34                	jmp    f012eafe <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012eaca:	83 ec 08             	sub    $0x8,%esp
f012eacd:	ff 75 0c             	pushl  0xc(%ebp)
f012ead0:	53                   	push   %ebx
f012ead1:	8b 45 08             	mov    0x8(%ebp),%eax
f012ead4:	ff d0                	call   *%eax
f012ead6:	83 c4 10             	add    $0x10,%esp
			break;
f012ead9:	eb 23                	jmp    f012eafe <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012eadb:	83 ec 08             	sub    $0x8,%esp
f012eade:	ff 75 0c             	pushl  0xc(%ebp)
f012eae1:	6a 25                	push   $0x25
f012eae3:	8b 45 08             	mov    0x8(%ebp),%eax
f012eae6:	ff d0                	call   *%eax
f012eae8:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012eaeb:	ff 4d 10             	decl   0x10(%ebp)
f012eaee:	eb 03                	jmp    f012eaf3 <vprintfmt+0x3b1>
f012eaf0:	ff 4d 10             	decl   0x10(%ebp)
f012eaf3:	8b 45 10             	mov    0x10(%ebp),%eax
f012eaf6:	48                   	dec    %eax
f012eaf7:	8a 00                	mov    (%eax),%al
f012eaf9:	3c 25                	cmp    $0x25,%al
f012eafb:	75 f3                	jne    f012eaf0 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012eafd:	90                   	nop
		}
	}
f012eafe:	e9 47 fc ff ff       	jmp    f012e74a <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012eb03:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012eb04:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012eb07:	5b                   	pop    %ebx
f012eb08:	5e                   	pop    %esi
f012eb09:	5d                   	pop    %ebp
f012eb0a:	c3                   	ret    

f012eb0b <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012eb0b:	55                   	push   %ebp
f012eb0c:	89 e5                	mov    %esp,%ebp
f012eb0e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012eb11:	8d 45 10             	lea    0x10(%ebp),%eax
f012eb14:	83 c0 04             	add    $0x4,%eax
f012eb17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012eb1a:	8b 45 10             	mov    0x10(%ebp),%eax
f012eb1d:	ff 75 f4             	pushl  -0xc(%ebp)
f012eb20:	50                   	push   %eax
f012eb21:	ff 75 0c             	pushl  0xc(%ebp)
f012eb24:	ff 75 08             	pushl  0x8(%ebp)
f012eb27:	e8 16 fc ff ff       	call   f012e742 <vprintfmt>
f012eb2c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012eb2f:	90                   	nop
f012eb30:	c9                   	leave  
f012eb31:	c3                   	ret    

f012eb32 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012eb32:	55                   	push   %ebp
f012eb33:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012eb35:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb38:	8b 40 08             	mov    0x8(%eax),%eax
f012eb3b:	8d 50 01             	lea    0x1(%eax),%edx
f012eb3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb41:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012eb44:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb47:	8b 10                	mov    (%eax),%edx
f012eb49:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb4c:	8b 40 04             	mov    0x4(%eax),%eax
f012eb4f:	39 c2                	cmp    %eax,%edx
f012eb51:	73 12                	jae    f012eb65 <sprintputch+0x33>
		*b->buf++ = ch;
f012eb53:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb56:	8b 00                	mov    (%eax),%eax
f012eb58:	8d 48 01             	lea    0x1(%eax),%ecx
f012eb5b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eb5e:	89 0a                	mov    %ecx,(%edx)
f012eb60:	8b 55 08             	mov    0x8(%ebp),%edx
f012eb63:	88 10                	mov    %dl,(%eax)
}
f012eb65:	90                   	nop
f012eb66:	5d                   	pop    %ebp
f012eb67:	c3                   	ret    

f012eb68 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012eb68:	55                   	push   %ebp
f012eb69:	89 e5                	mov    %esp,%ebp
f012eb6b:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012eb6e:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb71:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012eb74:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb77:	8d 50 ff             	lea    -0x1(%eax),%edx
f012eb7a:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb7d:	01 d0                	add    %edx,%eax
f012eb7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012eb82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012eb89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012eb8d:	74 06                	je     f012eb95 <vsnprintf+0x2d>
f012eb8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012eb93:	7f 07                	jg     f012eb9c <vsnprintf+0x34>
		return -E_INVAL;
f012eb95:	b8 03 00 00 00       	mov    $0x3,%eax
f012eb9a:	eb 20                	jmp    f012ebbc <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012eb9c:	ff 75 14             	pushl  0x14(%ebp)
f012eb9f:	ff 75 10             	pushl  0x10(%ebp)
f012eba2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012eba5:	50                   	push   %eax
f012eba6:	68 32 eb 12 f0       	push   $0xf012eb32
f012ebab:	e8 92 fb ff ff       	call   f012e742 <vprintfmt>
f012ebb0:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012ebb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ebb6:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012ebb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012ebbc:	c9                   	leave  
f012ebbd:	c3                   	ret    

f012ebbe <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012ebbe:	55                   	push   %ebp
f012ebbf:	89 e5                	mov    %esp,%ebp
f012ebc1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012ebc4:	8d 45 10             	lea    0x10(%ebp),%eax
f012ebc7:	83 c0 04             	add    $0x4,%eax
f012ebca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012ebcd:	8b 45 10             	mov    0x10(%ebp),%eax
f012ebd0:	ff 75 f4             	pushl  -0xc(%ebp)
f012ebd3:	50                   	push   %eax
f012ebd4:	ff 75 0c             	pushl  0xc(%ebp)
f012ebd7:	ff 75 08             	pushl  0x8(%ebp)
f012ebda:	e8 89 ff ff ff       	call   f012eb68 <vsnprintf>
f012ebdf:	83 c4 10             	add    $0x10,%esp
f012ebe2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012ebe5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012ebe8:	c9                   	leave  
f012ebe9:	c3                   	ret    

f012ebea <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012ebea:	55                   	push   %ebp
f012ebeb:	89 e5                	mov    %esp,%ebp
f012ebed:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012ebf0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ebf4:	74 13                	je     f012ec09 <readline+0x1f>
		cprintf("%s", prompt);
f012ebf6:	83 ec 08             	sub    $0x8,%esp
f012ebf9:	ff 75 08             	pushl  0x8(%ebp)
f012ebfc:	68 f0 b1 13 f0       	push   $0xf013b1f0
f012ec01:	e8 2b 22 fd ff       	call   f0100e31 <cprintf>
f012ec06:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ec09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ec10:	83 ec 0c             	sub    $0xc,%esp
f012ec13:	6a 00                	push   $0x0
f012ec15:	e8 c0 21 fd ff       	call   f0100dda <iscons>
f012ec1a:	83 c4 10             	add    $0x10,%esp
f012ec1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ec20:	e8 9c 21 fd ff       	call   f0100dc1 <getchar>
f012ec25:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ec28:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ec2c:	79 22                	jns    f012ec50 <readline+0x66>
			if (c != -E_EOF)
f012ec2e:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ec32:	0f 84 ad 00 00 00    	je     f012ece5 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012ec38:	83 ec 08             	sub    $0x8,%esp
f012ec3b:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec3e:	68 f3 b1 13 f0       	push   $0xf013b1f3
f012ec43:	e8 e9 21 fd ff       	call   f0100e31 <cprintf>
f012ec48:	83 c4 10             	add    $0x10,%esp
			return;
f012ec4b:	e9 95 00 00 00       	jmp    f012ece5 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ec50:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ec54:	7e 34                	jle    f012ec8a <readline+0xa0>
f012ec56:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ec5d:	7f 2b                	jg     f012ec8a <readline+0xa0>
			if (echoing)
f012ec5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ec63:	74 0e                	je     f012ec73 <readline+0x89>
				cputchar(c);
f012ec65:	83 ec 0c             	sub    $0xc,%esp
f012ec68:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec6b:	e8 3a 21 fd ff       	call   f0100daa <cputchar>
f012ec70:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ec73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ec76:	8d 50 01             	lea    0x1(%eax),%edx
f012ec79:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ec7c:	89 c2                	mov    %eax,%edx
f012ec7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec81:	01 d0                	add    %edx,%eax
f012ec83:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ec86:	88 10                	mov    %dl,(%eax)
f012ec88:	eb 56                	jmp    f012ece0 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012ec8a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ec8e:	75 1f                	jne    f012ecaf <readline+0xc5>
f012ec90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ec94:	7e 19                	jle    f012ecaf <readline+0xc5>
			if (echoing)
f012ec96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ec9a:	74 0e                	je     f012ecaa <readline+0xc0>
				cputchar(c);
f012ec9c:	83 ec 0c             	sub    $0xc,%esp
f012ec9f:	ff 75 ec             	pushl  -0x14(%ebp)
f012eca2:	e8 03 21 fd ff       	call   f0100daa <cputchar>
f012eca7:	83 c4 10             	add    $0x10,%esp

			i--;
f012ecaa:	ff 4d f4             	decl   -0xc(%ebp)
f012ecad:	eb 31                	jmp    f012ece0 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012ecaf:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ecb3:	74 0a                	je     f012ecbf <readline+0xd5>
f012ecb5:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ecb9:	0f 85 61 ff ff ff    	jne    f012ec20 <readline+0x36>
			if (echoing)
f012ecbf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ecc3:	74 0e                	je     f012ecd3 <readline+0xe9>
				cputchar(c);
f012ecc5:	83 ec 0c             	sub    $0xc,%esp
f012ecc8:	ff 75 ec             	pushl  -0x14(%ebp)
f012eccb:	e8 da 20 fd ff       	call   f0100daa <cputchar>
f012ecd0:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ecd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ecd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ecd9:	01 d0                	add    %edx,%eax
f012ecdb:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ecde:	eb 06                	jmp    f012ece6 <readline+0xfc>
		}
	}
f012ece0:	e9 3b ff ff ff       	jmp    f012ec20 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012ece5:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012ece6:	c9                   	leave  
f012ece7:	c3                   	ret    

f012ece8 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012ece8:	55                   	push   %ebp
f012ece9:	89 e5                	mov    %esp,%ebp
f012eceb:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ecee:	e8 51 de fd ff       	call   f010cb44 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ecf3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ecf7:	74 13                	je     f012ed0c <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ecf9:	83 ec 08             	sub    $0x8,%esp
f012ecfc:	ff 75 08             	pushl  0x8(%ebp)
f012ecff:	68 f0 b1 13 f0       	push   $0xf013b1f0
f012ed04:	e8 28 21 fd ff       	call   f0100e31 <cprintf>
f012ed09:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ed0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ed13:	83 ec 0c             	sub    $0xc,%esp
f012ed16:	6a 00                	push   $0x0
f012ed18:	e8 bd 20 fd ff       	call   f0100dda <iscons>
f012ed1d:	83 c4 10             	add    $0x10,%esp
f012ed20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ed23:	e8 99 20 fd ff       	call   f0100dc1 <getchar>
f012ed28:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ed2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ed2f:	79 23                	jns    f012ed54 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ed31:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ed35:	74 13                	je     f012ed4a <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ed37:	83 ec 08             	sub    $0x8,%esp
f012ed3a:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed3d:	68 f3 b1 13 f0       	push   $0xf013b1f3
f012ed42:	e8 ea 20 fd ff       	call   f0100e31 <cprintf>
f012ed47:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012ed4a:	e8 0f de fd ff       	call   f010cb5e <sys_enable_interrupt>
			return;
f012ed4f:	e9 9a 00 00 00       	jmp    f012edee <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ed54:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ed58:	7e 34                	jle    f012ed8e <atomic_readline+0xa6>
f012ed5a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ed61:	7f 2b                	jg     f012ed8e <atomic_readline+0xa6>
			if (echoing)
f012ed63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed67:	74 0e                	je     f012ed77 <atomic_readline+0x8f>
				cputchar(c);
f012ed69:	83 ec 0c             	sub    $0xc,%esp
f012ed6c:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed6f:	e8 36 20 fd ff       	call   f0100daa <cputchar>
f012ed74:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ed77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ed7a:	8d 50 01             	lea    0x1(%eax),%edx
f012ed7d:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ed80:	89 c2                	mov    %eax,%edx
f012ed82:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed85:	01 d0                	add    %edx,%eax
f012ed87:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ed8a:	88 10                	mov    %dl,(%eax)
f012ed8c:	eb 5b                	jmp    f012ede9 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012ed8e:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ed92:	75 1f                	jne    f012edb3 <atomic_readline+0xcb>
f012ed94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ed98:	7e 19                	jle    f012edb3 <atomic_readline+0xcb>
			if (echoing)
f012ed9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed9e:	74 0e                	je     f012edae <atomic_readline+0xc6>
				cputchar(c);
f012eda0:	83 ec 0c             	sub    $0xc,%esp
f012eda3:	ff 75 ec             	pushl  -0x14(%ebp)
f012eda6:	e8 ff 1f fd ff       	call   f0100daa <cputchar>
f012edab:	83 c4 10             	add    $0x10,%esp
			i--;
f012edae:	ff 4d f4             	decl   -0xc(%ebp)
f012edb1:	eb 36                	jmp    f012ede9 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012edb3:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012edb7:	74 0a                	je     f012edc3 <atomic_readline+0xdb>
f012edb9:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012edbd:	0f 85 60 ff ff ff    	jne    f012ed23 <atomic_readline+0x3b>
			if (echoing)
f012edc3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012edc7:	74 0e                	je     f012edd7 <atomic_readline+0xef>
				cputchar(c);
f012edc9:	83 ec 0c             	sub    $0xc,%esp
f012edcc:	ff 75 ec             	pushl  -0x14(%ebp)
f012edcf:	e8 d6 1f fd ff       	call   f0100daa <cputchar>
f012edd4:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012edd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012edda:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eddd:	01 d0                	add    %edx,%eax
f012eddf:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012ede2:	e8 77 dd fd ff       	call   f010cb5e <sys_enable_interrupt>
			return;
f012ede7:	eb 05                	jmp    f012edee <atomic_readline+0x106>
		}
	}
f012ede9:	e9 35 ff ff ff       	jmp    f012ed23 <atomic_readline+0x3b>
}
f012edee:	c9                   	leave  
f012edef:	c3                   	ret    

f012edf0 <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012edf0:	55                   	push   %ebp
f012edf1:	89 e5                	mov    %esp,%ebp
f012edf3:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012edf6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012edfd:	eb 06                	jmp    f012ee05 <strlen+0x15>
		n++;
f012edff:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012ee02:	ff 45 08             	incl   0x8(%ebp)
f012ee05:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee08:	8a 00                	mov    (%eax),%al
f012ee0a:	84 c0                	test   %al,%al
f012ee0c:	75 f1                	jne    f012edff <strlen+0xf>
		n++;
	return n;
f012ee0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee11:	c9                   	leave  
f012ee12:	c3                   	ret    

f012ee13 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012ee13:	55                   	push   %ebp
f012ee14:	89 e5                	mov    %esp,%ebp
f012ee16:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ee19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee20:	eb 09                	jmp    f012ee2b <strnlen+0x18>
		n++;
f012ee22:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ee25:	ff 45 08             	incl   0x8(%ebp)
f012ee28:	ff 4d 0c             	decl   0xc(%ebp)
f012ee2b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ee2f:	74 09                	je     f012ee3a <strnlen+0x27>
f012ee31:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee34:	8a 00                	mov    (%eax),%al
f012ee36:	84 c0                	test   %al,%al
f012ee38:	75 e8                	jne    f012ee22 <strnlen+0xf>
		n++;
	return n;
f012ee3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee3d:	c9                   	leave  
f012ee3e:	c3                   	ret    

f012ee3f <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012ee3f:	55                   	push   %ebp
f012ee40:	89 e5                	mov    %esp,%ebp
f012ee42:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012ee45:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee48:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012ee4b:	90                   	nop
f012ee4c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee4f:	8d 50 01             	lea    0x1(%eax),%edx
f012ee52:	89 55 08             	mov    %edx,0x8(%ebp)
f012ee55:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee58:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ee5b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012ee5e:	8a 12                	mov    (%edx),%dl
f012ee60:	88 10                	mov    %dl,(%eax)
f012ee62:	8a 00                	mov    (%eax),%al
f012ee64:	84 c0                	test   %al,%al
f012ee66:	75 e4                	jne    f012ee4c <strcpy+0xd>
		/* do nothing */;
	return ret;
f012ee68:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee6b:	c9                   	leave  
f012ee6c:	c3                   	ret    

f012ee6d <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012ee6d:	55                   	push   %ebp
f012ee6e:	89 e5                	mov    %esp,%ebp
f012ee70:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012ee73:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee76:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012ee79:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee80:	eb 1f                	jmp    f012eea1 <strncpy+0x34>
		*dst++ = *src;
f012ee82:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee85:	8d 50 01             	lea    0x1(%eax),%edx
f012ee88:	89 55 08             	mov    %edx,0x8(%ebp)
f012ee8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee8e:	8a 12                	mov    (%edx),%dl
f012ee90:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012ee92:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ee95:	8a 00                	mov    (%eax),%al
f012ee97:	84 c0                	test   %al,%al
f012ee99:	74 03                	je     f012ee9e <strncpy+0x31>
			src++;
f012ee9b:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012ee9e:	ff 45 fc             	incl   -0x4(%ebp)
f012eea1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eea4:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eea7:	72 d9                	jb     f012ee82 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012eea9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012eeac:	c9                   	leave  
f012eead:	c3                   	ret    

f012eeae <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012eeae:	55                   	push   %ebp
f012eeaf:	89 e5                	mov    %esp,%ebp
f012eeb1:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012eeb4:	8b 45 08             	mov    0x8(%ebp),%eax
f012eeb7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012eeba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eebe:	74 30                	je     f012eef0 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012eec0:	eb 16                	jmp    f012eed8 <strlcpy+0x2a>
			*dst++ = *src++;
f012eec2:	8b 45 08             	mov    0x8(%ebp),%eax
f012eec5:	8d 50 01             	lea    0x1(%eax),%edx
f012eec8:	89 55 08             	mov    %edx,0x8(%ebp)
f012eecb:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eece:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eed1:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eed4:	8a 12                	mov    (%edx),%dl
f012eed6:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012eed8:	ff 4d 10             	decl   0x10(%ebp)
f012eedb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eedf:	74 09                	je     f012eeea <strlcpy+0x3c>
f012eee1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eee4:	8a 00                	mov    (%eax),%al
f012eee6:	84 c0                	test   %al,%al
f012eee8:	75 d8                	jne    f012eec2 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012eeea:	8b 45 08             	mov    0x8(%ebp),%eax
f012eeed:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012eef0:	8b 55 08             	mov    0x8(%ebp),%edx
f012eef3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eef6:	29 c2                	sub    %eax,%edx
f012eef8:	89 d0                	mov    %edx,%eax
}
f012eefa:	c9                   	leave  
f012eefb:	c3                   	ret    

f012eefc <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012eefc:	55                   	push   %ebp
f012eefd:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012eeff:	eb 06                	jmp    f012ef07 <strcmp+0xb>
		p++, q++;
f012ef01:	ff 45 08             	incl   0x8(%ebp)
f012ef04:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012ef07:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef0a:	8a 00                	mov    (%eax),%al
f012ef0c:	84 c0                	test   %al,%al
f012ef0e:	74 0e                	je     f012ef1e <strcmp+0x22>
f012ef10:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef13:	8a 10                	mov    (%eax),%dl
f012ef15:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef18:	8a 00                	mov    (%eax),%al
f012ef1a:	38 c2                	cmp    %al,%dl
f012ef1c:	74 e3                	je     f012ef01 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012ef1e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef21:	8a 00                	mov    (%eax),%al
f012ef23:	0f b6 d0             	movzbl %al,%edx
f012ef26:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef29:	8a 00                	mov    (%eax),%al
f012ef2b:	0f b6 c0             	movzbl %al,%eax
f012ef2e:	29 c2                	sub    %eax,%edx
f012ef30:	89 d0                	mov    %edx,%eax
}
f012ef32:	5d                   	pop    %ebp
f012ef33:	c3                   	ret    

f012ef34 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012ef34:	55                   	push   %ebp
f012ef35:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012ef37:	eb 09                	jmp    f012ef42 <strncmp+0xe>
		n--, p++, q++;
f012ef39:	ff 4d 10             	decl   0x10(%ebp)
f012ef3c:	ff 45 08             	incl   0x8(%ebp)
f012ef3f:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012ef42:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef46:	74 17                	je     f012ef5f <strncmp+0x2b>
f012ef48:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef4b:	8a 00                	mov    (%eax),%al
f012ef4d:	84 c0                	test   %al,%al
f012ef4f:	74 0e                	je     f012ef5f <strncmp+0x2b>
f012ef51:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef54:	8a 10                	mov    (%eax),%dl
f012ef56:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef59:	8a 00                	mov    (%eax),%al
f012ef5b:	38 c2                	cmp    %al,%dl
f012ef5d:	74 da                	je     f012ef39 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012ef5f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef63:	75 07                	jne    f012ef6c <strncmp+0x38>
		return 0;
f012ef65:	b8 00 00 00 00       	mov    $0x0,%eax
f012ef6a:	eb 14                	jmp    f012ef80 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012ef6c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef6f:	8a 00                	mov    (%eax),%al
f012ef71:	0f b6 d0             	movzbl %al,%edx
f012ef74:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef77:	8a 00                	mov    (%eax),%al
f012ef79:	0f b6 c0             	movzbl %al,%eax
f012ef7c:	29 c2                	sub    %eax,%edx
f012ef7e:	89 d0                	mov    %edx,%eax
}
f012ef80:	5d                   	pop    %ebp
f012ef81:	c3                   	ret    

f012ef82 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012ef82:	55                   	push   %ebp
f012ef83:	89 e5                	mov    %esp,%ebp
f012ef85:	83 ec 04             	sub    $0x4,%esp
f012ef88:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef8b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ef8e:	eb 12                	jmp    f012efa2 <strchr+0x20>
		if (*s == c)
f012ef90:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef93:	8a 00                	mov    (%eax),%al
f012ef95:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ef98:	75 05                	jne    f012ef9f <strchr+0x1d>
			return (char *) s;
f012ef9a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef9d:	eb 11                	jmp    f012efb0 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012ef9f:	ff 45 08             	incl   0x8(%ebp)
f012efa2:	8b 45 08             	mov    0x8(%ebp),%eax
f012efa5:	8a 00                	mov    (%eax),%al
f012efa7:	84 c0                	test   %al,%al
f012efa9:	75 e5                	jne    f012ef90 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012efab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012efb0:	c9                   	leave  
f012efb1:	c3                   	ret    

f012efb2 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012efb2:	55                   	push   %ebp
f012efb3:	89 e5                	mov    %esp,%ebp
f012efb5:	83 ec 04             	sub    $0x4,%esp
f012efb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efbb:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012efbe:	eb 0d                	jmp    f012efcd <strfind+0x1b>
		if (*s == c)
f012efc0:	8b 45 08             	mov    0x8(%ebp),%eax
f012efc3:	8a 00                	mov    (%eax),%al
f012efc5:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012efc8:	74 0e                	je     f012efd8 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012efca:	ff 45 08             	incl   0x8(%ebp)
f012efcd:	8b 45 08             	mov    0x8(%ebp),%eax
f012efd0:	8a 00                	mov    (%eax),%al
f012efd2:	84 c0                	test   %al,%al
f012efd4:	75 ea                	jne    f012efc0 <strfind+0xe>
f012efd6:	eb 01                	jmp    f012efd9 <strfind+0x27>
		if (*s == c)
			break;
f012efd8:	90                   	nop
	return (char *) s;
f012efd9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012efdc:	c9                   	leave  
f012efdd:	c3                   	ret    

f012efde <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012efde:	55                   	push   %ebp
f012efdf:	89 e5                	mov    %esp,%ebp
f012efe1:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012efe4:	8b 45 08             	mov    0x8(%ebp),%eax
f012efe7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012efea:	8b 45 10             	mov    0x10(%ebp),%eax
f012efed:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012eff0:	eb 0e                	jmp    f012f000 <memset+0x22>
		*p++ = c;
f012eff2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eff5:	8d 50 01             	lea    0x1(%eax),%edx
f012eff8:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012effb:	8b 55 0c             	mov    0xc(%ebp),%edx
f012effe:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012f000:	ff 4d f8             	decl   -0x8(%ebp)
f012f003:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012f007:	79 e9                	jns    f012eff2 <memset+0x14>
		*p++ = c;

	return v;
f012f009:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f00c:	c9                   	leave  
f012f00d:	c3                   	ret    

f012f00e <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012f00e:	55                   	push   %ebp
f012f00f:	89 e5                	mov    %esp,%ebp
f012f011:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f014:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f017:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f01a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f01d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012f020:	eb 16                	jmp    f012f038 <memcpy+0x2a>
		*d++ = *s++;
f012f022:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f025:	8d 50 01             	lea    0x1(%eax),%edx
f012f028:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f02b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f02e:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f031:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f034:	8a 12                	mov    (%edx),%dl
f012f036:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012f038:	8b 45 10             	mov    0x10(%ebp),%eax
f012f03b:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f03e:	89 55 10             	mov    %edx,0x10(%ebp)
f012f041:	85 c0                	test   %eax,%eax
f012f043:	75 dd                	jne    f012f022 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f045:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f048:	c9                   	leave  
f012f049:	c3                   	ret    

f012f04a <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f04a:	55                   	push   %ebp
f012f04b:	89 e5                	mov    %esp,%ebp
f012f04d:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f050:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f053:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f056:	8b 45 08             	mov    0x8(%ebp),%eax
f012f059:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f05c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f05f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f062:	73 50                	jae    f012f0b4 <memmove+0x6a>
f012f064:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f067:	8b 45 10             	mov    0x10(%ebp),%eax
f012f06a:	01 d0                	add    %edx,%eax
f012f06c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f06f:	76 43                	jbe    f012f0b4 <memmove+0x6a>
		s += n;
f012f071:	8b 45 10             	mov    0x10(%ebp),%eax
f012f074:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f077:	8b 45 10             	mov    0x10(%ebp),%eax
f012f07a:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f07d:	eb 10                	jmp    f012f08f <memmove+0x45>
			*--d = *--s;
f012f07f:	ff 4d f8             	decl   -0x8(%ebp)
f012f082:	ff 4d fc             	decl   -0x4(%ebp)
f012f085:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f088:	8a 10                	mov    (%eax),%dl
f012f08a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f08d:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f08f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f092:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f095:	89 55 10             	mov    %edx,0x10(%ebp)
f012f098:	85 c0                	test   %eax,%eax
f012f09a:	75 e3                	jne    f012f07f <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f09c:	eb 23                	jmp    f012f0c1 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f09e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0a1:	8d 50 01             	lea    0x1(%eax),%edx
f012f0a4:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f0a7:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f0aa:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f0ad:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f0b0:	8a 12                	mov    (%edx),%dl
f012f0b2:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f0b4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0b7:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f0ba:	89 55 10             	mov    %edx,0x10(%ebp)
f012f0bd:	85 c0                	test   %eax,%eax
f012f0bf:	75 dd                	jne    f012f09e <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f0c1:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f0c4:	c9                   	leave  
f012f0c5:	c3                   	ret    

f012f0c6 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f0c6:	55                   	push   %ebp
f012f0c7:	89 e5                	mov    %esp,%ebp
f012f0c9:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f0cc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f0d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0d5:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f0d8:	eb 2a                	jmp    f012f104 <memcmp+0x3e>
		if (*s1 != *s2)
f012f0da:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0dd:	8a 10                	mov    (%eax),%dl
f012f0df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0e2:	8a 00                	mov    (%eax),%al
f012f0e4:	38 c2                	cmp    %al,%dl
f012f0e6:	74 16                	je     f012f0fe <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f0e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0eb:	8a 00                	mov    (%eax),%al
f012f0ed:	0f b6 d0             	movzbl %al,%edx
f012f0f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0f3:	8a 00                	mov    (%eax),%al
f012f0f5:	0f b6 c0             	movzbl %al,%eax
f012f0f8:	29 c2                	sub    %eax,%edx
f012f0fa:	89 d0                	mov    %edx,%eax
f012f0fc:	eb 18                	jmp    f012f116 <memcmp+0x50>
		s1++, s2++;
f012f0fe:	ff 45 fc             	incl   -0x4(%ebp)
f012f101:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f104:	8b 45 10             	mov    0x10(%ebp),%eax
f012f107:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f10a:	89 55 10             	mov    %edx,0x10(%ebp)
f012f10d:	85 c0                	test   %eax,%eax
f012f10f:	75 c9                	jne    f012f0da <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f111:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f116:	c9                   	leave  
f012f117:	c3                   	ret    

f012f118 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f118:	55                   	push   %ebp
f012f119:	89 e5                	mov    %esp,%ebp
f012f11b:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f11e:	8b 55 08             	mov    0x8(%ebp),%edx
f012f121:	8b 45 10             	mov    0x10(%ebp),%eax
f012f124:	01 d0                	add    %edx,%eax
f012f126:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f129:	eb 15                	jmp    f012f140 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f12b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f12e:	8a 00                	mov    (%eax),%al
f012f130:	0f b6 d0             	movzbl %al,%edx
f012f133:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f136:	0f b6 c0             	movzbl %al,%eax
f012f139:	39 c2                	cmp    %eax,%edx
f012f13b:	74 0d                	je     f012f14a <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f13d:	ff 45 08             	incl   0x8(%ebp)
f012f140:	8b 45 08             	mov    0x8(%ebp),%eax
f012f143:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f146:	72 e3                	jb     f012f12b <memfind+0x13>
f012f148:	eb 01                	jmp    f012f14b <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f14a:	90                   	nop
	return (void *) s;
f012f14b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f14e:	c9                   	leave  
f012f14f:	c3                   	ret    

f012f150 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f150:	55                   	push   %ebp
f012f151:	89 e5                	mov    %esp,%ebp
f012f153:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f156:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f15d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f164:	eb 03                	jmp    f012f169 <strtol+0x19>
		s++;
f012f166:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f169:	8b 45 08             	mov    0x8(%ebp),%eax
f012f16c:	8a 00                	mov    (%eax),%al
f012f16e:	3c 20                	cmp    $0x20,%al
f012f170:	74 f4                	je     f012f166 <strtol+0x16>
f012f172:	8b 45 08             	mov    0x8(%ebp),%eax
f012f175:	8a 00                	mov    (%eax),%al
f012f177:	3c 09                	cmp    $0x9,%al
f012f179:	74 eb                	je     f012f166 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f17b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f17e:	8a 00                	mov    (%eax),%al
f012f180:	3c 2b                	cmp    $0x2b,%al
f012f182:	75 05                	jne    f012f189 <strtol+0x39>
		s++;
f012f184:	ff 45 08             	incl   0x8(%ebp)
f012f187:	eb 13                	jmp    f012f19c <strtol+0x4c>
	else if (*s == '-')
f012f189:	8b 45 08             	mov    0x8(%ebp),%eax
f012f18c:	8a 00                	mov    (%eax),%al
f012f18e:	3c 2d                	cmp    $0x2d,%al
f012f190:	75 0a                	jne    f012f19c <strtol+0x4c>
		s++, neg = 1;
f012f192:	ff 45 08             	incl   0x8(%ebp)
f012f195:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f19c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1a0:	74 06                	je     f012f1a8 <strtol+0x58>
f012f1a2:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f1a6:	75 20                	jne    f012f1c8 <strtol+0x78>
f012f1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1ab:	8a 00                	mov    (%eax),%al
f012f1ad:	3c 30                	cmp    $0x30,%al
f012f1af:	75 17                	jne    f012f1c8 <strtol+0x78>
f012f1b1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1b4:	40                   	inc    %eax
f012f1b5:	8a 00                	mov    (%eax),%al
f012f1b7:	3c 78                	cmp    $0x78,%al
f012f1b9:	75 0d                	jne    f012f1c8 <strtol+0x78>
		s += 2, base = 16;
f012f1bb:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f1bf:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f1c6:	eb 28                	jmp    f012f1f0 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f1c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1cc:	75 15                	jne    f012f1e3 <strtol+0x93>
f012f1ce:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1d1:	8a 00                	mov    (%eax),%al
f012f1d3:	3c 30                	cmp    $0x30,%al
f012f1d5:	75 0c                	jne    f012f1e3 <strtol+0x93>
		s++, base = 8;
f012f1d7:	ff 45 08             	incl   0x8(%ebp)
f012f1da:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f1e1:	eb 0d                	jmp    f012f1f0 <strtol+0xa0>
	else if (base == 0)
f012f1e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1e7:	75 07                	jne    f012f1f0 <strtol+0xa0>
		base = 10;
f012f1e9:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f1f0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1f3:	8a 00                	mov    (%eax),%al
f012f1f5:	3c 2f                	cmp    $0x2f,%al
f012f1f7:	7e 19                	jle    f012f212 <strtol+0xc2>
f012f1f9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1fc:	8a 00                	mov    (%eax),%al
f012f1fe:	3c 39                	cmp    $0x39,%al
f012f200:	7f 10                	jg     f012f212 <strtol+0xc2>
			dig = *s - '0';
f012f202:	8b 45 08             	mov    0x8(%ebp),%eax
f012f205:	8a 00                	mov    (%eax),%al
f012f207:	0f be c0             	movsbl %al,%eax
f012f20a:	83 e8 30             	sub    $0x30,%eax
f012f20d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f210:	eb 42                	jmp    f012f254 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f212:	8b 45 08             	mov    0x8(%ebp),%eax
f012f215:	8a 00                	mov    (%eax),%al
f012f217:	3c 60                	cmp    $0x60,%al
f012f219:	7e 19                	jle    f012f234 <strtol+0xe4>
f012f21b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f21e:	8a 00                	mov    (%eax),%al
f012f220:	3c 7a                	cmp    $0x7a,%al
f012f222:	7f 10                	jg     f012f234 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f224:	8b 45 08             	mov    0x8(%ebp),%eax
f012f227:	8a 00                	mov    (%eax),%al
f012f229:	0f be c0             	movsbl %al,%eax
f012f22c:	83 e8 57             	sub    $0x57,%eax
f012f22f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f232:	eb 20                	jmp    f012f254 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f234:	8b 45 08             	mov    0x8(%ebp),%eax
f012f237:	8a 00                	mov    (%eax),%al
f012f239:	3c 40                	cmp    $0x40,%al
f012f23b:	7e 39                	jle    f012f276 <strtol+0x126>
f012f23d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f240:	8a 00                	mov    (%eax),%al
f012f242:	3c 5a                	cmp    $0x5a,%al
f012f244:	7f 30                	jg     f012f276 <strtol+0x126>
			dig = *s - 'A' + 10;
f012f246:	8b 45 08             	mov    0x8(%ebp),%eax
f012f249:	8a 00                	mov    (%eax),%al
f012f24b:	0f be c0             	movsbl %al,%eax
f012f24e:	83 e8 37             	sub    $0x37,%eax
f012f251:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f254:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f257:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f25a:	7d 19                	jge    f012f275 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f25c:	ff 45 08             	incl   0x8(%ebp)
f012f25f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f262:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f266:	89 c2                	mov    %eax,%edx
f012f268:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f26b:	01 d0                	add    %edx,%eax
f012f26d:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f270:	e9 7b ff ff ff       	jmp    f012f1f0 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f275:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f276:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f27a:	74 08                	je     f012f284 <strtol+0x134>
		*endptr = (char *) s;
f012f27c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f27f:	8b 55 08             	mov    0x8(%ebp),%edx
f012f282:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f284:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f288:	74 07                	je     f012f291 <strtol+0x141>
f012f28a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f28d:	f7 d8                	neg    %eax
f012f28f:	eb 03                	jmp    f012f294 <strtol+0x144>
f012f291:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f294:	c9                   	leave  
f012f295:	c3                   	ret    

f012f296 <ltostr>:

void
ltostr(long value, char *str)
{
f012f296:	55                   	push   %ebp
f012f297:	89 e5                	mov    %esp,%ebp
f012f299:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f29c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f2a3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f2aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f2ae:	79 13                	jns    f012f2c3 <ltostr+0x2d>
	{
		neg = 1;
f012f2b0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f2b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2ba:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f2bd:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f2c0:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f2c3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f2c6:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f2cb:	99                   	cltd   
f012f2cc:	f7 f9                	idiv   %ecx
f012f2ce:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f2d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2d4:	8d 50 01             	lea    0x1(%eax),%edx
f012f2d7:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f2da:	89 c2                	mov    %eax,%edx
f012f2dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2df:	01 d0                	add    %edx,%eax
f012f2e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f2e4:	83 c2 30             	add    $0x30,%edx
f012f2e7:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f2e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f2ec:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f2f1:	f7 e9                	imul   %ecx
f012f2f3:	c1 fa 02             	sar    $0x2,%edx
f012f2f6:	89 c8                	mov    %ecx,%eax
f012f2f8:	c1 f8 1f             	sar    $0x1f,%eax
f012f2fb:	29 c2                	sub    %eax,%edx
f012f2fd:	89 d0                	mov    %edx,%eax
f012f2ff:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f302:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f305:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f30a:	f7 e9                	imul   %ecx
f012f30c:	c1 fa 02             	sar    $0x2,%edx
f012f30f:	89 c8                	mov    %ecx,%eax
f012f311:	c1 f8 1f             	sar    $0x1f,%eax
f012f314:	29 c2                	sub    %eax,%edx
f012f316:	89 d0                	mov    %edx,%eax
f012f318:	c1 e0 02             	shl    $0x2,%eax
f012f31b:	01 d0                	add    %edx,%eax
f012f31d:	01 c0                	add    %eax,%eax
f012f31f:	29 c1                	sub    %eax,%ecx
f012f321:	89 ca                	mov    %ecx,%edx
f012f323:	85 d2                	test   %edx,%edx
f012f325:	75 9c                	jne    f012f2c3 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f327:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f32e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f331:	48                   	dec    %eax
f012f332:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f335:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f339:	74 3d                	je     f012f378 <ltostr+0xe2>
		start = 1 ;
f012f33b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f342:	eb 34                	jmp    f012f378 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f344:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f347:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f34a:	01 d0                	add    %edx,%eax
f012f34c:	8a 00                	mov    (%eax),%al
f012f34e:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f351:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f354:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f357:	01 c2                	add    %eax,%edx
f012f359:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f35c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f35f:	01 c8                	add    %ecx,%eax
f012f361:	8a 00                	mov    (%eax),%al
f012f363:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f365:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f368:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f36b:	01 c2                	add    %eax,%edx
f012f36d:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f370:	88 02                	mov    %al,(%edx)
		start++ ;
f012f372:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f375:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f378:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f37b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f37e:	7c c4                	jl     f012f344 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f380:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f383:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f386:	01 d0                	add    %edx,%eax
f012f388:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f38b:	90                   	nop
f012f38c:	c9                   	leave  
f012f38d:	c3                   	ret    

f012f38e <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f38e:	55                   	push   %ebp
f012f38f:	89 e5                	mov    %esp,%ebp
f012f391:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f394:	ff 75 08             	pushl  0x8(%ebp)
f012f397:	e8 54 fa ff ff       	call   f012edf0 <strlen>
f012f39c:	83 c4 04             	add    $0x4,%esp
f012f39f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f3a2:	ff 75 0c             	pushl  0xc(%ebp)
f012f3a5:	e8 46 fa ff ff       	call   f012edf0 <strlen>
f012f3aa:	83 c4 04             	add    $0x4,%esp
f012f3ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f3b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f3b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f3be:	eb 17                	jmp    f012f3d7 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f3c0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f3c3:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3c6:	01 c2                	add    %eax,%edx
f012f3c8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3ce:	01 c8                	add    %ecx,%eax
f012f3d0:	8a 00                	mov    (%eax),%al
f012f3d2:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f3d4:	ff 45 fc             	incl   -0x4(%ebp)
f012f3d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f3da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f3dd:	7c e1                	jl     f012f3c0 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f3df:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f3e6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f3ed:	eb 1f                	jmp    f012f40e <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f3ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f3f2:	8d 50 01             	lea    0x1(%eax),%edx
f012f3f5:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f3f8:	89 c2                	mov    %eax,%edx
f012f3fa:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3fd:	01 c2                	add    %eax,%edx
f012f3ff:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f402:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f405:	01 c8                	add    %ecx,%eax
f012f407:	8a 00                	mov    (%eax),%al
f012f409:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f40b:	ff 45 f8             	incl   -0x8(%ebp)
f012f40e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f411:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f414:	7c d9                	jl     f012f3ef <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f416:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f419:	8b 45 10             	mov    0x10(%ebp),%eax
f012f41c:	01 d0                	add    %edx,%eax
f012f41e:	c6 00 00             	movb   $0x0,(%eax)
}
f012f421:	90                   	nop
f012f422:	c9                   	leave  
f012f423:	c3                   	ret    

f012f424 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f424:	55                   	push   %ebp
f012f425:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f427:	8b 45 14             	mov    0x14(%ebp),%eax
f012f42a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f430:	8b 45 14             	mov    0x14(%ebp),%eax
f012f433:	8b 00                	mov    (%eax),%eax
f012f435:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f43c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f43f:	01 d0                	add    %edx,%eax
f012f441:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f447:	eb 0c                	jmp    f012f455 <strsplit+0x31>
			*string++ = 0;
f012f449:	8b 45 08             	mov    0x8(%ebp),%eax
f012f44c:	8d 50 01             	lea    0x1(%eax),%edx
f012f44f:	89 55 08             	mov    %edx,0x8(%ebp)
f012f452:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f455:	8b 45 08             	mov    0x8(%ebp),%eax
f012f458:	8a 00                	mov    (%eax),%al
f012f45a:	84 c0                	test   %al,%al
f012f45c:	74 18                	je     f012f476 <strsplit+0x52>
f012f45e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f461:	8a 00                	mov    (%eax),%al
f012f463:	0f be c0             	movsbl %al,%eax
f012f466:	50                   	push   %eax
f012f467:	ff 75 0c             	pushl  0xc(%ebp)
f012f46a:	e8 13 fb ff ff       	call   f012ef82 <strchr>
f012f46f:	83 c4 08             	add    $0x8,%esp
f012f472:	85 c0                	test   %eax,%eax
f012f474:	75 d3                	jne    f012f449 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f476:	8b 45 08             	mov    0x8(%ebp),%eax
f012f479:	8a 00                	mov    (%eax),%al
f012f47b:	84 c0                	test   %al,%al
f012f47d:	74 5a                	je     f012f4d9 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f47f:	8b 45 14             	mov    0x14(%ebp),%eax
f012f482:	8b 00                	mov    (%eax),%eax
f012f484:	83 f8 0f             	cmp    $0xf,%eax
f012f487:	75 07                	jne    f012f490 <strsplit+0x6c>
		{
			return 0;
f012f489:	b8 00 00 00 00       	mov    $0x0,%eax
f012f48e:	eb 66                	jmp    f012f4f6 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f490:	8b 45 14             	mov    0x14(%ebp),%eax
f012f493:	8b 00                	mov    (%eax),%eax
f012f495:	8d 48 01             	lea    0x1(%eax),%ecx
f012f498:	8b 55 14             	mov    0x14(%ebp),%edx
f012f49b:	89 0a                	mov    %ecx,(%edx)
f012f49d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f4a4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f4a7:	01 c2                	add    %eax,%edx
f012f4a9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4ac:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f4ae:	eb 03                	jmp    f012f4b3 <strsplit+0x8f>
			string++;
f012f4b0:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4b6:	8a 00                	mov    (%eax),%al
f012f4b8:	84 c0                	test   %al,%al
f012f4ba:	74 8b                	je     f012f447 <strsplit+0x23>
f012f4bc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4bf:	8a 00                	mov    (%eax),%al
f012f4c1:	0f be c0             	movsbl %al,%eax
f012f4c4:	50                   	push   %eax
f012f4c5:	ff 75 0c             	pushl  0xc(%ebp)
f012f4c8:	e8 b5 fa ff ff       	call   f012ef82 <strchr>
f012f4cd:	83 c4 08             	add    $0x8,%esp
f012f4d0:	85 c0                	test   %eax,%eax
f012f4d2:	74 dc                	je     f012f4b0 <strsplit+0x8c>
			string++;
	}
f012f4d4:	e9 6e ff ff ff       	jmp    f012f447 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f4d9:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f4da:	8b 45 14             	mov    0x14(%ebp),%eax
f012f4dd:	8b 00                	mov    (%eax),%eax
f012f4df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f4e6:	8b 45 10             	mov    0x10(%ebp),%eax
f012f4e9:	01 d0                	add    %edx,%eax
f012f4eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f4f1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f4f6:	c9                   	leave  
f012f4f7:	c3                   	ret    

f012f4f8 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f4f8:	55                   	push   %ebp
f012f4f9:	89 e5                	mov    %esp,%ebp
f012f4fb:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
f012f4fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f502:	74 06                	je     f012f50a <str2lower+0x12>
f012f504:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f508:	75 07                	jne    f012f511 <str2lower+0x19>
		return NULL;
f012f50a:	b8 00 00 00 00       	mov    $0x0,%eax
f012f50f:	eb 4d                	jmp    f012f55e <str2lower+0x66>
	}
	char *ref=dst;
f012f511:	8b 45 08             	mov    0x8(%ebp),%eax
f012f514:	89 45 fc             	mov    %eax,-0x4(%ebp)
		while(*src!='\0'){
f012f517:	eb 33                	jmp    f012f54c <str2lower+0x54>
			if(*src>=65&&*src<=90){
f012f519:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f51c:	8a 00                	mov    (%eax),%al
f012f51e:	3c 40                	cmp    $0x40,%al
f012f520:	7e 1a                	jle    f012f53c <str2lower+0x44>
f012f522:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f525:	8a 00                	mov    (%eax),%al
f012f527:	3c 5a                	cmp    $0x5a,%al
f012f529:	7f 11                	jg     f012f53c <str2lower+0x44>
				*dst=*src+32;
f012f52b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f52e:	8a 00                	mov    (%eax),%al
f012f530:	83 c0 20             	add    $0x20,%eax
f012f533:	88 c2                	mov    %al,%dl
f012f535:	8b 45 08             	mov    0x8(%ebp),%eax
f012f538:	88 10                	mov    %dl,(%eax)
f012f53a:	eb 0a                	jmp    f012f546 <str2lower+0x4e>
			}
			else{
				*dst=*src;
f012f53c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f53f:	8a 10                	mov    (%eax),%dl
f012f541:	8b 45 08             	mov    0x8(%ebp),%eax
f012f544:	88 10                	mov    %dl,(%eax)
			}
			src++;
f012f546:	ff 45 0c             	incl   0xc(%ebp)
			dst++;
f012f549:	ff 45 08             	incl   0x8(%ebp)
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
		return NULL;
	}
	char *ref=dst;
		while(*src!='\0'){
f012f54c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f54f:	8a 00                	mov    (%eax),%al
f012f551:	84 c0                	test   %al,%al
f012f553:	75 c4                	jne    f012f519 <str2lower+0x21>
				*dst=*src;
			}
			src++;
			dst++;
		}
		*dst='\0';
f012f555:	8b 45 08             	mov    0x8(%ebp),%eax
f012f558:	c6 00 00             	movb   $0x0,(%eax)
		return ref;
f012f55b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f55e:	c9                   	leave  
f012f55f:	c3                   	ret    

f012f560 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f560:	55                   	push   %ebp
f012f561:	89 e5                	mov    %esp,%ebp
f012f563:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f566:	90                   	nop
f012f567:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f56e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f571:	89 c2                	mov    %eax,%edx
f012f573:	ec                   	in     (%dx),%al
f012f574:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f577:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f57a:	0f b6 c0             	movzbl %al,%eax
f012f57d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f580:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f583:	25 c0 00 00 00       	and    $0xc0,%eax
f012f588:	83 f8 40             	cmp    $0x40,%eax
f012f58b:	75 da                	jne    f012f567 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f58d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f591:	74 11                	je     f012f5a4 <ide_wait_ready+0x44>
f012f593:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f596:	83 e0 21             	and    $0x21,%eax
f012f599:	85 c0                	test   %eax,%eax
f012f59b:	74 07                	je     f012f5a4 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f59d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f5a2:	eb 05                	jmp    f012f5a9 <ide_wait_ready+0x49>
	}
	return 0;
f012f5a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f5a9:	c9                   	leave  
f012f5aa:	c3                   	ret    

f012f5ab <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f5ab:	55                   	push   %ebp
f012f5ac:	89 e5                	mov    %esp,%ebp
f012f5ae:	57                   	push   %edi
f012f5af:	53                   	push   %ebx
f012f5b0:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f5b3:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f5ba:	76 16                	jbe    f012f5d2 <ide_read+0x27>
f012f5bc:	68 03 b2 13 f0       	push   $0xf013b203
f012f5c1:	68 10 b2 13 f0       	push   $0xf013b210
f012f5c6:	6a 25                	push   $0x25
f012f5c8:	68 25 b2 13 f0       	push   $0xf013b225
f012f5cd:	e8 de 0b fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f5d2:	83 ec 0c             	sub    $0xc,%esp
f012f5d5:	6a 00                	push   $0x0
f012f5d7:	e8 84 ff ff ff       	call   f012f560 <ide_wait_ready>
f012f5dc:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f5df:	8b 45 10             	mov    0x10(%ebp),%eax
f012f5e2:	0f b6 c0             	movzbl %al,%eax
f012f5e5:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f5ec:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f5ef:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f5f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f5f5:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f5f6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5f9:	0f b6 c0             	movzbl %al,%eax
f012f5fc:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f603:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f606:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f609:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f60c:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f60d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f610:	c1 e8 08             	shr    $0x8,%eax
f012f613:	0f b6 c0             	movzbl %al,%eax
f012f616:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f61d:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f620:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f623:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f626:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f627:	8b 45 08             	mov    0x8(%ebp),%eax
f012f62a:	c1 e8 10             	shr    $0x10,%eax
f012f62d:	0f b6 c0             	movzbl %al,%eax
f012f630:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f637:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f63a:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f63d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f640:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f641:	a1 0c 3b 25 f0       	mov    0xf0253b0c,%eax
f012f646:	83 e0 01             	and    $0x1,%eax
f012f649:	c1 e0 04             	shl    $0x4,%eax
f012f64c:	88 c2                	mov    %al,%dl
f012f64e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f651:	c1 e8 18             	shr    $0x18,%eax
f012f654:	83 e0 0f             	and    $0xf,%eax
f012f657:	09 d0                	or     %edx,%eax
f012f659:	83 c8 e0             	or     $0xffffffe0,%eax
f012f65c:	0f b6 c0             	movzbl %al,%eax
f012f65f:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f666:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f669:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f66c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f66f:	ee                   	out    %al,(%dx)
f012f670:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f677:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f67b:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f67e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f681:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f682:	eb 55                	jmp    f012f6d9 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f684:	83 ec 0c             	sub    $0xc,%esp
f012f687:	6a 01                	push   $0x1
f012f689:	e8 d2 fe ff ff       	call   f012f560 <ide_wait_ready>
f012f68e:	83 c4 10             	add    $0x10,%esp
f012f691:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f694:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f698:	79 05                	jns    f012f69f <ide_read+0xf4>
			return r;
f012f69a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f69d:	eb 45                	jmp    f012f6e4 <ide_read+0x139>
f012f69f:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f6a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f6a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f6ac:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f6b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f6b6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f6b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f6bc:	89 cb                	mov    %ecx,%ebx
f012f6be:	89 df                	mov    %ebx,%edi
f012f6c0:	89 c1                	mov    %eax,%ecx
f012f6c2:	fc                   	cld    
f012f6c3:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f6c5:	89 c8                	mov    %ecx,%eax
f012f6c7:	89 fb                	mov    %edi,%ebx
f012f6c9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f6cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f6cf:	ff 4d 10             	decl   0x10(%ebp)
f012f6d2:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f6d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f6dd:	75 a5                	jne    f012f684 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f6df:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f6e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f6e7:	5b                   	pop    %ebx
f012f6e8:	5f                   	pop    %edi
f012f6e9:	5d                   	pop    %ebp
f012f6ea:	c3                   	ret    

f012f6eb <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f6eb:	55                   	push   %ebp
f012f6ec:	89 e5                	mov    %esp,%ebp
f012f6ee:	56                   	push   %esi
f012f6ef:	53                   	push   %ebx
f012f6f0:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f6f3:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f6fa:	76 16                	jbe    f012f712 <ide_write+0x27>
f012f6fc:	68 03 b2 13 f0       	push   $0xf013b203
f012f701:	68 10 b2 13 f0       	push   $0xf013b210
f012f706:	6a 3f                	push   $0x3f
f012f708:	68 25 b2 13 f0       	push   $0xf013b225
f012f70d:	e8 9e 0a fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f712:	83 ec 0c             	sub    $0xc,%esp
f012f715:	6a 00                	push   $0x0
f012f717:	e8 44 fe ff ff       	call   f012f560 <ide_wait_ready>
f012f71c:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f71f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f722:	0f b6 c0             	movzbl %al,%eax
f012f725:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f72c:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f72f:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f732:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f735:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f736:	8b 45 08             	mov    0x8(%ebp),%eax
f012f739:	0f b6 c0             	movzbl %al,%eax
f012f73c:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f743:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f746:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f749:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f74c:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f74d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f750:	c1 e8 08             	shr    $0x8,%eax
f012f753:	0f b6 c0             	movzbl %al,%eax
f012f756:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f75d:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f760:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f763:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f766:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f767:	8b 45 08             	mov    0x8(%ebp),%eax
f012f76a:	c1 e8 10             	shr    $0x10,%eax
f012f76d:	0f b6 c0             	movzbl %al,%eax
f012f770:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f777:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f77a:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f77d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f780:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f781:	a1 0c 3b 25 f0       	mov    0xf0253b0c,%eax
f012f786:	83 e0 01             	and    $0x1,%eax
f012f789:	c1 e0 04             	shl    $0x4,%eax
f012f78c:	88 c2                	mov    %al,%dl
f012f78e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f791:	c1 e8 18             	shr    $0x18,%eax
f012f794:	83 e0 0f             	and    $0xf,%eax
f012f797:	09 d0                	or     %edx,%eax
f012f799:	83 c8 e0             	or     $0xffffffe0,%eax
f012f79c:	0f b6 c0             	movzbl %al,%eax
f012f79f:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f7a6:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f7a9:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f7ac:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f7af:	ee                   	out    %al,(%dx)
f012f7b0:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f7b7:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f7bb:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f7be:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f7c1:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f7c2:	eb 55                	jmp    f012f819 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f7c4:	83 ec 0c             	sub    $0xc,%esp
f012f7c7:	6a 01                	push   $0x1
f012f7c9:	e8 92 fd ff ff       	call   f012f560 <ide_wait_ready>
f012f7ce:	83 c4 10             	add    $0x10,%esp
f012f7d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f7d4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f7d8:	79 05                	jns    f012f7df <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f7da:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f7dd:	eb 45                	jmp    f012f824 <ide_write+0x139>
f012f7df:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f7e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7e9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f7ec:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012f7f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f7f6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f7f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f7fc:	89 cb                	mov    %ecx,%ebx
f012f7fe:	89 de                	mov    %ebx,%esi
f012f800:	89 c1                	mov    %eax,%ecx
f012f802:	fc                   	cld    
f012f803:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012f805:	89 c8                	mov    %ecx,%eax
f012f807:	89 f3                	mov    %esi,%ebx
f012f809:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f80c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f80f:	ff 4d 10             	decl   0x10(%ebp)
f012f812:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f819:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f81d:	75 a5                	jne    f012f7c4 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012f81f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f824:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f827:	5b                   	pop    %ebx
f012f828:	5e                   	pop    %esi
f012f829:	5d                   	pop    %ebp
f012f82a:	c3                   	ret    

f012f82b <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va)
{
f012f82b:	55                   	push   %ebp
f012f82c:	89 e5                	mov    %esp,%ebp
f012f82e:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f831:	8b 45 08             	mov    0x8(%ebp),%eax
f012f834:	83 e8 10             	sub    $0x10,%eax
f012f837:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size ;
f012f83a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f83d:	8b 00                	mov    (%eax),%eax
}
f012f83f:	c9                   	leave  
f012f840:	c3                   	ret    

f012f841 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va)
{
f012f841:	55                   	push   %ebp
f012f842:	89 e5                	mov    %esp,%ebp
f012f844:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f847:	8b 45 08             	mov    0x8(%ebp),%eax
f012f84a:	83 e8 10             	sub    $0x10,%eax
f012f84d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free ;
f012f850:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f853:	8a 40 04             	mov    0x4(%eax),%al
}
f012f856:	c9                   	leave  
f012f857:	c3                   	ret    

f012f858 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012f858:	55                   	push   %ebp
f012f859:	89 e5                	mov    %esp,%ebp
f012f85b:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012f85e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f012f865:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f868:	83 f8 02             	cmp    $0x2,%eax
f012f86b:	74 2b                	je     f012f898 <alloc_block+0x40>
f012f86d:	83 f8 02             	cmp    $0x2,%eax
f012f870:	7f 07                	jg     f012f879 <alloc_block+0x21>
f012f872:	83 f8 01             	cmp    $0x1,%eax
f012f875:	74 0e                	je     f012f885 <alloc_block+0x2d>
f012f877:	eb 58                	jmp    f012f8d1 <alloc_block+0x79>
f012f879:	83 f8 03             	cmp    $0x3,%eax
f012f87c:	74 2d                	je     f012f8ab <alloc_block+0x53>
f012f87e:	83 f8 04             	cmp    $0x4,%eax
f012f881:	74 3b                	je     f012f8be <alloc_block+0x66>
f012f883:	eb 4c                	jmp    f012f8d1 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012f885:	83 ec 0c             	sub    $0xc,%esp
f012f888:	ff 75 08             	pushl  0x8(%ebp)
f012f88b:	e8 26 01 00 00       	call   f012f9b6 <alloc_block_FF>
f012f890:	83 c4 10             	add    $0x10,%esp
f012f893:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f896:	eb 4a                	jmp    f012f8e2 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012f898:	83 ec 0c             	sub    $0xc,%esp
f012f89b:	ff 75 08             	pushl  0x8(%ebp)
f012f89e:	e8 64 01 00 00       	call   f012fa07 <alloc_block_NF>
f012f8a3:	83 c4 10             	add    $0x10,%esp
f012f8a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8a9:	eb 37                	jmp    f012f8e2 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012f8ab:	83 ec 0c             	sub    $0xc,%esp
f012f8ae:	ff 75 08             	pushl  0x8(%ebp)
f012f8b1:	e8 1a 01 00 00       	call   f012f9d0 <alloc_block_BF>
f012f8b6:	83 c4 10             	add    $0x10,%esp
f012f8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8bc:	eb 24                	jmp    f012f8e2 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012f8be:	83 ec 0c             	sub    $0xc,%esp
f012f8c1:	ff 75 08             	pushl  0x8(%ebp)
f012f8c4:	e8 21 01 00 00       	call   f012f9ea <alloc_block_WF>
f012f8c9:	83 c4 10             	add    $0x10,%esp
f012f8cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8cf:	eb 11                	jmp    f012f8e2 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012f8d1:	83 ec 0c             	sub    $0xc,%esp
f012f8d4:	68 30 b2 13 f0       	push   $0xf013b230
f012f8d9:	e8 53 15 fd ff       	call   f0100e31 <cprintf>
f012f8de:	83 c4 10             	add    $0x10,%esp
		break;
f012f8e1:	90                   	nop
	}
	return va;
f012f8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f8e5:	c9                   	leave  
f012f8e6:	c3                   	ret    

f012f8e7 <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f012f8e7:	55                   	push   %ebp
f012f8e8:	89 e5                	mov    %esp,%ebp
f012f8ea:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012f8ed:	83 ec 0c             	sub    $0xc,%esp
f012f8f0:	68 50 b2 13 f0       	push   $0xf013b250
f012f8f5:	e8 37 15 fd ff       	call   f0100e31 <cprintf>
f012f8fa:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f012f8fd:	83 ec 0c             	sub    $0xc,%esp
f012f900:	68 7b b2 13 f0       	push   $0xf013b27b
f012f905:	e8 27 15 fd ff       	call   f0100e31 <cprintf>
f012f90a:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012f90d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f910:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f913:	eb 26                	jmp    f012f93b <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
f012f915:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f918:	8a 40 04             	mov    0x4(%eax),%al
f012f91b:	0f b6 d0             	movzbl %al,%edx
f012f91e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f921:	8b 00                	mov    (%eax),%eax
f012f923:	83 ec 04             	sub    $0x4,%esp
f012f926:	52                   	push   %edx
f012f927:	50                   	push   %eax
f012f928:	68 93 b2 13 f0       	push   $0xf013b293
f012f92d:	e8 ff 14 fd ff       	call   f0100e31 <cprintf>
f012f932:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012f935:	8b 45 10             	mov    0x10(%ebp),%eax
f012f938:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f93b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f93f:	74 08                	je     f012f949 <print_blocks_list+0x62>
f012f941:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f944:	8b 40 08             	mov    0x8(%eax),%eax
f012f947:	eb 05                	jmp    f012f94e <print_blocks_list+0x67>
f012f949:	b8 00 00 00 00       	mov    $0x0,%eax
f012f94e:	89 45 10             	mov    %eax,0x10(%ebp)
f012f951:	8b 45 10             	mov    0x10(%ebp),%eax
f012f954:	85 c0                	test   %eax,%eax
f012f956:	75 bd                	jne    f012f915 <print_blocks_list+0x2e>
f012f958:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f95c:	75 b7                	jne    f012f915 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
	}
	cprintf("=========================================\n");
f012f95e:	83 ec 0c             	sub    $0xc,%esp
f012f961:	68 50 b2 13 f0       	push   $0xf013b250
f012f966:	e8 c6 14 fd ff       	call   f0100e31 <cprintf>
f012f96b:	83 c4 10             	add    $0x10,%esp

}
f012f96e:	90                   	nop
f012f96f:	c9                   	leave  
f012f970:	c3                   	ret    

f012f971 <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart , uint32 initSizeOfAllocatedSpace)
{
f012f971:	55                   	push   %ebp
f012f972:	89 e5                	mov    %esp,%ebp
f012f974:	83 ec 10             	sub    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012f977:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f97b:	74 36                	je     f012f9b3 <initialize_dynamic_allocator+0x42>
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	//panic("initialize_dynamic_allocator is not implemented yet");
	struct BlockMetaData* firstMeta=(struct BlockMetaData*)daStart;;
f012f97d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f980:	89 45 fc             	mov    %eax,-0x4(%ebp)
	Heap_MetaBlock.lh_first = firstMeta;
f012f983:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f986:	a3 4c e6 2d f0       	mov    %eax,0xf02de64c
	firstMeta->prev_next_info.le_next = NULL;
f012f98b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f98e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	firstMeta->prev_next_info.le_prev = NULL;
f012f995:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f998:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	firstMeta->is_free = 1;
f012f99f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9a2:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	firstMeta->size = initSizeOfAllocatedSpace-sizeOfMetaData();
f012f9a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f9a9:	8d 50 f0             	lea    -0x10(%eax),%edx
f012f9ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9af:	89 10                	mov    %edx,(%eax)
f012f9b1:	eb 01                	jmp    f012f9b4 <initialize_dynamic_allocator+0x43>
void initialize_dynamic_allocator(uint32 daStart , uint32 initSizeOfAllocatedSpace)
{
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return ;
f012f9b3:	90                   	nop
	firstMeta->prev_next_info.le_prev = NULL;
	firstMeta->is_free = 1;
	firstMeta->size = initSizeOfAllocatedSpace-sizeOfMetaData();


}
f012f9b4:	c9                   	leave  
f012f9b5:	c3                   	ret    

f012f9b6 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f012f9b6:	55                   	push   %ebp
f012f9b7:	89 e5                	mov    %esp,%ebp
f012f9b9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	panic("alloc_block_FF is not implemented yet");
f012f9bc:	83 ec 04             	sub    $0x4,%esp
f012f9bf:	68 ac b2 13 f0       	push   $0xf013b2ac
f012f9c4:	6a 74                	push   $0x74
f012f9c6:	68 d2 b2 13 f0       	push   $0xf013b2d2
f012f9cb:	e8 e0 07 fd ff       	call   f01001b0 <_panic>

f012f9d0 <alloc_block_BF>:
}
//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f012f9d0:	55                   	push   %ebp
f012f9d1:	89 e5                	mov    %esp,%ebp
f012f9d3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	panic("alloc_block_BF is not implemented yet");
f012f9d6:	83 ec 04             	sub    $0x4,%esp
f012f9d9:	68 ec b2 13 f0       	push   $0xf013b2ec
f012f9de:	6a 7d                	push   $0x7d
f012f9e0:	68 d2 b2 13 f0       	push   $0xf013b2d2
f012f9e5:	e8 c6 07 fd ff       	call   f01001b0 <_panic>

f012f9ea <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f012f9ea:	55                   	push   %ebp
f012f9eb:	89 e5                	mov    %esp,%ebp
f012f9ed:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012f9f0:	83 ec 04             	sub    $0x4,%esp
f012f9f3:	68 14 b3 13 f0       	push   $0xf013b314
f012f9f8:	68 86 00 00 00       	push   $0x86
f012f9fd:	68 d2 b2 13 f0       	push   $0xf013b2d2
f012fa02:	e8 a9 07 fd ff       	call   f01001b0 <_panic>

f012fa07 <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f012fa07:	55                   	push   %ebp
f012fa08:	89 e5                	mov    %esp,%ebp
f012fa0a:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012fa0d:	83 ec 04             	sub    $0x4,%esp
f012fa10:	68 3c b3 13 f0       	push   $0xf013b33c
f012fa15:	68 8f 00 00 00       	push   $0x8f
f012fa1a:	68 d2 b2 13 f0       	push   $0xf013b2d2
f012fa1f:	e8 8c 07 fd ff       	call   f01001b0 <_panic>

f012fa24 <free_block>:

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012fa24:	55                   	push   %ebp
f012fa25:	89 e5                	mov    %esp,%ebp
f012fa27:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()

	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
f012fa2a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa2d:	83 e8 10             	sub    $0x10,%eax
f012fa30:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock= currBlock->prev_next_info.le_next;
f012fa33:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa36:	8b 40 08             	mov    0x8(%eax),%eax
f012fa39:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock =currBlock->prev_next_info.le_prev;
f012fa3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa3f:	8b 40 0c             	mov    0xc(%eax),%eax
f012fa42:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(va==NULL){
f012fa45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fa49:	0f 84 03 01 00 00    	je     f012fb52 <free_block+0x12e>
		//cpritf("Enter a valid address");
		return;
	}
	else if(is_free_block(va)){
f012fa4f:	ff 75 08             	pushl  0x8(%ebp)
f012fa52:	e8 ea fd ff ff       	call   f012f841 <is_free_block>
f012fa57:	83 c4 04             	add    $0x4,%esp
f012fa5a:	84 c0                	test   %al,%al
f012fa5c:	0f 85 f3 00 00 00    	jne    f012fb55 <free_block+0x131>
		//cpritf("block is already free");
		return;
	}
	else if (!is_free_block(va)&&!nextBlock->is_free&&!prevBlock->is_free){
f012fa62:	ff 75 08             	pushl  0x8(%ebp)
f012fa65:	e8 d7 fd ff ff       	call   f012f841 <is_free_block>
f012fa6a:	83 c4 04             	add    $0x4,%esp
f012fa6d:	84 c0                	test   %al,%al
f012fa6f:	75 20                	jne    f012fa91 <free_block+0x6d>
f012fa71:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa74:	8a 40 04             	mov    0x4(%eax),%al
f012fa77:	84 c0                	test   %al,%al
f012fa79:	75 16                	jne    f012fa91 <free_block+0x6d>
f012fa7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa7e:	8a 40 04             	mov    0x4(%eax),%al
f012fa81:	84 c0                	test   %al,%al
f012fa83:	75 0c                	jne    f012fa91 <free_block+0x6d>
		currBlock->is_free=1;
f012fa85:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa88:	c6 40 04 01          	movb   $0x1,0x4(%eax)
f012fa8c:	e9 c5 00 00 00       	jmp    f012fb56 <free_block+0x132>
	}
	else if(prevBlock->is_free&&!nextBlock->is_free){
f012fa91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa94:	8a 40 04             	mov    0x4(%eax),%al
f012fa97:	84 c0                	test   %al,%al
f012fa99:	74 32                	je     f012facd <free_block+0xa9>
f012fa9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa9e:	8a 40 04             	mov    0x4(%eax),%al
f012faa1:	84 c0                	test   %al,%al
f012faa3:	75 28                	jne    f012facd <free_block+0xa9>
		prevBlock->size+=currBlock->size;
f012faa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012faa8:	8b 10                	mov    (%eax),%edx
f012faaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012faad:	8b 00                	mov    (%eax),%eax
f012faaf:	01 c2                	add    %eax,%edx
f012fab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fab4:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_prev=prevBlock;
f012fab6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fab9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fabc:	89 50 0c             	mov    %edx,0xc(%eax)
		prevBlock->prev_next_info.le_next=nextBlock;
f012fabf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fac2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012fac5:	89 50 08             	mov    %edx,0x8(%eax)
f012fac8:	e9 89 00 00 00       	jmp    f012fb56 <free_block+0x132>

	}
	else if(!prevBlock->is_free&&nextBlock->is_free){
f012facd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fad0:	8a 40 04             	mov    0x4(%eax),%al
f012fad3:	84 c0                	test   %al,%al
f012fad5:	75 35                	jne    f012fb0c <free_block+0xe8>
f012fad7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fada:	8a 40 04             	mov    0x4(%eax),%al
f012fadd:	84 c0                	test   %al,%al
f012fadf:	74 2b                	je     f012fb0c <free_block+0xe8>
		currBlock->size+=nextBlock->size;
f012fae1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fae4:	8b 10                	mov    (%eax),%edx
f012fae6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fae9:	8b 00                	mov    (%eax),%eax
f012faeb:	01 c2                	add    %eax,%edx
f012faed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012faf0:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_next->prev_next_info.le_prev=currBlock;
f012faf2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012faf5:	8b 40 08             	mov    0x8(%eax),%eax
f012faf8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012fafb:	89 50 0c             	mov    %edx,0xc(%eax)
		currBlock->prev_next_info.le_next=nextBlock->prev_next_info.le_next;
f012fafe:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb01:	8b 50 08             	mov    0x8(%eax),%edx
f012fb04:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb07:	89 50 08             	mov    %edx,0x8(%eax)
f012fb0a:	eb 4a                	jmp    f012fb56 <free_block+0x132>
	}
	else if(prevBlock->is_free&&nextBlock->is_free){
f012fb0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb0f:	8a 40 04             	mov    0x4(%eax),%al
f012fb12:	84 c0                	test   %al,%al
f012fb14:	74 40                	je     f012fb56 <free_block+0x132>
f012fb16:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb19:	8a 40 04             	mov    0x4(%eax),%al
f012fb1c:	84 c0                	test   %al,%al
f012fb1e:	74 36                	je     f012fb56 <free_block+0x132>
		prevBlock->size+=nextBlock->size+currBlock->size;
f012fb20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb23:	8b 10                	mov    (%eax),%edx
f012fb25:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb28:	8b 08                	mov    (%eax),%ecx
f012fb2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb2d:	8b 00                	mov    (%eax),%eax
f012fb2f:	01 c8                	add    %ecx,%eax
f012fb31:	01 c2                	add    %eax,%edx
f012fb33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb36:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_next->prev_next_info.le_prev=prevBlock;
f012fb38:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb3b:	8b 40 08             	mov    0x8(%eax),%eax
f012fb3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fb41:	89 50 0c             	mov    %edx,0xc(%eax)
		prevBlock->prev_next_info.le_next=nextBlock->prev_next_info.le_next;
f012fb44:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb47:	8b 50 08             	mov    0x8(%eax),%edx
f012fb4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb4d:	89 50 08             	mov    %edx,0x8(%eax)
f012fb50:	eb 04                	jmp    f012fb56 <free_block+0x132>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
	struct BlockMetaData *nextBlock= currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock =currBlock->prev_next_info.le_prev;
	if(va==NULL){
		//cpritf("Enter a valid address");
		return;
f012fb52:	90                   	nop
f012fb53:	eb 01                	jmp    f012fb56 <free_block+0x132>
	}
	else if(is_free_block(va)){
		//cpritf("block is already free");
		return;
f012fb55:	90                   	nop
	//struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;




}
f012fb56:	c9                   	leave  
f012fb57:	c3                   	ret    

f012fb58 <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012fb58:	55                   	push   %ebp
f012fb59:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");
	return NULL;
f012fb5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fb60:	5d                   	pop    %ebp
f012fb61:	c3                   	ret    
f012fb62:	66 90                	xchg   %ax,%ax

f012fb64 <__udivdi3>:
f012fb64:	55                   	push   %ebp
f012fb65:	57                   	push   %edi
f012fb66:	56                   	push   %esi
f012fb67:	53                   	push   %ebx
f012fb68:	83 ec 1c             	sub    $0x1c,%esp
f012fb6b:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f012fb6f:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012fb73:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012fb77:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012fb7b:	89 ca                	mov    %ecx,%edx
f012fb7d:	89 f8                	mov    %edi,%eax
f012fb7f:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012fb83:	85 f6                	test   %esi,%esi
f012fb85:	75 2d                	jne    f012fbb4 <__udivdi3+0x50>
f012fb87:	39 cf                	cmp    %ecx,%edi
f012fb89:	77 65                	ja     f012fbf0 <__udivdi3+0x8c>
f012fb8b:	89 fd                	mov    %edi,%ebp
f012fb8d:	85 ff                	test   %edi,%edi
f012fb8f:	75 0b                	jne    f012fb9c <__udivdi3+0x38>
f012fb91:	b8 01 00 00 00       	mov    $0x1,%eax
f012fb96:	31 d2                	xor    %edx,%edx
f012fb98:	f7 f7                	div    %edi
f012fb9a:	89 c5                	mov    %eax,%ebp
f012fb9c:	31 d2                	xor    %edx,%edx
f012fb9e:	89 c8                	mov    %ecx,%eax
f012fba0:	f7 f5                	div    %ebp
f012fba2:	89 c1                	mov    %eax,%ecx
f012fba4:	89 d8                	mov    %ebx,%eax
f012fba6:	f7 f5                	div    %ebp
f012fba8:	89 cf                	mov    %ecx,%edi
f012fbaa:	89 fa                	mov    %edi,%edx
f012fbac:	83 c4 1c             	add    $0x1c,%esp
f012fbaf:	5b                   	pop    %ebx
f012fbb0:	5e                   	pop    %esi
f012fbb1:	5f                   	pop    %edi
f012fbb2:	5d                   	pop    %ebp
f012fbb3:	c3                   	ret    
f012fbb4:	39 ce                	cmp    %ecx,%esi
f012fbb6:	77 28                	ja     f012fbe0 <__udivdi3+0x7c>
f012fbb8:	0f bd fe             	bsr    %esi,%edi
f012fbbb:	83 f7 1f             	xor    $0x1f,%edi
f012fbbe:	75 40                	jne    f012fc00 <__udivdi3+0x9c>
f012fbc0:	39 ce                	cmp    %ecx,%esi
f012fbc2:	72 0a                	jb     f012fbce <__udivdi3+0x6a>
f012fbc4:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012fbc8:	0f 87 9e 00 00 00    	ja     f012fc6c <__udivdi3+0x108>
f012fbce:	b8 01 00 00 00       	mov    $0x1,%eax
f012fbd3:	89 fa                	mov    %edi,%edx
f012fbd5:	83 c4 1c             	add    $0x1c,%esp
f012fbd8:	5b                   	pop    %ebx
f012fbd9:	5e                   	pop    %esi
f012fbda:	5f                   	pop    %edi
f012fbdb:	5d                   	pop    %ebp
f012fbdc:	c3                   	ret    
f012fbdd:	8d 76 00             	lea    0x0(%esi),%esi
f012fbe0:	31 ff                	xor    %edi,%edi
f012fbe2:	31 c0                	xor    %eax,%eax
f012fbe4:	89 fa                	mov    %edi,%edx
f012fbe6:	83 c4 1c             	add    $0x1c,%esp
f012fbe9:	5b                   	pop    %ebx
f012fbea:	5e                   	pop    %esi
f012fbeb:	5f                   	pop    %edi
f012fbec:	5d                   	pop    %ebp
f012fbed:	c3                   	ret    
f012fbee:	66 90                	xchg   %ax,%ax
f012fbf0:	89 d8                	mov    %ebx,%eax
f012fbf2:	f7 f7                	div    %edi
f012fbf4:	31 ff                	xor    %edi,%edi
f012fbf6:	89 fa                	mov    %edi,%edx
f012fbf8:	83 c4 1c             	add    $0x1c,%esp
f012fbfb:	5b                   	pop    %ebx
f012fbfc:	5e                   	pop    %esi
f012fbfd:	5f                   	pop    %edi
f012fbfe:	5d                   	pop    %ebp
f012fbff:	c3                   	ret    
f012fc00:	bd 20 00 00 00       	mov    $0x20,%ebp
f012fc05:	89 eb                	mov    %ebp,%ebx
f012fc07:	29 fb                	sub    %edi,%ebx
f012fc09:	89 f9                	mov    %edi,%ecx
f012fc0b:	d3 e6                	shl    %cl,%esi
f012fc0d:	89 c5                	mov    %eax,%ebp
f012fc0f:	88 d9                	mov    %bl,%cl
f012fc11:	d3 ed                	shr    %cl,%ebp
f012fc13:	89 e9                	mov    %ebp,%ecx
f012fc15:	09 f1                	or     %esi,%ecx
f012fc17:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f012fc1b:	89 f9                	mov    %edi,%ecx
f012fc1d:	d3 e0                	shl    %cl,%eax
f012fc1f:	89 c5                	mov    %eax,%ebp
f012fc21:	89 d6                	mov    %edx,%esi
f012fc23:	88 d9                	mov    %bl,%cl
f012fc25:	d3 ee                	shr    %cl,%esi
f012fc27:	89 f9                	mov    %edi,%ecx
f012fc29:	d3 e2                	shl    %cl,%edx
f012fc2b:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fc2f:	88 d9                	mov    %bl,%cl
f012fc31:	d3 e8                	shr    %cl,%eax
f012fc33:	09 c2                	or     %eax,%edx
f012fc35:	89 d0                	mov    %edx,%eax
f012fc37:	89 f2                	mov    %esi,%edx
f012fc39:	f7 74 24 0c          	divl   0xc(%esp)
f012fc3d:	89 d6                	mov    %edx,%esi
f012fc3f:	89 c3                	mov    %eax,%ebx
f012fc41:	f7 e5                	mul    %ebp
f012fc43:	39 d6                	cmp    %edx,%esi
f012fc45:	72 19                	jb     f012fc60 <__udivdi3+0xfc>
f012fc47:	74 0b                	je     f012fc54 <__udivdi3+0xf0>
f012fc49:	89 d8                	mov    %ebx,%eax
f012fc4b:	31 ff                	xor    %edi,%edi
f012fc4d:	e9 58 ff ff ff       	jmp    f012fbaa <__udivdi3+0x46>
f012fc52:	66 90                	xchg   %ax,%ax
f012fc54:	8b 54 24 08          	mov    0x8(%esp),%edx
f012fc58:	89 f9                	mov    %edi,%ecx
f012fc5a:	d3 e2                	shl    %cl,%edx
f012fc5c:	39 c2                	cmp    %eax,%edx
f012fc5e:	73 e9                	jae    f012fc49 <__udivdi3+0xe5>
f012fc60:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012fc63:	31 ff                	xor    %edi,%edi
f012fc65:	e9 40 ff ff ff       	jmp    f012fbaa <__udivdi3+0x46>
f012fc6a:	66 90                	xchg   %ax,%ax
f012fc6c:	31 c0                	xor    %eax,%eax
f012fc6e:	e9 37 ff ff ff       	jmp    f012fbaa <__udivdi3+0x46>
f012fc73:	90                   	nop

f012fc74 <__umoddi3>:
f012fc74:	55                   	push   %ebp
f012fc75:	57                   	push   %edi
f012fc76:	56                   	push   %esi
f012fc77:	53                   	push   %ebx
f012fc78:	83 ec 1c             	sub    $0x1c,%esp
f012fc7b:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f012fc7f:	8b 74 24 34          	mov    0x34(%esp),%esi
f012fc83:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012fc87:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012fc8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
f012fc8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012fc93:	89 f3                	mov    %esi,%ebx
f012fc95:	89 fa                	mov    %edi,%edx
f012fc97:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012fc9b:	89 34 24             	mov    %esi,(%esp)
f012fc9e:	85 c0                	test   %eax,%eax
f012fca0:	75 1a                	jne    f012fcbc <__umoddi3+0x48>
f012fca2:	39 f7                	cmp    %esi,%edi
f012fca4:	0f 86 a2 00 00 00    	jbe    f012fd4c <__umoddi3+0xd8>
f012fcaa:	89 c8                	mov    %ecx,%eax
f012fcac:	89 f2                	mov    %esi,%edx
f012fcae:	f7 f7                	div    %edi
f012fcb0:	89 d0                	mov    %edx,%eax
f012fcb2:	31 d2                	xor    %edx,%edx
f012fcb4:	83 c4 1c             	add    $0x1c,%esp
f012fcb7:	5b                   	pop    %ebx
f012fcb8:	5e                   	pop    %esi
f012fcb9:	5f                   	pop    %edi
f012fcba:	5d                   	pop    %ebp
f012fcbb:	c3                   	ret    
f012fcbc:	39 f0                	cmp    %esi,%eax
f012fcbe:	0f 87 ac 00 00 00    	ja     f012fd70 <__umoddi3+0xfc>
f012fcc4:	0f bd e8             	bsr    %eax,%ebp
f012fcc7:	83 f5 1f             	xor    $0x1f,%ebp
f012fcca:	0f 84 ac 00 00 00    	je     f012fd7c <__umoddi3+0x108>
f012fcd0:	bf 20 00 00 00       	mov    $0x20,%edi
f012fcd5:	29 ef                	sub    %ebp,%edi
f012fcd7:	89 fe                	mov    %edi,%esi
f012fcd9:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f012fcdd:	89 e9                	mov    %ebp,%ecx
f012fcdf:	d3 e0                	shl    %cl,%eax
f012fce1:	89 d7                	mov    %edx,%edi
f012fce3:	89 f1                	mov    %esi,%ecx
f012fce5:	d3 ef                	shr    %cl,%edi
f012fce7:	09 c7                	or     %eax,%edi
f012fce9:	89 e9                	mov    %ebp,%ecx
f012fceb:	d3 e2                	shl    %cl,%edx
f012fced:	89 14 24             	mov    %edx,(%esp)
f012fcf0:	89 d8                	mov    %ebx,%eax
f012fcf2:	d3 e0                	shl    %cl,%eax
f012fcf4:	89 c2                	mov    %eax,%edx
f012fcf6:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fcfa:	d3 e0                	shl    %cl,%eax
f012fcfc:	89 44 24 04          	mov    %eax,0x4(%esp)
f012fd00:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fd04:	89 f1                	mov    %esi,%ecx
f012fd06:	d3 e8                	shr    %cl,%eax
f012fd08:	09 d0                	or     %edx,%eax
f012fd0a:	d3 eb                	shr    %cl,%ebx
f012fd0c:	89 da                	mov    %ebx,%edx
f012fd0e:	f7 f7                	div    %edi
f012fd10:	89 d3                	mov    %edx,%ebx
f012fd12:	f7 24 24             	mull   (%esp)
f012fd15:	89 c6                	mov    %eax,%esi
f012fd17:	89 d1                	mov    %edx,%ecx
f012fd19:	39 d3                	cmp    %edx,%ebx
f012fd1b:	0f 82 87 00 00 00    	jb     f012fda8 <__umoddi3+0x134>
f012fd21:	0f 84 91 00 00 00    	je     f012fdb8 <__umoddi3+0x144>
f012fd27:	8b 54 24 04          	mov    0x4(%esp),%edx
f012fd2b:	29 f2                	sub    %esi,%edx
f012fd2d:	19 cb                	sbb    %ecx,%ebx
f012fd2f:	89 d8                	mov    %ebx,%eax
f012fd31:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012fd35:	d3 e0                	shl    %cl,%eax
f012fd37:	89 e9                	mov    %ebp,%ecx
f012fd39:	d3 ea                	shr    %cl,%edx
f012fd3b:	09 d0                	or     %edx,%eax
f012fd3d:	89 e9                	mov    %ebp,%ecx
f012fd3f:	d3 eb                	shr    %cl,%ebx
f012fd41:	89 da                	mov    %ebx,%edx
f012fd43:	83 c4 1c             	add    $0x1c,%esp
f012fd46:	5b                   	pop    %ebx
f012fd47:	5e                   	pop    %esi
f012fd48:	5f                   	pop    %edi
f012fd49:	5d                   	pop    %ebp
f012fd4a:	c3                   	ret    
f012fd4b:	90                   	nop
f012fd4c:	89 fd                	mov    %edi,%ebp
f012fd4e:	85 ff                	test   %edi,%edi
f012fd50:	75 0b                	jne    f012fd5d <__umoddi3+0xe9>
f012fd52:	b8 01 00 00 00       	mov    $0x1,%eax
f012fd57:	31 d2                	xor    %edx,%edx
f012fd59:	f7 f7                	div    %edi
f012fd5b:	89 c5                	mov    %eax,%ebp
f012fd5d:	89 f0                	mov    %esi,%eax
f012fd5f:	31 d2                	xor    %edx,%edx
f012fd61:	f7 f5                	div    %ebp
f012fd63:	89 c8                	mov    %ecx,%eax
f012fd65:	f7 f5                	div    %ebp
f012fd67:	89 d0                	mov    %edx,%eax
f012fd69:	e9 44 ff ff ff       	jmp    f012fcb2 <__umoddi3+0x3e>
f012fd6e:	66 90                	xchg   %ax,%ax
f012fd70:	89 c8                	mov    %ecx,%eax
f012fd72:	89 f2                	mov    %esi,%edx
f012fd74:	83 c4 1c             	add    $0x1c,%esp
f012fd77:	5b                   	pop    %ebx
f012fd78:	5e                   	pop    %esi
f012fd79:	5f                   	pop    %edi
f012fd7a:	5d                   	pop    %ebp
f012fd7b:	c3                   	ret    
f012fd7c:	3b 04 24             	cmp    (%esp),%eax
f012fd7f:	72 06                	jb     f012fd87 <__umoddi3+0x113>
f012fd81:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012fd85:	77 0f                	ja     f012fd96 <__umoddi3+0x122>
f012fd87:	89 f2                	mov    %esi,%edx
f012fd89:	29 f9                	sub    %edi,%ecx
f012fd8b:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f012fd8f:	89 14 24             	mov    %edx,(%esp)
f012fd92:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012fd96:	8b 44 24 04          	mov    0x4(%esp),%eax
f012fd9a:	8b 14 24             	mov    (%esp),%edx
f012fd9d:	83 c4 1c             	add    $0x1c,%esp
f012fda0:	5b                   	pop    %ebx
f012fda1:	5e                   	pop    %esi
f012fda2:	5f                   	pop    %edi
f012fda3:	5d                   	pop    %ebp
f012fda4:	c3                   	ret    
f012fda5:	8d 76 00             	lea    0x0(%esi),%esi
f012fda8:	2b 04 24             	sub    (%esp),%eax
f012fdab:	19 fa                	sbb    %edi,%edx
f012fdad:	89 d1                	mov    %edx,%ecx
f012fdaf:	89 c6                	mov    %eax,%esi
f012fdb1:	e9 71 ff ff ff       	jmp    f012fd27 <__umoddi3+0xb3>
f012fdb6:	66 90                	xchg   %ax,%ax
f012fdb8:	39 44 24 04          	cmp    %eax,0x4(%esp)
f012fdbc:	72 ea                	jb     f012fda8 <__umoddi3+0x134>
f012fdbe:	89 d9                	mov    %ebx,%ecx
f012fdc0:	e9 62 ff ff ff       	jmp    f012fd27 <__umoddi3+0xb3>
